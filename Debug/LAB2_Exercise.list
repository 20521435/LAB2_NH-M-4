
LAB2_Exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac90  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b84  0800ae40  0800ae40  0001ae40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9c4  0800d9c4  00020264  2**0
                  CONTENTS
  4 .ARM          00000008  0800d9c4  0800d9c4  0001d9c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d9cc  0800d9cc  00020264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9cc  0800d9cc  0001d9cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d9d0  0800d9d0  0001d9d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000264  20000000  0800d9d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020264  2**0
                  CONTENTS
 10 .bss          000002e8  20000264  20000264  00020264  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000054c  2000054c  00020264  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011f24  00000000  00000000  00020294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003194  00000000  00000000  000321b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001128  00000000  00000000  00035350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f90  00000000  00000000  00036478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026a0d  00000000  00000000  00037408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014200  00000000  00000000  0005de15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e08f2  00000000  00000000  00072015  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00152907  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005af0  00000000  00000000  00152958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000264 	.word	0x20000264
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ae28 	.word	0x0800ae28

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000268 	.word	0x20000268
 80001ec:	0800ae28 	.word	0x0800ae28

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800101e:	f002 f8b1 	bl	8003184 <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_GYRO_Init();
 8001022:	f001 f9e7 	bl	80023f4 <BSP_GYRO_Init>
  BSP_LCD_Init();
 8001026:	f001 fa4b 	bl	80024c0 <BSP_LCD_Init>
  HAL_SPI_Init(&hspi5);
 800102a:	4832      	ldr	r0, [pc, #200]	; (80010f4 <main+0xdc>)
 800102c:	f004 fb61 	bl	80056f2 <HAL_SPI_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001030:	f000 f870 	bl	8001114 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001034:	f000 f916 	bl	8001264 <MX_GPIO_Init>
  MX_SPI5_Init();
 8001038:	f000 f8de 	bl	80011f8 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
  BSP_SDRAM_Init();
 800103c:	f001 fed8 	bl	8002df0 <BSP_SDRAM_Init>
  *((uint32_t*)SDRAM_DEVICE_ADDR)=0x12345678;
 8001040:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8001044:	4a2c      	ldr	r2, [pc, #176]	; (80010f8 <main+0xe0>)
 8001046:	601a      	str	r2, [r3, #0]
  value=*((uint32_t*)SDRAM_DEVICE_ADDR);
 8001048:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a2b      	ldr	r2, [pc, #172]	; (80010fc <main+0xe4>)
 8001050:	6013      	str	r3, [r2, #0]

  BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
 8001052:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001056:	2001      	movs	r0, #1
 8001058:	f001 fab4 	bl	80025c4 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);//select on which layer we write
 800105c:	2001      	movs	r0, #1
 800105e:	f001 fb15 	bl	800268c <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();//turn on LCD
 8001062:	f001 fcc7 	bl	80029f4 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLUE);//clear the LCD on blue s
 8001066:	4826      	ldr	r0, [pc, #152]	; (8001100 <main+0xe8>)
 8001068:	f001 fb82 	bl	8002770 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);//set text background color
 800106c:	4824      	ldr	r0, [pc, #144]	; (8001100 <main+0xe8>)
 800106e:	f001 fb35 	bl	80026dc <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);//set text color
 8001072:	f04f 30ff 	mov.w	r0, #4294967295
 8001076:	f001 fb19 	bl	80026ac <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font16);
 800107a:	4822      	ldr	r0, [pc, #136]	; (8001104 <main+0xec>)
 800107c:	f001 fb48 	bl	8002710 <BSP_LCD_SetFont>
  BSP_LCD_GetFont();
 8001080:	f001 fb60 	bl	8002744 <BSP_LCD_GetFont>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	 I3G4250D_ReadXYZAngRate(pfData);
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4618      	mov	r0, r3
 800108a:	f000 fad3 	bl	8001634 <I3G4250D_ReadXYZAngRate>
	 sprintf(buffer, "x rota: %.4f", pfData[0]);
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fa69 	bl	8000568 <__aeabi_f2d>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	4638      	mov	r0, r7
 800109c:	491a      	ldr	r1, [pc, #104]	; (8001108 <main+0xf0>)
 800109e:	f006 f8d3 	bl	8007248 <siprintf>
	 BSP_LCD_DisplayStringAtLine(1, (uint8_t*) buffer);
 80010a2:	463b      	mov	r3, r7
 80010a4:	4619      	mov	r1, r3
 80010a6:	2001      	movs	r0, #1
 80010a8:	f001 fc8c 	bl	80029c4 <BSP_LCD_DisplayStringAtLine>
	 sprintf(buffer, "y rota: %.4f", pfData[1]);
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fa5a 	bl	8000568 <__aeabi_f2d>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4638      	mov	r0, r7
 80010ba:	4914      	ldr	r1, [pc, #80]	; (800110c <main+0xf4>)
 80010bc:	f006 f8c4 	bl	8007248 <siprintf>
	 BSP_LCD_DisplayStringAtLine(3, (uint8_t*) buffer);
 80010c0:	463b      	mov	r3, r7
 80010c2:	4619      	mov	r1, r3
 80010c4:	2003      	movs	r0, #3
 80010c6:	f001 fc7d 	bl	80029c4 <BSP_LCD_DisplayStringAtLine>
	 sprintf(buffer, "z rota: %.4f", pfData[2]);
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fa4b 	bl	8000568 <__aeabi_f2d>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	4638      	mov	r0, r7
 80010d8:	490d      	ldr	r1, [pc, #52]	; (8001110 <main+0xf8>)
 80010da:	f006 f8b5 	bl	8007248 <siprintf>
	 BSP_LCD_DisplayStringAtLine(5, (uint8_t*) buffer);
 80010de:	463b      	mov	r3, r7
 80010e0:	4619      	mov	r1, r3
 80010e2:	2005      	movs	r0, #5
 80010e4:	f001 fc6e 	bl	80029c4 <BSP_LCD_DisplayStringAtLine>
	 HAL_Delay(2000);
 80010e8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010ec:	f002 f8bc 	bl	8003268 <HAL_Delay>
	 I3G4250D_ReadXYZAngRate(pfData);
 80010f0:	e7c8      	b.n	8001084 <main+0x6c>
 80010f2:	bf00      	nop
 80010f4:	20000280 	.word	0x20000280
 80010f8:	12345678 	.word	0x12345678
 80010fc:	200002d8 	.word	0x200002d8
 8001100:	ff0000ff 	.word	0xff0000ff
 8001104:	2000007c 	.word	0x2000007c
 8001108:	0800ae40 	.word	0x0800ae40
 800110c:	0800ae50 	.word	0x0800ae50
 8001110:	0800ae60 	.word	0x0800ae60

08001114 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b094      	sub	sp, #80	; 0x50
 8001118:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111a:	f107 0320 	add.w	r3, r7, #32
 800111e:	2230      	movs	r2, #48	; 0x30
 8001120:	2100      	movs	r1, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f005 fa08 	bl	8006538 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001138:	2300      	movs	r3, #0
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	4b2c      	ldr	r3, [pc, #176]	; (80011f0 <SystemClock_Config+0xdc>)
 800113e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001140:	4a2b      	ldr	r2, [pc, #172]	; (80011f0 <SystemClock_Config+0xdc>)
 8001142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001146:	6413      	str	r3, [r2, #64]	; 0x40
 8001148:	4b29      	ldr	r3, [pc, #164]	; (80011f0 <SystemClock_Config+0xdc>)
 800114a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001154:	2300      	movs	r3, #0
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	4b26      	ldr	r3, [pc, #152]	; (80011f4 <SystemClock_Config+0xe0>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a25      	ldr	r2, [pc, #148]	; (80011f4 <SystemClock_Config+0xe0>)
 800115e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001162:	6013      	str	r3, [r2, #0]
 8001164:	4b23      	ldr	r3, [pc, #140]	; (80011f4 <SystemClock_Config+0xe0>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001170:	2301      	movs	r3, #1
 8001172:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001174:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800117a:	2302      	movs	r3, #2
 800117c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800117e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001182:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001184:	2308      	movs	r3, #8
 8001186:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001188:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800118c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800118e:	2302      	movs	r3, #2
 8001190:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001192:	2304      	movs	r3, #4
 8001194:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001196:	f107 0320 	add.w	r3, r7, #32
 800119a:	4618      	mov	r0, r3
 800119c:	f003 fbea 	bl	8004974 <HAL_RCC_OscConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80011a6:	f000 f885 	bl	80012b4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011aa:	f003 fb93 	bl	80048d4 <HAL_PWREx_EnableOverDrive>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80011b4:	f000 f87e 	bl	80012b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b8:	230f      	movs	r3, #15
 80011ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011bc:	2302      	movs	r3, #2
 80011be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011d0:	f107 030c 	add.w	r3, r7, #12
 80011d4:	2105      	movs	r1, #5
 80011d6:	4618      	mov	r0, r3
 80011d8:	f003 fe44 	bl	8004e64 <HAL_RCC_ClockConfig>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80011e2:	f000 f867 	bl	80012b4 <Error_Handler>
  }
}
 80011e6:	bf00      	nop
 80011e8:	3750      	adds	r7, #80	; 0x50
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40007000 	.word	0x40007000

080011f8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80011fc:	4b17      	ldr	r3, [pc, #92]	; (800125c <MX_SPI5_Init+0x64>)
 80011fe:	4a18      	ldr	r2, [pc, #96]	; (8001260 <MX_SPI5_Init+0x68>)
 8001200:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001202:	4b16      	ldr	r3, [pc, #88]	; (800125c <MX_SPI5_Init+0x64>)
 8001204:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001208:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800120a:	4b14      	ldr	r3, [pc, #80]	; (800125c <MX_SPI5_Init+0x64>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <MX_SPI5_Init+0x64>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001216:	4b11      	ldr	r3, [pc, #68]	; (800125c <MX_SPI5_Init+0x64>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800121c:	4b0f      	ldr	r3, [pc, #60]	; (800125c <MX_SPI5_Init+0x64>)
 800121e:	2200      	movs	r2, #0
 8001220:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001222:	4b0e      	ldr	r3, [pc, #56]	; (800125c <MX_SPI5_Init+0x64>)
 8001224:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001228:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <MX_SPI5_Init+0x64>)
 800122c:	2218      	movs	r2, #24
 800122e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <MX_SPI5_Init+0x64>)
 8001232:	2200      	movs	r2, #0
 8001234:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <MX_SPI5_Init+0x64>)
 8001238:	2200      	movs	r2, #0
 800123a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800123c:	4b07      	ldr	r3, [pc, #28]	; (800125c <MX_SPI5_Init+0x64>)
 800123e:	2200      	movs	r2, #0
 8001240:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <MX_SPI5_Init+0x64>)
 8001244:	220a      	movs	r2, #10
 8001246:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001248:	4804      	ldr	r0, [pc, #16]	; (800125c <MX_SPI5_Init+0x64>)
 800124a:	f004 fa52 	bl	80056f2 <HAL_SPI_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001254:	f000 f82e 	bl	80012b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000280 	.word	0x20000280
 8001260:	40015000 	.word	0x40015000

08001264 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <MX_GPIO_Init+0x4c>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a0f      	ldr	r2, [pc, #60]	; (80012b0 <MX_GPIO_Init+0x4c>)
 8001274:	f043 0320 	orr.w	r3, r3, #32
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b0d      	ldr	r3, [pc, #52]	; (80012b0 <MX_GPIO_Init+0x4c>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0320 	and.w	r3, r3, #32
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	603b      	str	r3, [r7, #0]
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <MX_GPIO_Init+0x4c>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a08      	ldr	r2, [pc, #32]	; (80012b0 <MX_GPIO_Init+0x4c>)
 8001290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <MX_GPIO_Init+0x4c>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	683b      	ldr	r3, [r7, #0]

}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800

080012b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b8:	b672      	cpsid	i
}
 80012ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012bc:	e7fe      	b.n	80012bc <Error_Handler+0x8>
	...

080012c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <HAL_MspInit+0x4c>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	4a0f      	ldr	r2, [pc, #60]	; (800130c <HAL_MspInit+0x4c>)
 80012d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d4:	6453      	str	r3, [r2, #68]	; 0x44
 80012d6:	4b0d      	ldr	r3, [pc, #52]	; (800130c <HAL_MspInit+0x4c>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	603b      	str	r3, [r7, #0]
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <HAL_MspInit+0x4c>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	4a08      	ldr	r2, [pc, #32]	; (800130c <HAL_MspInit+0x4c>)
 80012ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f0:	6413      	str	r3, [r2, #64]	; 0x40
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <HAL_MspInit+0x4c>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fa:	603b      	str	r3, [r7, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	40023800 	.word	0x40023800

08001310 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a19      	ldr	r2, [pc, #100]	; (8001394 <HAL_SPI_MspInit+0x84>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d12c      	bne.n	800138c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	4b18      	ldr	r3, [pc, #96]	; (8001398 <HAL_SPI_MspInit+0x88>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	4a17      	ldr	r2, [pc, #92]	; (8001398 <HAL_SPI_MspInit+0x88>)
 800133c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001340:	6453      	str	r3, [r2, #68]	; 0x44
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <HAL_SPI_MspInit+0x88>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	4b11      	ldr	r3, [pc, #68]	; (8001398 <HAL_SPI_MspInit+0x88>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a10      	ldr	r2, [pc, #64]	; (8001398 <HAL_SPI_MspInit+0x88>)
 8001358:	f043 0320 	orr.w	r3, r3, #32
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <HAL_SPI_MspInit+0x88>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0320 	and.w	r3, r3, #32
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800136a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800136e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	2302      	movs	r3, #2
 8001372:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001378:	2303      	movs	r3, #3
 800137a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800137c:	2305      	movs	r3, #5
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	4619      	mov	r1, r3
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <HAL_SPI_MspInit+0x8c>)
 8001388:	f002 fcf8 	bl	8003d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800138c:	bf00      	nop
 800138e:	3728      	adds	r7, #40	; 0x28
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40015000 	.word	0x40015000
 8001398:	40023800 	.word	0x40023800
 800139c:	40021400 	.word	0x40021400

080013a0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a08      	ldr	r2, [pc, #32]	; (80013d0 <HAL_SPI_MspDeInit+0x30>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d10a      	bne.n	80013c8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <HAL_SPI_MspDeInit+0x34>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	4a07      	ldr	r2, [pc, #28]	; (80013d4 <HAL_SPI_MspDeInit+0x34>)
 80013b8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80013bc:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 80013be:	f44f 7160 	mov.w	r1, #896	; 0x380
 80013c2:	4805      	ldr	r0, [pc, #20]	; (80013d8 <HAL_SPI_MspDeInit+0x38>)
 80013c4:	f002 fe86 	bl	80040d4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40015000 	.word	0x40015000
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40021400 	.word	0x40021400

080013dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <NMI_Handler+0x4>

080013e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e6:	e7fe      	b.n	80013e6 <HardFault_Handler+0x4>

080013e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013ec:	e7fe      	b.n	80013ec <MemManage_Handler+0x4>

080013ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f2:	e7fe      	b.n	80013f2 <BusFault_Handler+0x4>

080013f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <UsageFault_Handler+0x4>

080013fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001428:	f001 fefe 	bl	8003228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}

08001430 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
	return 1;
 8001434:	2301      	movs	r3, #1
}
 8001436:	4618      	mov	r0, r3
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <_kill>:

int _kill(int pid, int sig)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800144a:	f005 f84b 	bl	80064e4 <__errno>
 800144e:	4603      	mov	r3, r0
 8001450:	2216      	movs	r2, #22
 8001452:	601a      	str	r2, [r3, #0]
	return -1;
 8001454:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <_exit>:

void _exit (int status)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001468:	f04f 31ff 	mov.w	r1, #4294967295
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff ffe7 	bl	8001440 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001472:	e7fe      	b.n	8001472 <_exit+0x12>

08001474 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	e00a      	b.n	800149c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001486:	f3af 8000 	nop.w
 800148a:	4601      	mov	r1, r0
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	1c5a      	adds	r2, r3, #1
 8001490:	60ba      	str	r2, [r7, #8]
 8001492:	b2ca      	uxtb	r2, r1
 8001494:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	3301      	adds	r3, #1
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	dbf0      	blt.n	8001486 <_read+0x12>
	}

return len;
 80014a4:	687b      	ldr	r3, [r7, #4]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b086      	sub	sp, #24
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	60f8      	str	r0, [r7, #12]
 80014b6:	60b9      	str	r1, [r7, #8]
 80014b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	e009      	b.n	80014d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	1c5a      	adds	r2, r3, #1
 80014c4:	60ba      	str	r2, [r7, #8]
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	3301      	adds	r3, #1
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	697a      	ldr	r2, [r7, #20]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	429a      	cmp	r2, r3
 80014da:	dbf1      	blt.n	80014c0 <_write+0x12>
	}
	return len;
 80014dc:	687b      	ldr	r3, [r7, #4]
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <_close>:

int _close(int file)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
	return -1;
 80014ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
 8001506:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800150e:	605a      	str	r2, [r3, #4]
	return 0;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <_isatty>:

int _isatty(int file)
{
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
	return 1;
 8001526:	2301      	movs	r3, #1
}
 8001528:	4618      	mov	r0, r3
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
	return 0;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
	...

08001550 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001558:	4a14      	ldr	r2, [pc, #80]	; (80015ac <_sbrk+0x5c>)
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <_sbrk+0x60>)
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001564:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <_sbrk+0x64>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d102      	bne.n	8001572 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800156c:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <_sbrk+0x64>)
 800156e:	4a12      	ldr	r2, [pc, #72]	; (80015b8 <_sbrk+0x68>)
 8001570:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001572:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <_sbrk+0x64>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	429a      	cmp	r2, r3
 800157e:	d207      	bcs.n	8001590 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001580:	f004 ffb0 	bl	80064e4 <__errno>
 8001584:	4603      	mov	r3, r0
 8001586:	220c      	movs	r2, #12
 8001588:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800158a:	f04f 33ff 	mov.w	r3, #4294967295
 800158e:	e009      	b.n	80015a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <_sbrk+0x64>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001596:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <_sbrk+0x64>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	4a05      	ldr	r2, [pc, #20]	; (80015b4 <_sbrk+0x64>)
 80015a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015a2:	68fb      	ldr	r3, [r7, #12]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20030000 	.word	0x20030000
 80015b0:	00000400 	.word	0x00000400
 80015b4:	200002dc 	.word	0x200002dc
 80015b8:	20000550 	.word	0x20000550

080015bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <SystemInit+0x20>)
 80015c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015c6:	4a05      	ldr	r2, [pc, #20]	; (80015dc <SystemInit+0x20>)
 80015c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80015e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001618 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015e4:	480d      	ldr	r0, [pc, #52]	; (800161c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015e6:	490e      	ldr	r1, [pc, #56]	; (8001620 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015e8:	4a0e      	ldr	r2, [pc, #56]	; (8001624 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015ec:	e002      	b.n	80015f4 <LoopCopyDataInit>

080015ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f2:	3304      	adds	r3, #4

080015f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f8:	d3f9      	bcc.n	80015ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fa:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015fc:	4c0b      	ldr	r4, [pc, #44]	; (800162c <LoopFillZerobss+0x26>)
  movs r3, #0
 80015fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001600:	e001      	b.n	8001606 <LoopFillZerobss>

08001602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001604:	3204      	adds	r2, #4

08001606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001608:	d3fb      	bcc.n	8001602 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800160a:	f7ff ffd7 	bl	80015bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800160e:	f004 ff6f 	bl	80064f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001612:	f7ff fd01 	bl	8001018 <main>
  bx  lr    
 8001616:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001618:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800161c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001620:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 8001624:	0800d9d4 	.word	0x0800d9d4
  ldr r2, =_sbss
 8001628:	20000264 	.word	0x20000264
  ldr r4, =_ebss
 800162c:	2000054c 	.word	0x2000054c

08001630 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001630:	e7fe      	b.n	8001630 <ADC_IRQHandler>
	...

08001634 <I3G4250D_ReadXYZAngRate>:
* @brief  Calculate the I3G4250D angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void I3G4250D_ReadXYZAngRate(float *pfData)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08a      	sub	sp, #40	; 0x28
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] = {0};
 800163c:	2300      	movs	r3, #0
 800163e:	61bb      	str	r3, [r7, #24]
 8001640:	2300      	movs	r3, #0
 8001642:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8001644:	f107 0310 	add.w	r3, r7, #16
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8001652:	f04f 0300 	mov.w	r3, #0
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
  int i = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	623b      	str	r3, [r7, #32]

  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 800165c:	f107 030f 	add.w	r3, r7, #15
 8001660:	2201      	movs	r2, #1
 8001662:	2123      	movs	r1, #35	; 0x23
 8001664:	4618      	mov	r0, r3
 8001666:	f000 fe8b 	bl	8002380 <GYRO_IO_Read>

  GYRO_IO_Read(tmpbuffer, I3G4250D_OUT_X_L_ADDR, 6);
 800166a:	f107 0318 	add.w	r3, r7, #24
 800166e:	2206      	movs	r2, #6
 8001670:	2128      	movs	r1, #40	; 0x28
 8001672:	4618      	mov	r0, r3
 8001674:	f000 fe84 	bl	8002380 <GYRO_IO_Read>

  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if (!(tmpreg & I3G4250D_BLE_MSB))
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800167e:	2b00      	cmp	r3, #0
 8001680:	d123      	bne.n	80016ca <I3G4250D_ReadXYZAngRate+0x96>
  {
    for (i = 0; i < 3; i++)
 8001682:	2300      	movs	r3, #0
 8001684:	623b      	str	r3, [r7, #32]
 8001686:	e01c      	b.n	80016c2 <I3G4250D_ReadXYZAngRate+0x8e>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 8001688:	6a3b      	ldr	r3, [r7, #32]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	3301      	adds	r3, #1
 800168e:	3328      	adds	r3, #40	; 0x28
 8001690:	443b      	add	r3, r7
 8001692:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001696:	b29b      	uxth	r3, r3
 8001698:	021b      	lsls	r3, r3, #8
 800169a:	b29a      	uxth	r2, r3
 800169c:	6a3b      	ldr	r3, [r7, #32]
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	3328      	adds	r3, #40	; 0x28
 80016a2:	443b      	add	r3, r7
 80016a4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	4413      	add	r3, r2
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	b21a      	sxth	r2, r3
 80016b0:	6a3b      	ldr	r3, [r7, #32]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	3328      	adds	r3, #40	; 0x28
 80016b6:	443b      	add	r3, r7
 80016b8:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 80016bc:	6a3b      	ldr	r3, [r7, #32]
 80016be:	3301      	adds	r3, #1
 80016c0:	623b      	str	r3, [r7, #32]
 80016c2:	6a3b      	ldr	r3, [r7, #32]
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	dddf      	ble.n	8001688 <I3G4250D_ReadXYZAngRate+0x54>
 80016c8:	e022      	b.n	8001710 <I3G4250D_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for (i = 0; i < 3; i++)
 80016ca:	2300      	movs	r3, #0
 80016cc:	623b      	str	r3, [r7, #32]
 80016ce:	e01c      	b.n	800170a <I3G4250D_ReadXYZAngRate+0xd6>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i] << 8) + tmpbuffer[2 * i + 1]);
 80016d0:	6a3b      	ldr	r3, [r7, #32]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	3328      	adds	r3, #40	; 0x28
 80016d6:	443b      	add	r3, r7
 80016d8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80016dc:	b29b      	uxth	r3, r3
 80016de:	021b      	lsls	r3, r3, #8
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	6a3b      	ldr	r3, [r7, #32]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	3301      	adds	r3, #1
 80016e8:	3328      	adds	r3, #40	; 0x28
 80016ea:	443b      	add	r3, r7
 80016ec:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	4413      	add	r3, r2
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	b21a      	sxth	r2, r3
 80016f8:	6a3b      	ldr	r3, [r7, #32]
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	3328      	adds	r3, #40	; 0x28
 80016fe:	443b      	add	r3, r7
 8001700:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 8001704:	6a3b      	ldr	r3, [r7, #32]
 8001706:	3301      	adds	r3, #1
 8001708:	623b      	str	r3, [r7, #32]
 800170a:	6a3b      	ldr	r3, [r7, #32]
 800170c:	2b02      	cmp	r3, #2
 800170e:	dddf      	ble.n	80016d0 <I3G4250D_ReadXYZAngRate+0x9c>
    }
  }

  /* Switch the sensitivity value set in the CRTL4 */
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 8001710:	7bfb      	ldrb	r3, [r7, #15]
 8001712:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001716:	2b20      	cmp	r3, #32
 8001718:	d00c      	beq.n	8001734 <I3G4250D_ReadXYZAngRate+0x100>
 800171a:	2b20      	cmp	r3, #32
 800171c:	dc0d      	bgt.n	800173a <I3G4250D_ReadXYZAngRate+0x106>
 800171e:	2b00      	cmp	r3, #0
 8001720:	d002      	beq.n	8001728 <I3G4250D_ReadXYZAngRate+0xf4>
 8001722:	2b10      	cmp	r3, #16
 8001724:	d003      	beq.n	800172e <I3G4250D_ReadXYZAngRate+0xfa>
 8001726:	e008      	b.n	800173a <I3G4250D_ReadXYZAngRate+0x106>
  {
    case I3G4250D_FULLSCALE_245:
      sensitivity = I3G4250D_SENSITIVITY_245DPS;
 8001728:	4b17      	ldr	r3, [pc, #92]	; (8001788 <I3G4250D_ReadXYZAngRate+0x154>)
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800172c:	e005      	b.n	800173a <I3G4250D_ReadXYZAngRate+0x106>

    case I3G4250D_FULLSCALE_500:
      sensitivity = I3G4250D_SENSITIVITY_500DPS;
 800172e:	4b17      	ldr	r3, [pc, #92]	; (800178c <I3G4250D_ReadXYZAngRate+0x158>)
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001732:	e002      	b.n	800173a <I3G4250D_ReadXYZAngRate+0x106>

    case I3G4250D_FULLSCALE_2000:
      sensitivity = I3G4250D_SENSITIVITY_2000DPS;
 8001734:	4b16      	ldr	r3, [pc, #88]	; (8001790 <I3G4250D_ReadXYZAngRate+0x15c>)
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001738:	bf00      	nop
  }
  /* Multiplied by sensitivity */
  for (i = 0; i < 3; i++)
 800173a:	2300      	movs	r3, #0
 800173c:	623b      	str	r3, [r7, #32]
 800173e:	e01a      	b.n	8001776 <I3G4250D_ReadXYZAngRate+0x142>
  {
    pfData[i] = (float)(RawData[i] * sensitivity)/1000;
 8001740:	6a3b      	ldr	r3, [r7, #32]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	3328      	adds	r3, #40	; 0x28
 8001746:	443b      	add	r3, r7
 8001748:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800174c:	ee07 3a90 	vmov	s15, r3
 8001750:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001754:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001758:	ee27 7a27 	vmul.f32	s14, s14, s15
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	4413      	add	r3, r2
 8001764:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001794 <I3G4250D_ReadXYZAngRate+0x160>
 8001768:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800176c:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++)
 8001770:	6a3b      	ldr	r3, [r7, #32]
 8001772:	3301      	adds	r3, #1
 8001774:	623b      	str	r3, [r7, #32]
 8001776:	6a3b      	ldr	r3, [r7, #32]
 8001778:	2b02      	cmp	r3, #2
 800177a:	dde1      	ble.n	8001740 <I3G4250D_ReadXYZAngRate+0x10c>
  }
}
 800177c:	bf00      	nop
 800177e:	bf00      	nop
 8001780:	3728      	adds	r7, #40	; 0x28
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	410c0000 	.word	0x410c0000
 800178c:	418c0000 	.word	0x418c0000
 8001790:	428c0000 	.word	0x428c0000
 8001794:	447a0000 	.word	0x447a0000

08001798 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800179c:	f000 fc78 	bl	8002090 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80017a0:	20ca      	movs	r0, #202	; 0xca
 80017a2:	f000 f95d 	bl	8001a60 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80017a6:	20c3      	movs	r0, #195	; 0xc3
 80017a8:	f000 f967 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80017ac:	2008      	movs	r0, #8
 80017ae:	f000 f964 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80017b2:	2050      	movs	r0, #80	; 0x50
 80017b4:	f000 f961 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80017b8:	20cf      	movs	r0, #207	; 0xcf
 80017ba:	f000 f951 	bl	8001a60 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80017be:	2000      	movs	r0, #0
 80017c0:	f000 f95b 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80017c4:	20c1      	movs	r0, #193	; 0xc1
 80017c6:	f000 f958 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80017ca:	2030      	movs	r0, #48	; 0x30
 80017cc:	f000 f955 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80017d0:	20ed      	movs	r0, #237	; 0xed
 80017d2:	f000 f945 	bl	8001a60 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80017d6:	2064      	movs	r0, #100	; 0x64
 80017d8:	f000 f94f 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80017dc:	2003      	movs	r0, #3
 80017de:	f000 f94c 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80017e2:	2012      	movs	r0, #18
 80017e4:	f000 f949 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80017e8:	2081      	movs	r0, #129	; 0x81
 80017ea:	f000 f946 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80017ee:	20e8      	movs	r0, #232	; 0xe8
 80017f0:	f000 f936 	bl	8001a60 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80017f4:	2085      	movs	r0, #133	; 0x85
 80017f6:	f000 f940 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80017fa:	2000      	movs	r0, #0
 80017fc:	f000 f93d 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001800:	2078      	movs	r0, #120	; 0x78
 8001802:	f000 f93a 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001806:	20cb      	movs	r0, #203	; 0xcb
 8001808:	f000 f92a 	bl	8001a60 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800180c:	2039      	movs	r0, #57	; 0x39
 800180e:	f000 f934 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001812:	202c      	movs	r0, #44	; 0x2c
 8001814:	f000 f931 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001818:	2000      	movs	r0, #0
 800181a:	f000 f92e 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x34);
 800181e:	2034      	movs	r0, #52	; 0x34
 8001820:	f000 f92b 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001824:	2002      	movs	r0, #2
 8001826:	f000 f928 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 800182a:	20f7      	movs	r0, #247	; 0xf7
 800182c:	f000 f918 	bl	8001a60 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001830:	2020      	movs	r0, #32
 8001832:	f000 f922 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001836:	20ea      	movs	r0, #234	; 0xea
 8001838:	f000 f912 	bl	8001a60 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800183c:	2000      	movs	r0, #0
 800183e:	f000 f91c 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001842:	2000      	movs	r0, #0
 8001844:	f000 f919 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001848:	20b1      	movs	r0, #177	; 0xb1
 800184a:	f000 f909 	bl	8001a60 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800184e:	2000      	movs	r0, #0
 8001850:	f000 f913 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001854:	201b      	movs	r0, #27
 8001856:	f000 f910 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800185a:	20b6      	movs	r0, #182	; 0xb6
 800185c:	f000 f900 	bl	8001a60 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001860:	200a      	movs	r0, #10
 8001862:	f000 f90a 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001866:	20a2      	movs	r0, #162	; 0xa2
 8001868:	f000 f907 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800186c:	20c0      	movs	r0, #192	; 0xc0
 800186e:	f000 f8f7 	bl	8001a60 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001872:	2010      	movs	r0, #16
 8001874:	f000 f901 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001878:	20c1      	movs	r0, #193	; 0xc1
 800187a:	f000 f8f1 	bl	8001a60 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800187e:	2010      	movs	r0, #16
 8001880:	f000 f8fb 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001884:	20c5      	movs	r0, #197	; 0xc5
 8001886:	f000 f8eb 	bl	8001a60 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 800188a:	2045      	movs	r0, #69	; 0x45
 800188c:	f000 f8f5 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001890:	2015      	movs	r0, #21
 8001892:	f000 f8f2 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001896:	20c7      	movs	r0, #199	; 0xc7
 8001898:	f000 f8e2 	bl	8001a60 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800189c:	2090      	movs	r0, #144	; 0x90
 800189e:	f000 f8ec 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80018a2:	2036      	movs	r0, #54	; 0x36
 80018a4:	f000 f8dc 	bl	8001a60 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80018a8:	20c8      	movs	r0, #200	; 0xc8
 80018aa:	f000 f8e6 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80018ae:	20f2      	movs	r0, #242	; 0xf2
 80018b0:	f000 f8d6 	bl	8001a60 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80018b4:	2000      	movs	r0, #0
 80018b6:	f000 f8e0 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80018ba:	20b0      	movs	r0, #176	; 0xb0
 80018bc:	f000 f8d0 	bl	8001a60 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80018c0:	20c2      	movs	r0, #194	; 0xc2
 80018c2:	f000 f8da 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80018c6:	20b6      	movs	r0, #182	; 0xb6
 80018c8:	f000 f8ca 	bl	8001a60 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80018cc:	200a      	movs	r0, #10
 80018ce:	f000 f8d4 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80018d2:	20a7      	movs	r0, #167	; 0xa7
 80018d4:	f000 f8d1 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80018d8:	2027      	movs	r0, #39	; 0x27
 80018da:	f000 f8ce 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80018de:	2004      	movs	r0, #4
 80018e0:	f000 f8cb 	bl	8001a7a <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80018e4:	202a      	movs	r0, #42	; 0x2a
 80018e6:	f000 f8bb 	bl	8001a60 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80018ea:	2000      	movs	r0, #0
 80018ec:	f000 f8c5 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80018f0:	2000      	movs	r0, #0
 80018f2:	f000 f8c2 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80018f6:	2000      	movs	r0, #0
 80018f8:	f000 f8bf 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80018fc:	20ef      	movs	r0, #239	; 0xef
 80018fe:	f000 f8bc 	bl	8001a7a <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001902:	202b      	movs	r0, #43	; 0x2b
 8001904:	f000 f8ac 	bl	8001a60 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001908:	2000      	movs	r0, #0
 800190a:	f000 f8b6 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800190e:	2000      	movs	r0, #0
 8001910:	f000 f8b3 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001914:	2001      	movs	r0, #1
 8001916:	f000 f8b0 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 800191a:	203f      	movs	r0, #63	; 0x3f
 800191c:	f000 f8ad 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001920:	20f6      	movs	r0, #246	; 0xf6
 8001922:	f000 f89d 	bl	8001a60 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001926:	2001      	movs	r0, #1
 8001928:	f000 f8a7 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800192c:	2000      	movs	r0, #0
 800192e:	f000 f8a4 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001932:	2006      	movs	r0, #6
 8001934:	f000 f8a1 	bl	8001a7a <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001938:	202c      	movs	r0, #44	; 0x2c
 800193a:	f000 f891 	bl	8001a60 <ili9341_WriteReg>
  LCD_Delay(200);
 800193e:	20c8      	movs	r0, #200	; 0xc8
 8001940:	f000 fc94 	bl	800226c <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001944:	2026      	movs	r0, #38	; 0x26
 8001946:	f000 f88b 	bl	8001a60 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800194a:	2001      	movs	r0, #1
 800194c:	f000 f895 	bl	8001a7a <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001950:	20e0      	movs	r0, #224	; 0xe0
 8001952:	f000 f885 	bl	8001a60 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001956:	200f      	movs	r0, #15
 8001958:	f000 f88f 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800195c:	2029      	movs	r0, #41	; 0x29
 800195e:	f000 f88c 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001962:	2024      	movs	r0, #36	; 0x24
 8001964:	f000 f889 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001968:	200c      	movs	r0, #12
 800196a:	f000 f886 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 800196e:	200e      	movs	r0, #14
 8001970:	f000 f883 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001974:	2009      	movs	r0, #9
 8001976:	f000 f880 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 800197a:	204e      	movs	r0, #78	; 0x4e
 800197c:	f000 f87d 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001980:	2078      	movs	r0, #120	; 0x78
 8001982:	f000 f87a 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001986:	203c      	movs	r0, #60	; 0x3c
 8001988:	f000 f877 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800198c:	2009      	movs	r0, #9
 800198e:	f000 f874 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001992:	2013      	movs	r0, #19
 8001994:	f000 f871 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001998:	2005      	movs	r0, #5
 800199a:	f000 f86e 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x17);
 800199e:	2017      	movs	r0, #23
 80019a0:	f000 f86b 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80019a4:	2011      	movs	r0, #17
 80019a6:	f000 f868 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80019aa:	2000      	movs	r0, #0
 80019ac:	f000 f865 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80019b0:	20e1      	movs	r0, #225	; 0xe1
 80019b2:	f000 f855 	bl	8001a60 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80019b6:	2000      	movs	r0, #0
 80019b8:	f000 f85f 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80019bc:	2016      	movs	r0, #22
 80019be:	f000 f85c 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80019c2:	201b      	movs	r0, #27
 80019c4:	f000 f859 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80019c8:	2004      	movs	r0, #4
 80019ca:	f000 f856 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80019ce:	2011      	movs	r0, #17
 80019d0:	f000 f853 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80019d4:	2007      	movs	r0, #7
 80019d6:	f000 f850 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80019da:	2031      	movs	r0, #49	; 0x31
 80019dc:	f000 f84d 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80019e0:	2033      	movs	r0, #51	; 0x33
 80019e2:	f000 f84a 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80019e6:	2042      	movs	r0, #66	; 0x42
 80019e8:	f000 f847 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80019ec:	2005      	movs	r0, #5
 80019ee:	f000 f844 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80019f2:	200c      	movs	r0, #12
 80019f4:	f000 f841 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80019f8:	200a      	movs	r0, #10
 80019fa:	f000 f83e 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80019fe:	2028      	movs	r0, #40	; 0x28
 8001a00:	f000 f83b 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001a04:	202f      	movs	r0, #47	; 0x2f
 8001a06:	f000 f838 	bl	8001a7a <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001a0a:	200f      	movs	r0, #15
 8001a0c:	f000 f835 	bl	8001a7a <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001a10:	2011      	movs	r0, #17
 8001a12:	f000 f825 	bl	8001a60 <ili9341_WriteReg>
  LCD_Delay(200);
 8001a16:	20c8      	movs	r0, #200	; 0xc8
 8001a18:	f000 fc28 	bl	800226c <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001a1c:	2029      	movs	r0, #41	; 0x29
 8001a1e:	f000 f81f 	bl	8001a60 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001a22:	202c      	movs	r0, #44	; 0x2c
 8001a24:	f000 f81c 	bl	8001a60 <ili9341_WriteReg>
}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001a30:	f000 fb2e 	bl	8002090 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001a34:	2103      	movs	r1, #3
 8001a36:	20d3      	movs	r0, #211	; 0xd3
 8001a38:	f000 f82c 	bl	8001a94 <ili9341_ReadData>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	b29b      	uxth	r3, r3
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001a48:	2029      	movs	r0, #41	; 0x29
 8001a4a:	f000 f809 	bl	8001a60 <ili9341_WriteReg>
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001a56:	2028      	movs	r0, #40	; 0x28
 8001a58:	f000 f802 	bl	8001a60 <ili9341_WriteReg>
}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f000 fba9 	bl	80021c4 <LCD_IO_WriteReg>
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	4603      	mov	r3, r0
 8001a82:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001a84:	88fb      	ldrh	r3, [r7, #6]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f000 fb7a 	bl	8002180 <LCD_IO_WriteData>
}
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	460a      	mov	r2, r1
 8001a9e:	80fb      	strh	r3, [r7, #6]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001aa4:	797a      	ldrb	r2, [r7, #5]
 8001aa6:	88fb      	ldrh	r3, [r7, #6]
 8001aa8:	4611      	mov	r1, r2
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f000 fbac 	bl	8002208 <LCD_IO_ReadData>
 8001ab0:	4603      	mov	r3, r0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001abe:	23f0      	movs	r3, #240	; 0xf0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001ace:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001aea:	f000 fbcb 	bl	8002284 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001aee:	88fb      	ldrh	r3, [r7, #6]
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001af4:	f107 030f 	add.w	r3, r7, #15
 8001af8:	2201      	movs	r2, #1
 8001afa:	2120      	movs	r1, #32
 8001afc:	4618      	mov	r0, r3
 8001afe:	f000 fc0d 	bl	800231c <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8001b02:	88fb      	ldrh	r3, [r7, #6]
 8001b04:	0a1b      	lsrs	r3, r3, #8
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8001b0c:	f107 030f 	add.w	r3, r7, #15
 8001b10:	2201      	movs	r2, #1
 8001b12:	2123      	movs	r1, #35	; 0x23
 8001b14:	4618      	mov	r0, r3
 8001b16:	f000 fc01 	bl	800231c <GYRO_IO_Write>
}
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0
}
 8001b26:	bf00      	nop
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001b36:	f000 fba5 	bl	8002284 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8001b3a:	1dfb      	adds	r3, r7, #7
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	210f      	movs	r1, #15
 8001b40:	4618      	mov	r0, r3
 8001b42:	f000 fc1d 	bl	8002380 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8001b46:	79fb      	ldrb	r3, [r7, #7]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001b56:	1dfb      	adds	r3, r7, #7
 8001b58:	2201      	movs	r2, #1
 8001b5a:	2124      	movs	r1, #36	; 0x24
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f000 fc0f 	bl	8002380 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001b6c:	1dfb      	adds	r3, r7, #7
 8001b6e:	2201      	movs	r2, #1
 8001b70:	2124      	movs	r1, #36	; 0x24
 8001b72:	4618      	mov	r0, r3
 8001b74:	f000 fbd2 	bl	800231c <GYRO_IO_Write>
}
 8001b78:	bf00      	nop
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001b8e:	88fb      	ldrh	r3, [r7, #6]
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001b94:	f107 030f 	add.w	r3, r7, #15
 8001b98:	2201      	movs	r2, #1
 8001b9a:	2120      	movs	r1, #32
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f000 fbbd 	bl	800231c <GYRO_IO_Write>
}
 8001ba2:	bf00      	nop
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b084      	sub	sp, #16
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	73fb      	strb	r3, [r7, #15]
 8001bb8:	2300      	movs	r3, #0
 8001bba:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001bbc:	f107 030f 	add.w	r3, r7, #15
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	2130      	movs	r1, #48	; 0x30
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f000 fbdb 	bl	8002380 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001bca:	f107 030e 	add.w	r3, r7, #14
 8001bce:	2201      	movs	r2, #1
 8001bd0:	2122      	movs	r1, #34	; 0x22
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f000 fbd4 	bl	8002380 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
 8001bda:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	121b      	asrs	r3, r3, #8
 8001be8:	b25a      	sxtb	r2, r3
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
 8001bec:	b25b      	sxtb	r3, r3
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	b25b      	sxtb	r3, r3
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8001bf6:	7bbb      	ldrb	r3, [r7, #14]
 8001bf8:	f023 0320 	bic.w	r3, r3, #32
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8001c00:	88fb      	ldrh	r3, [r7, #6]
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	7bbb      	ldrb	r3, [r7, #14]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001c0c:	f107 030f 	add.w	r3, r7, #15
 8001c10:	2201      	movs	r2, #1
 8001c12:	2130      	movs	r1, #48	; 0x30
 8001c14:	4618      	mov	r0, r3
 8001c16:	f000 fb81 	bl	800231c <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001c1a:	f107 030e 	add.w	r3, r7, #14
 8001c1e:	2201      	movs	r2, #1
 8001c20:	2122      	movs	r1, #34	; 0x22
 8001c22:	4618      	mov	r0, r3
 8001c24:	f000 fb7a 	bl	800231c <GYRO_IO_Write>
}
 8001c28:	bf00      	nop
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001c3a:	f107 030f 	add.w	r3, r7, #15
 8001c3e:	2201      	movs	r2, #1
 8001c40:	2122      	movs	r1, #34	; 0x22
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 fb9c 	bl	8002380 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10a      	bne.n	8001c64 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
 8001c50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
 8001c5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	73fb      	strb	r3, [r7, #15]
 8001c62:	e00c      	b.n	8001c7e <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d109      	bne.n	8001c7e <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
 8001c6c:	f023 0308 	bic.w	r3, r3, #8
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	f043 0308 	orr.w	r3, r3, #8
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001c7e:	f107 030f 	add.w	r3, r7, #15
 8001c82:	2201      	movs	r2, #1
 8001c84:	2122      	movs	r1, #34	; 0x22
 8001c86:	4618      	mov	r0, r3
 8001c88:	f000 fb48 	bl	800231c <GYRO_IO_Write>
}
 8001c8c:	bf00      	nop
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001c9e:	f107 030f 	add.w	r3, r7, #15
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	2122      	movs	r1, #34	; 0x22
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f000 fb6a 	bl	8002380 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d107      	bne.n	8001cc2 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
 8001cb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
 8001cbe:	73fb      	strb	r3, [r7, #15]
 8001cc0:	e009      	b.n	8001cd6 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d106      	bne.n	8001cd6 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
 8001cca:	f023 0308 	bic.w	r3, r3, #8
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
 8001cd4:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001cd6:	f107 030f 	add.w	r3, r7, #15
 8001cda:	2201      	movs	r2, #1
 8001cdc:	2122      	movs	r1, #34	; 0x22
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f000 fb1c 	bl	800231c <GYRO_IO_Write>
}
 8001ce4:	bf00      	nop
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001cf6:	f107 030f 	add.w	r3, r7, #15
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	2121      	movs	r1, #33	; 0x21
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 fb3e 	bl	8002380 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
 8001d06:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8001d0e:	7bfa      	ldrb	r2, [r7, #15]
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001d18:	f107 030f 	add.w	r3, r7, #15
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	2121      	movs	r1, #33	; 0x21
 8001d20:	4618      	mov	r0, r3
 8001d22:	f000 fafb 	bl	800231c <GYRO_IO_Write>
}
 8001d26:	bf00      	nop
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b084      	sub	sp, #16
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	4603      	mov	r3, r0
 8001d36:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001d38:	f107 030f 	add.w	r3, r7, #15
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	2124      	movs	r1, #36	; 0x24
 8001d40:	4618      	mov	r0, r3
 8001d42:	f000 fb1d 	bl	8002380 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8001d46:	7bfb      	ldrb	r3, [r7, #15]
 8001d48:	f023 0310 	bic.w	r3, r3, #16
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001d50:	7bfa      	ldrb	r2, [r7, #15]
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001d5a:	f107 030f 	add.w	r3, r7, #15
 8001d5e:	2201      	movs	r2, #1
 8001d60:	2124      	movs	r1, #36	; 0x24
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 fada 	bl	800231c <GYRO_IO_Write>
}
 8001d68:	bf00      	nop
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b08a      	sub	sp, #40	; 0x28
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8001d78:	2300      	movs	r3, #0
 8001d7a:	61bb      	str	r3, [r7, #24]
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8001d80:	f107 0310 	add.w	r3, r7, #16
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8001d8e:	f04f 0300 	mov.w	r3, #0
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8001d98:	f107 030f 	add.w	r3, r7, #15
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	2123      	movs	r1, #35	; 0x23
 8001da0:	4618      	mov	r0, r3
 8001da2:	f000 faed 	bl	8002380 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8001da6:	f107 0318 	add.w	r3, r7, #24
 8001daa:	2206      	movs	r2, #6
 8001dac:	2128      	movs	r1, #40	; 0x28
 8001dae:	4618      	mov	r0, r3
 8001db0:	f000 fae6 	bl	8002380 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
 8001db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d123      	bne.n	8001e06 <L3GD20_ReadXYZAngRate+0x96>
  {
    for(i=0; i<3; i++)
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	623b      	str	r3, [r7, #32]
 8001dc2:	e01c      	b.n	8001dfe <L3GD20_ReadXYZAngRate+0x8e>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8001dc4:	6a3b      	ldr	r3, [r7, #32]
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	3301      	adds	r3, #1
 8001dca:	3328      	adds	r3, #40	; 0x28
 8001dcc:	443b      	add	r3, r7
 8001dce:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	021b      	lsls	r3, r3, #8
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	6a3b      	ldr	r3, [r7, #32]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	3328      	adds	r3, #40	; 0x28
 8001dde:	443b      	add	r3, r7
 8001de0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	4413      	add	r3, r2
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	b21a      	sxth	r2, r3
 8001dec:	6a3b      	ldr	r3, [r7, #32]
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	3328      	adds	r3, #40	; 0x28
 8001df2:	443b      	add	r3, r7
 8001df4:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001df8:	6a3b      	ldr	r3, [r7, #32]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	623b      	str	r3, [r7, #32]
 8001dfe:	6a3b      	ldr	r3, [r7, #32]
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	dddf      	ble.n	8001dc4 <L3GD20_ReadXYZAngRate+0x54>
 8001e04:	e022      	b.n	8001e4c <L3GD20_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8001e06:	2300      	movs	r3, #0
 8001e08:	623b      	str	r3, [r7, #32]
 8001e0a:	e01c      	b.n	8001e46 <L3GD20_ReadXYZAngRate+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8001e0c:	6a3b      	ldr	r3, [r7, #32]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	3328      	adds	r3, #40	; 0x28
 8001e12:	443b      	add	r3, r7
 8001e14:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	021b      	lsls	r3, r3, #8
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	3301      	adds	r3, #1
 8001e24:	3328      	adds	r3, #40	; 0x28
 8001e26:	443b      	add	r3, r7
 8001e28:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	4413      	add	r3, r2
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	b21a      	sxth	r2, r3
 8001e34:	6a3b      	ldr	r3, [r7, #32]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	3328      	adds	r3, #40	; 0x28
 8001e3a:	443b      	add	r3, r7
 8001e3c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001e40:	6a3b      	ldr	r3, [r7, #32]
 8001e42:	3301      	adds	r3, #1
 8001e44:	623b      	str	r3, [r7, #32]
 8001e46:	6a3b      	ldr	r3, [r7, #32]
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	dddf      	ble.n	8001e0c <L3GD20_ReadXYZAngRate+0x9c>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
 8001e4e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001e52:	2b20      	cmp	r3, #32
 8001e54:	d00c      	beq.n	8001e70 <L3GD20_ReadXYZAngRate+0x100>
 8001e56:	2b20      	cmp	r3, #32
 8001e58:	dc0d      	bgt.n	8001e76 <L3GD20_ReadXYZAngRate+0x106>
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d002      	beq.n	8001e64 <L3GD20_ReadXYZAngRate+0xf4>
 8001e5e:	2b10      	cmp	r3, #16
 8001e60:	d003      	beq.n	8001e6a <L3GD20_ReadXYZAngRate+0xfa>
 8001e62:	e008      	b.n	8001e76 <L3GD20_ReadXYZAngRate+0x106>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8001e64:	4b17      	ldr	r3, [pc, #92]	; (8001ec4 <L3GD20_ReadXYZAngRate+0x154>)
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001e68:	e005      	b.n	8001e76 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8001e6a:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <L3GD20_ReadXYZAngRate+0x158>)
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001e6e:	e002      	b.n	8001e76 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8001e70:	4b16      	ldr	r3, [pc, #88]	; (8001ecc <L3GD20_ReadXYZAngRate+0x15c>)
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001e74:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8001e76:	2300      	movs	r3, #0
 8001e78:	623b      	str	r3, [r7, #32]
 8001e7a:	e01a      	b.n	8001eb2 <L3GD20_ReadXYZAngRate+0x142>
  {
    pfData[i]=(float)(RawData[i] * sensitivity)/1000;
 8001e7c:	6a3b      	ldr	r3, [r7, #32]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	3328      	adds	r3, #40	; 0x28
 8001e82:	443b      	add	r3, r7
 8001e84:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001e88:	ee07 3a90 	vmov	s15, r3
 8001e8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e90:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001e94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e98:	6a3b      	ldr	r3, [r7, #32]
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001ed0 <L3GD20_ReadXYZAngRate+0x160>
 8001ea4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ea8:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	623b      	str	r3, [r7, #32]
 8001eb2:	6a3b      	ldr	r3, [r7, #32]
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	dde1      	ble.n	8001e7c <L3GD20_ReadXYZAngRate+0x10c>
  }
}
 8001eb8:	bf00      	nop
 8001eba:	bf00      	nop
 8001ebc:	3728      	adds	r7, #40	; 0x28
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	410c0000 	.word	0x410c0000
 8001ec8:	418c0000 	.word	0x418c0000
 8001ecc:	428c0000 	.word	0x428c0000
 8001ed0:	447a0000 	.word	0x447a0000

08001ed4 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001ed8:	4819      	ldr	r0, [pc, #100]	; (8001f40 <SPIx_Init+0x6c>)
 8001eda:	f004 f8aa 	bl	8006032 <HAL_SPI_GetState>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d12b      	bne.n	8001f3c <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001ee4:	4b16      	ldr	r3, [pc, #88]	; (8001f40 <SPIx_Init+0x6c>)
 8001ee6:	4a17      	ldr	r2, [pc, #92]	; (8001f44 <SPIx_Init+0x70>)
 8001ee8:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001eea:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <SPIx_Init+0x6c>)
 8001eec:	2218      	movs	r2, #24
 8001eee:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001ef0:	4b13      	ldr	r3, [pc, #76]	; (8001f40 <SPIx_Init+0x6c>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001ef6:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <SPIx_Init+0x6c>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001efc:	4b10      	ldr	r3, [pc, #64]	; (8001f40 <SPIx_Init+0x6c>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001f02:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <SPIx_Init+0x6c>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001f08:	4b0d      	ldr	r3, [pc, #52]	; (8001f40 <SPIx_Init+0x6c>)
 8001f0a:	2207      	movs	r2, #7
 8001f0c:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001f0e:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <SPIx_Init+0x6c>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001f14:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <SPIx_Init+0x6c>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001f1a:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <SPIx_Init+0x6c>)
 8001f1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f20:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001f22:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <SPIx_Init+0x6c>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001f28:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <SPIx_Init+0x6c>)
 8001f2a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f2e:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8001f30:	4803      	ldr	r0, [pc, #12]	; (8001f40 <SPIx_Init+0x6c>)
 8001f32:	f000 f873 	bl	800201c <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001f36:	4802      	ldr	r0, [pc, #8]	; (8001f40 <SPIx_Init+0x6c>)
 8001f38:	f003 fbdb 	bl	80056f2 <HAL_SPI_Init>
  } 
}
 8001f3c:	bf00      	nop
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	200002e0 	.word	0x200002e0
 8001f44:	40015000 	.word	0x40015000

08001f48 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <SPIx_Read+0x38>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f107 0108 	add.w	r1, r7, #8
 8001f62:	4808      	ldr	r0, [pc, #32]	; (8001f84 <SPIx_Read+0x3c>)
 8001f64:	f003 fdb2 	bl	8005acc <HAL_SPI_Receive>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001f72:	f000 f847 	bl	8002004 <SPIx_Error>
  }
  
  return readvalue;
 8001f76:	68bb      	ldr	r3, [r7, #8]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20000070 	.word	0x20000070
 8001f84:	200002e0 	.word	0x200002e0

08001f88 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001f92:	2300      	movs	r3, #0
 8001f94:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8001f96:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <SPIx_Write+0x34>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	1db9      	adds	r1, r7, #6
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	4808      	ldr	r0, [pc, #32]	; (8001fc0 <SPIx_Write+0x38>)
 8001fa0:	f003 fc58 	bl	8005854 <HAL_SPI_Transmit>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001fae:	f000 f829 	bl	8002004 <SPIx_Error>
  }
}
 8001fb2:	bf00      	nop
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000070 	.word	0x20000070
 8001fc0:	200002e0 	.word	0x200002e0

08001fc4 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af02      	add	r7, sp, #8
 8001fca:	4603      	mov	r3, r0
 8001fcc:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8001fd2:	4b0a      	ldr	r3, [pc, #40]	; (8001ffc <SPIx_WriteRead+0x38>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f107 020f 	add.w	r2, r7, #15
 8001fda:	1df9      	adds	r1, r7, #7
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	2301      	movs	r3, #1
 8001fe0:	4807      	ldr	r0, [pc, #28]	; (8002000 <SPIx_WriteRead+0x3c>)
 8001fe2:	f003 fe84 	bl	8005cee <HAL_SPI_TransmitReceive>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8001fec:	f000 f80a 	bl	8002004 <SPIx_Error>
  }
  
  return receivedbyte;
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000070 	.word	0x20000070
 8002000:	200002e0 	.word	0x200002e0

08002004 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002008:	4803      	ldr	r0, [pc, #12]	; (8002018 <SPIx_Error+0x14>)
 800200a:	f003 fbfb 	bl	8005804 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 800200e:	f7ff ff61 	bl	8001ed4 <SPIx_Init>
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	200002e0 	.word	0x200002e0

0800201c <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08a      	sub	sp, #40	; 0x28
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002024:	2300      	movs	r3, #0
 8002026:	613b      	str	r3, [r7, #16]
 8002028:	4b17      	ldr	r3, [pc, #92]	; (8002088 <SPIx_MspInit+0x6c>)
 800202a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202c:	4a16      	ldr	r2, [pc, #88]	; (8002088 <SPIx_MspInit+0x6c>)
 800202e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002032:	6453      	str	r3, [r2, #68]	; 0x44
 8002034:	4b14      	ldr	r3, [pc, #80]	; (8002088 <SPIx_MspInit+0x6c>)
 8002036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002038:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800203c:	613b      	str	r3, [r7, #16]
 800203e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002040:	2300      	movs	r3, #0
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	4b10      	ldr	r3, [pc, #64]	; (8002088 <SPIx_MspInit+0x6c>)
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	4a0f      	ldr	r2, [pc, #60]	; (8002088 <SPIx_MspInit+0x6c>)
 800204a:	f043 0320 	orr.w	r3, r3, #32
 800204e:	6313      	str	r3, [r2, #48]	; 0x30
 8002050:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <SPIx_MspInit+0x6c>)
 8002052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002054:	f003 0320 	and.w	r3, r3, #32
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 800205c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002060:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002062:	2302      	movs	r3, #2
 8002064:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002066:	2302      	movs	r3, #2
 8002068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800206a:	2301      	movs	r3, #1
 800206c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800206e:	2305      	movs	r3, #5
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8002072:	f107 0314 	add.w	r3, r7, #20
 8002076:	4619      	mov	r1, r3
 8002078:	4804      	ldr	r0, [pc, #16]	; (800208c <SPIx_MspInit+0x70>)
 800207a:	f001 fe7f 	bl	8003d7c <HAL_GPIO_Init>
}
 800207e:	bf00      	nop
 8002080:	3728      	adds	r7, #40	; 0x28
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40023800 	.word	0x40023800
 800208c:	40021400 	.word	0x40021400

08002090 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b088      	sub	sp, #32
 8002094:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8002096:	4b36      	ldr	r3, [pc, #216]	; (8002170 <LCD_IO_Init+0xe0>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d164      	bne.n	8002168 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 800209e:	4b34      	ldr	r3, [pc, #208]	; (8002170 <LCD_IO_Init+0xe0>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80020a4:	2300      	movs	r3, #0
 80020a6:	60bb      	str	r3, [r7, #8]
 80020a8:	4b32      	ldr	r3, [pc, #200]	; (8002174 <LCD_IO_Init+0xe4>)
 80020aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ac:	4a31      	ldr	r2, [pc, #196]	; (8002174 <LCD_IO_Init+0xe4>)
 80020ae:	f043 0308 	orr.w	r3, r3, #8
 80020b2:	6313      	str	r3, [r2, #48]	; 0x30
 80020b4:	4b2f      	ldr	r3, [pc, #188]	; (8002174 <LCD_IO_Init+0xe4>)
 80020b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b8:	f003 0308 	and.w	r3, r3, #8
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80020c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80020c6:	2301      	movs	r3, #1
 80020c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80020ce:	2302      	movs	r3, #2
 80020d0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80020d2:	f107 030c 	add.w	r3, r7, #12
 80020d6:	4619      	mov	r1, r3
 80020d8:	4827      	ldr	r0, [pc, #156]	; (8002178 <LCD_IO_Init+0xe8>)
 80020da:	f001 fe4f 	bl	8003d7c <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	607b      	str	r3, [r7, #4]
 80020e2:	4b24      	ldr	r3, [pc, #144]	; (8002174 <LCD_IO_Init+0xe4>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	4a23      	ldr	r2, [pc, #140]	; (8002174 <LCD_IO_Init+0xe4>)
 80020e8:	f043 0308 	orr.w	r3, r3, #8
 80020ec:	6313      	str	r3, [r2, #48]	; 0x30
 80020ee:	4b21      	ldr	r3, [pc, #132]	; (8002174 <LCD_IO_Init+0xe4>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	607b      	str	r3, [r7, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80020fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002100:	2301      	movs	r3, #1
 8002102:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002108:	2302      	movs	r3, #2
 800210a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800210c:	f107 030c 	add.w	r3, r7, #12
 8002110:	4619      	mov	r1, r3
 8002112:	4819      	ldr	r0, [pc, #100]	; (8002178 <LCD_IO_Init+0xe8>)
 8002114:	f001 fe32 	bl	8003d7c <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002118:	2300      	movs	r3, #0
 800211a:	603b      	str	r3, [r7, #0]
 800211c:	4b15      	ldr	r3, [pc, #84]	; (8002174 <LCD_IO_Init+0xe4>)
 800211e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002120:	4a14      	ldr	r2, [pc, #80]	; (8002174 <LCD_IO_Init+0xe4>)
 8002122:	f043 0304 	orr.w	r3, r3, #4
 8002126:	6313      	str	r3, [r2, #48]	; 0x30
 8002128:	4b12      	ldr	r3, [pc, #72]	; (8002174 <LCD_IO_Init+0xe4>)
 800212a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	603b      	str	r3, [r7, #0]
 8002132:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002134:	2304      	movs	r3, #4
 8002136:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002138:	2301      	movs	r3, #1
 800213a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002140:	2302      	movs	r3, #2
 8002142:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002144:	f107 030c 	add.w	r3, r7, #12
 8002148:	4619      	mov	r1, r3
 800214a:	480c      	ldr	r0, [pc, #48]	; (800217c <LCD_IO_Init+0xec>)
 800214c:	f001 fe16 	bl	8003d7c <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002150:	2200      	movs	r2, #0
 8002152:	2104      	movs	r1, #4
 8002154:	4809      	ldr	r0, [pc, #36]	; (800217c <LCD_IO_Init+0xec>)
 8002156:	f002 f8c9 	bl	80042ec <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800215a:	2201      	movs	r2, #1
 800215c:	2104      	movs	r1, #4
 800215e:	4807      	ldr	r0, [pc, #28]	; (800217c <LCD_IO_Init+0xec>)
 8002160:	f002 f8c4 	bl	80042ec <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002164:	f7ff feb6 	bl	8001ed4 <SPIx_Init>
  }
}
 8002168:	bf00      	nop
 800216a:	3720      	adds	r7, #32
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	20000338 	.word	0x20000338
 8002174:	40023800 	.word	0x40023800
 8002178:	40020c00 	.word	0x40020c00
 800217c:	40020800 	.word	0x40020800

08002180 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800218a:	2201      	movs	r2, #1
 800218c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002190:	480a      	ldr	r0, [pc, #40]	; (80021bc <LCD_IO_WriteData+0x3c>)
 8002192:	f002 f8ab 	bl	80042ec <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8002196:	2200      	movs	r2, #0
 8002198:	2104      	movs	r1, #4
 800219a:	4809      	ldr	r0, [pc, #36]	; (80021c0 <LCD_IO_WriteData+0x40>)
 800219c:	f002 f8a6 	bl	80042ec <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80021a0:	88fb      	ldrh	r3, [r7, #6]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff fef0 	bl	8001f88 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80021a8:	2201      	movs	r2, #1
 80021aa:	2104      	movs	r1, #4
 80021ac:	4804      	ldr	r0, [pc, #16]	; (80021c0 <LCD_IO_WriteData+0x40>)
 80021ae:	f002 f89d 	bl	80042ec <HAL_GPIO_WritePin>
}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40020c00 	.word	0x40020c00
 80021c0:	40020800 	.word	0x40020800

080021c4 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80021ce:	2200      	movs	r2, #0
 80021d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021d4:	480a      	ldr	r0, [pc, #40]	; (8002200 <LCD_IO_WriteReg+0x3c>)
 80021d6:	f002 f889 	bl	80042ec <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80021da:	2200      	movs	r2, #0
 80021dc:	2104      	movs	r1, #4
 80021de:	4809      	ldr	r0, [pc, #36]	; (8002204 <LCD_IO_WriteReg+0x40>)
 80021e0:	f002 f884 	bl	80042ec <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff fecd 	bl	8001f88 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80021ee:	2201      	movs	r2, #1
 80021f0:	2104      	movs	r1, #4
 80021f2:	4804      	ldr	r0, [pc, #16]	; (8002204 <LCD_IO_WriteReg+0x40>)
 80021f4:	f002 f87a 	bl	80042ec <HAL_GPIO_WritePin>
}
 80021f8:	bf00      	nop
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40020c00 	.word	0x40020c00
 8002204:	40020800 	.word	0x40020800

08002208 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	460a      	mov	r2, r1
 8002212:	80fb      	strh	r3, [r7, #6]
 8002214:	4613      	mov	r3, r2
 8002216:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002218:	2300      	movs	r3, #0
 800221a:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 800221c:	2200      	movs	r2, #0
 800221e:	2104      	movs	r1, #4
 8002220:	4810      	ldr	r0, [pc, #64]	; (8002264 <LCD_IO_ReadData+0x5c>)
 8002222:	f002 f863 	bl	80042ec <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002226:	2200      	movs	r2, #0
 8002228:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800222c:	480e      	ldr	r0, [pc, #56]	; (8002268 <LCD_IO_ReadData+0x60>)
 800222e:	f002 f85d 	bl	80042ec <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8002232:	88fb      	ldrh	r3, [r7, #6]
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff fea7 	bl	8001f88 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 800223a:	797b      	ldrb	r3, [r7, #5]
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff fe83 	bl	8001f48 <SPIx_Read>
 8002242:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002244:	2201      	movs	r2, #1
 8002246:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800224a:	4807      	ldr	r0, [pc, #28]	; (8002268 <LCD_IO_ReadData+0x60>)
 800224c:	f002 f84e 	bl	80042ec <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002250:	2201      	movs	r2, #1
 8002252:	2104      	movs	r1, #4
 8002254:	4803      	ldr	r0, [pc, #12]	; (8002264 <LCD_IO_ReadData+0x5c>)
 8002256:	f002 f849 	bl	80042ec <HAL_GPIO_WritePin>
  
  return readvalue;
 800225a:	68fb      	ldr	r3, [r7, #12]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40020800 	.word	0x40020800
 8002268:	40020c00 	.word	0x40020c00

0800226c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 fff7 	bl	8003268 <HAL_Delay>
}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
	...

08002284 <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b088      	sub	sp, #32
 8002288:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 800228a:	2300      	movs	r3, #0
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	4b20      	ldr	r3, [pc, #128]	; (8002310 <GYRO_IO_Init+0x8c>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	4a1f      	ldr	r2, [pc, #124]	; (8002310 <GYRO_IO_Init+0x8c>)
 8002294:	f043 0304 	orr.w	r3, r3, #4
 8002298:	6313      	str	r3, [r2, #48]	; 0x30
 800229a:	4b1d      	ldr	r3, [pc, #116]	; (8002310 <GYRO_IO_Init+0x8c>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	f003 0304 	and.w	r3, r3, #4
 80022a2:	60bb      	str	r3, [r7, #8]
 80022a4:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 80022a6:	2302      	movs	r3, #2
 80022a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80022aa:	2301      	movs	r3, #1
 80022ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 80022b2:	2301      	movs	r3, #1
 80022b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 80022b6:	f107 030c 	add.w	r3, r7, #12
 80022ba:	4619      	mov	r1, r3
 80022bc:	4815      	ldr	r0, [pc, #84]	; (8002314 <GYRO_IO_Init+0x90>)
 80022be:	f001 fd5d 	bl	8003d7c <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 80022c2:	2201      	movs	r2, #1
 80022c4:	2102      	movs	r1, #2
 80022c6:	4813      	ldr	r0, [pc, #76]	; (8002314 <GYRO_IO_Init+0x90>)
 80022c8:	f002 f810 	bl	80042ec <HAL_GPIO_WritePin>
  
  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 80022cc:	2300      	movs	r3, #0
 80022ce:	607b      	str	r3, [r7, #4]
 80022d0:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <GYRO_IO_Init+0x8c>)
 80022d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d4:	4a0e      	ldr	r2, [pc, #56]	; (8002310 <GYRO_IO_Init+0x8c>)
 80022d6:	f043 0301 	orr.w	r3, r3, #1
 80022da:	6313      	str	r3, [r2, #48]	; 0x30
 80022dc:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <GYRO_IO_Init+0x8c>)
 80022de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	607b      	str	r3, [r7, #4]
 80022e6:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 80022e8:	2306      	movs	r3, #6
 80022ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80022ec:	2300      	movs	r3, #0
 80022ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80022f0:	2302      	movs	r3, #2
 80022f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 80022f8:	f107 030c 	add.w	r3, r7, #12
 80022fc:	4619      	mov	r1, r3
 80022fe:	4806      	ldr	r0, [pc, #24]	; (8002318 <GYRO_IO_Init+0x94>)
 8002300:	f001 fd3c 	bl	8003d7c <HAL_GPIO_Init>

  SPIx_Init();
 8002304:	f7ff fde6 	bl	8001ed4 <SPIx_Init>
}
 8002308:	bf00      	nop
 800230a:	3720      	adds	r7, #32
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40023800 	.word	0x40023800
 8002314:	40020800 	.word	0x40020800
 8002318:	40020000 	.word	0x40020000

0800231c <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	70fb      	strb	r3, [r7, #3]
 8002328:	4613      	mov	r3, r2
 800232a:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 800232c:	883b      	ldrh	r3, [r7, #0]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d903      	bls.n	800233a <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8002332:	78fb      	ldrb	r3, [r7, #3]
 8002334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002338:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800233a:	2200      	movs	r2, #0
 800233c:	2102      	movs	r1, #2
 800233e:	480f      	ldr	r0, [pc, #60]	; (800237c <GYRO_IO_Write+0x60>)
 8002340:	f001 ffd4 	bl	80042ec <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8002344:	78fb      	ldrb	r3, [r7, #3]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff fe3c 	bl	8001fc4 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 800234c:	e00a      	b.n	8002364 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff fe36 	bl	8001fc4 <SPIx_WriteRead>
    NumByteToWrite--;
 8002358:	883b      	ldrh	r3, [r7, #0]
 800235a:	3b01      	subs	r3, #1
 800235c:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3301      	adds	r3, #1
 8002362:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 8002364:	883b      	ldrh	r3, [r7, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f1      	bne.n	800234e <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 800236a:	2201      	movs	r2, #1
 800236c:	2102      	movs	r1, #2
 800236e:	4803      	ldr	r0, [pc, #12]	; (800237c <GYRO_IO_Write+0x60>)
 8002370:	f001 ffbc 	bl	80042ec <HAL_GPIO_WritePin>
}
 8002374:	bf00      	nop
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40020800 	.word	0x40020800

08002380 <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	70fb      	strb	r3, [r7, #3]
 800238c:	4613      	mov	r3, r2
 800238e:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8002390:	883b      	ldrh	r3, [r7, #0]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d904      	bls.n	80023a0 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8002396:	78fb      	ldrb	r3, [r7, #3]
 8002398:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800239c:	70fb      	strb	r3, [r7, #3]
 800239e:	e003      	b.n	80023a8 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 80023a0:	78fb      	ldrb	r3, [r7, #3]
 80023a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023a6:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80023a8:	2200      	movs	r2, #0
 80023aa:	2102      	movs	r1, #2
 80023ac:	4810      	ldr	r0, [pc, #64]	; (80023f0 <GYRO_IO_Read+0x70>)
 80023ae:	f001 ff9d 	bl	80042ec <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 80023b2:	78fb      	ldrb	r3, [r7, #3]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fe05 	bl	8001fc4 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 80023ba:	e00c      	b.n	80023d6 <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 80023bc:	2000      	movs	r0, #0
 80023be:	f7ff fe01 	bl	8001fc4 <SPIx_WriteRead>
 80023c2:	4603      	mov	r3, r0
 80023c4:	461a      	mov	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 80023ca:	883b      	ldrh	r3, [r7, #0]
 80023cc:	3b01      	subs	r3, #1
 80023ce:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3301      	adds	r3, #1
 80023d4:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 80023d6:	883b      	ldrh	r3, [r7, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1ef      	bne.n	80023bc <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 80023dc:	2201      	movs	r2, #1
 80023de:	2102      	movs	r1, #2
 80023e0:	4803      	ldr	r0, [pc, #12]	; (80023f0 <GYRO_IO_Read+0x70>)
 80023e2:	f001 ff83 	bl	80042ec <HAL_GPIO_WritePin>
}  
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40020800 	.word	0x40020800

080023f4 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80023fe:	2300      	movs	r3, #0
 8002400:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 8002402:	2300      	movs	r3, #0
 8002404:	703b      	strb	r3, [r7, #0]
 8002406:	2300      	movs	r3, #0
 8002408:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 800240a:	4b2b      	ldr	r3, [pc, #172]	; (80024b8 <BSP_GYRO_Init+0xc4>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	4798      	blx	r3
 8002410:	4603      	mov	r3, r0
 8002412:	2bd4      	cmp	r3, #212	; 0xd4
 8002414:	d005      	beq.n	8002422 <BSP_GYRO_Init+0x2e>
 8002416:	4b28      	ldr	r3, [pc, #160]	; (80024b8 <BSP_GYRO_Init+0xc4>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	4798      	blx	r3
 800241c:	4603      	mov	r3, r0
 800241e:	2bd5      	cmp	r3, #213	; 0xd5
 8002420:	d145      	bne.n	80024ae <BSP_GYRO_Init+0xba>
  {	
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8002422:	4b26      	ldr	r3, [pc, #152]	; (80024bc <BSP_GYRO_Init+0xc8>)
 8002424:	4a24      	ldr	r2, [pc, #144]	; (80024b8 <BSP_GYRO_Init+0xc4>)
 8002426:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8002428:	2308      	movs	r3, #8
 800242a:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 800242c:	2300      	movs	r3, #0
 800242e:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8002430:	2307      	movs	r3, #7
 8002432:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 8002434:	2330      	movs	r3, #48	; 0x30
 8002436:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8002438:	2300      	movs	r3, #0
 800243a:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 800243c:	2300      	movs	r3, #0
 800243e:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8002440:	2310      	movs	r3, #16
 8002442:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002444:	793a      	ldrb	r2, [r7, #4]
 8002446:	797b      	ldrb	r3, [r7, #5]
 8002448:	4313      	orrs	r3, r2
 800244a:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 800244c:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800244e:	4313      	orrs	r3, r2
 8002450:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8002452:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002454:	4313      	orrs	r3, r2
 8002456:	b2db      	uxtb	r3, r3
 8002458:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 800245a:	7a3a      	ldrb	r2, [r7, #8]
 800245c:	7a7b      	ldrb	r3, [r7, #9]
 800245e:	4313      	orrs	r3, r2
 8002460:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8002462:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8002464:	4313      	orrs	r3, r2
 8002466:	b2db      	uxtb	r3, r3
 8002468:	b29b      	uxth	r3, r3
 800246a:	021b      	lsls	r3, r3, #8
 800246c:	b29a      	uxth	r2, r3
 800246e:	89bb      	ldrh	r3, [r7, #12]
 8002470:	4313      	orrs	r3, r2
 8002472:	81bb      	strh	r3, [r7, #12]
    
    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8002474:	4b11      	ldr	r3, [pc, #68]	; (80024bc <BSP_GYRO_Init+0xc8>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	89ba      	ldrh	r2, [r7, #12]
 800247c:	4610      	mov	r0, r2
 800247e:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 8002480:	2300      	movs	r3, #0
 8002482:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8002484:	2300      	movs	r3, #0
 8002486:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8002488:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 800248a:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 800248c:	4313      	orrs	r3, r2
 800248e:	b2db      	uxtb	r3, r3
 8002490:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8002492:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <BSP_GYRO_Init+0xc8>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002498:	89ba      	ldrh	r2, [r7, #12]
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	4610      	mov	r0, r2
 800249e:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 80024a0:	4b06      	ldr	r3, [pc, #24]	; (80024bc <BSP_GYRO_Init+0xc8>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a6:	2010      	movs	r0, #16
 80024a8:	4798      	blx	r3

    ret = GYRO_OK;
 80024aa:	2300      	movs	r3, #0
 80024ac:	73fb      	strb	r3, [r7, #15]
    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);

    ret = GYRO_OK;
  }
#endif /* USE_STM32F429I_DISCOVERY_REVD */
  return ret;
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	2000003c 	.word	0x2000003c
 80024bc:	2000033c 	.word	0x2000033c

080024c0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 80024c4:	4b2d      	ldr	r3, [pc, #180]	; (800257c <BSP_LCD_Init+0xbc>)
 80024c6:	4a2e      	ldr	r2, [pc, #184]	; (8002580 <BSP_LCD_Init+0xc0>)
 80024c8:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80024ca:	4b2c      	ldr	r3, [pc, #176]	; (800257c <BSP_LCD_Init+0xbc>)
 80024cc:	2209      	movs	r2, #9
 80024ce:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80024d0:	4b2a      	ldr	r3, [pc, #168]	; (800257c <BSP_LCD_Init+0xbc>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80024d6:	4b29      	ldr	r3, [pc, #164]	; (800257c <BSP_LCD_Init+0xbc>)
 80024d8:	221d      	movs	r2, #29
 80024da:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80024dc:	4b27      	ldr	r3, [pc, #156]	; (800257c <BSP_LCD_Init+0xbc>)
 80024de:	2203      	movs	r2, #3
 80024e0:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 80024e2:	4b26      	ldr	r3, [pc, #152]	; (800257c <BSP_LCD_Init+0xbc>)
 80024e4:	f240 120d 	movw	r2, #269	; 0x10d
 80024e8:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80024ea:	4b24      	ldr	r3, [pc, #144]	; (800257c <BSP_LCD_Init+0xbc>)
 80024ec:	f240 1243 	movw	r2, #323	; 0x143
 80024f0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80024f2:	4b22      	ldr	r3, [pc, #136]	; (800257c <BSP_LCD_Init+0xbc>)
 80024f4:	f240 1217 	movw	r2, #279	; 0x117
 80024f8:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80024fa:	4b20      	ldr	r3, [pc, #128]	; (800257c <BSP_LCD_Init+0xbc>)
 80024fc:	f240 1247 	movw	r2, #327	; 0x147
 8002500:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002502:	4b1e      	ldr	r3, [pc, #120]	; (800257c <BSP_LCD_Init+0xbc>)
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 800250a:	4b1c      	ldr	r3, [pc, #112]	; (800257c <BSP_LCD_Init+0xbc>)
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002512:	4b1a      	ldr	r3, [pc, #104]	; (800257c <BSP_LCD_Init+0xbc>)
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800251a:	4b1a      	ldr	r3, [pc, #104]	; (8002584 <BSP_LCD_Init+0xc4>)
 800251c:	2208      	movs	r2, #8
 800251e:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002520:	4b18      	ldr	r3, [pc, #96]	; (8002584 <BSP_LCD_Init+0xc4>)
 8002522:	22c0      	movs	r2, #192	; 0xc0
 8002524:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002526:	4b17      	ldr	r3, [pc, #92]	; (8002584 <BSP_LCD_Init+0xc4>)
 8002528:	2204      	movs	r2, #4
 800252a:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800252c:	4b15      	ldr	r3, [pc, #84]	; (8002584 <BSP_LCD_Init+0xc4>)
 800252e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002532:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002534:	4813      	ldr	r0, [pc, #76]	; (8002584 <BSP_LCD_Init+0xc4>)
 8002536:	f002 fe81 	bl	800523c <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800253a:	4b10      	ldr	r3, [pc, #64]	; (800257c <BSP_LCD_Init+0xbc>)
 800253c:	2200      	movs	r2, #0
 800253e:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002540:	4b0e      	ldr	r3, [pc, #56]	; (800257c <BSP_LCD_Init+0xbc>)
 8002542:	2200      	movs	r2, #0
 8002544:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002546:	4b0d      	ldr	r3, [pc, #52]	; (800257c <BSP_LCD_Init+0xbc>)
 8002548:	2200      	movs	r2, #0
 800254a:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800254c:	4b0b      	ldr	r3, [pc, #44]	; (800257c <BSP_LCD_Init+0xbc>)
 800254e:	2200      	movs	r2, #0
 8002550:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8002552:	f000 fa5f 	bl	8002a14 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002556:	4809      	ldr	r0, [pc, #36]	; (800257c <BSP_LCD_Init+0xbc>)
 8002558:	f001 fee2 	bl	8004320 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 800255c:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <BSP_LCD_Init+0xc8>)
 800255e:	4a0b      	ldr	r2, [pc, #44]	; (800258c <BSP_LCD_Init+0xcc>)
 8002560:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002562:	4b09      	ldr	r3, [pc, #36]	; (8002588 <BSP_LCD_Init+0xc8>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 800256a:	f000 fc41 	bl	8002df0 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800256e:	4808      	ldr	r0, [pc, #32]	; (8002590 <BSP_LCD_Init+0xd0>)
 8002570:	f000 f8ce 	bl	8002710 <BSP_LCD_SetFont>

  return LCD_OK;
 8002574:	2300      	movs	r3, #0
}  
 8002576:	4618      	mov	r0, r3
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20000340 	.word	0x20000340
 8002580:	40016800 	.word	0x40016800
 8002584:	20000428 	.word	0x20000428
 8002588:	20000474 	.word	0x20000474
 800258c:	20000004 	.word	0x20000004
 8002590:	20000074 	.word	0x20000074

08002594 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002598:	4b03      	ldr	r3, [pc, #12]	; (80025a8 <BSP_LCD_GetXSize+0x14>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259e:	4798      	blx	r3
 80025a0:	4603      	mov	r3, r0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000474 	.word	0x20000474

080025ac <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 80025b0:	4b03      	ldr	r3, [pc, #12]	; (80025c0 <BSP_LCD_GetYSize+0x14>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b6:	4798      	blx	r3
 80025b8:	4603      	mov	r3, r0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	20000474 	.word	0x20000474

080025c4 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b090      	sub	sp, #64	; 0x40
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	6039      	str	r1, [r7, #0]
 80025ce:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80025d4:	f7ff ffde 	bl	8002594 <BSP_LCD_GetXSize>
 80025d8:	4603      	mov	r3, r0
 80025da:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80025dc:	2300      	movs	r3, #0
 80025de:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80025e0:	f7ff ffe4 	bl	80025ac <BSP_LCD_GetYSize>
 80025e4:	4603      	mov	r3, r0
 80025e6:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80025e8:	2300      	movs	r3, #0
 80025ea:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80025f0:	23ff      	movs	r3, #255	; 0xff
 80025f2:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80025f4:	2300      	movs	r3, #0
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80025fe:	2300      	movs	r3, #0
 8002600:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002604:	2300      	movs	r3, #0
 8002606:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800260a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800260e:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002610:	2307      	movs	r3, #7
 8002612:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002614:	f7ff ffbe 	bl	8002594 <BSP_LCD_GetXSize>
 8002618:	4603      	mov	r3, r0
 800261a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 800261c:	f7ff ffc6 	bl	80025ac <BSP_LCD_GetYSize>
 8002620:	4603      	mov	r3, r0
 8002622:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002624:	88fa      	ldrh	r2, [r7, #6]
 8002626:	f107 030c 	add.w	r3, r7, #12
 800262a:	4619      	mov	r1, r3
 800262c:	4814      	ldr	r0, [pc, #80]	; (8002680 <BSP_LCD_LayerDefaultInit+0xbc>)
 800262e:	f001 ff51 	bl	80044d4 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002632:	88fa      	ldrh	r2, [r7, #6]
 8002634:	4913      	ldr	r1, [pc, #76]	; (8002684 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002636:	4613      	mov	r3, r2
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	4413      	add	r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	440b      	add	r3, r1
 8002640:	3304      	adds	r3, #4
 8002642:	f04f 32ff 	mov.w	r2, #4294967295
 8002646:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002648:	88fa      	ldrh	r2, [r7, #6]
 800264a:	490e      	ldr	r1, [pc, #56]	; (8002684 <BSP_LCD_LayerDefaultInit+0xc0>)
 800264c:	4613      	mov	r3, r2
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	4413      	add	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	440b      	add	r3, r1
 8002656:	3308      	adds	r3, #8
 8002658:	4a0b      	ldr	r2, [pc, #44]	; (8002688 <BSP_LCD_LayerDefaultInit+0xc4>)
 800265a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800265c:	88fa      	ldrh	r2, [r7, #6]
 800265e:	4909      	ldr	r1, [pc, #36]	; (8002684 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002660:	4613      	mov	r3, r2
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	4413      	add	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800266e:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002670:	4803      	ldr	r0, [pc, #12]	; (8002680 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002672:	f001 ff6d 	bl	8004550 <HAL_LTDC_EnableDither>
}
 8002676:	bf00      	nop
 8002678:	3740      	adds	r7, #64	; 0x40
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	20000340 	.word	0x20000340
 8002684:	2000045c 	.word	0x2000045c
 8002688:	20000074 	.word	0x20000074

0800268c <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002694:	4a04      	ldr	r2, [pc, #16]	; (80026a8 <BSP_LCD_SelectLayer+0x1c>)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6013      	str	r3, [r2, #0]
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	20000458 	.word	0x20000458

080026ac <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80026b4:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <BSP_LCD_SetTextColor+0x28>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	4907      	ldr	r1, [pc, #28]	; (80026d8 <BSP_LCD_SetTextColor+0x2c>)
 80026ba:	4613      	mov	r3, r2
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	4413      	add	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	440b      	add	r3, r1
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	601a      	str	r2, [r3, #0]
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	20000458 	.word	0x20000458
 80026d8:	2000045c 	.word	0x2000045c

080026dc <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80026e4:	4b08      	ldr	r3, [pc, #32]	; (8002708 <BSP_LCD_SetBackColor+0x2c>)
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	4908      	ldr	r1, [pc, #32]	; (800270c <BSP_LCD_SetBackColor+0x30>)
 80026ea:	4613      	mov	r3, r2
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	4413      	add	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	3304      	adds	r3, #4
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	601a      	str	r2, [r3, #0]
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	20000458 	.word	0x20000458
 800270c:	2000045c 	.word	0x2000045c

08002710 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002718:	4b08      	ldr	r3, [pc, #32]	; (800273c <BSP_LCD_SetFont+0x2c>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	4908      	ldr	r1, [pc, #32]	; (8002740 <BSP_LCD_SetFont+0x30>)
 800271e:	4613      	mov	r3, r2
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	4413      	add	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	440b      	add	r3, r1
 8002728:	3308      	adds	r3, #8
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	601a      	str	r2, [r3, #0]
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	20000458 	.word	0x20000458
 8002740:	2000045c 	.word	0x2000045c

08002744 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002748:	4b07      	ldr	r3, [pc, #28]	; (8002768 <BSP_LCD_GetFont+0x24>)
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	4907      	ldr	r1, [pc, #28]	; (800276c <BSP_LCD_GetFont+0x28>)
 800274e:	4613      	mov	r3, r2
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	4413      	add	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	440b      	add	r3, r1
 8002758:	3308      	adds	r3, #8
 800275a:	681b      	ldr	r3, [r3, #0]
}
 800275c:	4618      	mov	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	20000458 	.word	0x20000458
 800276c:	2000045c 	.word	0x2000045c

08002770 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002772:	b085      	sub	sp, #20
 8002774:	af02      	add	r7, sp, #8
 8002776:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002778:	4b0f      	ldr	r3, [pc, #60]	; (80027b8 <BSP_LCD_Clear+0x48>)
 800277a:	681c      	ldr	r4, [r3, #0]
 800277c:	4b0e      	ldr	r3, [pc, #56]	; (80027b8 <BSP_LCD_Clear+0x48>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a0e      	ldr	r2, [pc, #56]	; (80027bc <BSP_LCD_Clear+0x4c>)
 8002782:	2134      	movs	r1, #52	; 0x34
 8002784:	fb01 f303 	mul.w	r3, r1, r3
 8002788:	4413      	add	r3, r2
 800278a:	335c      	adds	r3, #92	; 0x5c
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	461e      	mov	r6, r3
 8002790:	f7ff ff00 	bl	8002594 <BSP_LCD_GetXSize>
 8002794:	4605      	mov	r5, r0
 8002796:	f7ff ff09 	bl	80025ac <BSP_LCD_GetYSize>
 800279a:	4602      	mov	r2, r0
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	9301      	str	r3, [sp, #4]
 80027a0:	2300      	movs	r3, #0
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	4613      	mov	r3, r2
 80027a6:	462a      	mov	r2, r5
 80027a8:	4631      	mov	r1, r6
 80027aa:	4620      	mov	r0, r4
 80027ac:	f000 fae8 	bl	8002d80 <FillBuffer>
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027b8:	20000458 	.word	0x20000458
 80027bc:	20000340 	.word	0x20000340

080027c0 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80027c0:	b590      	push	{r4, r7, lr}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	80fb      	strh	r3, [r7, #6]
 80027ca:	460b      	mov	r3, r1
 80027cc:	80bb      	strh	r3, [r7, #4]
 80027ce:	4613      	mov	r3, r2
 80027d0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80027d2:	4b1b      	ldr	r3, [pc, #108]	; (8002840 <BSP_LCD_DisplayChar+0x80>)
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	491b      	ldr	r1, [pc, #108]	; (8002844 <BSP_LCD_DisplayChar+0x84>)
 80027d8:	4613      	mov	r3, r2
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	4413      	add	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	3308      	adds	r3, #8
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6819      	ldr	r1, [r3, #0]
 80027e8:	78fb      	ldrb	r3, [r7, #3]
 80027ea:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80027ee:	4b14      	ldr	r3, [pc, #80]	; (8002840 <BSP_LCD_DisplayChar+0x80>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	4c14      	ldr	r4, [pc, #80]	; (8002844 <BSP_LCD_DisplayChar+0x84>)
 80027f4:	4613      	mov	r3, r2
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	4413      	add	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4423      	add	r3, r4
 80027fe:	3308      	adds	r3, #8
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002804:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002808:	4b0d      	ldr	r3, [pc, #52]	; (8002840 <BSP_LCD_DisplayChar+0x80>)
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	4c0d      	ldr	r4, [pc, #52]	; (8002844 <BSP_LCD_DisplayChar+0x84>)
 800280e:	4613      	mov	r3, r2
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	4413      	add	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4423      	add	r3, r4
 8002818:	3308      	adds	r3, #8
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	889b      	ldrh	r3, [r3, #4]
 800281e:	3307      	adds	r3, #7
 8002820:	2b00      	cmp	r3, #0
 8002822:	da00      	bge.n	8002826 <BSP_LCD_DisplayChar+0x66>
 8002824:	3307      	adds	r3, #7
 8002826:	10db      	asrs	r3, r3, #3
 8002828:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800282c:	18ca      	adds	r2, r1, r3
 800282e:	88b9      	ldrh	r1, [r7, #4]
 8002830:	88fb      	ldrh	r3, [r7, #6]
 8002832:	4618      	mov	r0, r3
 8002834:	f000 f9ea 	bl	8002c0c <DrawChar>
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	bd90      	pop	{r4, r7, pc}
 8002840:	20000458 	.word	0x20000458
 8002844:	2000045c 	.word	0x2000045c

08002848 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8002848:	b5b0      	push	{r4, r5, r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af00      	add	r7, sp, #0
 800284e:	60ba      	str	r2, [r7, #8]
 8002850:	461a      	mov	r2, r3
 8002852:	4603      	mov	r3, r0
 8002854:	81fb      	strh	r3, [r7, #14]
 8002856:	460b      	mov	r3, r1
 8002858:	81bb      	strh	r3, [r7, #12]
 800285a:	4613      	mov	r3, r2
 800285c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800285e:	2301      	movs	r3, #1
 8002860:	83fb      	strh	r3, [r7, #30]
 8002862:	2300      	movs	r3, #0
 8002864:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002866:	2300      	movs	r3, #0
 8002868:	61bb      	str	r3, [r7, #24]
 800286a:	2300      	movs	r3, #0
 800286c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002872:	e002      	b.n	800287a <BSP_LCD_DisplayStringAt+0x32>
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	3301      	adds	r3, #1
 8002878:	61bb      	str	r3, [r7, #24]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	1c5a      	adds	r2, r3, #1
 800287e:	617a      	str	r2, [r7, #20]
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f6      	bne.n	8002874 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002886:	f7ff fe85 	bl	8002594 <BSP_LCD_GetXSize>
 800288a:	4601      	mov	r1, r0
 800288c:	4b4b      	ldr	r3, [pc, #300]	; (80029bc <BSP_LCD_DisplayStringAt+0x174>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	484b      	ldr	r0, [pc, #300]	; (80029c0 <BSP_LCD_DisplayStringAt+0x178>)
 8002892:	4613      	mov	r3, r2
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	4413      	add	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4403      	add	r3, r0
 800289c:	3308      	adds	r3, #8
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	889b      	ldrh	r3, [r3, #4]
 80028a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80028a6:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 80028a8:	79fb      	ldrb	r3, [r7, #7]
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	d01c      	beq.n	80028e8 <BSP_LCD_DisplayStringAt+0xa0>
 80028ae:	2b03      	cmp	r3, #3
 80028b0:	dc33      	bgt.n	800291a <BSP_LCD_DisplayStringAt+0xd2>
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d002      	beq.n	80028bc <BSP_LCD_DisplayStringAt+0x74>
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d019      	beq.n	80028ee <BSP_LCD_DisplayStringAt+0xa6>
 80028ba:	e02e      	b.n	800291a <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	1ad1      	subs	r1, r2, r3
 80028c2:	4b3e      	ldr	r3, [pc, #248]	; (80029bc <BSP_LCD_DisplayStringAt+0x174>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	483e      	ldr	r0, [pc, #248]	; (80029c0 <BSP_LCD_DisplayStringAt+0x178>)
 80028c8:	4613      	mov	r3, r2
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	4413      	add	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4403      	add	r3, r0
 80028d2:	3308      	adds	r3, #8
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	889b      	ldrh	r3, [r3, #4]
 80028d8:	fb01 f303 	mul.w	r3, r1, r3
 80028dc:	085b      	lsrs	r3, r3, #1
 80028de:	b29a      	uxth	r2, r3
 80028e0:	89fb      	ldrh	r3, [r7, #14]
 80028e2:	4413      	add	r3, r2
 80028e4:	83fb      	strh	r3, [r7, #30]
      break;
 80028e6:	e01b      	b.n	8002920 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 80028e8:	89fb      	ldrh	r3, [r7, #14]
 80028ea:	83fb      	strh	r3, [r7, #30]
      break;
 80028ec:	e018      	b.n	8002920 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	b299      	uxth	r1, r3
 80028f6:	4b31      	ldr	r3, [pc, #196]	; (80029bc <BSP_LCD_DisplayStringAt+0x174>)
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	4831      	ldr	r0, [pc, #196]	; (80029c0 <BSP_LCD_DisplayStringAt+0x178>)
 80028fc:	4613      	mov	r3, r2
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	4413      	add	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4403      	add	r3, r0
 8002906:	3308      	adds	r3, #8
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	889b      	ldrh	r3, [r3, #4]
 800290c:	fb11 f303 	smulbb	r3, r1, r3
 8002910:	b29a      	uxth	r2, r3
 8002912:	89fb      	ldrh	r3, [r7, #14]
 8002914:	4413      	add	r3, r2
 8002916:	83fb      	strh	r3, [r7, #30]
      break;
 8002918:	e002      	b.n	8002920 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 800291a:	89fb      	ldrh	r3, [r7, #14]
 800291c:	83fb      	strh	r3, [r7, #30]
      break;
 800291e:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002920:	e01a      	b.n	8002958 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	781a      	ldrb	r2, [r3, #0]
 8002926:	89b9      	ldrh	r1, [r7, #12]
 8002928:	8bfb      	ldrh	r3, [r7, #30]
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff ff48 	bl	80027c0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002930:	4b22      	ldr	r3, [pc, #136]	; (80029bc <BSP_LCD_DisplayStringAt+0x174>)
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	4922      	ldr	r1, [pc, #136]	; (80029c0 <BSP_LCD_DisplayStringAt+0x178>)
 8002936:	4613      	mov	r3, r2
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	4413      	add	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	3308      	adds	r3, #8
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	889a      	ldrh	r2, [r3, #4]
 8002946:	8bfb      	ldrh	r3, [r7, #30]
 8002948:	4413      	add	r3, r2
 800294a:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	3301      	adds	r3, #1
 8002950:	60bb      	str	r3, [r7, #8]
    i++;
 8002952:	8bbb      	ldrh	r3, [r7, #28]
 8002954:	3301      	adds	r3, #1
 8002956:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	bf14      	ite	ne
 8002960:	2301      	movne	r3, #1
 8002962:	2300      	moveq	r3, #0
 8002964:	b2dc      	uxtb	r4, r3
 8002966:	f7ff fe15 	bl	8002594 <BSP_LCD_GetXSize>
 800296a:	8bb9      	ldrh	r1, [r7, #28]
 800296c:	4b13      	ldr	r3, [pc, #76]	; (80029bc <BSP_LCD_DisplayStringAt+0x174>)
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	4d13      	ldr	r5, [pc, #76]	; (80029c0 <BSP_LCD_DisplayStringAt+0x178>)
 8002972:	4613      	mov	r3, r2
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	4413      	add	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	442b      	add	r3, r5
 800297c:	3308      	adds	r3, #8
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	889b      	ldrh	r3, [r3, #4]
 8002982:	fb01 f303 	mul.w	r3, r1, r3
 8002986:	1ac3      	subs	r3, r0, r3
 8002988:	b299      	uxth	r1, r3
 800298a:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <BSP_LCD_DisplayStringAt+0x174>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	480c      	ldr	r0, [pc, #48]	; (80029c0 <BSP_LCD_DisplayStringAt+0x178>)
 8002990:	4613      	mov	r3, r2
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	4413      	add	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4403      	add	r3, r0
 800299a:	3308      	adds	r3, #8
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	889b      	ldrh	r3, [r3, #4]
 80029a0:	4299      	cmp	r1, r3
 80029a2:	bf2c      	ite	cs
 80029a4:	2301      	movcs	r3, #1
 80029a6:	2300      	movcc	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	4023      	ands	r3, r4
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1b7      	bne.n	8002922 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 80029b2:	bf00      	nop
 80029b4:	bf00      	nop
 80029b6:	3720      	adds	r7, #32
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bdb0      	pop	{r4, r5, r7, pc}
 80029bc:	20000458 	.word	0x20000458
 80029c0:	2000045c 	.word	0x2000045c

080029c4 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4603      	mov	r3, r0
 80029cc:	6039      	str	r1, [r7, #0]
 80029ce:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80029d0:	f7ff feb8 	bl	8002744 <BSP_LCD_GetFont>
 80029d4:	4603      	mov	r3, r0
 80029d6:	88db      	ldrh	r3, [r3, #6]
 80029d8:	88fa      	ldrh	r2, [r7, #6]
 80029da:	fb12 f303 	smulbb	r3, r2, r3
 80029de:	b299      	uxth	r1, r3
 80029e0:	2303      	movs	r3, #3
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	2000      	movs	r0, #0
 80029e6:	f7ff ff2f 	bl	8002848 <BSP_LCD_DisplayStringAt>
}
 80029ea:	bf00      	nop
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 80029f8:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <BSP_LCD_DisplayOn+0x1c>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8002a02:	4b03      	ldr	r3, [pc, #12]	; (8002a10 <BSP_LCD_DisplayOn+0x1c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	4798      	blx	r3
  }
}
 8002a0a:	bf00      	nop
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	20000474 	.word	0x20000474

08002a14 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b08e      	sub	sp, #56	; 0x38
 8002a18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	623b      	str	r3, [r7, #32]
 8002a1e:	4b61      	ldr	r3, [pc, #388]	; (8002ba4 <BSP_LCD_MspInit+0x190>)
 8002a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a22:	4a60      	ldr	r2, [pc, #384]	; (8002ba4 <BSP_LCD_MspInit+0x190>)
 8002a24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a28:	6453      	str	r3, [r2, #68]	; 0x44
 8002a2a:	4b5e      	ldr	r3, [pc, #376]	; (8002ba4 <BSP_LCD_MspInit+0x190>)
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a32:	623b      	str	r3, [r7, #32]
 8002a34:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8002a36:	2300      	movs	r3, #0
 8002a38:	61fb      	str	r3, [r7, #28]
 8002a3a:	4b5a      	ldr	r3, [pc, #360]	; (8002ba4 <BSP_LCD_MspInit+0x190>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	4a59      	ldr	r2, [pc, #356]	; (8002ba4 <BSP_LCD_MspInit+0x190>)
 8002a40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a44:	6313      	str	r3, [r2, #48]	; 0x30
 8002a46:	4b57      	ldr	r3, [pc, #348]	; (8002ba4 <BSP_LCD_MspInit+0x190>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a4e:	61fb      	str	r3, [r7, #28]
 8002a50:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	61bb      	str	r3, [r7, #24]
 8002a56:	4b53      	ldr	r3, [pc, #332]	; (8002ba4 <BSP_LCD_MspInit+0x190>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	4a52      	ldr	r2, [pc, #328]	; (8002ba4 <BSP_LCD_MspInit+0x190>)
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	6313      	str	r3, [r2, #48]	; 0x30
 8002a62:	4b50      	ldr	r3, [pc, #320]	; (8002ba4 <BSP_LCD_MspInit+0x190>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	61bb      	str	r3, [r7, #24]
 8002a6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	617b      	str	r3, [r7, #20]
 8002a72:	4b4c      	ldr	r3, [pc, #304]	; (8002ba4 <BSP_LCD_MspInit+0x190>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	4a4b      	ldr	r2, [pc, #300]	; (8002ba4 <BSP_LCD_MspInit+0x190>)
 8002a78:	f043 0302 	orr.w	r3, r3, #2
 8002a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a7e:	4b49      	ldr	r3, [pc, #292]	; (8002ba4 <BSP_LCD_MspInit+0x190>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	617b      	str	r3, [r7, #20]
 8002a88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	613b      	str	r3, [r7, #16]
 8002a8e:	4b45      	ldr	r3, [pc, #276]	; (8002ba4 <BSP_LCD_MspInit+0x190>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	4a44      	ldr	r2, [pc, #272]	; (8002ba4 <BSP_LCD_MspInit+0x190>)
 8002a94:	f043 0304 	orr.w	r3, r3, #4
 8002a98:	6313      	str	r3, [r2, #48]	; 0x30
 8002a9a:	4b42      	ldr	r3, [pc, #264]	; (8002ba4 <BSP_LCD_MspInit+0x190>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	613b      	str	r3, [r7, #16]
 8002aa4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	4b3e      	ldr	r3, [pc, #248]	; (8002ba4 <BSP_LCD_MspInit+0x190>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	4a3d      	ldr	r2, [pc, #244]	; (8002ba4 <BSP_LCD_MspInit+0x190>)
 8002ab0:	f043 0308 	orr.w	r3, r3, #8
 8002ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab6:	4b3b      	ldr	r3, [pc, #236]	; (8002ba4 <BSP_LCD_MspInit+0x190>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	f003 0308 	and.w	r3, r3, #8
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	4b37      	ldr	r3, [pc, #220]	; (8002ba4 <BSP_LCD_MspInit+0x190>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	4a36      	ldr	r2, [pc, #216]	; (8002ba4 <BSP_LCD_MspInit+0x190>)
 8002acc:	f043 0320 	orr.w	r3, r3, #32
 8002ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad2:	4b34      	ldr	r3, [pc, #208]	; (8002ba4 <BSP_LCD_MspInit+0x190>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	f003 0320 	and.w	r3, r3, #32
 8002ada:	60bb      	str	r3, [r7, #8]
 8002adc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	607b      	str	r3, [r7, #4]
 8002ae2:	4b30      	ldr	r3, [pc, #192]	; (8002ba4 <BSP_LCD_MspInit+0x190>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	4a2f      	ldr	r2, [pc, #188]	; (8002ba4 <BSP_LCD_MspInit+0x190>)
 8002ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002aec:	6313      	str	r3, [r2, #48]	; 0x30
 8002aee:	4b2d      	ldr	r3, [pc, #180]	; (8002ba4 <BSP_LCD_MspInit+0x190>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af6:	607b      	str	r3, [r7, #4]
 8002af8:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002afa:	f641 0358 	movw	r3, #6232	; 0x1858
 8002afe:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002b00:	2302      	movs	r3, #2
 8002b02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002b08:	2302      	movs	r3, #2
 8002b0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002b0c:	230e      	movs	r3, #14
 8002b0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002b10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b14:	4619      	mov	r1, r3
 8002b16:	4824      	ldr	r0, [pc, #144]	; (8002ba8 <BSP_LCD_MspInit+0x194>)
 8002b18:	f001 f930 	bl	8003d7c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002b1c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002b20:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b26:	4619      	mov	r1, r3
 8002b28:	4820      	ldr	r0, [pc, #128]	; (8002bac <BSP_LCD_MspInit+0x198>)
 8002b2a:	f001 f927 	bl	8003d7c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002b2e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002b32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b38:	4619      	mov	r1, r3
 8002b3a:	481d      	ldr	r0, [pc, #116]	; (8002bb0 <BSP_LCD_MspInit+0x19c>)
 8002b3c:	f001 f91e 	bl	8003d7c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002b40:	2348      	movs	r3, #72	; 0x48
 8002b42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b48:	4619      	mov	r1, r3
 8002b4a:	481a      	ldr	r0, [pc, #104]	; (8002bb4 <BSP_LCD_MspInit+0x1a0>)
 8002b4c:	f001 f916 	bl	8003d7c <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002b50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8002b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4816      	ldr	r0, [pc, #88]	; (8002bb8 <BSP_LCD_MspInit+0x1a4>)
 8002b5e:	f001 f90d 	bl	8003d7c <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002b62:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002b66:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4813      	ldr	r0, [pc, #76]	; (8002bbc <BSP_LCD_MspInit+0x1a8>)
 8002b70:	f001 f904 	bl	8003d7c <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002b74:	2303      	movs	r3, #3
 8002b76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002b78:	2309      	movs	r3, #9
 8002b7a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b80:	4619      	mov	r1, r3
 8002b82:	480a      	ldr	r0, [pc, #40]	; (8002bac <BSP_LCD_MspInit+0x198>)
 8002b84:	f001 f8fa 	bl	8003d7c <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002b88:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b92:	4619      	mov	r1, r3
 8002b94:	4809      	ldr	r0, [pc, #36]	; (8002bbc <BSP_LCD_MspInit+0x1a8>)
 8002b96:	f001 f8f1 	bl	8003d7c <HAL_GPIO_Init>
}
 8002b9a:	bf00      	nop
 8002b9c:	3738      	adds	r7, #56	; 0x38
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	40020000 	.word	0x40020000
 8002bac:	40020400 	.word	0x40020400
 8002bb0:	40020800 	.word	0x40020800
 8002bb4:	40020c00 	.word	0x40020c00
 8002bb8:	40021400 	.word	0x40021400
 8002bbc:	40021800 	.word	0x40021800

08002bc0 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002bc0:	b5b0      	push	{r4, r5, r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	603a      	str	r2, [r7, #0]
 8002bca:	80fb      	strh	r3, [r7, #6]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <BSP_LCD_DrawPixel+0x44>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a0c      	ldr	r2, [pc, #48]	; (8002c08 <BSP_LCD_DrawPixel+0x48>)
 8002bd6:	2134      	movs	r1, #52	; 0x34
 8002bd8:	fb01 f303 	mul.w	r3, r1, r3
 8002bdc:	4413      	add	r3, r2
 8002bde:	335c      	adds	r3, #92	; 0x5c
 8002be0:	681c      	ldr	r4, [r3, #0]
 8002be2:	88bd      	ldrh	r5, [r7, #4]
 8002be4:	f7ff fcd6 	bl	8002594 <BSP_LCD_GetXSize>
 8002be8:	4603      	mov	r3, r0
 8002bea:	fb03 f205 	mul.w	r2, r3, r5
 8002bee:	88fb      	ldrh	r3, [r7, #6]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4423      	add	r3, r4
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	6013      	str	r3, [r2, #0]
}
 8002bfc:	bf00      	nop
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bdb0      	pop	{r4, r5, r7, pc}
 8002c04:	20000458 	.word	0x20000458
 8002c08:	20000340 	.word	0x20000340

08002c0c <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b088      	sub	sp, #32
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	4603      	mov	r3, r0
 8002c14:	603a      	str	r2, [r7, #0]
 8002c16:	80fb      	strh	r3, [r7, #6]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	61fb      	str	r3, [r7, #28]
 8002c20:	2300      	movs	r3, #0
 8002c22:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8002c24:	2300      	movs	r3, #0
 8002c26:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8002c28:	4b53      	ldr	r3, [pc, #332]	; (8002d78 <DrawChar+0x16c>)
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	4953      	ldr	r1, [pc, #332]	; (8002d7c <DrawChar+0x170>)
 8002c2e:	4613      	mov	r3, r2
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	4413      	add	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	440b      	add	r3, r1
 8002c38:	3308      	adds	r3, #8
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	88db      	ldrh	r3, [r3, #6]
 8002c3e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002c40:	4b4d      	ldr	r3, [pc, #308]	; (8002d78 <DrawChar+0x16c>)
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	494d      	ldr	r1, [pc, #308]	; (8002d7c <DrawChar+0x170>)
 8002c46:	4613      	mov	r3, r2
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	4413      	add	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	440b      	add	r3, r1
 8002c50:	3308      	adds	r3, #8
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	889b      	ldrh	r3, [r3, #4]
 8002c56:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8002c58:	8a3b      	ldrh	r3, [r7, #16]
 8002c5a:	3307      	adds	r3, #7
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	da00      	bge.n	8002c62 <DrawChar+0x56>
 8002c60:	3307      	adds	r3, #7
 8002c62:	10db      	asrs	r3, r3, #3
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	8a3b      	ldrh	r3, [r7, #16]
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8002c72:	2300      	movs	r3, #0
 8002c74:	61fb      	str	r3, [r7, #28]
 8002c76:	e076      	b.n	8002d66 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002c78:	8a3b      	ldrh	r3, [r7, #16]
 8002c7a:	3307      	adds	r3, #7
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	da00      	bge.n	8002c82 <DrawChar+0x76>
 8002c80:	3307      	adds	r3, #7
 8002c82:	10db      	asrs	r3, r3, #3
 8002c84:	461a      	mov	r2, r3
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	fb02 f303 	mul.w	r3, r2, r3
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	4413      	add	r3, r2
 8002c90:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8002c92:	8a3b      	ldrh	r3, [r7, #16]
 8002c94:	3307      	adds	r3, #7
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	da00      	bge.n	8002c9c <DrawChar+0x90>
 8002c9a:	3307      	adds	r3, #7
 8002c9c:	10db      	asrs	r3, r3, #3
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d002      	beq.n	8002ca8 <DrawChar+0x9c>
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d004      	beq.n	8002cb0 <DrawChar+0xa4>
 8002ca6:	e00c      	b.n	8002cc2 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	617b      	str	r3, [r7, #20]
      break;
 8002cae:	e016      	b.n	8002cde <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	021b      	lsls	r3, r3, #8
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	3201      	adds	r2, #1
 8002cba:	7812      	ldrb	r2, [r2, #0]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	617b      	str	r3, [r7, #20]
      break;
 8002cc0:	e00d      	b.n	8002cde <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	041a      	lsls	r2, r3, #16
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	021b      	lsls	r3, r3, #8
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	3202      	adds	r2, #2
 8002cd6:	7812      	ldrb	r2, [r2, #0]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	617b      	str	r3, [r7, #20]
      break;
 8002cdc:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61bb      	str	r3, [r7, #24]
 8002ce2:	e036      	b.n	8002d52 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8002ce4:	8a3a      	ldrh	r2, [r7, #16]
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	1ad2      	subs	r2, r2, r3
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
 8002cec:	4413      	add	r3, r2
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d012      	beq.n	8002d26 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	88fb      	ldrh	r3, [r7, #6]
 8002d06:	4413      	add	r3, r2
 8002d08:	b298      	uxth	r0, r3
 8002d0a:	4b1b      	ldr	r3, [pc, #108]	; (8002d78 <DrawChar+0x16c>)
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	491b      	ldr	r1, [pc, #108]	; (8002d7c <DrawChar+0x170>)
 8002d10:	4613      	mov	r3, r2
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	4413      	add	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	440b      	add	r3, r1
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	88bb      	ldrh	r3, [r7, #4]
 8002d1e:	4619      	mov	r1, r3
 8002d20:	f7ff ff4e 	bl	8002bc0 <BSP_LCD_DrawPixel>
 8002d24:	e012      	b.n	8002d4c <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	88fb      	ldrh	r3, [r7, #6]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	b298      	uxth	r0, r3
 8002d30:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <DrawChar+0x16c>)
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	4911      	ldr	r1, [pc, #68]	; (8002d7c <DrawChar+0x170>)
 8002d36:	4613      	mov	r3, r2
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	4413      	add	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	440b      	add	r3, r1
 8002d40:	3304      	adds	r3, #4
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	88bb      	ldrh	r3, [r7, #4]
 8002d46:	4619      	mov	r1, r3
 8002d48:	f7ff ff3a 	bl	8002bc0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	61bb      	str	r3, [r7, #24]
 8002d52:	8a3b      	ldrh	r3, [r7, #16]
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d3c4      	bcc.n	8002ce4 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8002d5a:	88bb      	ldrh	r3, [r7, #4]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	3301      	adds	r3, #1
 8002d64:	61fb      	str	r3, [r7, #28]
 8002d66:	8a7b      	ldrh	r3, [r7, #18]
 8002d68:	69fa      	ldr	r2, [r7, #28]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d384      	bcc.n	8002c78 <DrawChar+0x6c>
  }
}
 8002d6e:	bf00      	nop
 8002d70:	bf00      	nop
 8002d72:	3720      	adds	r7, #32
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	20000458 	.word	0x20000458
 8002d7c:	2000045c 	.word	0x2000045c

08002d80 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af02      	add	r7, sp, #8
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
 8002d8c:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8002d8e:	4b16      	ldr	r3, [pc, #88]	; (8002de8 <FillBuffer+0x68>)
 8002d90:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002d94:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002d96:	4b14      	ldr	r3, [pc, #80]	; (8002de8 <FillBuffer+0x68>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8002d9c:	4a12      	ldr	r2, [pc, #72]	; (8002de8 <FillBuffer+0x68>)
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8002da2:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <FillBuffer+0x68>)
 8002da4:	4a11      	ldr	r2, [pc, #68]	; (8002dec <FillBuffer+0x6c>)
 8002da6:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8002da8:	480f      	ldr	r0, [pc, #60]	; (8002de8 <FillBuffer+0x68>)
 8002daa:	f000 fd51 	bl	8003850 <HAL_DMA2D_Init>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d115      	bne.n	8002de0 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8002db4:	68f9      	ldr	r1, [r7, #12]
 8002db6:	480c      	ldr	r0, [pc, #48]	; (8002de8 <FillBuffer+0x68>)
 8002db8:	f000 feb2 	bl	8003b20 <HAL_DMA2D_ConfigLayer>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10e      	bne.n	8002de0 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	69f9      	ldr	r1, [r7, #28]
 8002dcc:	4806      	ldr	r0, [pc, #24]	; (8002de8 <FillBuffer+0x68>)
 8002dce:	f000 fd92 	bl	80038f6 <HAL_DMA2D_Start>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d103      	bne.n	8002de0 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8002dd8:	210a      	movs	r1, #10
 8002dda:	4803      	ldr	r0, [pc, #12]	; (8002de8 <FillBuffer+0x68>)
 8002ddc:	f000 fdb6 	bl	800394c <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002de0:	bf00      	nop
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	200003e8 	.word	0x200003e8
 8002dec:	4002b000 	.word	0x4002b000

08002df0 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002df4:	4b29      	ldr	r3, [pc, #164]	; (8002e9c <BSP_SDRAM_Init+0xac>)
 8002df6:	4a2a      	ldr	r2, [pc, #168]	; (8002ea0 <BSP_SDRAM_Init+0xb0>)
 8002df8:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8002dfa:	4b2a      	ldr	r3, [pc, #168]	; (8002ea4 <BSP_SDRAM_Init+0xb4>)
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002e00:	4b28      	ldr	r3, [pc, #160]	; (8002ea4 <BSP_SDRAM_Init+0xb4>)
 8002e02:	2207      	movs	r2, #7
 8002e04:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8002e06:	4b27      	ldr	r3, [pc, #156]	; (8002ea4 <BSP_SDRAM_Init+0xb4>)
 8002e08:	2204      	movs	r2, #4
 8002e0a:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8002e0c:	4b25      	ldr	r3, [pc, #148]	; (8002ea4 <BSP_SDRAM_Init+0xb4>)
 8002e0e:	2207      	movs	r2, #7
 8002e10:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8002e12:	4b24      	ldr	r3, [pc, #144]	; (8002ea4 <BSP_SDRAM_Init+0xb4>)
 8002e14:	2202      	movs	r2, #2
 8002e16:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8002e18:	4b22      	ldr	r3, [pc, #136]	; (8002ea4 <BSP_SDRAM_Init+0xb4>)
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8002e1e:	4b21      	ldr	r3, [pc, #132]	; (8002ea4 <BSP_SDRAM_Init+0xb4>)
 8002e20:	2202      	movs	r2, #2
 8002e22:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8002e24:	4b1d      	ldr	r3, [pc, #116]	; (8002e9c <BSP_SDRAM_Init+0xac>)
 8002e26:	2201      	movs	r2, #1
 8002e28:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002e2a:	4b1c      	ldr	r3, [pc, #112]	; (8002e9c <BSP_SDRAM_Init+0xac>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002e30:	4b1a      	ldr	r3, [pc, #104]	; (8002e9c <BSP_SDRAM_Init+0xac>)
 8002e32:	2204      	movs	r2, #4
 8002e34:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002e36:	4b19      	ldr	r3, [pc, #100]	; (8002e9c <BSP_SDRAM_Init+0xac>)
 8002e38:	2210      	movs	r2, #16
 8002e3a:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002e3c:	4b17      	ldr	r3, [pc, #92]	; (8002e9c <BSP_SDRAM_Init+0xac>)
 8002e3e:	2240      	movs	r2, #64	; 0x40
 8002e40:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8002e42:	4b16      	ldr	r3, [pc, #88]	; (8002e9c <BSP_SDRAM_Init+0xac>)
 8002e44:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002e48:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002e4a:	4b14      	ldr	r3, [pc, #80]	; (8002e9c <BSP_SDRAM_Init+0xac>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002e50:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <BSP_SDRAM_Init+0xac>)
 8002e52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e56:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002e58:	4b10      	ldr	r3, [pc, #64]	; (8002e9c <BSP_SDRAM_Init+0xac>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002e5e:	4b0f      	ldr	r3, [pc, #60]	; (8002e9c <BSP_SDRAM_Init+0xac>)
 8002e60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e64:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8002e66:	2100      	movs	r1, #0
 8002e68:	480c      	ldr	r0, [pc, #48]	; (8002e9c <BSP_SDRAM_Init+0xac>)
 8002e6a:	f000 f87f 	bl	8002f6c <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8002e6e:	490d      	ldr	r1, [pc, #52]	; (8002ea4 <BSP_SDRAM_Init+0xb4>)
 8002e70:	480a      	ldr	r0, [pc, #40]	; (8002e9c <BSP_SDRAM_Init+0xac>)
 8002e72:	f002 fba3 	bl	80055bc <HAL_SDRAM_Init>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002e7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ea8 <BSP_SDRAM_Init+0xb8>)
 8002e7e:	2201      	movs	r2, #1
 8002e80:	701a      	strb	r2, [r3, #0]
 8002e82:	e002      	b.n	8002e8a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002e84:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <BSP_SDRAM_Init+0xb8>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002e8a:	f240 506a 	movw	r0, #1386	; 0x56a
 8002e8e:	f000 f80d 	bl	8002eac <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002e92:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <BSP_SDRAM_Init+0xb8>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	20000478 	.word	0x20000478
 8002ea0:	a0000140 	.word	0xa0000140
 8002ea4:	200004ac 	.word	0x200004ac
 8002ea8:	20000084 	.word	0x20000084

08002eac <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8002eb8:	4b2a      	ldr	r3, [pc, #168]	; (8002f64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002eba:	2201      	movs	r2, #1
 8002ebc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002ebe:	4b29      	ldr	r3, [pc, #164]	; (8002f64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ec0:	2208      	movs	r2, #8
 8002ec2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002ec4:	4b27      	ldr	r3, [pc, #156]	; (8002f64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002eca:	4b26      	ldr	r3, [pc, #152]	; (8002f64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002ed0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ed4:	4923      	ldr	r1, [pc, #140]	; (8002f64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ed6:	4824      	ldr	r0, [pc, #144]	; (8002f68 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002ed8:	f002 fbae 	bl	8005638 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002edc:	2001      	movs	r0, #1
 8002ede:	f000 f9c3 	bl	8003268 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8002ee2:	4b20      	ldr	r3, [pc, #128]	; (8002f64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002ee8:	4b1e      	ldr	r3, [pc, #120]	; (8002f64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002eea:	2208      	movs	r2, #8
 8002eec:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002eee:	4b1d      	ldr	r3, [pc, #116]	; (8002f64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002ef4:	4b1b      	ldr	r3, [pc, #108]	; (8002f64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8002efa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002efe:	4919      	ldr	r1, [pc, #100]	; (8002f64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f00:	4819      	ldr	r0, [pc, #100]	; (8002f68 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002f02:	f002 fb99 	bl	8005638 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002f06:	4b17      	ldr	r3, [pc, #92]	; (8002f64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f08:	2203      	movs	r2, #3
 8002f0a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002f0c:	4b15      	ldr	r3, [pc, #84]	; (8002f64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f0e:	2208      	movs	r2, #8
 8002f10:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8002f12:	4b14      	ldr	r3, [pc, #80]	; (8002f64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f14:	2204      	movs	r2, #4
 8002f16:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002f18:	4b12      	ldr	r3, [pc, #72]	; (8002f64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002f1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f22:	4910      	ldr	r1, [pc, #64]	; (8002f64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f24:	4810      	ldr	r0, [pc, #64]	; (8002f68 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002f26:	f002 fb87 	bl	8005638 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8002f2a:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002f2e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002f30:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f32:	2204      	movs	r2, #4
 8002f34:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002f36:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f38:	2208      	movs	r2, #8
 8002f3a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002f3c:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f3e:	2201      	movs	r2, #1
 8002f40:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	4a07      	ldr	r2, [pc, #28]	; (8002f64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f46:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002f48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f4c:	4905      	ldr	r1, [pc, #20]	; (8002f64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f4e:	4806      	ldr	r0, [pc, #24]	; (8002f68 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002f50:	f002 fb72 	bl	8005638 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	4804      	ldr	r0, [pc, #16]	; (8002f68 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002f58:	f002 fba3 	bl	80056a2 <HAL_SDRAM_ProgramRefreshRate>
}
 8002f5c:	bf00      	nop
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	200004c8 	.word	0x200004c8
 8002f68:	20000478 	.word	0x20000478

08002f6c <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b090      	sub	sp, #64	; 0x40
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 80ec 	beq.w	8003156 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002f7e:	2300      	movs	r3, #0
 8002f80:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f82:	4b77      	ldr	r3, [pc, #476]	; (8003160 <BSP_SDRAM_MspInit+0x1f4>)
 8002f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f86:	4a76      	ldr	r2, [pc, #472]	; (8003160 <BSP_SDRAM_MspInit+0x1f4>)
 8002f88:	f043 0301 	orr.w	r3, r3, #1
 8002f8c:	6393      	str	r3, [r2, #56]	; 0x38
 8002f8e:	4b74      	ldr	r3, [pc, #464]	; (8003160 <BSP_SDRAM_MspInit+0x1f4>)
 8002f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f98:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f9e:	4b70      	ldr	r3, [pc, #448]	; (8003160 <BSP_SDRAM_MspInit+0x1f4>)
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa2:	4a6f      	ldr	r2, [pc, #444]	; (8003160 <BSP_SDRAM_MspInit+0x1f4>)
 8002fa4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8002faa:	4b6d      	ldr	r3, [pc, #436]	; (8003160 <BSP_SDRAM_MspInit+0x1f4>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	623b      	str	r3, [r7, #32]
 8002fba:	4b69      	ldr	r3, [pc, #420]	; (8003160 <BSP_SDRAM_MspInit+0x1f4>)
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	4a68      	ldr	r2, [pc, #416]	; (8003160 <BSP_SDRAM_MspInit+0x1f4>)
 8002fc0:	f043 0302 	orr.w	r3, r3, #2
 8002fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc6:	4b66      	ldr	r3, [pc, #408]	; (8003160 <BSP_SDRAM_MspInit+0x1f4>)
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	623b      	str	r3, [r7, #32]
 8002fd0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61fb      	str	r3, [r7, #28]
 8002fd6:	4b62      	ldr	r3, [pc, #392]	; (8003160 <BSP_SDRAM_MspInit+0x1f4>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	4a61      	ldr	r2, [pc, #388]	; (8003160 <BSP_SDRAM_MspInit+0x1f4>)
 8002fdc:	f043 0304 	orr.w	r3, r3, #4
 8002fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe2:	4b5f      	ldr	r3, [pc, #380]	; (8003160 <BSP_SDRAM_MspInit+0x1f4>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	f003 0304 	and.w	r3, r3, #4
 8002fea:	61fb      	str	r3, [r7, #28]
 8002fec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61bb      	str	r3, [r7, #24]
 8002ff2:	4b5b      	ldr	r3, [pc, #364]	; (8003160 <BSP_SDRAM_MspInit+0x1f4>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff6:	4a5a      	ldr	r2, [pc, #360]	; (8003160 <BSP_SDRAM_MspInit+0x1f4>)
 8002ff8:	f043 0308 	orr.w	r3, r3, #8
 8002ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ffe:	4b58      	ldr	r3, [pc, #352]	; (8003160 <BSP_SDRAM_MspInit+0x1f4>)
 8003000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	61bb      	str	r3, [r7, #24]
 8003008:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800300a:	2300      	movs	r3, #0
 800300c:	617b      	str	r3, [r7, #20]
 800300e:	4b54      	ldr	r3, [pc, #336]	; (8003160 <BSP_SDRAM_MspInit+0x1f4>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	4a53      	ldr	r2, [pc, #332]	; (8003160 <BSP_SDRAM_MspInit+0x1f4>)
 8003014:	f043 0310 	orr.w	r3, r3, #16
 8003018:	6313      	str	r3, [r2, #48]	; 0x30
 800301a:	4b51      	ldr	r3, [pc, #324]	; (8003160 <BSP_SDRAM_MspInit+0x1f4>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	f003 0310 	and.w	r3, r3, #16
 8003022:	617b      	str	r3, [r7, #20]
 8003024:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003026:	2300      	movs	r3, #0
 8003028:	613b      	str	r3, [r7, #16]
 800302a:	4b4d      	ldr	r3, [pc, #308]	; (8003160 <BSP_SDRAM_MspInit+0x1f4>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	4a4c      	ldr	r2, [pc, #304]	; (8003160 <BSP_SDRAM_MspInit+0x1f4>)
 8003030:	f043 0320 	orr.w	r3, r3, #32
 8003034:	6313      	str	r3, [r2, #48]	; 0x30
 8003036:	4b4a      	ldr	r3, [pc, #296]	; (8003160 <BSP_SDRAM_MspInit+0x1f4>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	f003 0320 	and.w	r3, r3, #32
 800303e:	613b      	str	r3, [r7, #16]
 8003040:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003042:	2300      	movs	r3, #0
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	4b46      	ldr	r3, [pc, #280]	; (8003160 <BSP_SDRAM_MspInit+0x1f4>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304a:	4a45      	ldr	r2, [pc, #276]	; (8003160 <BSP_SDRAM_MspInit+0x1f4>)
 800304c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003050:	6313      	str	r3, [r2, #48]	; 0x30
 8003052:	4b43      	ldr	r3, [pc, #268]	; (8003160 <BSP_SDRAM_MspInit+0x1f4>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305a:	60fb      	str	r3, [r7, #12]
 800305c:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800305e:	2302      	movs	r3, #2
 8003060:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003062:	2302      	movs	r3, #2
 8003064:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003066:	2300      	movs	r3, #0
 8003068:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 800306a:	230c      	movs	r3, #12
 800306c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800306e:	2360      	movs	r3, #96	; 0x60
 8003070:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8003072:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003076:	4619      	mov	r1, r3
 8003078:	483a      	ldr	r0, [pc, #232]	; (8003164 <BSP_SDRAM_MspInit+0x1f8>)
 800307a:	f000 fe7f 	bl	8003d7c <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 800307e:	2301      	movs	r3, #1
 8003080:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8003082:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003086:	4619      	mov	r1, r3
 8003088:	4837      	ldr	r0, [pc, #220]	; (8003168 <BSP_SDRAM_MspInit+0x1fc>)
 800308a:	f000 fe77 	bl	8003d7c <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 800308e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003092:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003094:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003098:	4619      	mov	r1, r3
 800309a:	4834      	ldr	r0, [pc, #208]	; (800316c <BSP_SDRAM_MspInit+0x200>)
 800309c:	f000 fe6e 	bl	8003d7c <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80030a0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80030a4:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80030a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030aa:	4619      	mov	r1, r3
 80030ac:	4830      	ldr	r0, [pc, #192]	; (8003170 <BSP_SDRAM_MspInit+0x204>)
 80030ae:	f000 fe65 	bl	8003d7c <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80030b2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80030b6:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80030b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030bc:	4619      	mov	r1, r3
 80030be:	482d      	ldr	r0, [pc, #180]	; (8003174 <BSP_SDRAM_MspInit+0x208>)
 80030c0:	f000 fe5c 	bl	8003d7c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80030c4:	f248 1333 	movw	r3, #33075	; 0x8133
 80030c8:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80030ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030ce:	4619      	mov	r1, r3
 80030d0:	4829      	ldr	r0, [pc, #164]	; (8003178 <BSP_SDRAM_MspInit+0x20c>)
 80030d2:	f000 fe53 	bl	8003d7c <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80030d6:	4b29      	ldr	r3, [pc, #164]	; (800317c <BSP_SDRAM_MspInit+0x210>)
 80030d8:	2200      	movs	r2, #0
 80030da:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80030dc:	4b27      	ldr	r3, [pc, #156]	; (800317c <BSP_SDRAM_MspInit+0x210>)
 80030de:	2280      	movs	r2, #128	; 0x80
 80030e0:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80030e2:	4b26      	ldr	r3, [pc, #152]	; (800317c <BSP_SDRAM_MspInit+0x210>)
 80030e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030e8:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80030ea:	4b24      	ldr	r3, [pc, #144]	; (800317c <BSP_SDRAM_MspInit+0x210>)
 80030ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030f0:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80030f2:	4b22      	ldr	r3, [pc, #136]	; (800317c <BSP_SDRAM_MspInit+0x210>)
 80030f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030f8:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80030fa:	4b20      	ldr	r3, [pc, #128]	; (800317c <BSP_SDRAM_MspInit+0x210>)
 80030fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003100:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8003102:	4b1e      	ldr	r3, [pc, #120]	; (800317c <BSP_SDRAM_MspInit+0x210>)
 8003104:	2200      	movs	r2, #0
 8003106:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003108:	4b1c      	ldr	r3, [pc, #112]	; (800317c <BSP_SDRAM_MspInit+0x210>)
 800310a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800310e:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003110:	4b1a      	ldr	r3, [pc, #104]	; (800317c <BSP_SDRAM_MspInit+0x210>)
 8003112:	2200      	movs	r2, #0
 8003114:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003116:	4b19      	ldr	r3, [pc, #100]	; (800317c <BSP_SDRAM_MspInit+0x210>)
 8003118:	2203      	movs	r2, #3
 800311a:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800311c:	4b17      	ldr	r3, [pc, #92]	; (800317c <BSP_SDRAM_MspInit+0x210>)
 800311e:	2200      	movs	r2, #0
 8003120:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003122:	4b16      	ldr	r3, [pc, #88]	; (800317c <BSP_SDRAM_MspInit+0x210>)
 8003124:	2200      	movs	r2, #0
 8003126:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003128:	4b14      	ldr	r3, [pc, #80]	; (800317c <BSP_SDRAM_MspInit+0x210>)
 800312a:	4a15      	ldr	r2, [pc, #84]	; (8003180 <BSP_SDRAM_MspInit+0x214>)
 800312c:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a12      	ldr	r2, [pc, #72]	; (800317c <BSP_SDRAM_MspInit+0x210>)
 8003132:	631a      	str	r2, [r3, #48]	; 0x30
 8003134:	4a11      	ldr	r2, [pc, #68]	; (800317c <BSP_SDRAM_MspInit+0x210>)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 800313a:	4810      	ldr	r0, [pc, #64]	; (800317c <BSP_SDRAM_MspInit+0x210>)
 800313c:	f000 fa78 	bl	8003630 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003140:	480e      	ldr	r0, [pc, #56]	; (800317c <BSP_SDRAM_MspInit+0x210>)
 8003142:	f000 f9c7 	bl	80034d4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003146:	2200      	movs	r2, #0
 8003148:	210f      	movs	r1, #15
 800314a:	2038      	movs	r0, #56	; 0x38
 800314c:	f000 f98b 	bl	8003466 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003150:	2038      	movs	r0, #56	; 0x38
 8003152:	f000 f9a4 	bl	800349e <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8003156:	bf00      	nop
 8003158:	3740      	adds	r7, #64	; 0x40
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40023800 	.word	0x40023800
 8003164:	40020400 	.word	0x40020400
 8003168:	40020800 	.word	0x40020800
 800316c:	40020c00 	.word	0x40020c00
 8003170:	40021000 	.word	0x40021000
 8003174:	40021400 	.word	0x40021400
 8003178:	40021800 	.word	0x40021800
 800317c:	200004d8 	.word	0x200004d8
 8003180:	40026410 	.word	0x40026410

08003184 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003188:	4b0e      	ldr	r3, [pc, #56]	; (80031c4 <HAL_Init+0x40>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a0d      	ldr	r2, [pc, #52]	; (80031c4 <HAL_Init+0x40>)
 800318e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003192:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003194:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <HAL_Init+0x40>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a0a      	ldr	r2, [pc, #40]	; (80031c4 <HAL_Init+0x40>)
 800319a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800319e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031a0:	4b08      	ldr	r3, [pc, #32]	; (80031c4 <HAL_Init+0x40>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a07      	ldr	r2, [pc, #28]	; (80031c4 <HAL_Init+0x40>)
 80031a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031ac:	2003      	movs	r0, #3
 80031ae:	f000 f94f 	bl	8003450 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031b2:	200f      	movs	r0, #15
 80031b4:	f000 f808 	bl	80031c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031b8:	f7fe f882 	bl	80012c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	40023c00 	.word	0x40023c00

080031c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031d0:	4b12      	ldr	r3, [pc, #72]	; (800321c <HAL_InitTick+0x54>)
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	4b12      	ldr	r3, [pc, #72]	; (8003220 <HAL_InitTick+0x58>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	4619      	mov	r1, r3
 80031da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031de:	fbb3 f3f1 	udiv	r3, r3, r1
 80031e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 f967 	bl	80034ba <HAL_SYSTICK_Config>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e00e      	b.n	8003214 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b0f      	cmp	r3, #15
 80031fa:	d80a      	bhi.n	8003212 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031fc:	2200      	movs	r2, #0
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	f04f 30ff 	mov.w	r0, #4294967295
 8003204:	f000 f92f 	bl	8003466 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003208:	4a06      	ldr	r2, [pc, #24]	; (8003224 <HAL_InitTick+0x5c>)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800320e:	2300      	movs	r3, #0
 8003210:	e000      	b.n	8003214 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
}
 8003214:	4618      	mov	r0, r3
 8003216:	3708      	adds	r7, #8
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	20000000 	.word	0x20000000
 8003220:	2000008c 	.word	0x2000008c
 8003224:	20000088 	.word	0x20000088

08003228 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800322c:	4b06      	ldr	r3, [pc, #24]	; (8003248 <HAL_IncTick+0x20>)
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	461a      	mov	r2, r3
 8003232:	4b06      	ldr	r3, [pc, #24]	; (800324c <HAL_IncTick+0x24>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4413      	add	r3, r2
 8003238:	4a04      	ldr	r2, [pc, #16]	; (800324c <HAL_IncTick+0x24>)
 800323a:	6013      	str	r3, [r2, #0]
}
 800323c:	bf00      	nop
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	2000008c 	.word	0x2000008c
 800324c:	20000538 	.word	0x20000538

08003250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  return uwTick;
 8003254:	4b03      	ldr	r3, [pc, #12]	; (8003264 <HAL_GetTick+0x14>)
 8003256:	681b      	ldr	r3, [r3, #0]
}
 8003258:	4618      	mov	r0, r3
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	20000538 	.word	0x20000538

08003268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003270:	f7ff ffee 	bl	8003250 <HAL_GetTick>
 8003274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003280:	d005      	beq.n	800328e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003282:	4b0a      	ldr	r3, [pc, #40]	; (80032ac <HAL_Delay+0x44>)
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	461a      	mov	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4413      	add	r3, r2
 800328c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800328e:	bf00      	nop
 8003290:	f7ff ffde 	bl	8003250 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	429a      	cmp	r2, r3
 800329e:	d8f7      	bhi.n	8003290 <HAL_Delay+0x28>
  {
  }
}
 80032a0:	bf00      	nop
 80032a2:	bf00      	nop
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	2000008c 	.word	0x2000008c

080032b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f003 0307 	and.w	r3, r3, #7
 80032be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032c0:	4b0c      	ldr	r3, [pc, #48]	; (80032f4 <__NVIC_SetPriorityGrouping+0x44>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032cc:	4013      	ands	r3, r2
 80032ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032e2:	4a04      	ldr	r2, [pc, #16]	; (80032f4 <__NVIC_SetPriorityGrouping+0x44>)
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	60d3      	str	r3, [r2, #12]
}
 80032e8:	bf00      	nop
 80032ea:	3714      	adds	r7, #20
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	e000ed00 	.word	0xe000ed00

080032f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032fc:	4b04      	ldr	r3, [pc, #16]	; (8003310 <__NVIC_GetPriorityGrouping+0x18>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	0a1b      	lsrs	r3, r3, #8
 8003302:	f003 0307 	and.w	r3, r3, #7
}
 8003306:	4618      	mov	r0, r3
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	e000ed00 	.word	0xe000ed00

08003314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	4603      	mov	r3, r0
 800331c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800331e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003322:	2b00      	cmp	r3, #0
 8003324:	db0b      	blt.n	800333e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003326:	79fb      	ldrb	r3, [r7, #7]
 8003328:	f003 021f 	and.w	r2, r3, #31
 800332c:	4907      	ldr	r1, [pc, #28]	; (800334c <__NVIC_EnableIRQ+0x38>)
 800332e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003332:	095b      	lsrs	r3, r3, #5
 8003334:	2001      	movs	r0, #1
 8003336:	fa00 f202 	lsl.w	r2, r0, r2
 800333a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	e000e100 	.word	0xe000e100

08003350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	4603      	mov	r3, r0
 8003358:	6039      	str	r1, [r7, #0]
 800335a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800335c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003360:	2b00      	cmp	r3, #0
 8003362:	db0a      	blt.n	800337a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	b2da      	uxtb	r2, r3
 8003368:	490c      	ldr	r1, [pc, #48]	; (800339c <__NVIC_SetPriority+0x4c>)
 800336a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336e:	0112      	lsls	r2, r2, #4
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	440b      	add	r3, r1
 8003374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003378:	e00a      	b.n	8003390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	b2da      	uxtb	r2, r3
 800337e:	4908      	ldr	r1, [pc, #32]	; (80033a0 <__NVIC_SetPriority+0x50>)
 8003380:	79fb      	ldrb	r3, [r7, #7]
 8003382:	f003 030f 	and.w	r3, r3, #15
 8003386:	3b04      	subs	r3, #4
 8003388:	0112      	lsls	r2, r2, #4
 800338a:	b2d2      	uxtb	r2, r2
 800338c:	440b      	add	r3, r1
 800338e:	761a      	strb	r2, [r3, #24]
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	e000e100 	.word	0xe000e100
 80033a0:	e000ed00 	.word	0xe000ed00

080033a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b089      	sub	sp, #36	; 0x24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	f1c3 0307 	rsb	r3, r3, #7
 80033be:	2b04      	cmp	r3, #4
 80033c0:	bf28      	it	cs
 80033c2:	2304      	movcs	r3, #4
 80033c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	3304      	adds	r3, #4
 80033ca:	2b06      	cmp	r3, #6
 80033cc:	d902      	bls.n	80033d4 <NVIC_EncodePriority+0x30>
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	3b03      	subs	r3, #3
 80033d2:	e000      	b.n	80033d6 <NVIC_EncodePriority+0x32>
 80033d4:	2300      	movs	r3, #0
 80033d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033d8:	f04f 32ff 	mov.w	r2, #4294967295
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	43da      	mvns	r2, r3
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	401a      	ands	r2, r3
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033ec:	f04f 31ff 	mov.w	r1, #4294967295
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	fa01 f303 	lsl.w	r3, r1, r3
 80033f6:	43d9      	mvns	r1, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033fc:	4313      	orrs	r3, r2
         );
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3724      	adds	r7, #36	; 0x24
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
	...

0800340c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3b01      	subs	r3, #1
 8003418:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800341c:	d301      	bcc.n	8003422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800341e:	2301      	movs	r3, #1
 8003420:	e00f      	b.n	8003442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003422:	4a0a      	ldr	r2, [pc, #40]	; (800344c <SysTick_Config+0x40>)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3b01      	subs	r3, #1
 8003428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800342a:	210f      	movs	r1, #15
 800342c:	f04f 30ff 	mov.w	r0, #4294967295
 8003430:	f7ff ff8e 	bl	8003350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003434:	4b05      	ldr	r3, [pc, #20]	; (800344c <SysTick_Config+0x40>)
 8003436:	2200      	movs	r2, #0
 8003438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800343a:	4b04      	ldr	r3, [pc, #16]	; (800344c <SysTick_Config+0x40>)
 800343c:	2207      	movs	r2, #7
 800343e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	e000e010 	.word	0xe000e010

08003450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7ff ff29 	bl	80032b0 <__NVIC_SetPriorityGrouping>
}
 800345e:	bf00      	nop
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003466:	b580      	push	{r7, lr}
 8003468:	b086      	sub	sp, #24
 800346a:	af00      	add	r7, sp, #0
 800346c:	4603      	mov	r3, r0
 800346e:	60b9      	str	r1, [r7, #8]
 8003470:	607a      	str	r2, [r7, #4]
 8003472:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003474:	2300      	movs	r3, #0
 8003476:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003478:	f7ff ff3e 	bl	80032f8 <__NVIC_GetPriorityGrouping>
 800347c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	68b9      	ldr	r1, [r7, #8]
 8003482:	6978      	ldr	r0, [r7, #20]
 8003484:	f7ff ff8e 	bl	80033a4 <NVIC_EncodePriority>
 8003488:	4602      	mov	r2, r0
 800348a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800348e:	4611      	mov	r1, r2
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff ff5d 	bl	8003350 <__NVIC_SetPriority>
}
 8003496:	bf00      	nop
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b082      	sub	sp, #8
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	4603      	mov	r3, r0
 80034a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff ff31 	bl	8003314 <__NVIC_EnableIRQ>
}
 80034b2:	bf00      	nop
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b082      	sub	sp, #8
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7ff ffa2 	bl	800340c <SysTick_Config>
 80034c8:	4603      	mov	r3, r0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
	...

080034d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034dc:	2300      	movs	r3, #0
 80034de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80034e0:	f7ff feb6 	bl	8003250 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d101      	bne.n	80034f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e099      	b.n	8003624 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2202      	movs	r2, #2
 80034f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 0201 	bic.w	r2, r2, #1
 800350e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003510:	e00f      	b.n	8003532 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003512:	f7ff fe9d 	bl	8003250 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b05      	cmp	r3, #5
 800351e:	d908      	bls.n	8003532 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2220      	movs	r2, #32
 8003524:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2203      	movs	r2, #3
 800352a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e078      	b.n	8003624 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1e8      	bne.n	8003512 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	4b38      	ldr	r3, [pc, #224]	; (800362c <HAL_DMA_Init+0x158>)
 800354c:	4013      	ands	r3, r2
 800354e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800355e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800356a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003576:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	4313      	orrs	r3, r2
 8003582:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	2b04      	cmp	r3, #4
 800358a:	d107      	bne.n	800359c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003594:	4313      	orrs	r3, r2
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	4313      	orrs	r3, r2
 800359a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f023 0307 	bic.w	r3, r3, #7
 80035b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	d117      	bne.n	80035f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00e      	beq.n	80035f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 f8bd 	bl	8003758 <DMA_CheckFifoParam>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d008      	beq.n	80035f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2240      	movs	r2, #64	; 0x40
 80035e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80035f2:	2301      	movs	r3, #1
 80035f4:	e016      	b.n	8003624 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f874 	bl	80036ec <DMA_CalcBaseAndBitshift>
 8003604:	4603      	mov	r3, r0
 8003606:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360c:	223f      	movs	r2, #63	; 0x3f
 800360e:	409a      	lsls	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3718      	adds	r7, #24
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	f010803f 	.word	0xf010803f

08003630 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e050      	b.n	80036e4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d101      	bne.n	8003652 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800364e:	2302      	movs	r3, #2
 8003650:	e048      	b.n	80036e4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0201 	bic.w	r2, r2, #1
 8003660:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2200      	movs	r2, #0
 8003668:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2200      	movs	r2, #0
 8003670:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2200      	movs	r2, #0
 8003678:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2200      	movs	r2, #0
 8003680:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2200      	movs	r2, #0
 8003688:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2221      	movs	r2, #33	; 0x21
 8003690:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f82a 	bl	80036ec <DMA_CalcBaseAndBitshift>
 8003698:	4603      	mov	r3, r0
 800369a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c4:	223f      	movs	r2, #63	; 0x3f
 80036c6:	409a      	lsls	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	3b10      	subs	r3, #16
 80036fc:	4a14      	ldr	r2, [pc, #80]	; (8003750 <DMA_CalcBaseAndBitshift+0x64>)
 80036fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003702:	091b      	lsrs	r3, r3, #4
 8003704:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003706:	4a13      	ldr	r2, [pc, #76]	; (8003754 <DMA_CalcBaseAndBitshift+0x68>)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4413      	add	r3, r2
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	461a      	mov	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2b03      	cmp	r3, #3
 8003718:	d909      	bls.n	800372e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003722:	f023 0303 	bic.w	r3, r3, #3
 8003726:	1d1a      	adds	r2, r3, #4
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	659a      	str	r2, [r3, #88]	; 0x58
 800372c:	e007      	b.n	800373e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003736:	f023 0303 	bic.w	r3, r3, #3
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003742:	4618      	mov	r0, r3
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	aaaaaaab 	.word	0xaaaaaaab
 8003754:	0800d518 	.word	0x0800d518

08003758 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003760:	2300      	movs	r3, #0
 8003762:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003768:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d11f      	bne.n	80037b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	2b03      	cmp	r3, #3
 8003776:	d856      	bhi.n	8003826 <DMA_CheckFifoParam+0xce>
 8003778:	a201      	add	r2, pc, #4	; (adr r2, 8003780 <DMA_CheckFifoParam+0x28>)
 800377a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377e:	bf00      	nop
 8003780:	08003791 	.word	0x08003791
 8003784:	080037a3 	.word	0x080037a3
 8003788:	08003791 	.word	0x08003791
 800378c:	08003827 	.word	0x08003827
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d046      	beq.n	800382a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037a0:	e043      	b.n	800382a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037aa:	d140      	bne.n	800382e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037b0:	e03d      	b.n	800382e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ba:	d121      	bne.n	8003800 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2b03      	cmp	r3, #3
 80037c0:	d837      	bhi.n	8003832 <DMA_CheckFifoParam+0xda>
 80037c2:	a201      	add	r2, pc, #4	; (adr r2, 80037c8 <DMA_CheckFifoParam+0x70>)
 80037c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c8:	080037d9 	.word	0x080037d9
 80037cc:	080037df 	.word	0x080037df
 80037d0:	080037d9 	.word	0x080037d9
 80037d4:	080037f1 	.word	0x080037f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	73fb      	strb	r3, [r7, #15]
      break;
 80037dc:	e030      	b.n	8003840 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d025      	beq.n	8003836 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ee:	e022      	b.n	8003836 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037f8:	d11f      	bne.n	800383a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037fe:	e01c      	b.n	800383a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	2b02      	cmp	r3, #2
 8003804:	d903      	bls.n	800380e <DMA_CheckFifoParam+0xb6>
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	2b03      	cmp	r3, #3
 800380a:	d003      	beq.n	8003814 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800380c:	e018      	b.n	8003840 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	73fb      	strb	r3, [r7, #15]
      break;
 8003812:	e015      	b.n	8003840 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003818:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00e      	beq.n	800383e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	73fb      	strb	r3, [r7, #15]
      break;
 8003824:	e00b      	b.n	800383e <DMA_CheckFifoParam+0xe6>
      break;
 8003826:	bf00      	nop
 8003828:	e00a      	b.n	8003840 <DMA_CheckFifoParam+0xe8>
      break;
 800382a:	bf00      	nop
 800382c:	e008      	b.n	8003840 <DMA_CheckFifoParam+0xe8>
      break;
 800382e:	bf00      	nop
 8003830:	e006      	b.n	8003840 <DMA_CheckFifoParam+0xe8>
      break;
 8003832:	bf00      	nop
 8003834:	e004      	b.n	8003840 <DMA_CheckFifoParam+0xe8>
      break;
 8003836:	bf00      	nop
 8003838:	e002      	b.n	8003840 <DMA_CheckFifoParam+0xe8>
      break;   
 800383a:	bf00      	nop
 800383c:	e000      	b.n	8003840 <DMA_CheckFifoParam+0xe8>
      break;
 800383e:	bf00      	nop
    }
  } 
  
  return status; 
 8003840:	7bfb      	ldrb	r3, [r7, #15]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop

08003850 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e03b      	b.n	80038da <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d106      	bne.n	800387c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f833 	bl	80038e2 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a0:	f023 0107 	bic.w	r1, r3, #7
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80038ba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	68d1      	ldr	r1, [r2, #12]
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6812      	ldr	r2, [r2, #0]
 80038c6:	430b      	orrs	r3, r1
 80038c8:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b083      	sub	sp, #12
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b086      	sub	sp, #24
 80038fa:	af02      	add	r7, sp, #8
 80038fc:	60f8      	str	r0, [r7, #12]
 80038fe:	60b9      	str	r1, [r7, #8]
 8003900:	607a      	str	r2, [r7, #4]
 8003902:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800390a:	2b01      	cmp	r3, #1
 800390c:	d101      	bne.n	8003912 <HAL_DMA2D_Start+0x1c>
 800390e:	2302      	movs	r3, #2
 8003910:	e018      	b.n	8003944 <HAL_DMA2D_Start+0x4e>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2202      	movs	r2, #2
 800391e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	68b9      	ldr	r1, [r7, #8]
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f000 f989 	bl	8003c44 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f042 0201 	orr.w	r2, r2, #1
 8003940:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003956:	2300      	movs	r3, #0
 8003958:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	2b00      	cmp	r3, #0
 8003966:	d056      	beq.n	8003a16 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003968:	f7ff fc72 	bl	8003250 <HAL_GetTick>
 800396c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800396e:	e04b      	b.n	8003a08 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800397e:	2b00      	cmp	r3, #0
 8003980:	d023      	beq.n	80039ca <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f003 0320 	and.w	r3, r3, #32
 8003988:	2b00      	cmp	r3, #0
 800398a:	d005      	beq.n	8003998 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003990:	f043 0202 	orr.w	r2, r3, #2
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d005      	beq.n	80039ae <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a6:	f043 0201 	orr.w	r2, r3, #1
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2221      	movs	r2, #33	; 0x21
 80039b4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2204      	movs	r2, #4
 80039ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e0a5      	b.n	8003b16 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d0:	d01a      	beq.n	8003a08 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80039d2:	f7ff fc3d 	bl	8003250 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d302      	bcc.n	80039e8 <HAL_DMA2D_PollForTransfer+0x9c>
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10f      	bne.n	8003a08 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ec:	f043 0220 	orr.w	r2, r3, #32
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2203      	movs	r2, #3
 80039f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e086      	b.n	8003b16 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0ac      	beq.n	8003970 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	f003 0320 	and.w	r3, r3, #32
 8003a20:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	f003 0320 	and.w	r3, r3, #32
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d061      	beq.n	8003afc <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a38:	f7ff fc0a 	bl	8003250 <HAL_GetTick>
 8003a3c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003a3e:	e056      	b.n	8003aee <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d02e      	beq.n	8003ab0 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f003 0308 	and.w	r3, r3, #8
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d005      	beq.n	8003a68 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a60:	f043 0204 	orr.w	r2, r3, #4
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f003 0320 	and.w	r3, r3, #32
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d005      	beq.n	8003a7e <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a76:	f043 0202 	orr.w	r2, r3, #2
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8c:	f043 0201 	orr.w	r2, r3, #1
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2229      	movs	r2, #41	; 0x29
 8003a9a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2204      	movs	r2, #4
 8003aa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e032      	b.n	8003b16 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab6:	d01a      	beq.n	8003aee <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ab8:	f7ff fbca 	bl	8003250 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d302      	bcc.n	8003ace <HAL_DMA2D_PollForTransfer+0x182>
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10f      	bne.n	8003aee <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad2:	f043 0220 	orr.w	r2, r3, #32
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2203      	movs	r2, #3
 8003ade:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e013      	b.n	8003b16 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f003 0310 	and.w	r3, r3, #16
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0a1      	beq.n	8003a40 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2212      	movs	r2, #18
 8003b02:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3718      	adds	r7, #24
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
	...

08003b20 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b087      	sub	sp, #28
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d101      	bne.n	8003b40 <HAL_DMA2D_ConfigLayer+0x20>
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	e079      	b.n	8003c34 <HAL_DMA2D_ConfigLayer+0x114>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	011b      	lsls	r3, r3, #4
 8003b54:	3318      	adds	r3, #24
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	4413      	add	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	041b      	lsls	r3, r3, #16
 8003b66:	4313      	orrs	r3, r2
 8003b68:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003b6a:	4b35      	ldr	r3, [pc, #212]	; (8003c40 <HAL_DMA2D_ConfigLayer+0x120>)
 8003b6c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2b0a      	cmp	r3, #10
 8003b74:	d003      	beq.n	8003b7e <HAL_DMA2D_ConfigLayer+0x5e>
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2b09      	cmp	r3, #9
 8003b7c:	d107      	bne.n	8003b8e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	617b      	str	r3, [r7, #20]
 8003b8c:	e005      	b.n	8003b9a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	061b      	lsls	r3, r3, #24
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d120      	bne.n	8003be2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	ea02 0103 	and.w	r1, r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	6812      	ldr	r2, [r2, #0]
 8003bc0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	2b0a      	cmp	r3, #10
 8003bc8:	d003      	beq.n	8003bd2 <HAL_DMA2D_ConfigLayer+0xb2>
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2b09      	cmp	r3, #9
 8003bd0:	d127      	bne.n	8003c22 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	68da      	ldr	r2, [r3, #12]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003bde:	629a      	str	r2, [r3, #40]	; 0x28
 8003be0:	e01f      	b.n	8003c22 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	69da      	ldr	r2, [r3, #28]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	43db      	mvns	r3, r3
 8003bec:	ea02 0103 	and.w	r1, r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	6812      	ldr	r2, [r2, #0]
 8003c02:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	2b0a      	cmp	r3, #10
 8003c0a:	d003      	beq.n	8003c14 <HAL_DMA2D_ConfigLayer+0xf4>
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	2b09      	cmp	r3, #9
 8003c12:	d106      	bne.n	8003c22 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	68da      	ldr	r2, [r3, #12]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003c20:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	371c      	adds	r7, #28
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	ff03000f 	.word	0xff03000f

08003c44 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b08b      	sub	sp, #44	; 0x2c
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
 8003c50:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c58:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	041a      	lsls	r2, r3, #16
 8003c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c62:	431a      	orrs	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c7c:	d174      	bne.n	8003d68 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003c84:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003c8c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003c94:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d108      	bne.n	8003cb6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8003cb4:	e053      	b.n	8003d5e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d106      	bne.n	8003ccc <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cca:	e048      	b.n	8003d5e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d111      	bne.n	8003cf8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	0cdb      	lsrs	r3, r3, #19
 8003cd8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	0a9b      	lsrs	r3, r3, #10
 8003cde:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	08db      	lsrs	r3, r3, #3
 8003ce4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	015a      	lsls	r2, r3, #5
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	02db      	lsls	r3, r3, #11
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf6:	e032      	b.n	8003d5e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	2b03      	cmp	r3, #3
 8003cfe:	d117      	bne.n	8003d30 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	0fdb      	lsrs	r3, r3, #31
 8003d04:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	0cdb      	lsrs	r3, r3, #19
 8003d0a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	0adb      	lsrs	r3, r3, #11
 8003d10:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	08db      	lsrs	r3, r3, #3
 8003d16:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	015a      	lsls	r2, r3, #5
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	029b      	lsls	r3, r3, #10
 8003d20:	431a      	orrs	r2, r3
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	03db      	lsls	r3, r3, #15
 8003d26:	4313      	orrs	r3, r2
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d2e:	e016      	b.n	8003d5e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003d30:	6a3b      	ldr	r3, [r7, #32]
 8003d32:	0f1b      	lsrs	r3, r3, #28
 8003d34:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	0d1b      	lsrs	r3, r3, #20
 8003d3a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	0b1b      	lsrs	r3, r3, #12
 8003d40:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	091b      	lsrs	r3, r3, #4
 8003d46:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	011a      	lsls	r2, r3, #4
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	021b      	lsls	r3, r3, #8
 8003d50:	431a      	orrs	r2, r3
 8003d52:	6a3b      	ldr	r3, [r7, #32]
 8003d54:	031b      	lsls	r3, r3, #12
 8003d56:	4313      	orrs	r3, r2
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d64:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003d66:	e003      	b.n	8003d70 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68ba      	ldr	r2, [r7, #8]
 8003d6e:	60da      	str	r2, [r3, #12]
}
 8003d70:	bf00      	nop
 8003d72:	372c      	adds	r7, #44	; 0x2c
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b089      	sub	sp, #36	; 0x24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d86:	2300      	movs	r3, #0
 8003d88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d92:	2300      	movs	r3, #0
 8003d94:	61fb      	str	r3, [r7, #28]
 8003d96:	e177      	b.n	8004088 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d98:	2201      	movs	r2, #1
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	4013      	ands	r3, r2
 8003daa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	f040 8166 	bne.w	8004082 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f003 0303 	and.w	r3, r3, #3
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d005      	beq.n	8003dce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d130      	bne.n	8003e30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	2203      	movs	r2, #3
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	43db      	mvns	r3, r3
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	4013      	ands	r3, r2
 8003de4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	68da      	ldr	r2, [r3, #12]
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	fa02 f303 	lsl.w	r3, r2, r3
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e04:	2201      	movs	r2, #1
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	43db      	mvns	r3, r3
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	4013      	ands	r3, r2
 8003e12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	091b      	lsrs	r3, r3, #4
 8003e1a:	f003 0201 	and.w	r2, r3, #1
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	fa02 f303 	lsl.w	r3, r2, r3
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f003 0303 	and.w	r3, r3, #3
 8003e38:	2b03      	cmp	r3, #3
 8003e3a:	d017      	beq.n	8003e6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	2203      	movs	r2, #3
 8003e48:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4c:	43db      	mvns	r3, r3
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	4013      	ands	r3, r2
 8003e52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f003 0303 	and.w	r3, r3, #3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d123      	bne.n	8003ec0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	08da      	lsrs	r2, r3, #3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	3208      	adds	r2, #8
 8003e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	220f      	movs	r2, #15
 8003e90:	fa02 f303 	lsl.w	r3, r2, r3
 8003e94:	43db      	mvns	r3, r3
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	691a      	ldr	r2, [r3, #16]
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	f003 0307 	and.w	r3, r3, #7
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	08da      	lsrs	r2, r3, #3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	3208      	adds	r2, #8
 8003eba:	69b9      	ldr	r1, [r7, #24]
 8003ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	2203      	movs	r2, #3
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f003 0203 	and.w	r2, r3, #3
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f000 80c0 	beq.w	8004082 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f02:	2300      	movs	r3, #0
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	4b66      	ldr	r3, [pc, #408]	; (80040a0 <HAL_GPIO_Init+0x324>)
 8003f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0a:	4a65      	ldr	r2, [pc, #404]	; (80040a0 <HAL_GPIO_Init+0x324>)
 8003f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f10:	6453      	str	r3, [r2, #68]	; 0x44
 8003f12:	4b63      	ldr	r3, [pc, #396]	; (80040a0 <HAL_GPIO_Init+0x324>)
 8003f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f1a:	60fb      	str	r3, [r7, #12]
 8003f1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f1e:	4a61      	ldr	r2, [pc, #388]	; (80040a4 <HAL_GPIO_Init+0x328>)
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	089b      	lsrs	r3, r3, #2
 8003f24:	3302      	adds	r3, #2
 8003f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	f003 0303 	and.w	r3, r3, #3
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	220f      	movs	r2, #15
 8003f36:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3a:	43db      	mvns	r3, r3
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a58      	ldr	r2, [pc, #352]	; (80040a8 <HAL_GPIO_Init+0x32c>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d037      	beq.n	8003fba <HAL_GPIO_Init+0x23e>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a57      	ldr	r2, [pc, #348]	; (80040ac <HAL_GPIO_Init+0x330>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d031      	beq.n	8003fb6 <HAL_GPIO_Init+0x23a>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a56      	ldr	r2, [pc, #344]	; (80040b0 <HAL_GPIO_Init+0x334>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d02b      	beq.n	8003fb2 <HAL_GPIO_Init+0x236>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a55      	ldr	r2, [pc, #340]	; (80040b4 <HAL_GPIO_Init+0x338>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d025      	beq.n	8003fae <HAL_GPIO_Init+0x232>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a54      	ldr	r2, [pc, #336]	; (80040b8 <HAL_GPIO_Init+0x33c>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d01f      	beq.n	8003faa <HAL_GPIO_Init+0x22e>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a53      	ldr	r2, [pc, #332]	; (80040bc <HAL_GPIO_Init+0x340>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d019      	beq.n	8003fa6 <HAL_GPIO_Init+0x22a>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a52      	ldr	r2, [pc, #328]	; (80040c0 <HAL_GPIO_Init+0x344>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d013      	beq.n	8003fa2 <HAL_GPIO_Init+0x226>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a51      	ldr	r2, [pc, #324]	; (80040c4 <HAL_GPIO_Init+0x348>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d00d      	beq.n	8003f9e <HAL_GPIO_Init+0x222>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a50      	ldr	r2, [pc, #320]	; (80040c8 <HAL_GPIO_Init+0x34c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d007      	beq.n	8003f9a <HAL_GPIO_Init+0x21e>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a4f      	ldr	r2, [pc, #316]	; (80040cc <HAL_GPIO_Init+0x350>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d101      	bne.n	8003f96 <HAL_GPIO_Init+0x21a>
 8003f92:	2309      	movs	r3, #9
 8003f94:	e012      	b.n	8003fbc <HAL_GPIO_Init+0x240>
 8003f96:	230a      	movs	r3, #10
 8003f98:	e010      	b.n	8003fbc <HAL_GPIO_Init+0x240>
 8003f9a:	2308      	movs	r3, #8
 8003f9c:	e00e      	b.n	8003fbc <HAL_GPIO_Init+0x240>
 8003f9e:	2307      	movs	r3, #7
 8003fa0:	e00c      	b.n	8003fbc <HAL_GPIO_Init+0x240>
 8003fa2:	2306      	movs	r3, #6
 8003fa4:	e00a      	b.n	8003fbc <HAL_GPIO_Init+0x240>
 8003fa6:	2305      	movs	r3, #5
 8003fa8:	e008      	b.n	8003fbc <HAL_GPIO_Init+0x240>
 8003faa:	2304      	movs	r3, #4
 8003fac:	e006      	b.n	8003fbc <HAL_GPIO_Init+0x240>
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e004      	b.n	8003fbc <HAL_GPIO_Init+0x240>
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	e002      	b.n	8003fbc <HAL_GPIO_Init+0x240>
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e000      	b.n	8003fbc <HAL_GPIO_Init+0x240>
 8003fba:	2300      	movs	r3, #0
 8003fbc:	69fa      	ldr	r2, [r7, #28]
 8003fbe:	f002 0203 	and.w	r2, r2, #3
 8003fc2:	0092      	lsls	r2, r2, #2
 8003fc4:	4093      	lsls	r3, r2
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fcc:	4935      	ldr	r1, [pc, #212]	; (80040a4 <HAL_GPIO_Init+0x328>)
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	089b      	lsrs	r3, r3, #2
 8003fd2:	3302      	adds	r3, #2
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fda:	4b3d      	ldr	r3, [pc, #244]	; (80040d0 <HAL_GPIO_Init+0x354>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	43db      	mvns	r3, r3
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003ff6:	69ba      	ldr	r2, [r7, #24]
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ffe:	4a34      	ldr	r2, [pc, #208]	; (80040d0 <HAL_GPIO_Init+0x354>)
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004004:	4b32      	ldr	r3, [pc, #200]	; (80040d0 <HAL_GPIO_Init+0x354>)
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	43db      	mvns	r3, r3
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	4013      	ands	r3, r2
 8004012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d003      	beq.n	8004028 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	4313      	orrs	r3, r2
 8004026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004028:	4a29      	ldr	r2, [pc, #164]	; (80040d0 <HAL_GPIO_Init+0x354>)
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800402e:	4b28      	ldr	r3, [pc, #160]	; (80040d0 <HAL_GPIO_Init+0x354>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	43db      	mvns	r3, r3
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	4013      	ands	r3, r2
 800403c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d003      	beq.n	8004052 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	4313      	orrs	r3, r2
 8004050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004052:	4a1f      	ldr	r2, [pc, #124]	; (80040d0 <HAL_GPIO_Init+0x354>)
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004058:	4b1d      	ldr	r3, [pc, #116]	; (80040d0 <HAL_GPIO_Init+0x354>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	43db      	mvns	r3, r3
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	4013      	ands	r3, r2
 8004066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	4313      	orrs	r3, r2
 800407a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800407c:	4a14      	ldr	r2, [pc, #80]	; (80040d0 <HAL_GPIO_Init+0x354>)
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	3301      	adds	r3, #1
 8004086:	61fb      	str	r3, [r7, #28]
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	2b0f      	cmp	r3, #15
 800408c:	f67f ae84 	bls.w	8003d98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004090:	bf00      	nop
 8004092:	bf00      	nop
 8004094:	3724      	adds	r7, #36	; 0x24
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	40023800 	.word	0x40023800
 80040a4:	40013800 	.word	0x40013800
 80040a8:	40020000 	.word	0x40020000
 80040ac:	40020400 	.word	0x40020400
 80040b0:	40020800 	.word	0x40020800
 80040b4:	40020c00 	.word	0x40020c00
 80040b8:	40021000 	.word	0x40021000
 80040bc:	40021400 	.word	0x40021400
 80040c0:	40021800 	.word	0x40021800
 80040c4:	40021c00 	.word	0x40021c00
 80040c8:	40022000 	.word	0x40022000
 80040cc:	40022400 	.word	0x40022400
 80040d0:	40013c00 	.word	0x40013c00

080040d4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b087      	sub	sp, #28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040de:	2300      	movs	r3, #0
 80040e0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80040e2:	2300      	movs	r3, #0
 80040e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040ea:	2300      	movs	r3, #0
 80040ec:	617b      	str	r3, [r7, #20]
 80040ee:	e0d9      	b.n	80042a4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040f0:	2201      	movs	r2, #1
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80040fa:	683a      	ldr	r2, [r7, #0]
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	4013      	ands	r3, r2
 8004100:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	429a      	cmp	r2, r3
 8004108:	f040 80c9 	bne.w	800429e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800410c:	4a6b      	ldr	r2, [pc, #428]	; (80042bc <HAL_GPIO_DeInit+0x1e8>)
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	089b      	lsrs	r3, r3, #2
 8004112:	3302      	adds	r3, #2
 8004114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004118:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f003 0303 	and.w	r3, r3, #3
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	220f      	movs	r2, #15
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	68ba      	ldr	r2, [r7, #8]
 800412a:	4013      	ands	r3, r2
 800412c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a63      	ldr	r2, [pc, #396]	; (80042c0 <HAL_GPIO_DeInit+0x1ec>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d037      	beq.n	80041a6 <HAL_GPIO_DeInit+0xd2>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a62      	ldr	r2, [pc, #392]	; (80042c4 <HAL_GPIO_DeInit+0x1f0>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d031      	beq.n	80041a2 <HAL_GPIO_DeInit+0xce>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a61      	ldr	r2, [pc, #388]	; (80042c8 <HAL_GPIO_DeInit+0x1f4>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d02b      	beq.n	800419e <HAL_GPIO_DeInit+0xca>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a60      	ldr	r2, [pc, #384]	; (80042cc <HAL_GPIO_DeInit+0x1f8>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d025      	beq.n	800419a <HAL_GPIO_DeInit+0xc6>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a5f      	ldr	r2, [pc, #380]	; (80042d0 <HAL_GPIO_DeInit+0x1fc>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d01f      	beq.n	8004196 <HAL_GPIO_DeInit+0xc2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a5e      	ldr	r2, [pc, #376]	; (80042d4 <HAL_GPIO_DeInit+0x200>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d019      	beq.n	8004192 <HAL_GPIO_DeInit+0xbe>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a5d      	ldr	r2, [pc, #372]	; (80042d8 <HAL_GPIO_DeInit+0x204>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d013      	beq.n	800418e <HAL_GPIO_DeInit+0xba>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a5c      	ldr	r2, [pc, #368]	; (80042dc <HAL_GPIO_DeInit+0x208>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d00d      	beq.n	800418a <HAL_GPIO_DeInit+0xb6>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a5b      	ldr	r2, [pc, #364]	; (80042e0 <HAL_GPIO_DeInit+0x20c>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d007      	beq.n	8004186 <HAL_GPIO_DeInit+0xb2>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a5a      	ldr	r2, [pc, #360]	; (80042e4 <HAL_GPIO_DeInit+0x210>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d101      	bne.n	8004182 <HAL_GPIO_DeInit+0xae>
 800417e:	2309      	movs	r3, #9
 8004180:	e012      	b.n	80041a8 <HAL_GPIO_DeInit+0xd4>
 8004182:	230a      	movs	r3, #10
 8004184:	e010      	b.n	80041a8 <HAL_GPIO_DeInit+0xd4>
 8004186:	2308      	movs	r3, #8
 8004188:	e00e      	b.n	80041a8 <HAL_GPIO_DeInit+0xd4>
 800418a:	2307      	movs	r3, #7
 800418c:	e00c      	b.n	80041a8 <HAL_GPIO_DeInit+0xd4>
 800418e:	2306      	movs	r3, #6
 8004190:	e00a      	b.n	80041a8 <HAL_GPIO_DeInit+0xd4>
 8004192:	2305      	movs	r3, #5
 8004194:	e008      	b.n	80041a8 <HAL_GPIO_DeInit+0xd4>
 8004196:	2304      	movs	r3, #4
 8004198:	e006      	b.n	80041a8 <HAL_GPIO_DeInit+0xd4>
 800419a:	2303      	movs	r3, #3
 800419c:	e004      	b.n	80041a8 <HAL_GPIO_DeInit+0xd4>
 800419e:	2302      	movs	r3, #2
 80041a0:	e002      	b.n	80041a8 <HAL_GPIO_DeInit+0xd4>
 80041a2:	2301      	movs	r3, #1
 80041a4:	e000      	b.n	80041a8 <HAL_GPIO_DeInit+0xd4>
 80041a6:	2300      	movs	r3, #0
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	f002 0203 	and.w	r2, r2, #3
 80041ae:	0092      	lsls	r2, r2, #2
 80041b0:	4093      	lsls	r3, r2
 80041b2:	68ba      	ldr	r2, [r7, #8]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d132      	bne.n	800421e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80041b8:	4b4b      	ldr	r3, [pc, #300]	; (80042e8 <HAL_GPIO_DeInit+0x214>)
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	43db      	mvns	r3, r3
 80041c0:	4949      	ldr	r1, [pc, #292]	; (80042e8 <HAL_GPIO_DeInit+0x214>)
 80041c2:	4013      	ands	r3, r2
 80041c4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80041c6:	4b48      	ldr	r3, [pc, #288]	; (80042e8 <HAL_GPIO_DeInit+0x214>)
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	43db      	mvns	r3, r3
 80041ce:	4946      	ldr	r1, [pc, #280]	; (80042e8 <HAL_GPIO_DeInit+0x214>)
 80041d0:	4013      	ands	r3, r2
 80041d2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80041d4:	4b44      	ldr	r3, [pc, #272]	; (80042e8 <HAL_GPIO_DeInit+0x214>)
 80041d6:	68da      	ldr	r2, [r3, #12]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	43db      	mvns	r3, r3
 80041dc:	4942      	ldr	r1, [pc, #264]	; (80042e8 <HAL_GPIO_DeInit+0x214>)
 80041de:	4013      	ands	r3, r2
 80041e0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80041e2:	4b41      	ldr	r3, [pc, #260]	; (80042e8 <HAL_GPIO_DeInit+0x214>)
 80041e4:	689a      	ldr	r2, [r3, #8]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	43db      	mvns	r3, r3
 80041ea:	493f      	ldr	r1, [pc, #252]	; (80042e8 <HAL_GPIO_DeInit+0x214>)
 80041ec:	4013      	ands	r3, r2
 80041ee:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f003 0303 	and.w	r3, r3, #3
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	220f      	movs	r2, #15
 80041fa:	fa02 f303 	lsl.w	r3, r2, r3
 80041fe:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004200:	4a2e      	ldr	r2, [pc, #184]	; (80042bc <HAL_GPIO_DeInit+0x1e8>)
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	089b      	lsrs	r3, r3, #2
 8004206:	3302      	adds	r3, #2
 8004208:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	43da      	mvns	r2, r3
 8004210:	482a      	ldr	r0, [pc, #168]	; (80042bc <HAL_GPIO_DeInit+0x1e8>)
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	089b      	lsrs	r3, r3, #2
 8004216:	400a      	ands	r2, r1
 8004218:	3302      	adds	r3, #2
 800421a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	2103      	movs	r1, #3
 8004228:	fa01 f303 	lsl.w	r3, r1, r3
 800422c:	43db      	mvns	r3, r3
 800422e:	401a      	ands	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	08da      	lsrs	r2, r3, #3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3208      	adds	r2, #8
 800423c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f003 0307 	and.w	r3, r3, #7
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	220f      	movs	r2, #15
 800424a:	fa02 f303 	lsl.w	r3, r2, r3
 800424e:	43db      	mvns	r3, r3
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	08d2      	lsrs	r2, r2, #3
 8004254:	4019      	ands	r1, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	3208      	adds	r2, #8
 800425a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68da      	ldr	r2, [r3, #12]
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	2103      	movs	r1, #3
 8004268:	fa01 f303 	lsl.w	r3, r1, r3
 800426c:	43db      	mvns	r3, r3
 800426e:	401a      	ands	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	2101      	movs	r1, #1
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	fa01 f303 	lsl.w	r3, r1, r3
 8004280:	43db      	mvns	r3, r3
 8004282:	401a      	ands	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689a      	ldr	r2, [r3, #8]
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	005b      	lsls	r3, r3, #1
 8004290:	2103      	movs	r1, #3
 8004292:	fa01 f303 	lsl.w	r3, r1, r3
 8004296:	43db      	mvns	r3, r3
 8004298:	401a      	ands	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	3301      	adds	r3, #1
 80042a2:	617b      	str	r3, [r7, #20]
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	2b0f      	cmp	r3, #15
 80042a8:	f67f af22 	bls.w	80040f0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80042ac:	bf00      	nop
 80042ae:	bf00      	nop
 80042b0:	371c      	adds	r7, #28
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	40013800 	.word	0x40013800
 80042c0:	40020000 	.word	0x40020000
 80042c4:	40020400 	.word	0x40020400
 80042c8:	40020800 	.word	0x40020800
 80042cc:	40020c00 	.word	0x40020c00
 80042d0:	40021000 	.word	0x40021000
 80042d4:	40021400 	.word	0x40021400
 80042d8:	40021800 	.word	0x40021800
 80042dc:	40021c00 	.word	0x40021c00
 80042e0:	40022000 	.word	0x40022000
 80042e4:	40022400 	.word	0x40022400
 80042e8:	40013c00 	.word	0x40013c00

080042ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	460b      	mov	r3, r1
 80042f6:	807b      	strh	r3, [r7, #2]
 80042f8:	4613      	mov	r3, r2
 80042fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042fc:	787b      	ldrb	r3, [r7, #1]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004302:	887a      	ldrh	r2, [r7, #2]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004308:	e003      	b.n	8004312 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800430a:	887b      	ldrh	r3, [r7, #2]
 800430c:	041a      	lsls	r2, r3, #16
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	619a      	str	r2, [r3, #24]
}
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
	...

08004320 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e0bf      	b.n	80044b2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d106      	bne.n	800434c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f8ba 	bl	80044c0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	699a      	ldr	r2, [r3, #24]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004362:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6999      	ldr	r1, [r3, #24]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685a      	ldr	r2, [r3, #4]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004378:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6899      	ldr	r1, [r3, #8]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	4b4a      	ldr	r3, [pc, #296]	; (80044bc <HAL_LTDC_Init+0x19c>)
 8004394:	400b      	ands	r3, r1
 8004396:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	041b      	lsls	r3, r3, #16
 800439e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6899      	ldr	r1, [r3, #8]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	699a      	ldr	r2, [r3, #24]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	431a      	orrs	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	430a      	orrs	r2, r1
 80043b4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68d9      	ldr	r1, [r3, #12]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	4b3e      	ldr	r3, [pc, #248]	; (80044bc <HAL_LTDC_Init+0x19c>)
 80043c2:	400b      	ands	r3, r1
 80043c4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	041b      	lsls	r3, r3, #16
 80043cc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68d9      	ldr	r1, [r3, #12]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a1a      	ldr	r2, [r3, #32]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	430a      	orrs	r2, r1
 80043e2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6919      	ldr	r1, [r3, #16]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	4b33      	ldr	r3, [pc, #204]	; (80044bc <HAL_LTDC_Init+0x19c>)
 80043f0:	400b      	ands	r3, r1
 80043f2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	041b      	lsls	r3, r3, #16
 80043fa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6919      	ldr	r1, [r3, #16]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	431a      	orrs	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	430a      	orrs	r2, r1
 8004410:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6959      	ldr	r1, [r3, #20]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	4b27      	ldr	r3, [pc, #156]	; (80044bc <HAL_LTDC_Init+0x19c>)
 800441e:	400b      	ands	r3, r1
 8004420:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004426:	041b      	lsls	r3, r3, #16
 8004428:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6959      	ldr	r1, [r3, #20]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	431a      	orrs	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	430a      	orrs	r2, r1
 800443e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004446:	021b      	lsls	r3, r3, #8
 8004448:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004450:	041b      	lsls	r3, r3, #16
 8004452:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004462:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800446a:	68ba      	ldr	r2, [r7, #8]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	4313      	orrs	r3, r2
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004476:	431a      	orrs	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f042 0206 	orr.w	r2, r2, #6
 800448e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	699a      	ldr	r2, [r3, #24]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0201 	orr.w	r2, r2, #1
 800449e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	f000f800 	.word	0xf000f800

080044c0 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80044d4:	b5b0      	push	{r4, r5, r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d101      	bne.n	80044ee <HAL_LTDC_ConfigLayer+0x1a>
 80044ea:	2302      	movs	r3, #2
 80044ec:	e02c      	b.n	8004548 <HAL_LTDC_ConfigLayer+0x74>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2202      	movs	r2, #2
 80044fa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2134      	movs	r1, #52	; 0x34
 8004504:	fb01 f303 	mul.w	r3, r1, r3
 8004508:	4413      	add	r3, r2
 800450a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	4614      	mov	r4, r2
 8004512:	461d      	mov	r5, r3
 8004514:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004516:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004518:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800451a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800451c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800451e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004520:	682b      	ldr	r3, [r5, #0]
 8004522:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	68b9      	ldr	r1, [r7, #8]
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f000 f83b 	bl	80045a4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2201      	movs	r2, #1
 8004534:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bdb0      	pop	{r4, r5, r7, pc}

08004550 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800455e:	2b01      	cmp	r3, #1
 8004560:	d101      	bne.n	8004566 <HAL_LTDC_EnableDither+0x16>
 8004562:	2302      	movs	r3, #2
 8004564:	e016      	b.n	8004594 <HAL_LTDC_EnableDither+0x44>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2202      	movs	r2, #2
 8004572:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8004576:	4b0a      	ldr	r3, [pc, #40]	; (80045a0 <HAL_LTDC_EnableDither+0x50>)
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	4a09      	ldr	r2, [pc, #36]	; (80045a0 <HAL_LTDC_EnableDither+0x50>)
 800457c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004580:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	40016800 	.word	0x40016800

080045a4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b089      	sub	sp, #36	; 0x24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	685a      	ldr	r2, [r3, #4]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	0c1b      	lsrs	r3, r3, #16
 80045bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045c0:	4413      	add	r3, r2
 80045c2:	041b      	lsls	r3, r3, #16
 80045c4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	461a      	mov	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	01db      	lsls	r3, r3, #7
 80045d0:	4413      	add	r3, r2
 80045d2:	3384      	adds	r3, #132	; 0x84
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	6812      	ldr	r2, [r2, #0]
 80045da:	4611      	mov	r1, r2
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	01d2      	lsls	r2, r2, #7
 80045e0:	440a      	add	r2, r1
 80045e2:	3284      	adds	r2, #132	; 0x84
 80045e4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80045e8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	0c1b      	lsrs	r3, r3, #16
 80045f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80045fa:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80045fc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4619      	mov	r1, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	01db      	lsls	r3, r3, #7
 8004608:	440b      	add	r3, r1
 800460a:	3384      	adds	r3, #132	; 0x84
 800460c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004612:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	68da      	ldr	r2, [r3, #12]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004622:	4413      	add	r3, r2
 8004624:	041b      	lsls	r3, r3, #16
 8004626:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	461a      	mov	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	01db      	lsls	r3, r3, #7
 8004632:	4413      	add	r3, r2
 8004634:	3384      	adds	r3, #132	; 0x84
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	6812      	ldr	r2, [r2, #0]
 800463c:	4611      	mov	r1, r2
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	01d2      	lsls	r2, r2, #7
 8004642:	440a      	add	r2, r1
 8004644:	3284      	adds	r2, #132	; 0x84
 8004646:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800464a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800465a:	4413      	add	r3, r2
 800465c:	1c5a      	adds	r2, r3, #1
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4619      	mov	r1, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	01db      	lsls	r3, r3, #7
 8004668:	440b      	add	r3, r1
 800466a:	3384      	adds	r3, #132	; 0x84
 800466c:	4619      	mov	r1, r3
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	4313      	orrs	r3, r2
 8004672:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	461a      	mov	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	01db      	lsls	r3, r3, #7
 800467e:	4413      	add	r3, r2
 8004680:	3384      	adds	r3, #132	; 0x84
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	6812      	ldr	r2, [r2, #0]
 8004688:	4611      	mov	r1, r2
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	01d2      	lsls	r2, r2, #7
 800468e:	440a      	add	r2, r1
 8004690:	3284      	adds	r2, #132	; 0x84
 8004692:	f023 0307 	bic.w	r3, r3, #7
 8004696:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	461a      	mov	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	01db      	lsls	r3, r3, #7
 80046a2:	4413      	add	r3, r2
 80046a4:	3384      	adds	r3, #132	; 0x84
 80046a6:	461a      	mov	r2, r3
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80046b4:	021b      	lsls	r3, r3, #8
 80046b6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80046be:	041b      	lsls	r3, r3, #16
 80046c0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	061b      	lsls	r3, r3, #24
 80046c8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	461a      	mov	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	01db      	lsls	r3, r3, #7
 80046d4:	4413      	add	r3, r2
 80046d6:	3384      	adds	r3, #132	; 0x84
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	461a      	mov	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	01db      	lsls	r3, r3, #7
 80046e4:	4413      	add	r3, r2
 80046e6:	3384      	adds	r3, #132	; 0x84
 80046e8:	461a      	mov	r2, r3
 80046ea:	2300      	movs	r3, #0
 80046ec:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80046f4:	461a      	mov	r2, r3
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	431a      	orrs	r2, r3
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	431a      	orrs	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4619      	mov	r1, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	01db      	lsls	r3, r3, #7
 8004708:	440b      	add	r3, r1
 800470a:	3384      	adds	r3, #132	; 0x84
 800470c:	4619      	mov	r1, r3
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	4313      	orrs	r3, r2
 8004712:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	461a      	mov	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	01db      	lsls	r3, r3, #7
 800471e:	4413      	add	r3, r2
 8004720:	3384      	adds	r3, #132	; 0x84
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	6812      	ldr	r2, [r2, #0]
 8004728:	4611      	mov	r1, r2
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	01d2      	lsls	r2, r2, #7
 800472e:	440a      	add	r2, r1
 8004730:	3284      	adds	r2, #132	; 0x84
 8004732:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004736:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	461a      	mov	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	01db      	lsls	r3, r3, #7
 8004742:	4413      	add	r3, r2
 8004744:	3384      	adds	r3, #132	; 0x84
 8004746:	461a      	mov	r2, r3
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	461a      	mov	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	01db      	lsls	r3, r3, #7
 8004758:	4413      	add	r3, r2
 800475a:	3384      	adds	r3, #132	; 0x84
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	6812      	ldr	r2, [r2, #0]
 8004762:	4611      	mov	r1, r2
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	01d2      	lsls	r2, r2, #7
 8004768:	440a      	add	r2, r1
 800476a:	3284      	adds	r2, #132	; 0x84
 800476c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004770:	f023 0307 	bic.w	r3, r3, #7
 8004774:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	69da      	ldr	r2, [r3, #28]
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	68f9      	ldr	r1, [r7, #12]
 8004780:	6809      	ldr	r1, [r1, #0]
 8004782:	4608      	mov	r0, r1
 8004784:	6879      	ldr	r1, [r7, #4]
 8004786:	01c9      	lsls	r1, r1, #7
 8004788:	4401      	add	r1, r0
 800478a:	3184      	adds	r1, #132	; 0x84
 800478c:	4313      	orrs	r3, r2
 800478e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	461a      	mov	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	01db      	lsls	r3, r3, #7
 800479a:	4413      	add	r3, r2
 800479c:	3384      	adds	r3, #132	; 0x84
 800479e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	461a      	mov	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	01db      	lsls	r3, r3, #7
 80047aa:	4413      	add	r3, r2
 80047ac:	3384      	adds	r3, #132	; 0x84
 80047ae:	461a      	mov	r2, r3
 80047b0:	2300      	movs	r3, #0
 80047b2:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	461a      	mov	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	01db      	lsls	r3, r3, #7
 80047be:	4413      	add	r3, r2
 80047c0:	3384      	adds	r3, #132	; 0x84
 80047c2:	461a      	mov	r2, r3
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d102      	bne.n	80047d8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80047d2:	2304      	movs	r3, #4
 80047d4:	61fb      	str	r3, [r7, #28]
 80047d6:	e01b      	b.n	8004810 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d102      	bne.n	80047e6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80047e0:	2303      	movs	r3, #3
 80047e2:	61fb      	str	r3, [r7, #28]
 80047e4:	e014      	b.n	8004810 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d00b      	beq.n	8004806 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d007      	beq.n	8004806 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80047fa:	2b03      	cmp	r3, #3
 80047fc:	d003      	beq.n	8004806 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004802:	2b07      	cmp	r3, #7
 8004804:	d102      	bne.n	800480c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004806:	2302      	movs	r3, #2
 8004808:	61fb      	str	r3, [r7, #28]
 800480a:	e001      	b.n	8004810 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800480c:	2301      	movs	r3, #1
 800480e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	461a      	mov	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	01db      	lsls	r3, r3, #7
 800481a:	4413      	add	r3, r2
 800481c:	3384      	adds	r3, #132	; 0x84
 800481e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	6812      	ldr	r2, [r2, #0]
 8004824:	4611      	mov	r1, r2
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	01d2      	lsls	r2, r2, #7
 800482a:	440a      	add	r2, r1
 800482c:	3284      	adds	r2, #132	; 0x84
 800482e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004832:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004838:	69fa      	ldr	r2, [r7, #28]
 800483a:	fb02 f303 	mul.w	r3, r2, r3
 800483e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	6859      	ldr	r1, [r3, #4]
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	1acb      	subs	r3, r1, r3
 800484a:	69f9      	ldr	r1, [r7, #28]
 800484c:	fb01 f303 	mul.w	r3, r1, r3
 8004850:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004852:	68f9      	ldr	r1, [r7, #12]
 8004854:	6809      	ldr	r1, [r1, #0]
 8004856:	4608      	mov	r0, r1
 8004858:	6879      	ldr	r1, [r7, #4]
 800485a:	01c9      	lsls	r1, r1, #7
 800485c:	4401      	add	r1, r0
 800485e:	3184      	adds	r1, #132	; 0x84
 8004860:	4313      	orrs	r3, r2
 8004862:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	461a      	mov	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	01db      	lsls	r3, r3, #7
 800486e:	4413      	add	r3, r2
 8004870:	3384      	adds	r3, #132	; 0x84
 8004872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	6812      	ldr	r2, [r2, #0]
 8004878:	4611      	mov	r1, r2
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	01d2      	lsls	r2, r2, #7
 800487e:	440a      	add	r2, r1
 8004880:	3284      	adds	r2, #132	; 0x84
 8004882:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004886:	f023 0307 	bic.w	r3, r3, #7
 800488a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	461a      	mov	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	01db      	lsls	r3, r3, #7
 8004896:	4413      	add	r3, r2
 8004898:	3384      	adds	r3, #132	; 0x84
 800489a:	461a      	mov	r2, r3
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	461a      	mov	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	01db      	lsls	r3, r3, #7
 80048ac:	4413      	add	r3, r2
 80048ae:	3384      	adds	r3, #132	; 0x84
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	6812      	ldr	r2, [r2, #0]
 80048b6:	4611      	mov	r1, r2
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	01d2      	lsls	r2, r2, #7
 80048bc:	440a      	add	r2, r1
 80048be:	3284      	adds	r2, #132	; 0x84
 80048c0:	f043 0301 	orr.w	r3, r3, #1
 80048c4:	6013      	str	r3, [r2, #0]
}
 80048c6:	bf00      	nop
 80048c8:	3724      	adds	r7, #36	; 0x24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
	...

080048d4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80048da:	2300      	movs	r3, #0
 80048dc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80048de:	2300      	movs	r3, #0
 80048e0:	603b      	str	r3, [r7, #0]
 80048e2:	4b20      	ldr	r3, [pc, #128]	; (8004964 <HAL_PWREx_EnableOverDrive+0x90>)
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	4a1f      	ldr	r2, [pc, #124]	; (8004964 <HAL_PWREx_EnableOverDrive+0x90>)
 80048e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ec:	6413      	str	r3, [r2, #64]	; 0x40
 80048ee:	4b1d      	ldr	r3, [pc, #116]	; (8004964 <HAL_PWREx_EnableOverDrive+0x90>)
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f6:	603b      	str	r3, [r7, #0]
 80048f8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80048fa:	4b1b      	ldr	r3, [pc, #108]	; (8004968 <HAL_PWREx_EnableOverDrive+0x94>)
 80048fc:	2201      	movs	r2, #1
 80048fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004900:	f7fe fca6 	bl	8003250 <HAL_GetTick>
 8004904:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004906:	e009      	b.n	800491c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004908:	f7fe fca2 	bl	8003250 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004916:	d901      	bls.n	800491c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e01f      	b.n	800495c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800491c:	4b13      	ldr	r3, [pc, #76]	; (800496c <HAL_PWREx_EnableOverDrive+0x98>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004928:	d1ee      	bne.n	8004908 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800492a:	4b11      	ldr	r3, [pc, #68]	; (8004970 <HAL_PWREx_EnableOverDrive+0x9c>)
 800492c:	2201      	movs	r2, #1
 800492e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004930:	f7fe fc8e 	bl	8003250 <HAL_GetTick>
 8004934:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004936:	e009      	b.n	800494c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004938:	f7fe fc8a 	bl	8003250 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004946:	d901      	bls.n	800494c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e007      	b.n	800495c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800494c:	4b07      	ldr	r3, [pc, #28]	; (800496c <HAL_PWREx_EnableOverDrive+0x98>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004954:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004958:	d1ee      	bne.n	8004938 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3708      	adds	r7, #8
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	40023800 	.word	0x40023800
 8004968:	420e0040 	.word	0x420e0040
 800496c:	40007000 	.word	0x40007000
 8004970:	420e0044 	.word	0x420e0044

08004974 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e267      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d075      	beq.n	8004a7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004992:	4b88      	ldr	r3, [pc, #544]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 030c 	and.w	r3, r3, #12
 800499a:	2b04      	cmp	r3, #4
 800499c:	d00c      	beq.n	80049b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800499e:	4b85      	ldr	r3, [pc, #532]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049a6:	2b08      	cmp	r3, #8
 80049a8:	d112      	bne.n	80049d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049aa:	4b82      	ldr	r3, [pc, #520]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049b6:	d10b      	bne.n	80049d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049b8:	4b7e      	ldr	r3, [pc, #504]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d05b      	beq.n	8004a7c <HAL_RCC_OscConfig+0x108>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d157      	bne.n	8004a7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e242      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049d8:	d106      	bne.n	80049e8 <HAL_RCC_OscConfig+0x74>
 80049da:	4b76      	ldr	r3, [pc, #472]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a75      	ldr	r2, [pc, #468]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 80049e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049e4:	6013      	str	r3, [r2, #0]
 80049e6:	e01d      	b.n	8004a24 <HAL_RCC_OscConfig+0xb0>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049f0:	d10c      	bne.n	8004a0c <HAL_RCC_OscConfig+0x98>
 80049f2:	4b70      	ldr	r3, [pc, #448]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a6f      	ldr	r2, [pc, #444]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 80049f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049fc:	6013      	str	r3, [r2, #0]
 80049fe:	4b6d      	ldr	r3, [pc, #436]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a6c      	ldr	r2, [pc, #432]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a08:	6013      	str	r3, [r2, #0]
 8004a0a:	e00b      	b.n	8004a24 <HAL_RCC_OscConfig+0xb0>
 8004a0c:	4b69      	ldr	r3, [pc, #420]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a68      	ldr	r2, [pc, #416]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a16:	6013      	str	r3, [r2, #0]
 8004a18:	4b66      	ldr	r3, [pc, #408]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a65      	ldr	r2, [pc, #404]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d013      	beq.n	8004a54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a2c:	f7fe fc10 	bl	8003250 <HAL_GetTick>
 8004a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a32:	e008      	b.n	8004a46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a34:	f7fe fc0c 	bl	8003250 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b64      	cmp	r3, #100	; 0x64
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e207      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a46:	4b5b      	ldr	r3, [pc, #364]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d0f0      	beq.n	8004a34 <HAL_RCC_OscConfig+0xc0>
 8004a52:	e014      	b.n	8004a7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a54:	f7fe fbfc 	bl	8003250 <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a5c:	f7fe fbf8 	bl	8003250 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b64      	cmp	r3, #100	; 0x64
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e1f3      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a6e:	4b51      	ldr	r3, [pc, #324]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1f0      	bne.n	8004a5c <HAL_RCC_OscConfig+0xe8>
 8004a7a:	e000      	b.n	8004a7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d063      	beq.n	8004b52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a8a:	4b4a      	ldr	r3, [pc, #296]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 030c 	and.w	r3, r3, #12
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00b      	beq.n	8004aae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a96:	4b47      	ldr	r3, [pc, #284]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a9e:	2b08      	cmp	r3, #8
 8004aa0:	d11c      	bne.n	8004adc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004aa2:	4b44      	ldr	r3, [pc, #272]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d116      	bne.n	8004adc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aae:	4b41      	ldr	r3, [pc, #260]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d005      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x152>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d001      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e1c7      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ac6:	4b3b      	ldr	r3, [pc, #236]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	00db      	lsls	r3, r3, #3
 8004ad4:	4937      	ldr	r1, [pc, #220]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ada:	e03a      	b.n	8004b52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d020      	beq.n	8004b26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ae4:	4b34      	ldr	r3, [pc, #208]	; (8004bb8 <HAL_RCC_OscConfig+0x244>)
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aea:	f7fe fbb1 	bl	8003250 <HAL_GetTick>
 8004aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004af0:	e008      	b.n	8004b04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004af2:	f7fe fbad 	bl	8003250 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d901      	bls.n	8004b04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e1a8      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b04:	4b2b      	ldr	r3, [pc, #172]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0302 	and.w	r3, r3, #2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d0f0      	beq.n	8004af2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b10:	4b28      	ldr	r3, [pc, #160]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	00db      	lsls	r3, r3, #3
 8004b1e:	4925      	ldr	r1, [pc, #148]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	600b      	str	r3, [r1, #0]
 8004b24:	e015      	b.n	8004b52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b26:	4b24      	ldr	r3, [pc, #144]	; (8004bb8 <HAL_RCC_OscConfig+0x244>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2c:	f7fe fb90 	bl	8003250 <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b34:	f7fe fb8c 	bl	8003250 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e187      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b46:	4b1b      	ldr	r3, [pc, #108]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1f0      	bne.n	8004b34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0308 	and.w	r3, r3, #8
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d036      	beq.n	8004bcc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d016      	beq.n	8004b94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b66:	4b15      	ldr	r3, [pc, #84]	; (8004bbc <HAL_RCC_OscConfig+0x248>)
 8004b68:	2201      	movs	r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b6c:	f7fe fb70 	bl	8003250 <HAL_GetTick>
 8004b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b74:	f7fe fb6c 	bl	8003250 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e167      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b86:	4b0b      	ldr	r3, [pc, #44]	; (8004bb4 <HAL_RCC_OscConfig+0x240>)
 8004b88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d0f0      	beq.n	8004b74 <HAL_RCC_OscConfig+0x200>
 8004b92:	e01b      	b.n	8004bcc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b94:	4b09      	ldr	r3, [pc, #36]	; (8004bbc <HAL_RCC_OscConfig+0x248>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b9a:	f7fe fb59 	bl	8003250 <HAL_GetTick>
 8004b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ba0:	e00e      	b.n	8004bc0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ba2:	f7fe fb55 	bl	8003250 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d907      	bls.n	8004bc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e150      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
 8004bb4:	40023800 	.word	0x40023800
 8004bb8:	42470000 	.word	0x42470000
 8004bbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bc0:	4b88      	ldr	r3, [pc, #544]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004bc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1ea      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0304 	and.w	r3, r3, #4
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 8097 	beq.w	8004d08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bde:	4b81      	ldr	r3, [pc, #516]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d10f      	bne.n	8004c0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bea:	2300      	movs	r3, #0
 8004bec:	60bb      	str	r3, [r7, #8]
 8004bee:	4b7d      	ldr	r3, [pc, #500]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	4a7c      	ldr	r2, [pc, #496]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8004bfa:	4b7a      	ldr	r3, [pc, #488]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c02:	60bb      	str	r3, [r7, #8]
 8004c04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c06:	2301      	movs	r3, #1
 8004c08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c0a:	4b77      	ldr	r3, [pc, #476]	; (8004de8 <HAL_RCC_OscConfig+0x474>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d118      	bne.n	8004c48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c16:	4b74      	ldr	r3, [pc, #464]	; (8004de8 <HAL_RCC_OscConfig+0x474>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a73      	ldr	r2, [pc, #460]	; (8004de8 <HAL_RCC_OscConfig+0x474>)
 8004c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c22:	f7fe fb15 	bl	8003250 <HAL_GetTick>
 8004c26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c28:	e008      	b.n	8004c3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c2a:	f7fe fb11 	bl	8003250 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d901      	bls.n	8004c3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e10c      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c3c:	4b6a      	ldr	r3, [pc, #424]	; (8004de8 <HAL_RCC_OscConfig+0x474>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d0f0      	beq.n	8004c2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d106      	bne.n	8004c5e <HAL_RCC_OscConfig+0x2ea>
 8004c50:	4b64      	ldr	r3, [pc, #400]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c54:	4a63      	ldr	r2, [pc, #396]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004c56:	f043 0301 	orr.w	r3, r3, #1
 8004c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c5c:	e01c      	b.n	8004c98 <HAL_RCC_OscConfig+0x324>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	2b05      	cmp	r3, #5
 8004c64:	d10c      	bne.n	8004c80 <HAL_RCC_OscConfig+0x30c>
 8004c66:	4b5f      	ldr	r3, [pc, #380]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6a:	4a5e      	ldr	r2, [pc, #376]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004c6c:	f043 0304 	orr.w	r3, r3, #4
 8004c70:	6713      	str	r3, [r2, #112]	; 0x70
 8004c72:	4b5c      	ldr	r3, [pc, #368]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c76:	4a5b      	ldr	r2, [pc, #364]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004c78:	f043 0301 	orr.w	r3, r3, #1
 8004c7c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c7e:	e00b      	b.n	8004c98 <HAL_RCC_OscConfig+0x324>
 8004c80:	4b58      	ldr	r3, [pc, #352]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c84:	4a57      	ldr	r2, [pc, #348]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004c86:	f023 0301 	bic.w	r3, r3, #1
 8004c8a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c8c:	4b55      	ldr	r3, [pc, #340]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c90:	4a54      	ldr	r2, [pc, #336]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004c92:	f023 0304 	bic.w	r3, r3, #4
 8004c96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d015      	beq.n	8004ccc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca0:	f7fe fad6 	bl	8003250 <HAL_GetTick>
 8004ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ca6:	e00a      	b.n	8004cbe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ca8:	f7fe fad2 	bl	8003250 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e0cb      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cbe:	4b49      	ldr	r3, [pc, #292]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d0ee      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x334>
 8004cca:	e014      	b.n	8004cf6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ccc:	f7fe fac0 	bl	8003250 <HAL_GetTick>
 8004cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cd2:	e00a      	b.n	8004cea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cd4:	f7fe fabc 	bl	8003250 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e0b5      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cea:	4b3e      	ldr	r3, [pc, #248]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1ee      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cf6:	7dfb      	ldrb	r3, [r7, #23]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d105      	bne.n	8004d08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cfc:	4b39      	ldr	r3, [pc, #228]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d00:	4a38      	ldr	r2, [pc, #224]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004d02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 80a1 	beq.w	8004e54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d12:	4b34      	ldr	r3, [pc, #208]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f003 030c 	and.w	r3, r3, #12
 8004d1a:	2b08      	cmp	r3, #8
 8004d1c:	d05c      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d141      	bne.n	8004daa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d26:	4b31      	ldr	r3, [pc, #196]	; (8004dec <HAL_RCC_OscConfig+0x478>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d2c:	f7fe fa90 	bl	8003250 <HAL_GetTick>
 8004d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d32:	e008      	b.n	8004d46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d34:	f7fe fa8c 	bl	8003250 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e087      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d46:	4b27      	ldr	r3, [pc, #156]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1f0      	bne.n	8004d34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69da      	ldr	r2, [r3, #28]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d60:	019b      	lsls	r3, r3, #6
 8004d62:	431a      	orrs	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d68:	085b      	lsrs	r3, r3, #1
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	041b      	lsls	r3, r3, #16
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d74:	061b      	lsls	r3, r3, #24
 8004d76:	491b      	ldr	r1, [pc, #108]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d7c:	4b1b      	ldr	r3, [pc, #108]	; (8004dec <HAL_RCC_OscConfig+0x478>)
 8004d7e:	2201      	movs	r2, #1
 8004d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d82:	f7fe fa65 	bl	8003250 <HAL_GetTick>
 8004d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d88:	e008      	b.n	8004d9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d8a:	f7fe fa61 	bl	8003250 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d901      	bls.n	8004d9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e05c      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d9c:	4b11      	ldr	r3, [pc, #68]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d0f0      	beq.n	8004d8a <HAL_RCC_OscConfig+0x416>
 8004da8:	e054      	b.n	8004e54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004daa:	4b10      	ldr	r3, [pc, #64]	; (8004dec <HAL_RCC_OscConfig+0x478>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004db0:	f7fe fa4e 	bl	8003250 <HAL_GetTick>
 8004db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004db6:	e008      	b.n	8004dca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004db8:	f7fe fa4a 	bl	8003250 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e045      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dca:	4b06      	ldr	r3, [pc, #24]	; (8004de4 <HAL_RCC_OscConfig+0x470>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1f0      	bne.n	8004db8 <HAL_RCC_OscConfig+0x444>
 8004dd6:	e03d      	b.n	8004e54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d107      	bne.n	8004df0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e038      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
 8004de4:	40023800 	.word	0x40023800
 8004de8:	40007000 	.word	0x40007000
 8004dec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004df0:	4b1b      	ldr	r3, [pc, #108]	; (8004e60 <HAL_RCC_OscConfig+0x4ec>)
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d028      	beq.n	8004e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d121      	bne.n	8004e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d11a      	bne.n	8004e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e20:	4013      	ands	r3, r2
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d111      	bne.n	8004e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e36:	085b      	lsrs	r3, r3, #1
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d107      	bne.n	8004e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d001      	beq.n	8004e54 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e000      	b.n	8004e56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3718      	adds	r7, #24
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	40023800 	.word	0x40023800

08004e64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d101      	bne.n	8004e78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e0cc      	b.n	8005012 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e78:	4b68      	ldr	r3, [pc, #416]	; (800501c <HAL_RCC_ClockConfig+0x1b8>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 030f 	and.w	r3, r3, #15
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d90c      	bls.n	8004ea0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e86:	4b65      	ldr	r3, [pc, #404]	; (800501c <HAL_RCC_ClockConfig+0x1b8>)
 8004e88:	683a      	ldr	r2, [r7, #0]
 8004e8a:	b2d2      	uxtb	r2, r2
 8004e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e8e:	4b63      	ldr	r3, [pc, #396]	; (800501c <HAL_RCC_ClockConfig+0x1b8>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 030f 	and.w	r3, r3, #15
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d001      	beq.n	8004ea0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e0b8      	b.n	8005012 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d020      	beq.n	8004eee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0304 	and.w	r3, r3, #4
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d005      	beq.n	8004ec4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004eb8:	4b59      	ldr	r3, [pc, #356]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	4a58      	ldr	r2, [pc, #352]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004ebe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ec2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0308 	and.w	r3, r3, #8
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d005      	beq.n	8004edc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ed0:	4b53      	ldr	r3, [pc, #332]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	4a52      	ldr	r2, [pc, #328]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004eda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004edc:	4b50      	ldr	r3, [pc, #320]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	494d      	ldr	r1, [pc, #308]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d044      	beq.n	8004f84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d107      	bne.n	8004f12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f02:	4b47      	ldr	r3, [pc, #284]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d119      	bne.n	8004f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e07f      	b.n	8005012 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d003      	beq.n	8004f22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f1e:	2b03      	cmp	r3, #3
 8004f20:	d107      	bne.n	8004f32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f22:	4b3f      	ldr	r3, [pc, #252]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d109      	bne.n	8004f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e06f      	b.n	8005012 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f32:	4b3b      	ldr	r3, [pc, #236]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e067      	b.n	8005012 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f42:	4b37      	ldr	r3, [pc, #220]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f023 0203 	bic.w	r2, r3, #3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	4934      	ldr	r1, [pc, #208]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f54:	f7fe f97c 	bl	8003250 <HAL_GetTick>
 8004f58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f5a:	e00a      	b.n	8004f72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f5c:	f7fe f978 	bl	8003250 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e04f      	b.n	8005012 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f72:	4b2b      	ldr	r3, [pc, #172]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f003 020c 	and.w	r2, r3, #12
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d1eb      	bne.n	8004f5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f84:	4b25      	ldr	r3, [pc, #148]	; (800501c <HAL_RCC_ClockConfig+0x1b8>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 030f 	and.w	r3, r3, #15
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d20c      	bcs.n	8004fac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f92:	4b22      	ldr	r3, [pc, #136]	; (800501c <HAL_RCC_ClockConfig+0x1b8>)
 8004f94:	683a      	ldr	r2, [r7, #0]
 8004f96:	b2d2      	uxtb	r2, r2
 8004f98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f9a:	4b20      	ldr	r3, [pc, #128]	; (800501c <HAL_RCC_ClockConfig+0x1b8>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 030f 	and.w	r3, r3, #15
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d001      	beq.n	8004fac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e032      	b.n	8005012 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0304 	and.w	r3, r3, #4
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d008      	beq.n	8004fca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fb8:	4b19      	ldr	r3, [pc, #100]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	4916      	ldr	r1, [pc, #88]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0308 	and.w	r3, r3, #8
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d009      	beq.n	8004fea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fd6:	4b12      	ldr	r3, [pc, #72]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	490e      	ldr	r1, [pc, #56]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004fea:	f000 f821 	bl	8005030 <HAL_RCC_GetSysClockFreq>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	4b0b      	ldr	r3, [pc, #44]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	091b      	lsrs	r3, r3, #4
 8004ff6:	f003 030f 	and.w	r3, r3, #15
 8004ffa:	490a      	ldr	r1, [pc, #40]	; (8005024 <HAL_RCC_ClockConfig+0x1c0>)
 8004ffc:	5ccb      	ldrb	r3, [r1, r3]
 8004ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8005002:	4a09      	ldr	r2, [pc, #36]	; (8005028 <HAL_RCC_ClockConfig+0x1c4>)
 8005004:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005006:	4b09      	ldr	r3, [pc, #36]	; (800502c <HAL_RCC_ClockConfig+0x1c8>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4618      	mov	r0, r3
 800500c:	f7fe f8dc 	bl	80031c8 <HAL_InitTick>

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	40023c00 	.word	0x40023c00
 8005020:	40023800 	.word	0x40023800
 8005024:	0800ae70 	.word	0x0800ae70
 8005028:	20000000 	.word	0x20000000
 800502c:	20000088 	.word	0x20000088

08005030 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005034:	b094      	sub	sp, #80	; 0x50
 8005036:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	647b      	str	r3, [r7, #68]	; 0x44
 800503c:	2300      	movs	r3, #0
 800503e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005040:	2300      	movs	r3, #0
 8005042:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005044:	2300      	movs	r3, #0
 8005046:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005048:	4b79      	ldr	r3, [pc, #484]	; (8005230 <HAL_RCC_GetSysClockFreq+0x200>)
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f003 030c 	and.w	r3, r3, #12
 8005050:	2b08      	cmp	r3, #8
 8005052:	d00d      	beq.n	8005070 <HAL_RCC_GetSysClockFreq+0x40>
 8005054:	2b08      	cmp	r3, #8
 8005056:	f200 80e1 	bhi.w	800521c <HAL_RCC_GetSysClockFreq+0x1ec>
 800505a:	2b00      	cmp	r3, #0
 800505c:	d002      	beq.n	8005064 <HAL_RCC_GetSysClockFreq+0x34>
 800505e:	2b04      	cmp	r3, #4
 8005060:	d003      	beq.n	800506a <HAL_RCC_GetSysClockFreq+0x3a>
 8005062:	e0db      	b.n	800521c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005064:	4b73      	ldr	r3, [pc, #460]	; (8005234 <HAL_RCC_GetSysClockFreq+0x204>)
 8005066:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005068:	e0db      	b.n	8005222 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800506a:	4b73      	ldr	r3, [pc, #460]	; (8005238 <HAL_RCC_GetSysClockFreq+0x208>)
 800506c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800506e:	e0d8      	b.n	8005222 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005070:	4b6f      	ldr	r3, [pc, #444]	; (8005230 <HAL_RCC_GetSysClockFreq+0x200>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005078:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800507a:	4b6d      	ldr	r3, [pc, #436]	; (8005230 <HAL_RCC_GetSysClockFreq+0x200>)
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d063      	beq.n	800514e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005086:	4b6a      	ldr	r3, [pc, #424]	; (8005230 <HAL_RCC_GetSysClockFreq+0x200>)
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	099b      	lsrs	r3, r3, #6
 800508c:	2200      	movs	r2, #0
 800508e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005090:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005098:	633b      	str	r3, [r7, #48]	; 0x30
 800509a:	2300      	movs	r3, #0
 800509c:	637b      	str	r3, [r7, #52]	; 0x34
 800509e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80050a2:	4622      	mov	r2, r4
 80050a4:	462b      	mov	r3, r5
 80050a6:	f04f 0000 	mov.w	r0, #0
 80050aa:	f04f 0100 	mov.w	r1, #0
 80050ae:	0159      	lsls	r1, r3, #5
 80050b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050b4:	0150      	lsls	r0, r2, #5
 80050b6:	4602      	mov	r2, r0
 80050b8:	460b      	mov	r3, r1
 80050ba:	4621      	mov	r1, r4
 80050bc:	1a51      	subs	r1, r2, r1
 80050be:	6139      	str	r1, [r7, #16]
 80050c0:	4629      	mov	r1, r5
 80050c2:	eb63 0301 	sbc.w	r3, r3, r1
 80050c6:	617b      	str	r3, [r7, #20]
 80050c8:	f04f 0200 	mov.w	r2, #0
 80050cc:	f04f 0300 	mov.w	r3, #0
 80050d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050d4:	4659      	mov	r1, fp
 80050d6:	018b      	lsls	r3, r1, #6
 80050d8:	4651      	mov	r1, sl
 80050da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050de:	4651      	mov	r1, sl
 80050e0:	018a      	lsls	r2, r1, #6
 80050e2:	4651      	mov	r1, sl
 80050e4:	ebb2 0801 	subs.w	r8, r2, r1
 80050e8:	4659      	mov	r1, fp
 80050ea:	eb63 0901 	sbc.w	r9, r3, r1
 80050ee:	f04f 0200 	mov.w	r2, #0
 80050f2:	f04f 0300 	mov.w	r3, #0
 80050f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005102:	4690      	mov	r8, r2
 8005104:	4699      	mov	r9, r3
 8005106:	4623      	mov	r3, r4
 8005108:	eb18 0303 	adds.w	r3, r8, r3
 800510c:	60bb      	str	r3, [r7, #8]
 800510e:	462b      	mov	r3, r5
 8005110:	eb49 0303 	adc.w	r3, r9, r3
 8005114:	60fb      	str	r3, [r7, #12]
 8005116:	f04f 0200 	mov.w	r2, #0
 800511a:	f04f 0300 	mov.w	r3, #0
 800511e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005122:	4629      	mov	r1, r5
 8005124:	024b      	lsls	r3, r1, #9
 8005126:	4621      	mov	r1, r4
 8005128:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800512c:	4621      	mov	r1, r4
 800512e:	024a      	lsls	r2, r1, #9
 8005130:	4610      	mov	r0, r2
 8005132:	4619      	mov	r1, r3
 8005134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005136:	2200      	movs	r2, #0
 8005138:	62bb      	str	r3, [r7, #40]	; 0x28
 800513a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800513c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005140:	f7fb fdb2 	bl	8000ca8 <__aeabi_uldivmod>
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	4613      	mov	r3, r2
 800514a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800514c:	e058      	b.n	8005200 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800514e:	4b38      	ldr	r3, [pc, #224]	; (8005230 <HAL_RCC_GetSysClockFreq+0x200>)
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	099b      	lsrs	r3, r3, #6
 8005154:	2200      	movs	r2, #0
 8005156:	4618      	mov	r0, r3
 8005158:	4611      	mov	r1, r2
 800515a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800515e:	623b      	str	r3, [r7, #32]
 8005160:	2300      	movs	r3, #0
 8005162:	627b      	str	r3, [r7, #36]	; 0x24
 8005164:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005168:	4642      	mov	r2, r8
 800516a:	464b      	mov	r3, r9
 800516c:	f04f 0000 	mov.w	r0, #0
 8005170:	f04f 0100 	mov.w	r1, #0
 8005174:	0159      	lsls	r1, r3, #5
 8005176:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800517a:	0150      	lsls	r0, r2, #5
 800517c:	4602      	mov	r2, r0
 800517e:	460b      	mov	r3, r1
 8005180:	4641      	mov	r1, r8
 8005182:	ebb2 0a01 	subs.w	sl, r2, r1
 8005186:	4649      	mov	r1, r9
 8005188:	eb63 0b01 	sbc.w	fp, r3, r1
 800518c:	f04f 0200 	mov.w	r2, #0
 8005190:	f04f 0300 	mov.w	r3, #0
 8005194:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005198:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800519c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80051a0:	ebb2 040a 	subs.w	r4, r2, sl
 80051a4:	eb63 050b 	sbc.w	r5, r3, fp
 80051a8:	f04f 0200 	mov.w	r2, #0
 80051ac:	f04f 0300 	mov.w	r3, #0
 80051b0:	00eb      	lsls	r3, r5, #3
 80051b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051b6:	00e2      	lsls	r2, r4, #3
 80051b8:	4614      	mov	r4, r2
 80051ba:	461d      	mov	r5, r3
 80051bc:	4643      	mov	r3, r8
 80051be:	18e3      	adds	r3, r4, r3
 80051c0:	603b      	str	r3, [r7, #0]
 80051c2:	464b      	mov	r3, r9
 80051c4:	eb45 0303 	adc.w	r3, r5, r3
 80051c8:	607b      	str	r3, [r7, #4]
 80051ca:	f04f 0200 	mov.w	r2, #0
 80051ce:	f04f 0300 	mov.w	r3, #0
 80051d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051d6:	4629      	mov	r1, r5
 80051d8:	028b      	lsls	r3, r1, #10
 80051da:	4621      	mov	r1, r4
 80051dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051e0:	4621      	mov	r1, r4
 80051e2:	028a      	lsls	r2, r1, #10
 80051e4:	4610      	mov	r0, r2
 80051e6:	4619      	mov	r1, r3
 80051e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051ea:	2200      	movs	r2, #0
 80051ec:	61bb      	str	r3, [r7, #24]
 80051ee:	61fa      	str	r2, [r7, #28]
 80051f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051f4:	f7fb fd58 	bl	8000ca8 <__aeabi_uldivmod>
 80051f8:	4602      	mov	r2, r0
 80051fa:	460b      	mov	r3, r1
 80051fc:	4613      	mov	r3, r2
 80051fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005200:	4b0b      	ldr	r3, [pc, #44]	; (8005230 <HAL_RCC_GetSysClockFreq+0x200>)
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	0c1b      	lsrs	r3, r3, #16
 8005206:	f003 0303 	and.w	r3, r3, #3
 800520a:	3301      	adds	r3, #1
 800520c:	005b      	lsls	r3, r3, #1
 800520e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005210:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005214:	fbb2 f3f3 	udiv	r3, r2, r3
 8005218:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800521a:	e002      	b.n	8005222 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800521c:	4b05      	ldr	r3, [pc, #20]	; (8005234 <HAL_RCC_GetSysClockFreq+0x204>)
 800521e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005220:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005222:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005224:	4618      	mov	r0, r3
 8005226:	3750      	adds	r7, #80	; 0x50
 8005228:	46bd      	mov	sp, r7
 800522a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800522e:	bf00      	nop
 8005230:	40023800 	.word	0x40023800
 8005234:	00f42400 	.word	0x00f42400
 8005238:	007a1200 	.word	0x007a1200

0800523c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005244:	2300      	movs	r3, #0
 8005246:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005248:	2300      	movs	r3, #0
 800524a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10b      	bne.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005260:	2b00      	cmp	r3, #0
 8005262:	d105      	bne.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800526c:	2b00      	cmp	r3, #0
 800526e:	d075      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005270:	4b91      	ldr	r3, [pc, #580]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005272:	2200      	movs	r2, #0
 8005274:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005276:	f7fd ffeb 	bl	8003250 <HAL_GetTick>
 800527a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800527c:	e008      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800527e:	f7fd ffe7 	bl	8003250 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	2b02      	cmp	r3, #2
 800528a:	d901      	bls.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e189      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005290:	4b8a      	ldr	r3, [pc, #552]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1f0      	bne.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d009      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	019a      	lsls	r2, r3, #6
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	071b      	lsls	r3, r3, #28
 80052b4:	4981      	ldr	r1, [pc, #516]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d01f      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80052c8:	4b7c      	ldr	r3, [pc, #496]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052ce:	0f1b      	lsrs	r3, r3, #28
 80052d0:	f003 0307 	and.w	r3, r3, #7
 80052d4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	019a      	lsls	r2, r3, #6
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	061b      	lsls	r3, r3, #24
 80052e2:	431a      	orrs	r2, r3
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	071b      	lsls	r3, r3, #28
 80052e8:	4974      	ldr	r1, [pc, #464]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80052f0:	4b72      	ldr	r3, [pc, #456]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052f6:	f023 021f 	bic.w	r2, r3, #31
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	69db      	ldr	r3, [r3, #28]
 80052fe:	3b01      	subs	r3, #1
 8005300:	496e      	ldr	r1, [pc, #440]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005302:	4313      	orrs	r3, r2
 8005304:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00d      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	019a      	lsls	r2, r3, #6
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	061b      	lsls	r3, r3, #24
 8005320:	431a      	orrs	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	071b      	lsls	r3, r3, #28
 8005328:	4964      	ldr	r1, [pc, #400]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800532a:	4313      	orrs	r3, r2
 800532c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005330:	4b61      	ldr	r3, [pc, #388]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005332:	2201      	movs	r2, #1
 8005334:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005336:	f7fd ff8b 	bl	8003250 <HAL_GetTick>
 800533a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800533c:	e008      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800533e:	f7fd ff87 	bl	8003250 <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	2b02      	cmp	r3, #2
 800534a:	d901      	bls.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e129      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005350:	4b5a      	ldr	r3, [pc, #360]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d0f0      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0304 	and.w	r3, r3, #4
 8005364:	2b00      	cmp	r3, #0
 8005366:	d105      	bne.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005370:	2b00      	cmp	r3, #0
 8005372:	d079      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005374:	4b52      	ldr	r3, [pc, #328]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005376:	2200      	movs	r2, #0
 8005378:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800537a:	f7fd ff69 	bl	8003250 <HAL_GetTick>
 800537e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005380:	e008      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005382:	f7fd ff65 	bl	8003250 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	2b02      	cmp	r3, #2
 800538e:	d901      	bls.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e107      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005394:	4b49      	ldr	r3, [pc, #292]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800539c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053a0:	d0ef      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0304 	and.w	r3, r3, #4
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d020      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80053ae:	4b43      	ldr	r3, [pc, #268]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b4:	0f1b      	lsrs	r3, r3, #28
 80053b6:	f003 0307 	and.w	r3, r3, #7
 80053ba:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	019a      	lsls	r2, r3, #6
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	061b      	lsls	r3, r3, #24
 80053c8:	431a      	orrs	r2, r3
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	071b      	lsls	r3, r3, #28
 80053ce:	493b      	ldr	r1, [pc, #236]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80053d6:	4b39      	ldr	r3, [pc, #228]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053dc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a1b      	ldr	r3, [r3, #32]
 80053e4:	3b01      	subs	r3, #1
 80053e6:	021b      	lsls	r3, r3, #8
 80053e8:	4934      	ldr	r1, [pc, #208]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0308 	and.w	r3, r3, #8
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d01e      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80053fc:	4b2f      	ldr	r3, [pc, #188]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005402:	0e1b      	lsrs	r3, r3, #24
 8005404:	f003 030f 	and.w	r3, r3, #15
 8005408:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	019a      	lsls	r2, r3, #6
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	061b      	lsls	r3, r3, #24
 8005414:	431a      	orrs	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	071b      	lsls	r3, r3, #28
 800541c:	4927      	ldr	r1, [pc, #156]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800541e:	4313      	orrs	r3, r2
 8005420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005424:	4b25      	ldr	r3, [pc, #148]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005426:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800542a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005432:	4922      	ldr	r1, [pc, #136]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005434:	4313      	orrs	r3, r2
 8005436:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800543a:	4b21      	ldr	r3, [pc, #132]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800543c:	2201      	movs	r2, #1
 800543e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005440:	f7fd ff06 	bl	8003250 <HAL_GetTick>
 8005444:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005446:	e008      	b.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005448:	f7fd ff02 	bl	8003250 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b02      	cmp	r3, #2
 8005454:	d901      	bls.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e0a4      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800545a:	4b18      	ldr	r3, [pc, #96]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005462:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005466:	d1ef      	bne.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0320 	and.w	r3, r3, #32
 8005470:	2b00      	cmp	r3, #0
 8005472:	f000 808b 	beq.w	800558c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005476:	2300      	movs	r3, #0
 8005478:	60fb      	str	r3, [r7, #12]
 800547a:	4b10      	ldr	r3, [pc, #64]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800547c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547e:	4a0f      	ldr	r2, [pc, #60]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005484:	6413      	str	r3, [r2, #64]	; 0x40
 8005486:	4b0d      	ldr	r3, [pc, #52]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800548e:	60fb      	str	r3, [r7, #12]
 8005490:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005492:	4b0c      	ldr	r3, [pc, #48]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a0b      	ldr	r2, [pc, #44]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800549c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800549e:	f7fd fed7 	bl	8003250 <HAL_GetTick>
 80054a2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80054a4:	e010      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80054a6:	f7fd fed3 	bl	8003250 <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d909      	bls.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e075      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80054b8:	42470068 	.word	0x42470068
 80054bc:	40023800 	.word	0x40023800
 80054c0:	42470070 	.word	0x42470070
 80054c4:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80054c8:	4b38      	ldr	r3, [pc, #224]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d0e8      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054d4:	4b36      	ldr	r3, [pc, #216]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054dc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d02f      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d028      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054f2:	4b2f      	ldr	r3, [pc, #188]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054fa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054fc:	4b2d      	ldr	r3, [pc, #180]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80054fe:	2201      	movs	r2, #1
 8005500:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005502:	4b2c      	ldr	r3, [pc, #176]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005504:	2200      	movs	r2, #0
 8005506:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005508:	4a29      	ldr	r2, [pc, #164]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800550e:	4b28      	ldr	r3, [pc, #160]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	2b01      	cmp	r3, #1
 8005518:	d114      	bne.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800551a:	f7fd fe99 	bl	8003250 <HAL_GetTick>
 800551e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005520:	e00a      	b.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005522:	f7fd fe95 	bl	8003250 <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005530:	4293      	cmp	r3, r2
 8005532:	d901      	bls.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e035      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005538:	4b1d      	ldr	r3, [pc, #116]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800553a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800553c:	f003 0302 	and.w	r3, r3, #2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d0ee      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005548:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800554c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005550:	d10d      	bne.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005552:	4b17      	ldr	r3, [pc, #92]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005566:	4912      	ldr	r1, [pc, #72]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005568:	4313      	orrs	r3, r2
 800556a:	608b      	str	r3, [r1, #8]
 800556c:	e005      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800556e:	4b10      	ldr	r3, [pc, #64]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	4a0f      	ldr	r2, [pc, #60]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005574:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005578:	6093      	str	r3, [r2, #8]
 800557a:	4b0d      	ldr	r3, [pc, #52]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800557c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005582:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005586:	490a      	ldr	r1, [pc, #40]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005588:	4313      	orrs	r3, r2
 800558a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0310 	and.w	r3, r3, #16
 8005594:	2b00      	cmp	r3, #0
 8005596:	d004      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800559e:	4b06      	ldr	r3, [pc, #24]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80055a0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3718      	adds	r7, #24
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	40007000 	.word	0x40007000
 80055b0:	40023800 	.word	0x40023800
 80055b4:	42470e40 	.word	0x42470e40
 80055b8:	424711e0 	.word	0x424711e0

080055bc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d101      	bne.n	80055d0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e025      	b.n	800561c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d106      	bne.n	80055ea <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 f81d 	bl	8005624 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2202      	movs	r2, #2
 80055ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	3304      	adds	r3, #4
 80055fa:	4619      	mov	r1, r3
 80055fc:	4610      	mov	r0, r2
 80055fe:	f000 fe57 	bl	80062b0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6818      	ldr	r0, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	461a      	mov	r2, r3
 800560c:	6839      	ldr	r1, [r7, #0]
 800560e:	f000 feac 	bl	800636a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3708      	adds	r7, #8
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800564a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800564c:	7dfb      	ldrb	r3, [r7, #23]
 800564e:	2b02      	cmp	r3, #2
 8005650:	d101      	bne.n	8005656 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8005652:	2302      	movs	r3, #2
 8005654:	e021      	b.n	800569a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8005656:	7dfb      	ldrb	r3, [r7, #23]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d002      	beq.n	8005662 <HAL_SDRAM_SendCommand+0x2a>
 800565c:	7dfb      	ldrb	r3, [r7, #23]
 800565e:	2b05      	cmp	r3, #5
 8005660:	d118      	bne.n	8005694 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2202      	movs	r2, #2
 8005666:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	68b9      	ldr	r1, [r7, #8]
 8005672:	4618      	mov	r0, r3
 8005674:	f000 fee2 	bl	800643c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2b02      	cmp	r3, #2
 800567e:	d104      	bne.n	800568a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2205      	movs	r2, #5
 8005684:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005688:	e006      	b.n	8005698 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005692:	e001      	b.n	8005698 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e000      	b.n	800569a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3718      	adds	r7, #24
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b082      	sub	sp, #8
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d101      	bne.n	80056bc <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80056b8:	2302      	movs	r3, #2
 80056ba:	e016      	b.n	80056ea <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d10f      	bne.n	80056e8 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2202      	movs	r2, #2
 80056cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6839      	ldr	r1, [r7, #0]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 feed 	bl	80064b6 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
 80056e6:	e000      	b.n	80056ea <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b082      	sub	sp, #8
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e07b      	b.n	80057fc <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005708:	2b00      	cmp	r3, #0
 800570a:	d108      	bne.n	800571e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005714:	d009      	beq.n	800572a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	61da      	str	r2, [r3, #28]
 800571c:	e005      	b.n	800572a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b00      	cmp	r3, #0
 800573a:	d106      	bne.n	800574a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f7fb fde3 	bl	8001310 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2202      	movs	r2, #2
 800574e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005760:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005772:	431a      	orrs	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800577c:	431a      	orrs	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	f003 0302 	and.w	r3, r3, #2
 8005786:	431a      	orrs	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	f003 0301 	and.w	r3, r3, #1
 8005790:	431a      	orrs	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800579a:	431a      	orrs	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	69db      	ldr	r3, [r3, #28]
 80057a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057a4:	431a      	orrs	r2, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ae:	ea42 0103 	orr.w	r1, r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	430a      	orrs	r2, r1
 80057c0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	0c1b      	lsrs	r3, r3, #16
 80057c8:	f003 0104 	and.w	r1, r3, #4
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d0:	f003 0210 	and.w	r2, r3, #16
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	430a      	orrs	r2, r1
 80057da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	69da      	ldr	r2, [r3, #28]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3708      	adds	r7, #8
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e01a      	b.n	800584c <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2202      	movs	r2, #2
 800581a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800582c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7fb fdb6 	bl	80013a0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3708      	adds	r7, #8
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b088      	sub	sp, #32
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	603b      	str	r3, [r7, #0]
 8005860:	4613      	mov	r3, r2
 8005862:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005864:	2300      	movs	r3, #0
 8005866:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800586e:	2b01      	cmp	r3, #1
 8005870:	d101      	bne.n	8005876 <HAL_SPI_Transmit+0x22>
 8005872:	2302      	movs	r3, #2
 8005874:	e126      	b.n	8005ac4 <HAL_SPI_Transmit+0x270>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800587e:	f7fd fce7 	bl	8003250 <HAL_GetTick>
 8005882:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005884:	88fb      	ldrh	r3, [r7, #6]
 8005886:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800588e:	b2db      	uxtb	r3, r3
 8005890:	2b01      	cmp	r3, #1
 8005892:	d002      	beq.n	800589a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005894:	2302      	movs	r3, #2
 8005896:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005898:	e10b      	b.n	8005ab2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d002      	beq.n	80058a6 <HAL_SPI_Transmit+0x52>
 80058a0:	88fb      	ldrh	r3, [r7, #6]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d102      	bne.n	80058ac <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80058aa:	e102      	b.n	8005ab2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2203      	movs	r2, #3
 80058b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	68ba      	ldr	r2, [r7, #8]
 80058be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	88fa      	ldrh	r2, [r7, #6]
 80058c4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	88fa      	ldrh	r2, [r7, #6]
 80058ca:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058f2:	d10f      	bne.n	8005914 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005902:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005912:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591e:	2b40      	cmp	r3, #64	; 0x40
 8005920:	d007      	beq.n	8005932 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005930:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800593a:	d14b      	bne.n	80059d4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d002      	beq.n	800594a <HAL_SPI_Transmit+0xf6>
 8005944:	8afb      	ldrh	r3, [r7, #22]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d13e      	bne.n	80059c8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594e:	881a      	ldrh	r2, [r3, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595a:	1c9a      	adds	r2, r3, #2
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005964:	b29b      	uxth	r3, r3
 8005966:	3b01      	subs	r3, #1
 8005968:	b29a      	uxth	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800596e:	e02b      	b.n	80059c8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f003 0302 	and.w	r3, r3, #2
 800597a:	2b02      	cmp	r3, #2
 800597c:	d112      	bne.n	80059a4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005982:	881a      	ldrh	r2, [r3, #0]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598e:	1c9a      	adds	r2, r3, #2
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005998:	b29b      	uxth	r3, r3
 800599a:	3b01      	subs	r3, #1
 800599c:	b29a      	uxth	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	86da      	strh	r2, [r3, #54]	; 0x36
 80059a2:	e011      	b.n	80059c8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059a4:	f7fd fc54 	bl	8003250 <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d803      	bhi.n	80059bc <HAL_SPI_Transmit+0x168>
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ba:	d102      	bne.n	80059c2 <HAL_SPI_Transmit+0x16e>
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d102      	bne.n	80059c8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80059c6:	e074      	b.n	8005ab2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1ce      	bne.n	8005970 <HAL_SPI_Transmit+0x11c>
 80059d2:	e04c      	b.n	8005a6e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d002      	beq.n	80059e2 <HAL_SPI_Transmit+0x18e>
 80059dc:	8afb      	ldrh	r3, [r7, #22]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d140      	bne.n	8005a64 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	330c      	adds	r3, #12
 80059ec:	7812      	ldrb	r2, [r2, #0]
 80059ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f4:	1c5a      	adds	r2, r3, #1
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	3b01      	subs	r3, #1
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005a08:	e02c      	b.n	8005a64 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f003 0302 	and.w	r3, r3, #2
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d113      	bne.n	8005a40 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	330c      	adds	r3, #12
 8005a22:	7812      	ldrb	r2, [r2, #0]
 8005a24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2a:	1c5a      	adds	r2, r3, #1
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	3b01      	subs	r3, #1
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	86da      	strh	r2, [r3, #54]	; 0x36
 8005a3e:	e011      	b.n	8005a64 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a40:	f7fd fc06 	bl	8003250 <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	683a      	ldr	r2, [r7, #0]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d803      	bhi.n	8005a58 <HAL_SPI_Transmit+0x204>
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a56:	d102      	bne.n	8005a5e <HAL_SPI_Transmit+0x20a>
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d102      	bne.n	8005a64 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a62:	e026      	b.n	8005ab2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1cd      	bne.n	8005a0a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a6e:	69ba      	ldr	r2, [r7, #24]
 8005a70:	6839      	ldr	r1, [r7, #0]
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f000 fbda 	bl	800622c <SPI_EndRxTxTransaction>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d002      	beq.n	8005a84 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2220      	movs	r2, #32
 8005a82:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10a      	bne.n	8005aa2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	613b      	str	r3, [r7, #16]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	613b      	str	r3, [r7, #16]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	613b      	str	r3, [r7, #16]
 8005aa0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d002      	beq.n	8005ab0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	77fb      	strb	r3, [r7, #31]
 8005aae:	e000      	b.n	8005ab2 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005ab0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005ac2:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3720      	adds	r7, #32
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b088      	sub	sp, #32
 8005ad0:	af02      	add	r7, sp, #8
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	603b      	str	r3, [r7, #0]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005adc:	2300      	movs	r3, #0
 8005ade:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ae8:	d112      	bne.n	8005b10 <HAL_SPI_Receive+0x44>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10e      	bne.n	8005b10 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2204      	movs	r2, #4
 8005af6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005afa:	88fa      	ldrh	r2, [r7, #6]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	9300      	str	r3, [sp, #0]
 8005b00:	4613      	mov	r3, r2
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	68b9      	ldr	r1, [r7, #8]
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f000 f8f1 	bl	8005cee <HAL_SPI_TransmitReceive>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	e0ea      	b.n	8005ce6 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d101      	bne.n	8005b1e <HAL_SPI_Receive+0x52>
 8005b1a:	2302      	movs	r3, #2
 8005b1c:	e0e3      	b.n	8005ce6 <HAL_SPI_Receive+0x21a>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b26:	f7fd fb93 	bl	8003250 <HAL_GetTick>
 8005b2a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d002      	beq.n	8005b3e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005b38:	2302      	movs	r3, #2
 8005b3a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b3c:	e0ca      	b.n	8005cd4 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d002      	beq.n	8005b4a <HAL_SPI_Receive+0x7e>
 8005b44:	88fb      	ldrh	r3, [r7, #6]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d102      	bne.n	8005b50 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b4e:	e0c1      	b.n	8005cd4 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2204      	movs	r2, #4
 8005b54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	88fa      	ldrh	r2, [r7, #6]
 8005b68:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	88fa      	ldrh	r2, [r7, #6]
 8005b6e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b96:	d10f      	bne.n	8005bb8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ba6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005bb6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc2:	2b40      	cmp	r3, #64	; 0x40
 8005bc4:	d007      	beq.n	8005bd6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bd4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d162      	bne.n	8005ca4 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005bde:	e02e      	b.n	8005c3e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d115      	bne.n	8005c1a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f103 020c 	add.w	r2, r3, #12
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfa:	7812      	ldrb	r2, [r2, #0]
 8005bfc:	b2d2      	uxtb	r2, r2
 8005bfe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c04:	1c5a      	adds	r2, r3, #1
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	3b01      	subs	r3, #1
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c18:	e011      	b.n	8005c3e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c1a:	f7fd fb19 	bl	8003250 <HAL_GetTick>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	683a      	ldr	r2, [r7, #0]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d803      	bhi.n	8005c32 <HAL_SPI_Receive+0x166>
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c30:	d102      	bne.n	8005c38 <HAL_SPI_Receive+0x16c>
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d102      	bne.n	8005c3e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005c3c:	e04a      	b.n	8005cd4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1cb      	bne.n	8005be0 <HAL_SPI_Receive+0x114>
 8005c48:	e031      	b.n	8005cae <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d113      	bne.n	8005c80 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68da      	ldr	r2, [r3, #12]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c62:	b292      	uxth	r2, r2
 8005c64:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6a:	1c9a      	adds	r2, r3, #2
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	3b01      	subs	r3, #1
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c7e:	e011      	b.n	8005ca4 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c80:	f7fd fae6 	bl	8003250 <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	683a      	ldr	r2, [r7, #0]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d803      	bhi.n	8005c98 <HAL_SPI_Receive+0x1cc>
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c96:	d102      	bne.n	8005c9e <HAL_SPI_Receive+0x1d2>
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d102      	bne.n	8005ca4 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005ca2:	e017      	b.n	8005cd4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1cd      	bne.n	8005c4a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	6839      	ldr	r1, [r7, #0]
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	f000 fa54 	bl	8006160 <SPI_EndRxTransaction>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d002      	beq.n	8005cc4 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2220      	movs	r2, #32
 8005cc2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d002      	beq.n	8005cd2 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	75fb      	strb	r3, [r7, #23]
 8005cd0:	e000      	b.n	8005cd4 <HAL_SPI_Receive+0x208>
  }

error :
 8005cd2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005ce4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3718      	adds	r7, #24
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b08c      	sub	sp, #48	; 0x30
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	60f8      	str	r0, [r7, #12]
 8005cf6:	60b9      	str	r1, [r7, #8]
 8005cf8:	607a      	str	r2, [r7, #4]
 8005cfa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005d00:	2300      	movs	r3, #0
 8005d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d101      	bne.n	8005d14 <HAL_SPI_TransmitReceive+0x26>
 8005d10:	2302      	movs	r3, #2
 8005d12:	e18a      	b.n	800602a <HAL_SPI_TransmitReceive+0x33c>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d1c:	f7fd fa98 	bl	8003250 <HAL_GetTick>
 8005d20:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005d32:	887b      	ldrh	r3, [r7, #2]
 8005d34:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005d36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d00f      	beq.n	8005d5e <HAL_SPI_TransmitReceive+0x70>
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d44:	d107      	bne.n	8005d56 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d103      	bne.n	8005d56 <HAL_SPI_TransmitReceive+0x68>
 8005d4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d52:	2b04      	cmp	r3, #4
 8005d54:	d003      	beq.n	8005d5e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005d56:	2302      	movs	r3, #2
 8005d58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005d5c:	e15b      	b.n	8006016 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d005      	beq.n	8005d70 <HAL_SPI_TransmitReceive+0x82>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d002      	beq.n	8005d70 <HAL_SPI_TransmitReceive+0x82>
 8005d6a:	887b      	ldrh	r3, [r7, #2]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d103      	bne.n	8005d78 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005d76:	e14e      	b.n	8006016 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	2b04      	cmp	r3, #4
 8005d82:	d003      	beq.n	8005d8c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2205      	movs	r2, #5
 8005d88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	887a      	ldrh	r2, [r7, #2]
 8005d9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	887a      	ldrh	r2, [r7, #2]
 8005da2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	887a      	ldrh	r2, [r7, #2]
 8005dae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	887a      	ldrh	r2, [r7, #2]
 8005db4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dcc:	2b40      	cmp	r3, #64	; 0x40
 8005dce:	d007      	beq.n	8005de0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dde:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005de8:	d178      	bne.n	8005edc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d002      	beq.n	8005df8 <HAL_SPI_TransmitReceive+0x10a>
 8005df2:	8b7b      	ldrh	r3, [r7, #26]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d166      	bne.n	8005ec6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dfc:	881a      	ldrh	r2, [r3, #0]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e08:	1c9a      	adds	r2, r3, #2
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	3b01      	subs	r3, #1
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e1c:	e053      	b.n	8005ec6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	f003 0302 	and.w	r3, r3, #2
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d11b      	bne.n	8005e64 <HAL_SPI_TransmitReceive+0x176>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d016      	beq.n	8005e64 <HAL_SPI_TransmitReceive+0x176>
 8005e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d113      	bne.n	8005e64 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e40:	881a      	ldrh	r2, [r3, #0]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4c:	1c9a      	adds	r2, r3, #2
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e60:	2300      	movs	r3, #0
 8005e62:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d119      	bne.n	8005ea6 <HAL_SPI_TransmitReceive+0x1b8>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d014      	beq.n	8005ea6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68da      	ldr	r2, [r3, #12]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e86:	b292      	uxth	r2, r2
 8005e88:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8e:	1c9a      	adds	r2, r3, #2
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005ea6:	f7fd f9d3 	bl	8003250 <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d807      	bhi.n	8005ec6 <HAL_SPI_TransmitReceive+0x1d8>
 8005eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ebc:	d003      	beq.n	8005ec6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005ec4:	e0a7      	b.n	8006016 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1a6      	bne.n	8005e1e <HAL_SPI_TransmitReceive+0x130>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d1a1      	bne.n	8005e1e <HAL_SPI_TransmitReceive+0x130>
 8005eda:	e07c      	b.n	8005fd6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d002      	beq.n	8005eea <HAL_SPI_TransmitReceive+0x1fc>
 8005ee4:	8b7b      	ldrh	r3, [r7, #26]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d16b      	bne.n	8005fc2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	330c      	adds	r3, #12
 8005ef4:	7812      	ldrb	r2, [r2, #0]
 8005ef6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efc:	1c5a      	adds	r2, r3, #1
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f10:	e057      	b.n	8005fc2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	f003 0302 	and.w	r3, r3, #2
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d11c      	bne.n	8005f5a <HAL_SPI_TransmitReceive+0x26c>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d017      	beq.n	8005f5a <HAL_SPI_TransmitReceive+0x26c>
 8005f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d114      	bne.n	8005f5a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	330c      	adds	r3, #12
 8005f3a:	7812      	ldrb	r2, [r2, #0]
 8005f3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f42:	1c5a      	adds	r2, r3, #1
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f56:	2300      	movs	r3, #0
 8005f58:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f003 0301 	and.w	r3, r3, #1
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d119      	bne.n	8005f9c <HAL_SPI_TransmitReceive+0x2ae>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d014      	beq.n	8005f9c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68da      	ldr	r2, [r3, #12]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7c:	b2d2      	uxtb	r2, r2
 8005f7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f84:	1c5a      	adds	r2, r3, #1
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	3b01      	subs	r3, #1
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005f9c:	f7fd f958 	bl	8003250 <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d803      	bhi.n	8005fb4 <HAL_SPI_TransmitReceive+0x2c6>
 8005fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb2:	d102      	bne.n	8005fba <HAL_SPI_TransmitReceive+0x2cc>
 8005fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d103      	bne.n	8005fc2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005fc0:	e029      	b.n	8006016 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1a2      	bne.n	8005f12 <HAL_SPI_TransmitReceive+0x224>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d19d      	bne.n	8005f12 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fd8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f000 f926 	bl	800622c <SPI_EndRxTxTransaction>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d006      	beq.n	8005ff4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2220      	movs	r2, #32
 8005ff0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005ff2:	e010      	b.n	8006016 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d10b      	bne.n	8006014 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	617b      	str	r3, [r7, #20]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	617b      	str	r3, [r7, #20]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	617b      	str	r3, [r7, #20]
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	e000      	b.n	8006016 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006014:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006026:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800602a:	4618      	mov	r0, r3
 800602c:	3730      	adds	r7, #48	; 0x30
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006032:	b480      	push	{r7}
 8006034:	b083      	sub	sp, #12
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006040:	b2db      	uxtb	r3, r3
}
 8006042:	4618      	mov	r0, r3
 8006044:	370c      	adds	r7, #12
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
	...

08006050 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b088      	sub	sp, #32
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	603b      	str	r3, [r7, #0]
 800605c:	4613      	mov	r3, r2
 800605e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006060:	f7fd f8f6 	bl	8003250 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006068:	1a9b      	subs	r3, r3, r2
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	4413      	add	r3, r2
 800606e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006070:	f7fd f8ee 	bl	8003250 <HAL_GetTick>
 8006074:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006076:	4b39      	ldr	r3, [pc, #228]	; (800615c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	015b      	lsls	r3, r3, #5
 800607c:	0d1b      	lsrs	r3, r3, #20
 800607e:	69fa      	ldr	r2, [r7, #28]
 8006080:	fb02 f303 	mul.w	r3, r2, r3
 8006084:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006086:	e054      	b.n	8006132 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800608e:	d050      	beq.n	8006132 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006090:	f7fd f8de 	bl	8003250 <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	69fa      	ldr	r2, [r7, #28]
 800609c:	429a      	cmp	r2, r3
 800609e:	d902      	bls.n	80060a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d13d      	bne.n	8006122 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	685a      	ldr	r2, [r3, #4]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80060b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060be:	d111      	bne.n	80060e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060c8:	d004      	beq.n	80060d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060d2:	d107      	bne.n	80060e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060ec:	d10f      	bne.n	800610e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060fc:	601a      	str	r2, [r3, #0]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800610c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e017      	b.n	8006152 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d101      	bne.n	800612c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006128:	2300      	movs	r3, #0
 800612a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	3b01      	subs	r3, #1
 8006130:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	689a      	ldr	r2, [r3, #8]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	4013      	ands	r3, r2
 800613c:	68ba      	ldr	r2, [r7, #8]
 800613e:	429a      	cmp	r2, r3
 8006140:	bf0c      	ite	eq
 8006142:	2301      	moveq	r3, #1
 8006144:	2300      	movne	r3, #0
 8006146:	b2db      	uxtb	r3, r3
 8006148:	461a      	mov	r2, r3
 800614a:	79fb      	ldrb	r3, [r7, #7]
 800614c:	429a      	cmp	r2, r3
 800614e:	d19b      	bne.n	8006088 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3720      	adds	r7, #32
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	20000000 	.word	0x20000000

08006160 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b086      	sub	sp, #24
 8006164:	af02      	add	r7, sp, #8
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006174:	d111      	bne.n	800619a <SPI_EndRxTransaction+0x3a>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800617e:	d004      	beq.n	800618a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006188:	d107      	bne.n	800619a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006198:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061a2:	d12a      	bne.n	80061fa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061ac:	d012      	beq.n	80061d4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	9300      	str	r3, [sp, #0]
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	2200      	movs	r2, #0
 80061b6:	2180      	movs	r1, #128	; 0x80
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f7ff ff49 	bl	8006050 <SPI_WaitFlagStateUntilTimeout>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d02d      	beq.n	8006220 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061c8:	f043 0220 	orr.w	r2, r3, #32
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e026      	b.n	8006222 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	9300      	str	r3, [sp, #0]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	2200      	movs	r2, #0
 80061dc:	2101      	movs	r1, #1
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f7ff ff36 	bl	8006050 <SPI_WaitFlagStateUntilTimeout>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d01a      	beq.n	8006220 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ee:	f043 0220 	orr.w	r2, r3, #32
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e013      	b.n	8006222 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	9300      	str	r3, [sp, #0]
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	2200      	movs	r2, #0
 8006202:	2101      	movs	r1, #1
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f7ff ff23 	bl	8006050 <SPI_WaitFlagStateUntilTimeout>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d007      	beq.n	8006220 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006214:	f043 0220 	orr.w	r2, r3, #32
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e000      	b.n	8006222 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
	...

0800622c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b088      	sub	sp, #32
 8006230:	af02      	add	r7, sp, #8
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006238:	4b1b      	ldr	r3, [pc, #108]	; (80062a8 <SPI_EndRxTxTransaction+0x7c>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a1b      	ldr	r2, [pc, #108]	; (80062ac <SPI_EndRxTxTransaction+0x80>)
 800623e:	fba2 2303 	umull	r2, r3, r2, r3
 8006242:	0d5b      	lsrs	r3, r3, #21
 8006244:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006248:	fb02 f303 	mul.w	r3, r2, r3
 800624c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006256:	d112      	bne.n	800627e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	9300      	str	r3, [sp, #0]
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	2200      	movs	r2, #0
 8006260:	2180      	movs	r1, #128	; 0x80
 8006262:	68f8      	ldr	r0, [r7, #12]
 8006264:	f7ff fef4 	bl	8006050 <SPI_WaitFlagStateUntilTimeout>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d016      	beq.n	800629c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006272:	f043 0220 	orr.w	r2, r3, #32
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e00f      	b.n	800629e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00a      	beq.n	800629a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	3b01      	subs	r3, #1
 8006288:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006294:	2b80      	cmp	r3, #128	; 0x80
 8006296:	d0f2      	beq.n	800627e <SPI_EndRxTxTransaction+0x52>
 8006298:	e000      	b.n	800629c <SPI_EndRxTxTransaction+0x70>
        break;
 800629a:	bf00      	nop
  }

  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3718      	adds	r7, #24
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	20000000 	.word	0x20000000
 80062ac:	165e9f81 	.word	0x165e9f81

080062b0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d123      	bne.n	800630a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80062ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	6851      	ldr	r1, [r2, #4]
 80062d2:	683a      	ldr	r2, [r7, #0]
 80062d4:	6892      	ldr	r2, [r2, #8]
 80062d6:	4311      	orrs	r1, r2
 80062d8:	683a      	ldr	r2, [r7, #0]
 80062da:	68d2      	ldr	r2, [r2, #12]
 80062dc:	4311      	orrs	r1, r2
 80062de:	683a      	ldr	r2, [r7, #0]
 80062e0:	6912      	ldr	r2, [r2, #16]
 80062e2:	4311      	orrs	r1, r2
 80062e4:	683a      	ldr	r2, [r7, #0]
 80062e6:	6952      	ldr	r2, [r2, #20]
 80062e8:	4311      	orrs	r1, r2
 80062ea:	683a      	ldr	r2, [r7, #0]
 80062ec:	6992      	ldr	r2, [r2, #24]
 80062ee:	4311      	orrs	r1, r2
 80062f0:	683a      	ldr	r2, [r7, #0]
 80062f2:	69d2      	ldr	r2, [r2, #28]
 80062f4:	4311      	orrs	r1, r2
 80062f6:	683a      	ldr	r2, [r7, #0]
 80062f8:	6a12      	ldr	r2, [r2, #32]
 80062fa:	4311      	orrs	r1, r2
 80062fc:	683a      	ldr	r2, [r7, #0]
 80062fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006300:	430a      	orrs	r2, r1
 8006302:	431a      	orrs	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	601a      	str	r2, [r3, #0]
 8006308:	e028      	b.n	800635c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	69d9      	ldr	r1, [r3, #28]
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	4319      	orrs	r1, r3
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006320:	430b      	orrs	r3, r1
 8006322:	431a      	orrs	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006330:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006334:	683a      	ldr	r2, [r7, #0]
 8006336:	6851      	ldr	r1, [r2, #4]
 8006338:	683a      	ldr	r2, [r7, #0]
 800633a:	6892      	ldr	r2, [r2, #8]
 800633c:	4311      	orrs	r1, r2
 800633e:	683a      	ldr	r2, [r7, #0]
 8006340:	68d2      	ldr	r2, [r2, #12]
 8006342:	4311      	orrs	r1, r2
 8006344:	683a      	ldr	r2, [r7, #0]
 8006346:	6912      	ldr	r2, [r2, #16]
 8006348:	4311      	orrs	r1, r2
 800634a:	683a      	ldr	r2, [r7, #0]
 800634c:	6952      	ldr	r2, [r2, #20]
 800634e:	4311      	orrs	r1, r2
 8006350:	683a      	ldr	r2, [r7, #0]
 8006352:	6992      	ldr	r2, [r2, #24]
 8006354:	430a      	orrs	r2, r1
 8006356:	431a      	orrs	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	370c      	adds	r7, #12
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr

0800636a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800636a:	b480      	push	{r7}
 800636c:	b085      	sub	sp, #20
 800636e:	af00      	add	r7, sp, #0
 8006370:	60f8      	str	r0, [r7, #12]
 8006372:	60b9      	str	r1, [r7, #8]
 8006374:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d128      	bne.n	80063ce <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	1e59      	subs	r1, r3, #1
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	3b01      	subs	r3, #1
 8006390:	011b      	lsls	r3, r3, #4
 8006392:	4319      	orrs	r1, r3
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	3b01      	subs	r3, #1
 800639a:	021b      	lsls	r3, r3, #8
 800639c:	4319      	orrs	r1, r3
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	3b01      	subs	r3, #1
 80063a4:	031b      	lsls	r3, r3, #12
 80063a6:	4319      	orrs	r1, r3
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	3b01      	subs	r3, #1
 80063ae:	041b      	lsls	r3, r3, #16
 80063b0:	4319      	orrs	r1, r3
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	3b01      	subs	r3, #1
 80063b8:	051b      	lsls	r3, r3, #20
 80063ba:	4319      	orrs	r1, r3
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	699b      	ldr	r3, [r3, #24]
 80063c0:	3b01      	subs	r3, #1
 80063c2:	061b      	lsls	r3, r3, #24
 80063c4:	430b      	orrs	r3, r1
 80063c6:	431a      	orrs	r2, r3
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	609a      	str	r2, [r3, #8]
 80063cc:	e02f      	b.n	800642e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80063d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	68d2      	ldr	r2, [r2, #12]
 80063de:	3a01      	subs	r2, #1
 80063e0:	0311      	lsls	r1, r2, #12
 80063e2:	68ba      	ldr	r2, [r7, #8]
 80063e4:	6952      	ldr	r2, [r2, #20]
 80063e6:	3a01      	subs	r2, #1
 80063e8:	0512      	lsls	r2, r2, #20
 80063ea:	430a      	orrs	r2, r1
 80063ec:	431a      	orrs	r2, r3
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	1e59      	subs	r1, r3, #1
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	3b01      	subs	r3, #1
 8006406:	011b      	lsls	r3, r3, #4
 8006408:	4319      	orrs	r1, r3
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	3b01      	subs	r3, #1
 8006410:	021b      	lsls	r3, r3, #8
 8006412:	4319      	orrs	r1, r3
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	3b01      	subs	r3, #1
 800641a:	041b      	lsls	r3, r3, #16
 800641c:	4319      	orrs	r1, r3
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	3b01      	subs	r3, #1
 8006424:	061b      	lsls	r3, r3, #24
 8006426:	430b      	orrs	r3, r1
 8006428:	431a      	orrs	r2, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3714      	adds	r7, #20
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b086      	sub	sp, #24
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8006448:	2300      	movs	r3, #0
 800644a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	0d9b      	lsrs	r3, r3, #22
 8006452:	059b      	lsls	r3, r3, #22
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	6811      	ldr	r1, [r2, #0]
 8006458:	68ba      	ldr	r2, [r7, #8]
 800645a:	6852      	ldr	r2, [r2, #4]
 800645c:	4311      	orrs	r1, r2
 800645e:	68ba      	ldr	r2, [r7, #8]
 8006460:	6892      	ldr	r2, [r2, #8]
 8006462:	3a01      	subs	r2, #1
 8006464:	0152      	lsls	r2, r2, #5
 8006466:	4311      	orrs	r1, r2
 8006468:	68ba      	ldr	r2, [r7, #8]
 800646a:	68d2      	ldr	r2, [r2, #12]
 800646c:	0252      	lsls	r2, r2, #9
 800646e:	430a      	orrs	r2, r1
 8006470:	431a      	orrs	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8006476:	f7fc feeb 	bl	8003250 <HAL_GetTick>
 800647a:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800647c:	e010      	b.n	80064a0 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006484:	d00c      	beq.n	80064a0 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d007      	beq.n	800649c <FMC_SDRAM_SendCommand+0x60>
 800648c:	f7fc fee0 	bl	8003250 <HAL_GetTick>
 8006490:	4602      	mov	r2, r0
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	429a      	cmp	r2, r3
 800649a:	d201      	bcs.n	80064a0 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800649c:	2303      	movs	r3, #3
 800649e:	e006      	b.n	80064ae <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	f003 0320 	and.w	r3, r3, #32
 80064a8:	2b20      	cmp	r3, #32
 80064aa:	d0e8      	beq.n	800647e <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3718      	adds	r7, #24
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b083      	sub	sp, #12
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
 80064be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	695b      	ldr	r3, [r3, #20]
 80064c4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80064c8:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 80064cc:	683a      	ldr	r2, [r7, #0]
 80064ce:	0052      	lsls	r2, r2, #1
 80064d0:	431a      	orrs	r2, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <__errno>:
 80064e4:	4b01      	ldr	r3, [pc, #4]	; (80064ec <__errno+0x8>)
 80064e6:	6818      	ldr	r0, [r3, #0]
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	20000090 	.word	0x20000090

080064f0 <__libc_init_array>:
 80064f0:	b570      	push	{r4, r5, r6, lr}
 80064f2:	4d0d      	ldr	r5, [pc, #52]	; (8006528 <__libc_init_array+0x38>)
 80064f4:	4c0d      	ldr	r4, [pc, #52]	; (800652c <__libc_init_array+0x3c>)
 80064f6:	1b64      	subs	r4, r4, r5
 80064f8:	10a4      	asrs	r4, r4, #2
 80064fa:	2600      	movs	r6, #0
 80064fc:	42a6      	cmp	r6, r4
 80064fe:	d109      	bne.n	8006514 <__libc_init_array+0x24>
 8006500:	4d0b      	ldr	r5, [pc, #44]	; (8006530 <__libc_init_array+0x40>)
 8006502:	4c0c      	ldr	r4, [pc, #48]	; (8006534 <__libc_init_array+0x44>)
 8006504:	f004 fc90 	bl	800ae28 <_init>
 8006508:	1b64      	subs	r4, r4, r5
 800650a:	10a4      	asrs	r4, r4, #2
 800650c:	2600      	movs	r6, #0
 800650e:	42a6      	cmp	r6, r4
 8006510:	d105      	bne.n	800651e <__libc_init_array+0x2e>
 8006512:	bd70      	pop	{r4, r5, r6, pc}
 8006514:	f855 3b04 	ldr.w	r3, [r5], #4
 8006518:	4798      	blx	r3
 800651a:	3601      	adds	r6, #1
 800651c:	e7ee      	b.n	80064fc <__libc_init_array+0xc>
 800651e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006522:	4798      	blx	r3
 8006524:	3601      	adds	r6, #1
 8006526:	e7f2      	b.n	800650e <__libc_init_array+0x1e>
 8006528:	0800d9cc 	.word	0x0800d9cc
 800652c:	0800d9cc 	.word	0x0800d9cc
 8006530:	0800d9cc 	.word	0x0800d9cc
 8006534:	0800d9d0 	.word	0x0800d9d0

08006538 <memset>:
 8006538:	4402      	add	r2, r0
 800653a:	4603      	mov	r3, r0
 800653c:	4293      	cmp	r3, r2
 800653e:	d100      	bne.n	8006542 <memset+0xa>
 8006540:	4770      	bx	lr
 8006542:	f803 1b01 	strb.w	r1, [r3], #1
 8006546:	e7f9      	b.n	800653c <memset+0x4>

08006548 <__cvt>:
 8006548:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800654c:	ec55 4b10 	vmov	r4, r5, d0
 8006550:	2d00      	cmp	r5, #0
 8006552:	460e      	mov	r6, r1
 8006554:	4619      	mov	r1, r3
 8006556:	462b      	mov	r3, r5
 8006558:	bfbb      	ittet	lt
 800655a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800655e:	461d      	movlt	r5, r3
 8006560:	2300      	movge	r3, #0
 8006562:	232d      	movlt	r3, #45	; 0x2d
 8006564:	700b      	strb	r3, [r1, #0]
 8006566:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006568:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800656c:	4691      	mov	r9, r2
 800656e:	f023 0820 	bic.w	r8, r3, #32
 8006572:	bfbc      	itt	lt
 8006574:	4622      	movlt	r2, r4
 8006576:	4614      	movlt	r4, r2
 8006578:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800657c:	d005      	beq.n	800658a <__cvt+0x42>
 800657e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006582:	d100      	bne.n	8006586 <__cvt+0x3e>
 8006584:	3601      	adds	r6, #1
 8006586:	2102      	movs	r1, #2
 8006588:	e000      	b.n	800658c <__cvt+0x44>
 800658a:	2103      	movs	r1, #3
 800658c:	ab03      	add	r3, sp, #12
 800658e:	9301      	str	r3, [sp, #4]
 8006590:	ab02      	add	r3, sp, #8
 8006592:	9300      	str	r3, [sp, #0]
 8006594:	ec45 4b10 	vmov	d0, r4, r5
 8006598:	4653      	mov	r3, sl
 800659a:	4632      	mov	r2, r6
 800659c:	f001 fdac 	bl	80080f8 <_dtoa_r>
 80065a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80065a4:	4607      	mov	r7, r0
 80065a6:	d102      	bne.n	80065ae <__cvt+0x66>
 80065a8:	f019 0f01 	tst.w	r9, #1
 80065ac:	d022      	beq.n	80065f4 <__cvt+0xac>
 80065ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80065b2:	eb07 0906 	add.w	r9, r7, r6
 80065b6:	d110      	bne.n	80065da <__cvt+0x92>
 80065b8:	783b      	ldrb	r3, [r7, #0]
 80065ba:	2b30      	cmp	r3, #48	; 0x30
 80065bc:	d10a      	bne.n	80065d4 <__cvt+0x8c>
 80065be:	2200      	movs	r2, #0
 80065c0:	2300      	movs	r3, #0
 80065c2:	4620      	mov	r0, r4
 80065c4:	4629      	mov	r1, r5
 80065c6:	f7fa fa8f 	bl	8000ae8 <__aeabi_dcmpeq>
 80065ca:	b918      	cbnz	r0, 80065d4 <__cvt+0x8c>
 80065cc:	f1c6 0601 	rsb	r6, r6, #1
 80065d0:	f8ca 6000 	str.w	r6, [sl]
 80065d4:	f8da 3000 	ldr.w	r3, [sl]
 80065d8:	4499      	add	r9, r3
 80065da:	2200      	movs	r2, #0
 80065dc:	2300      	movs	r3, #0
 80065de:	4620      	mov	r0, r4
 80065e0:	4629      	mov	r1, r5
 80065e2:	f7fa fa81 	bl	8000ae8 <__aeabi_dcmpeq>
 80065e6:	b108      	cbz	r0, 80065ec <__cvt+0xa4>
 80065e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80065ec:	2230      	movs	r2, #48	; 0x30
 80065ee:	9b03      	ldr	r3, [sp, #12]
 80065f0:	454b      	cmp	r3, r9
 80065f2:	d307      	bcc.n	8006604 <__cvt+0xbc>
 80065f4:	9b03      	ldr	r3, [sp, #12]
 80065f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065f8:	1bdb      	subs	r3, r3, r7
 80065fa:	4638      	mov	r0, r7
 80065fc:	6013      	str	r3, [r2, #0]
 80065fe:	b004      	add	sp, #16
 8006600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006604:	1c59      	adds	r1, r3, #1
 8006606:	9103      	str	r1, [sp, #12]
 8006608:	701a      	strb	r2, [r3, #0]
 800660a:	e7f0      	b.n	80065ee <__cvt+0xa6>

0800660c <__exponent>:
 800660c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800660e:	4603      	mov	r3, r0
 8006610:	2900      	cmp	r1, #0
 8006612:	bfb8      	it	lt
 8006614:	4249      	neglt	r1, r1
 8006616:	f803 2b02 	strb.w	r2, [r3], #2
 800661a:	bfb4      	ite	lt
 800661c:	222d      	movlt	r2, #45	; 0x2d
 800661e:	222b      	movge	r2, #43	; 0x2b
 8006620:	2909      	cmp	r1, #9
 8006622:	7042      	strb	r2, [r0, #1]
 8006624:	dd2a      	ble.n	800667c <__exponent+0x70>
 8006626:	f10d 0407 	add.w	r4, sp, #7
 800662a:	46a4      	mov	ip, r4
 800662c:	270a      	movs	r7, #10
 800662e:	46a6      	mov	lr, r4
 8006630:	460a      	mov	r2, r1
 8006632:	fb91 f6f7 	sdiv	r6, r1, r7
 8006636:	fb07 1516 	mls	r5, r7, r6, r1
 800663a:	3530      	adds	r5, #48	; 0x30
 800663c:	2a63      	cmp	r2, #99	; 0x63
 800663e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006642:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006646:	4631      	mov	r1, r6
 8006648:	dcf1      	bgt.n	800662e <__exponent+0x22>
 800664a:	3130      	adds	r1, #48	; 0x30
 800664c:	f1ae 0502 	sub.w	r5, lr, #2
 8006650:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006654:	1c44      	adds	r4, r0, #1
 8006656:	4629      	mov	r1, r5
 8006658:	4561      	cmp	r1, ip
 800665a:	d30a      	bcc.n	8006672 <__exponent+0x66>
 800665c:	f10d 0209 	add.w	r2, sp, #9
 8006660:	eba2 020e 	sub.w	r2, r2, lr
 8006664:	4565      	cmp	r5, ip
 8006666:	bf88      	it	hi
 8006668:	2200      	movhi	r2, #0
 800666a:	4413      	add	r3, r2
 800666c:	1a18      	subs	r0, r3, r0
 800666e:	b003      	add	sp, #12
 8006670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006672:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006676:	f804 2f01 	strb.w	r2, [r4, #1]!
 800667a:	e7ed      	b.n	8006658 <__exponent+0x4c>
 800667c:	2330      	movs	r3, #48	; 0x30
 800667e:	3130      	adds	r1, #48	; 0x30
 8006680:	7083      	strb	r3, [r0, #2]
 8006682:	70c1      	strb	r1, [r0, #3]
 8006684:	1d03      	adds	r3, r0, #4
 8006686:	e7f1      	b.n	800666c <__exponent+0x60>

08006688 <_printf_float>:
 8006688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800668c:	ed2d 8b02 	vpush	{d8}
 8006690:	b08d      	sub	sp, #52	; 0x34
 8006692:	460c      	mov	r4, r1
 8006694:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006698:	4616      	mov	r6, r2
 800669a:	461f      	mov	r7, r3
 800669c:	4605      	mov	r5, r0
 800669e:	f002 fe89 	bl	80093b4 <_localeconv_r>
 80066a2:	f8d0 a000 	ldr.w	sl, [r0]
 80066a6:	4650      	mov	r0, sl
 80066a8:	f7f9 fda2 	bl	80001f0 <strlen>
 80066ac:	2300      	movs	r3, #0
 80066ae:	930a      	str	r3, [sp, #40]	; 0x28
 80066b0:	6823      	ldr	r3, [r4, #0]
 80066b2:	9305      	str	r3, [sp, #20]
 80066b4:	f8d8 3000 	ldr.w	r3, [r8]
 80066b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80066bc:	3307      	adds	r3, #7
 80066be:	f023 0307 	bic.w	r3, r3, #7
 80066c2:	f103 0208 	add.w	r2, r3, #8
 80066c6:	f8c8 2000 	str.w	r2, [r8]
 80066ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80066d2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80066d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80066da:	9307      	str	r3, [sp, #28]
 80066dc:	f8cd 8018 	str.w	r8, [sp, #24]
 80066e0:	ee08 0a10 	vmov	s16, r0
 80066e4:	4b9f      	ldr	r3, [pc, #636]	; (8006964 <_printf_float+0x2dc>)
 80066e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066ea:	f04f 32ff 	mov.w	r2, #4294967295
 80066ee:	f7fa fa2d 	bl	8000b4c <__aeabi_dcmpun>
 80066f2:	bb88      	cbnz	r0, 8006758 <_printf_float+0xd0>
 80066f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066f8:	4b9a      	ldr	r3, [pc, #616]	; (8006964 <_printf_float+0x2dc>)
 80066fa:	f04f 32ff 	mov.w	r2, #4294967295
 80066fe:	f7fa fa07 	bl	8000b10 <__aeabi_dcmple>
 8006702:	bb48      	cbnz	r0, 8006758 <_printf_float+0xd0>
 8006704:	2200      	movs	r2, #0
 8006706:	2300      	movs	r3, #0
 8006708:	4640      	mov	r0, r8
 800670a:	4649      	mov	r1, r9
 800670c:	f7fa f9f6 	bl	8000afc <__aeabi_dcmplt>
 8006710:	b110      	cbz	r0, 8006718 <_printf_float+0x90>
 8006712:	232d      	movs	r3, #45	; 0x2d
 8006714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006718:	4b93      	ldr	r3, [pc, #588]	; (8006968 <_printf_float+0x2e0>)
 800671a:	4894      	ldr	r0, [pc, #592]	; (800696c <_printf_float+0x2e4>)
 800671c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006720:	bf94      	ite	ls
 8006722:	4698      	movls	r8, r3
 8006724:	4680      	movhi	r8, r0
 8006726:	2303      	movs	r3, #3
 8006728:	6123      	str	r3, [r4, #16]
 800672a:	9b05      	ldr	r3, [sp, #20]
 800672c:	f023 0204 	bic.w	r2, r3, #4
 8006730:	6022      	str	r2, [r4, #0]
 8006732:	f04f 0900 	mov.w	r9, #0
 8006736:	9700      	str	r7, [sp, #0]
 8006738:	4633      	mov	r3, r6
 800673a:	aa0b      	add	r2, sp, #44	; 0x2c
 800673c:	4621      	mov	r1, r4
 800673e:	4628      	mov	r0, r5
 8006740:	f000 f9d8 	bl	8006af4 <_printf_common>
 8006744:	3001      	adds	r0, #1
 8006746:	f040 8090 	bne.w	800686a <_printf_float+0x1e2>
 800674a:	f04f 30ff 	mov.w	r0, #4294967295
 800674e:	b00d      	add	sp, #52	; 0x34
 8006750:	ecbd 8b02 	vpop	{d8}
 8006754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006758:	4642      	mov	r2, r8
 800675a:	464b      	mov	r3, r9
 800675c:	4640      	mov	r0, r8
 800675e:	4649      	mov	r1, r9
 8006760:	f7fa f9f4 	bl	8000b4c <__aeabi_dcmpun>
 8006764:	b140      	cbz	r0, 8006778 <_printf_float+0xf0>
 8006766:	464b      	mov	r3, r9
 8006768:	2b00      	cmp	r3, #0
 800676a:	bfbc      	itt	lt
 800676c:	232d      	movlt	r3, #45	; 0x2d
 800676e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006772:	487f      	ldr	r0, [pc, #508]	; (8006970 <_printf_float+0x2e8>)
 8006774:	4b7f      	ldr	r3, [pc, #508]	; (8006974 <_printf_float+0x2ec>)
 8006776:	e7d1      	b.n	800671c <_printf_float+0x94>
 8006778:	6863      	ldr	r3, [r4, #4]
 800677a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800677e:	9206      	str	r2, [sp, #24]
 8006780:	1c5a      	adds	r2, r3, #1
 8006782:	d13f      	bne.n	8006804 <_printf_float+0x17c>
 8006784:	2306      	movs	r3, #6
 8006786:	6063      	str	r3, [r4, #4]
 8006788:	9b05      	ldr	r3, [sp, #20]
 800678a:	6861      	ldr	r1, [r4, #4]
 800678c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006790:	2300      	movs	r3, #0
 8006792:	9303      	str	r3, [sp, #12]
 8006794:	ab0a      	add	r3, sp, #40	; 0x28
 8006796:	e9cd b301 	strd	fp, r3, [sp, #4]
 800679a:	ab09      	add	r3, sp, #36	; 0x24
 800679c:	ec49 8b10 	vmov	d0, r8, r9
 80067a0:	9300      	str	r3, [sp, #0]
 80067a2:	6022      	str	r2, [r4, #0]
 80067a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80067a8:	4628      	mov	r0, r5
 80067aa:	f7ff fecd 	bl	8006548 <__cvt>
 80067ae:	9b06      	ldr	r3, [sp, #24]
 80067b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067b2:	2b47      	cmp	r3, #71	; 0x47
 80067b4:	4680      	mov	r8, r0
 80067b6:	d108      	bne.n	80067ca <_printf_float+0x142>
 80067b8:	1cc8      	adds	r0, r1, #3
 80067ba:	db02      	blt.n	80067c2 <_printf_float+0x13a>
 80067bc:	6863      	ldr	r3, [r4, #4]
 80067be:	4299      	cmp	r1, r3
 80067c0:	dd41      	ble.n	8006846 <_printf_float+0x1be>
 80067c2:	f1ab 0b02 	sub.w	fp, fp, #2
 80067c6:	fa5f fb8b 	uxtb.w	fp, fp
 80067ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80067ce:	d820      	bhi.n	8006812 <_printf_float+0x18a>
 80067d0:	3901      	subs	r1, #1
 80067d2:	465a      	mov	r2, fp
 80067d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80067d8:	9109      	str	r1, [sp, #36]	; 0x24
 80067da:	f7ff ff17 	bl	800660c <__exponent>
 80067de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067e0:	1813      	adds	r3, r2, r0
 80067e2:	2a01      	cmp	r2, #1
 80067e4:	4681      	mov	r9, r0
 80067e6:	6123      	str	r3, [r4, #16]
 80067e8:	dc02      	bgt.n	80067f0 <_printf_float+0x168>
 80067ea:	6822      	ldr	r2, [r4, #0]
 80067ec:	07d2      	lsls	r2, r2, #31
 80067ee:	d501      	bpl.n	80067f4 <_printf_float+0x16c>
 80067f0:	3301      	adds	r3, #1
 80067f2:	6123      	str	r3, [r4, #16]
 80067f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d09c      	beq.n	8006736 <_printf_float+0xae>
 80067fc:	232d      	movs	r3, #45	; 0x2d
 80067fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006802:	e798      	b.n	8006736 <_printf_float+0xae>
 8006804:	9a06      	ldr	r2, [sp, #24]
 8006806:	2a47      	cmp	r2, #71	; 0x47
 8006808:	d1be      	bne.n	8006788 <_printf_float+0x100>
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1bc      	bne.n	8006788 <_printf_float+0x100>
 800680e:	2301      	movs	r3, #1
 8006810:	e7b9      	b.n	8006786 <_printf_float+0xfe>
 8006812:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006816:	d118      	bne.n	800684a <_printf_float+0x1c2>
 8006818:	2900      	cmp	r1, #0
 800681a:	6863      	ldr	r3, [r4, #4]
 800681c:	dd0b      	ble.n	8006836 <_printf_float+0x1ae>
 800681e:	6121      	str	r1, [r4, #16]
 8006820:	b913      	cbnz	r3, 8006828 <_printf_float+0x1a0>
 8006822:	6822      	ldr	r2, [r4, #0]
 8006824:	07d0      	lsls	r0, r2, #31
 8006826:	d502      	bpl.n	800682e <_printf_float+0x1a6>
 8006828:	3301      	adds	r3, #1
 800682a:	440b      	add	r3, r1
 800682c:	6123      	str	r3, [r4, #16]
 800682e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006830:	f04f 0900 	mov.w	r9, #0
 8006834:	e7de      	b.n	80067f4 <_printf_float+0x16c>
 8006836:	b913      	cbnz	r3, 800683e <_printf_float+0x1b6>
 8006838:	6822      	ldr	r2, [r4, #0]
 800683a:	07d2      	lsls	r2, r2, #31
 800683c:	d501      	bpl.n	8006842 <_printf_float+0x1ba>
 800683e:	3302      	adds	r3, #2
 8006840:	e7f4      	b.n	800682c <_printf_float+0x1a4>
 8006842:	2301      	movs	r3, #1
 8006844:	e7f2      	b.n	800682c <_printf_float+0x1a4>
 8006846:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800684a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800684c:	4299      	cmp	r1, r3
 800684e:	db05      	blt.n	800685c <_printf_float+0x1d4>
 8006850:	6823      	ldr	r3, [r4, #0]
 8006852:	6121      	str	r1, [r4, #16]
 8006854:	07d8      	lsls	r0, r3, #31
 8006856:	d5ea      	bpl.n	800682e <_printf_float+0x1a6>
 8006858:	1c4b      	adds	r3, r1, #1
 800685a:	e7e7      	b.n	800682c <_printf_float+0x1a4>
 800685c:	2900      	cmp	r1, #0
 800685e:	bfd4      	ite	le
 8006860:	f1c1 0202 	rsble	r2, r1, #2
 8006864:	2201      	movgt	r2, #1
 8006866:	4413      	add	r3, r2
 8006868:	e7e0      	b.n	800682c <_printf_float+0x1a4>
 800686a:	6823      	ldr	r3, [r4, #0]
 800686c:	055a      	lsls	r2, r3, #21
 800686e:	d407      	bmi.n	8006880 <_printf_float+0x1f8>
 8006870:	6923      	ldr	r3, [r4, #16]
 8006872:	4642      	mov	r2, r8
 8006874:	4631      	mov	r1, r6
 8006876:	4628      	mov	r0, r5
 8006878:	47b8      	blx	r7
 800687a:	3001      	adds	r0, #1
 800687c:	d12c      	bne.n	80068d8 <_printf_float+0x250>
 800687e:	e764      	b.n	800674a <_printf_float+0xc2>
 8006880:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006884:	f240 80e0 	bls.w	8006a48 <_printf_float+0x3c0>
 8006888:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800688c:	2200      	movs	r2, #0
 800688e:	2300      	movs	r3, #0
 8006890:	f7fa f92a 	bl	8000ae8 <__aeabi_dcmpeq>
 8006894:	2800      	cmp	r0, #0
 8006896:	d034      	beq.n	8006902 <_printf_float+0x27a>
 8006898:	4a37      	ldr	r2, [pc, #220]	; (8006978 <_printf_float+0x2f0>)
 800689a:	2301      	movs	r3, #1
 800689c:	4631      	mov	r1, r6
 800689e:	4628      	mov	r0, r5
 80068a0:	47b8      	blx	r7
 80068a2:	3001      	adds	r0, #1
 80068a4:	f43f af51 	beq.w	800674a <_printf_float+0xc2>
 80068a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068ac:	429a      	cmp	r2, r3
 80068ae:	db02      	blt.n	80068b6 <_printf_float+0x22e>
 80068b0:	6823      	ldr	r3, [r4, #0]
 80068b2:	07d8      	lsls	r0, r3, #31
 80068b4:	d510      	bpl.n	80068d8 <_printf_float+0x250>
 80068b6:	ee18 3a10 	vmov	r3, s16
 80068ba:	4652      	mov	r2, sl
 80068bc:	4631      	mov	r1, r6
 80068be:	4628      	mov	r0, r5
 80068c0:	47b8      	blx	r7
 80068c2:	3001      	adds	r0, #1
 80068c4:	f43f af41 	beq.w	800674a <_printf_float+0xc2>
 80068c8:	f04f 0800 	mov.w	r8, #0
 80068cc:	f104 091a 	add.w	r9, r4, #26
 80068d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068d2:	3b01      	subs	r3, #1
 80068d4:	4543      	cmp	r3, r8
 80068d6:	dc09      	bgt.n	80068ec <_printf_float+0x264>
 80068d8:	6823      	ldr	r3, [r4, #0]
 80068da:	079b      	lsls	r3, r3, #30
 80068dc:	f100 8105 	bmi.w	8006aea <_printf_float+0x462>
 80068e0:	68e0      	ldr	r0, [r4, #12]
 80068e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068e4:	4298      	cmp	r0, r3
 80068e6:	bfb8      	it	lt
 80068e8:	4618      	movlt	r0, r3
 80068ea:	e730      	b.n	800674e <_printf_float+0xc6>
 80068ec:	2301      	movs	r3, #1
 80068ee:	464a      	mov	r2, r9
 80068f0:	4631      	mov	r1, r6
 80068f2:	4628      	mov	r0, r5
 80068f4:	47b8      	blx	r7
 80068f6:	3001      	adds	r0, #1
 80068f8:	f43f af27 	beq.w	800674a <_printf_float+0xc2>
 80068fc:	f108 0801 	add.w	r8, r8, #1
 8006900:	e7e6      	b.n	80068d0 <_printf_float+0x248>
 8006902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006904:	2b00      	cmp	r3, #0
 8006906:	dc39      	bgt.n	800697c <_printf_float+0x2f4>
 8006908:	4a1b      	ldr	r2, [pc, #108]	; (8006978 <_printf_float+0x2f0>)
 800690a:	2301      	movs	r3, #1
 800690c:	4631      	mov	r1, r6
 800690e:	4628      	mov	r0, r5
 8006910:	47b8      	blx	r7
 8006912:	3001      	adds	r0, #1
 8006914:	f43f af19 	beq.w	800674a <_printf_float+0xc2>
 8006918:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800691c:	4313      	orrs	r3, r2
 800691e:	d102      	bne.n	8006926 <_printf_float+0x29e>
 8006920:	6823      	ldr	r3, [r4, #0]
 8006922:	07d9      	lsls	r1, r3, #31
 8006924:	d5d8      	bpl.n	80068d8 <_printf_float+0x250>
 8006926:	ee18 3a10 	vmov	r3, s16
 800692a:	4652      	mov	r2, sl
 800692c:	4631      	mov	r1, r6
 800692e:	4628      	mov	r0, r5
 8006930:	47b8      	blx	r7
 8006932:	3001      	adds	r0, #1
 8006934:	f43f af09 	beq.w	800674a <_printf_float+0xc2>
 8006938:	f04f 0900 	mov.w	r9, #0
 800693c:	f104 0a1a 	add.w	sl, r4, #26
 8006940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006942:	425b      	negs	r3, r3
 8006944:	454b      	cmp	r3, r9
 8006946:	dc01      	bgt.n	800694c <_printf_float+0x2c4>
 8006948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800694a:	e792      	b.n	8006872 <_printf_float+0x1ea>
 800694c:	2301      	movs	r3, #1
 800694e:	4652      	mov	r2, sl
 8006950:	4631      	mov	r1, r6
 8006952:	4628      	mov	r0, r5
 8006954:	47b8      	blx	r7
 8006956:	3001      	adds	r0, #1
 8006958:	f43f aef7 	beq.w	800674a <_printf_float+0xc2>
 800695c:	f109 0901 	add.w	r9, r9, #1
 8006960:	e7ee      	b.n	8006940 <_printf_float+0x2b8>
 8006962:	bf00      	nop
 8006964:	7fefffff 	.word	0x7fefffff
 8006968:	0800d524 	.word	0x0800d524
 800696c:	0800d528 	.word	0x0800d528
 8006970:	0800d530 	.word	0x0800d530
 8006974:	0800d52c 	.word	0x0800d52c
 8006978:	0800d534 	.word	0x0800d534
 800697c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800697e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006980:	429a      	cmp	r2, r3
 8006982:	bfa8      	it	ge
 8006984:	461a      	movge	r2, r3
 8006986:	2a00      	cmp	r2, #0
 8006988:	4691      	mov	r9, r2
 800698a:	dc37      	bgt.n	80069fc <_printf_float+0x374>
 800698c:	f04f 0b00 	mov.w	fp, #0
 8006990:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006994:	f104 021a 	add.w	r2, r4, #26
 8006998:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800699a:	9305      	str	r3, [sp, #20]
 800699c:	eba3 0309 	sub.w	r3, r3, r9
 80069a0:	455b      	cmp	r3, fp
 80069a2:	dc33      	bgt.n	8006a0c <_printf_float+0x384>
 80069a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069a8:	429a      	cmp	r2, r3
 80069aa:	db3b      	blt.n	8006a24 <_printf_float+0x39c>
 80069ac:	6823      	ldr	r3, [r4, #0]
 80069ae:	07da      	lsls	r2, r3, #31
 80069b0:	d438      	bmi.n	8006a24 <_printf_float+0x39c>
 80069b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069b4:	9a05      	ldr	r2, [sp, #20]
 80069b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069b8:	1a9a      	subs	r2, r3, r2
 80069ba:	eba3 0901 	sub.w	r9, r3, r1
 80069be:	4591      	cmp	r9, r2
 80069c0:	bfa8      	it	ge
 80069c2:	4691      	movge	r9, r2
 80069c4:	f1b9 0f00 	cmp.w	r9, #0
 80069c8:	dc35      	bgt.n	8006a36 <_printf_float+0x3ae>
 80069ca:	f04f 0800 	mov.w	r8, #0
 80069ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069d2:	f104 0a1a 	add.w	sl, r4, #26
 80069d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069da:	1a9b      	subs	r3, r3, r2
 80069dc:	eba3 0309 	sub.w	r3, r3, r9
 80069e0:	4543      	cmp	r3, r8
 80069e2:	f77f af79 	ble.w	80068d8 <_printf_float+0x250>
 80069e6:	2301      	movs	r3, #1
 80069e8:	4652      	mov	r2, sl
 80069ea:	4631      	mov	r1, r6
 80069ec:	4628      	mov	r0, r5
 80069ee:	47b8      	blx	r7
 80069f0:	3001      	adds	r0, #1
 80069f2:	f43f aeaa 	beq.w	800674a <_printf_float+0xc2>
 80069f6:	f108 0801 	add.w	r8, r8, #1
 80069fa:	e7ec      	b.n	80069d6 <_printf_float+0x34e>
 80069fc:	4613      	mov	r3, r2
 80069fe:	4631      	mov	r1, r6
 8006a00:	4642      	mov	r2, r8
 8006a02:	4628      	mov	r0, r5
 8006a04:	47b8      	blx	r7
 8006a06:	3001      	adds	r0, #1
 8006a08:	d1c0      	bne.n	800698c <_printf_float+0x304>
 8006a0a:	e69e      	b.n	800674a <_printf_float+0xc2>
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	4631      	mov	r1, r6
 8006a10:	4628      	mov	r0, r5
 8006a12:	9205      	str	r2, [sp, #20]
 8006a14:	47b8      	blx	r7
 8006a16:	3001      	adds	r0, #1
 8006a18:	f43f ae97 	beq.w	800674a <_printf_float+0xc2>
 8006a1c:	9a05      	ldr	r2, [sp, #20]
 8006a1e:	f10b 0b01 	add.w	fp, fp, #1
 8006a22:	e7b9      	b.n	8006998 <_printf_float+0x310>
 8006a24:	ee18 3a10 	vmov	r3, s16
 8006a28:	4652      	mov	r2, sl
 8006a2a:	4631      	mov	r1, r6
 8006a2c:	4628      	mov	r0, r5
 8006a2e:	47b8      	blx	r7
 8006a30:	3001      	adds	r0, #1
 8006a32:	d1be      	bne.n	80069b2 <_printf_float+0x32a>
 8006a34:	e689      	b.n	800674a <_printf_float+0xc2>
 8006a36:	9a05      	ldr	r2, [sp, #20]
 8006a38:	464b      	mov	r3, r9
 8006a3a:	4442      	add	r2, r8
 8006a3c:	4631      	mov	r1, r6
 8006a3e:	4628      	mov	r0, r5
 8006a40:	47b8      	blx	r7
 8006a42:	3001      	adds	r0, #1
 8006a44:	d1c1      	bne.n	80069ca <_printf_float+0x342>
 8006a46:	e680      	b.n	800674a <_printf_float+0xc2>
 8006a48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a4a:	2a01      	cmp	r2, #1
 8006a4c:	dc01      	bgt.n	8006a52 <_printf_float+0x3ca>
 8006a4e:	07db      	lsls	r3, r3, #31
 8006a50:	d538      	bpl.n	8006ac4 <_printf_float+0x43c>
 8006a52:	2301      	movs	r3, #1
 8006a54:	4642      	mov	r2, r8
 8006a56:	4631      	mov	r1, r6
 8006a58:	4628      	mov	r0, r5
 8006a5a:	47b8      	blx	r7
 8006a5c:	3001      	adds	r0, #1
 8006a5e:	f43f ae74 	beq.w	800674a <_printf_float+0xc2>
 8006a62:	ee18 3a10 	vmov	r3, s16
 8006a66:	4652      	mov	r2, sl
 8006a68:	4631      	mov	r1, r6
 8006a6a:	4628      	mov	r0, r5
 8006a6c:	47b8      	blx	r7
 8006a6e:	3001      	adds	r0, #1
 8006a70:	f43f ae6b 	beq.w	800674a <_printf_float+0xc2>
 8006a74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a78:	2200      	movs	r2, #0
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	f7fa f834 	bl	8000ae8 <__aeabi_dcmpeq>
 8006a80:	b9d8      	cbnz	r0, 8006aba <_printf_float+0x432>
 8006a82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a84:	f108 0201 	add.w	r2, r8, #1
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	4631      	mov	r1, r6
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	47b8      	blx	r7
 8006a90:	3001      	adds	r0, #1
 8006a92:	d10e      	bne.n	8006ab2 <_printf_float+0x42a>
 8006a94:	e659      	b.n	800674a <_printf_float+0xc2>
 8006a96:	2301      	movs	r3, #1
 8006a98:	4652      	mov	r2, sl
 8006a9a:	4631      	mov	r1, r6
 8006a9c:	4628      	mov	r0, r5
 8006a9e:	47b8      	blx	r7
 8006aa0:	3001      	adds	r0, #1
 8006aa2:	f43f ae52 	beq.w	800674a <_printf_float+0xc2>
 8006aa6:	f108 0801 	add.w	r8, r8, #1
 8006aaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aac:	3b01      	subs	r3, #1
 8006aae:	4543      	cmp	r3, r8
 8006ab0:	dcf1      	bgt.n	8006a96 <_printf_float+0x40e>
 8006ab2:	464b      	mov	r3, r9
 8006ab4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006ab8:	e6dc      	b.n	8006874 <_printf_float+0x1ec>
 8006aba:	f04f 0800 	mov.w	r8, #0
 8006abe:	f104 0a1a 	add.w	sl, r4, #26
 8006ac2:	e7f2      	b.n	8006aaa <_printf_float+0x422>
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	4642      	mov	r2, r8
 8006ac8:	e7df      	b.n	8006a8a <_printf_float+0x402>
 8006aca:	2301      	movs	r3, #1
 8006acc:	464a      	mov	r2, r9
 8006ace:	4631      	mov	r1, r6
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	47b8      	blx	r7
 8006ad4:	3001      	adds	r0, #1
 8006ad6:	f43f ae38 	beq.w	800674a <_printf_float+0xc2>
 8006ada:	f108 0801 	add.w	r8, r8, #1
 8006ade:	68e3      	ldr	r3, [r4, #12]
 8006ae0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ae2:	1a5b      	subs	r3, r3, r1
 8006ae4:	4543      	cmp	r3, r8
 8006ae6:	dcf0      	bgt.n	8006aca <_printf_float+0x442>
 8006ae8:	e6fa      	b.n	80068e0 <_printf_float+0x258>
 8006aea:	f04f 0800 	mov.w	r8, #0
 8006aee:	f104 0919 	add.w	r9, r4, #25
 8006af2:	e7f4      	b.n	8006ade <_printf_float+0x456>

08006af4 <_printf_common>:
 8006af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006af8:	4616      	mov	r6, r2
 8006afa:	4699      	mov	r9, r3
 8006afc:	688a      	ldr	r2, [r1, #8]
 8006afe:	690b      	ldr	r3, [r1, #16]
 8006b00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b04:	4293      	cmp	r3, r2
 8006b06:	bfb8      	it	lt
 8006b08:	4613      	movlt	r3, r2
 8006b0a:	6033      	str	r3, [r6, #0]
 8006b0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b10:	4607      	mov	r7, r0
 8006b12:	460c      	mov	r4, r1
 8006b14:	b10a      	cbz	r2, 8006b1a <_printf_common+0x26>
 8006b16:	3301      	adds	r3, #1
 8006b18:	6033      	str	r3, [r6, #0]
 8006b1a:	6823      	ldr	r3, [r4, #0]
 8006b1c:	0699      	lsls	r1, r3, #26
 8006b1e:	bf42      	ittt	mi
 8006b20:	6833      	ldrmi	r3, [r6, #0]
 8006b22:	3302      	addmi	r3, #2
 8006b24:	6033      	strmi	r3, [r6, #0]
 8006b26:	6825      	ldr	r5, [r4, #0]
 8006b28:	f015 0506 	ands.w	r5, r5, #6
 8006b2c:	d106      	bne.n	8006b3c <_printf_common+0x48>
 8006b2e:	f104 0a19 	add.w	sl, r4, #25
 8006b32:	68e3      	ldr	r3, [r4, #12]
 8006b34:	6832      	ldr	r2, [r6, #0]
 8006b36:	1a9b      	subs	r3, r3, r2
 8006b38:	42ab      	cmp	r3, r5
 8006b3a:	dc26      	bgt.n	8006b8a <_printf_common+0x96>
 8006b3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b40:	1e13      	subs	r3, r2, #0
 8006b42:	6822      	ldr	r2, [r4, #0]
 8006b44:	bf18      	it	ne
 8006b46:	2301      	movne	r3, #1
 8006b48:	0692      	lsls	r2, r2, #26
 8006b4a:	d42b      	bmi.n	8006ba4 <_printf_common+0xb0>
 8006b4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b50:	4649      	mov	r1, r9
 8006b52:	4638      	mov	r0, r7
 8006b54:	47c0      	blx	r8
 8006b56:	3001      	adds	r0, #1
 8006b58:	d01e      	beq.n	8006b98 <_printf_common+0xa4>
 8006b5a:	6823      	ldr	r3, [r4, #0]
 8006b5c:	68e5      	ldr	r5, [r4, #12]
 8006b5e:	6832      	ldr	r2, [r6, #0]
 8006b60:	f003 0306 	and.w	r3, r3, #6
 8006b64:	2b04      	cmp	r3, #4
 8006b66:	bf08      	it	eq
 8006b68:	1aad      	subeq	r5, r5, r2
 8006b6a:	68a3      	ldr	r3, [r4, #8]
 8006b6c:	6922      	ldr	r2, [r4, #16]
 8006b6e:	bf0c      	ite	eq
 8006b70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b74:	2500      	movne	r5, #0
 8006b76:	4293      	cmp	r3, r2
 8006b78:	bfc4      	itt	gt
 8006b7a:	1a9b      	subgt	r3, r3, r2
 8006b7c:	18ed      	addgt	r5, r5, r3
 8006b7e:	2600      	movs	r6, #0
 8006b80:	341a      	adds	r4, #26
 8006b82:	42b5      	cmp	r5, r6
 8006b84:	d11a      	bne.n	8006bbc <_printf_common+0xc8>
 8006b86:	2000      	movs	r0, #0
 8006b88:	e008      	b.n	8006b9c <_printf_common+0xa8>
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	4652      	mov	r2, sl
 8006b8e:	4649      	mov	r1, r9
 8006b90:	4638      	mov	r0, r7
 8006b92:	47c0      	blx	r8
 8006b94:	3001      	adds	r0, #1
 8006b96:	d103      	bne.n	8006ba0 <_printf_common+0xac>
 8006b98:	f04f 30ff 	mov.w	r0, #4294967295
 8006b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ba0:	3501      	adds	r5, #1
 8006ba2:	e7c6      	b.n	8006b32 <_printf_common+0x3e>
 8006ba4:	18e1      	adds	r1, r4, r3
 8006ba6:	1c5a      	adds	r2, r3, #1
 8006ba8:	2030      	movs	r0, #48	; 0x30
 8006baa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bae:	4422      	add	r2, r4
 8006bb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006bb8:	3302      	adds	r3, #2
 8006bba:	e7c7      	b.n	8006b4c <_printf_common+0x58>
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	4622      	mov	r2, r4
 8006bc0:	4649      	mov	r1, r9
 8006bc2:	4638      	mov	r0, r7
 8006bc4:	47c0      	blx	r8
 8006bc6:	3001      	adds	r0, #1
 8006bc8:	d0e6      	beq.n	8006b98 <_printf_common+0xa4>
 8006bca:	3601      	adds	r6, #1
 8006bcc:	e7d9      	b.n	8006b82 <_printf_common+0x8e>
	...

08006bd0 <_printf_i>:
 8006bd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bd4:	7e0f      	ldrb	r7, [r1, #24]
 8006bd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006bd8:	2f78      	cmp	r7, #120	; 0x78
 8006bda:	4691      	mov	r9, r2
 8006bdc:	4680      	mov	r8, r0
 8006bde:	460c      	mov	r4, r1
 8006be0:	469a      	mov	sl, r3
 8006be2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006be6:	d807      	bhi.n	8006bf8 <_printf_i+0x28>
 8006be8:	2f62      	cmp	r7, #98	; 0x62
 8006bea:	d80a      	bhi.n	8006c02 <_printf_i+0x32>
 8006bec:	2f00      	cmp	r7, #0
 8006bee:	f000 80d8 	beq.w	8006da2 <_printf_i+0x1d2>
 8006bf2:	2f58      	cmp	r7, #88	; 0x58
 8006bf4:	f000 80a3 	beq.w	8006d3e <_printf_i+0x16e>
 8006bf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c00:	e03a      	b.n	8006c78 <_printf_i+0xa8>
 8006c02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c06:	2b15      	cmp	r3, #21
 8006c08:	d8f6      	bhi.n	8006bf8 <_printf_i+0x28>
 8006c0a:	a101      	add	r1, pc, #4	; (adr r1, 8006c10 <_printf_i+0x40>)
 8006c0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c10:	08006c69 	.word	0x08006c69
 8006c14:	08006c7d 	.word	0x08006c7d
 8006c18:	08006bf9 	.word	0x08006bf9
 8006c1c:	08006bf9 	.word	0x08006bf9
 8006c20:	08006bf9 	.word	0x08006bf9
 8006c24:	08006bf9 	.word	0x08006bf9
 8006c28:	08006c7d 	.word	0x08006c7d
 8006c2c:	08006bf9 	.word	0x08006bf9
 8006c30:	08006bf9 	.word	0x08006bf9
 8006c34:	08006bf9 	.word	0x08006bf9
 8006c38:	08006bf9 	.word	0x08006bf9
 8006c3c:	08006d89 	.word	0x08006d89
 8006c40:	08006cad 	.word	0x08006cad
 8006c44:	08006d6b 	.word	0x08006d6b
 8006c48:	08006bf9 	.word	0x08006bf9
 8006c4c:	08006bf9 	.word	0x08006bf9
 8006c50:	08006dab 	.word	0x08006dab
 8006c54:	08006bf9 	.word	0x08006bf9
 8006c58:	08006cad 	.word	0x08006cad
 8006c5c:	08006bf9 	.word	0x08006bf9
 8006c60:	08006bf9 	.word	0x08006bf9
 8006c64:	08006d73 	.word	0x08006d73
 8006c68:	682b      	ldr	r3, [r5, #0]
 8006c6a:	1d1a      	adds	r2, r3, #4
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	602a      	str	r2, [r5, #0]
 8006c70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e0a3      	b.n	8006dc4 <_printf_i+0x1f4>
 8006c7c:	6820      	ldr	r0, [r4, #0]
 8006c7e:	6829      	ldr	r1, [r5, #0]
 8006c80:	0606      	lsls	r6, r0, #24
 8006c82:	f101 0304 	add.w	r3, r1, #4
 8006c86:	d50a      	bpl.n	8006c9e <_printf_i+0xce>
 8006c88:	680e      	ldr	r6, [r1, #0]
 8006c8a:	602b      	str	r3, [r5, #0]
 8006c8c:	2e00      	cmp	r6, #0
 8006c8e:	da03      	bge.n	8006c98 <_printf_i+0xc8>
 8006c90:	232d      	movs	r3, #45	; 0x2d
 8006c92:	4276      	negs	r6, r6
 8006c94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c98:	485e      	ldr	r0, [pc, #376]	; (8006e14 <_printf_i+0x244>)
 8006c9a:	230a      	movs	r3, #10
 8006c9c:	e019      	b.n	8006cd2 <_printf_i+0x102>
 8006c9e:	680e      	ldr	r6, [r1, #0]
 8006ca0:	602b      	str	r3, [r5, #0]
 8006ca2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006ca6:	bf18      	it	ne
 8006ca8:	b236      	sxthne	r6, r6
 8006caa:	e7ef      	b.n	8006c8c <_printf_i+0xbc>
 8006cac:	682b      	ldr	r3, [r5, #0]
 8006cae:	6820      	ldr	r0, [r4, #0]
 8006cb0:	1d19      	adds	r1, r3, #4
 8006cb2:	6029      	str	r1, [r5, #0]
 8006cb4:	0601      	lsls	r1, r0, #24
 8006cb6:	d501      	bpl.n	8006cbc <_printf_i+0xec>
 8006cb8:	681e      	ldr	r6, [r3, #0]
 8006cba:	e002      	b.n	8006cc2 <_printf_i+0xf2>
 8006cbc:	0646      	lsls	r6, r0, #25
 8006cbe:	d5fb      	bpl.n	8006cb8 <_printf_i+0xe8>
 8006cc0:	881e      	ldrh	r6, [r3, #0]
 8006cc2:	4854      	ldr	r0, [pc, #336]	; (8006e14 <_printf_i+0x244>)
 8006cc4:	2f6f      	cmp	r7, #111	; 0x6f
 8006cc6:	bf0c      	ite	eq
 8006cc8:	2308      	moveq	r3, #8
 8006cca:	230a      	movne	r3, #10
 8006ccc:	2100      	movs	r1, #0
 8006cce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006cd2:	6865      	ldr	r5, [r4, #4]
 8006cd4:	60a5      	str	r5, [r4, #8]
 8006cd6:	2d00      	cmp	r5, #0
 8006cd8:	bfa2      	ittt	ge
 8006cda:	6821      	ldrge	r1, [r4, #0]
 8006cdc:	f021 0104 	bicge.w	r1, r1, #4
 8006ce0:	6021      	strge	r1, [r4, #0]
 8006ce2:	b90e      	cbnz	r6, 8006ce8 <_printf_i+0x118>
 8006ce4:	2d00      	cmp	r5, #0
 8006ce6:	d04d      	beq.n	8006d84 <_printf_i+0x1b4>
 8006ce8:	4615      	mov	r5, r2
 8006cea:	fbb6 f1f3 	udiv	r1, r6, r3
 8006cee:	fb03 6711 	mls	r7, r3, r1, r6
 8006cf2:	5dc7      	ldrb	r7, [r0, r7]
 8006cf4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006cf8:	4637      	mov	r7, r6
 8006cfa:	42bb      	cmp	r3, r7
 8006cfc:	460e      	mov	r6, r1
 8006cfe:	d9f4      	bls.n	8006cea <_printf_i+0x11a>
 8006d00:	2b08      	cmp	r3, #8
 8006d02:	d10b      	bne.n	8006d1c <_printf_i+0x14c>
 8006d04:	6823      	ldr	r3, [r4, #0]
 8006d06:	07de      	lsls	r6, r3, #31
 8006d08:	d508      	bpl.n	8006d1c <_printf_i+0x14c>
 8006d0a:	6923      	ldr	r3, [r4, #16]
 8006d0c:	6861      	ldr	r1, [r4, #4]
 8006d0e:	4299      	cmp	r1, r3
 8006d10:	bfde      	ittt	le
 8006d12:	2330      	movle	r3, #48	; 0x30
 8006d14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d1c:	1b52      	subs	r2, r2, r5
 8006d1e:	6122      	str	r2, [r4, #16]
 8006d20:	f8cd a000 	str.w	sl, [sp]
 8006d24:	464b      	mov	r3, r9
 8006d26:	aa03      	add	r2, sp, #12
 8006d28:	4621      	mov	r1, r4
 8006d2a:	4640      	mov	r0, r8
 8006d2c:	f7ff fee2 	bl	8006af4 <_printf_common>
 8006d30:	3001      	adds	r0, #1
 8006d32:	d14c      	bne.n	8006dce <_printf_i+0x1fe>
 8006d34:	f04f 30ff 	mov.w	r0, #4294967295
 8006d38:	b004      	add	sp, #16
 8006d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d3e:	4835      	ldr	r0, [pc, #212]	; (8006e14 <_printf_i+0x244>)
 8006d40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006d44:	6829      	ldr	r1, [r5, #0]
 8006d46:	6823      	ldr	r3, [r4, #0]
 8006d48:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d4c:	6029      	str	r1, [r5, #0]
 8006d4e:	061d      	lsls	r5, r3, #24
 8006d50:	d514      	bpl.n	8006d7c <_printf_i+0x1ac>
 8006d52:	07df      	lsls	r7, r3, #31
 8006d54:	bf44      	itt	mi
 8006d56:	f043 0320 	orrmi.w	r3, r3, #32
 8006d5a:	6023      	strmi	r3, [r4, #0]
 8006d5c:	b91e      	cbnz	r6, 8006d66 <_printf_i+0x196>
 8006d5e:	6823      	ldr	r3, [r4, #0]
 8006d60:	f023 0320 	bic.w	r3, r3, #32
 8006d64:	6023      	str	r3, [r4, #0]
 8006d66:	2310      	movs	r3, #16
 8006d68:	e7b0      	b.n	8006ccc <_printf_i+0xfc>
 8006d6a:	6823      	ldr	r3, [r4, #0]
 8006d6c:	f043 0320 	orr.w	r3, r3, #32
 8006d70:	6023      	str	r3, [r4, #0]
 8006d72:	2378      	movs	r3, #120	; 0x78
 8006d74:	4828      	ldr	r0, [pc, #160]	; (8006e18 <_printf_i+0x248>)
 8006d76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d7a:	e7e3      	b.n	8006d44 <_printf_i+0x174>
 8006d7c:	0659      	lsls	r1, r3, #25
 8006d7e:	bf48      	it	mi
 8006d80:	b2b6      	uxthmi	r6, r6
 8006d82:	e7e6      	b.n	8006d52 <_printf_i+0x182>
 8006d84:	4615      	mov	r5, r2
 8006d86:	e7bb      	b.n	8006d00 <_printf_i+0x130>
 8006d88:	682b      	ldr	r3, [r5, #0]
 8006d8a:	6826      	ldr	r6, [r4, #0]
 8006d8c:	6961      	ldr	r1, [r4, #20]
 8006d8e:	1d18      	adds	r0, r3, #4
 8006d90:	6028      	str	r0, [r5, #0]
 8006d92:	0635      	lsls	r5, r6, #24
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	d501      	bpl.n	8006d9c <_printf_i+0x1cc>
 8006d98:	6019      	str	r1, [r3, #0]
 8006d9a:	e002      	b.n	8006da2 <_printf_i+0x1d2>
 8006d9c:	0670      	lsls	r0, r6, #25
 8006d9e:	d5fb      	bpl.n	8006d98 <_printf_i+0x1c8>
 8006da0:	8019      	strh	r1, [r3, #0]
 8006da2:	2300      	movs	r3, #0
 8006da4:	6123      	str	r3, [r4, #16]
 8006da6:	4615      	mov	r5, r2
 8006da8:	e7ba      	b.n	8006d20 <_printf_i+0x150>
 8006daa:	682b      	ldr	r3, [r5, #0]
 8006dac:	1d1a      	adds	r2, r3, #4
 8006dae:	602a      	str	r2, [r5, #0]
 8006db0:	681d      	ldr	r5, [r3, #0]
 8006db2:	6862      	ldr	r2, [r4, #4]
 8006db4:	2100      	movs	r1, #0
 8006db6:	4628      	mov	r0, r5
 8006db8:	f7f9 fa22 	bl	8000200 <memchr>
 8006dbc:	b108      	cbz	r0, 8006dc2 <_printf_i+0x1f2>
 8006dbe:	1b40      	subs	r0, r0, r5
 8006dc0:	6060      	str	r0, [r4, #4]
 8006dc2:	6863      	ldr	r3, [r4, #4]
 8006dc4:	6123      	str	r3, [r4, #16]
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dcc:	e7a8      	b.n	8006d20 <_printf_i+0x150>
 8006dce:	6923      	ldr	r3, [r4, #16]
 8006dd0:	462a      	mov	r2, r5
 8006dd2:	4649      	mov	r1, r9
 8006dd4:	4640      	mov	r0, r8
 8006dd6:	47d0      	blx	sl
 8006dd8:	3001      	adds	r0, #1
 8006dda:	d0ab      	beq.n	8006d34 <_printf_i+0x164>
 8006ddc:	6823      	ldr	r3, [r4, #0]
 8006dde:	079b      	lsls	r3, r3, #30
 8006de0:	d413      	bmi.n	8006e0a <_printf_i+0x23a>
 8006de2:	68e0      	ldr	r0, [r4, #12]
 8006de4:	9b03      	ldr	r3, [sp, #12]
 8006de6:	4298      	cmp	r0, r3
 8006de8:	bfb8      	it	lt
 8006dea:	4618      	movlt	r0, r3
 8006dec:	e7a4      	b.n	8006d38 <_printf_i+0x168>
 8006dee:	2301      	movs	r3, #1
 8006df0:	4632      	mov	r2, r6
 8006df2:	4649      	mov	r1, r9
 8006df4:	4640      	mov	r0, r8
 8006df6:	47d0      	blx	sl
 8006df8:	3001      	adds	r0, #1
 8006dfa:	d09b      	beq.n	8006d34 <_printf_i+0x164>
 8006dfc:	3501      	adds	r5, #1
 8006dfe:	68e3      	ldr	r3, [r4, #12]
 8006e00:	9903      	ldr	r1, [sp, #12]
 8006e02:	1a5b      	subs	r3, r3, r1
 8006e04:	42ab      	cmp	r3, r5
 8006e06:	dcf2      	bgt.n	8006dee <_printf_i+0x21e>
 8006e08:	e7eb      	b.n	8006de2 <_printf_i+0x212>
 8006e0a:	2500      	movs	r5, #0
 8006e0c:	f104 0619 	add.w	r6, r4, #25
 8006e10:	e7f5      	b.n	8006dfe <_printf_i+0x22e>
 8006e12:	bf00      	nop
 8006e14:	0800d536 	.word	0x0800d536
 8006e18:	0800d547 	.word	0x0800d547

08006e1c <_scanf_float>:
 8006e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e20:	b087      	sub	sp, #28
 8006e22:	4617      	mov	r7, r2
 8006e24:	9303      	str	r3, [sp, #12]
 8006e26:	688b      	ldr	r3, [r1, #8]
 8006e28:	1e5a      	subs	r2, r3, #1
 8006e2a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006e2e:	bf83      	ittte	hi
 8006e30:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006e34:	195b      	addhi	r3, r3, r5
 8006e36:	9302      	strhi	r3, [sp, #8]
 8006e38:	2300      	movls	r3, #0
 8006e3a:	bf86      	itte	hi
 8006e3c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006e40:	608b      	strhi	r3, [r1, #8]
 8006e42:	9302      	strls	r3, [sp, #8]
 8006e44:	680b      	ldr	r3, [r1, #0]
 8006e46:	468b      	mov	fp, r1
 8006e48:	2500      	movs	r5, #0
 8006e4a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006e4e:	f84b 3b1c 	str.w	r3, [fp], #28
 8006e52:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006e56:	4680      	mov	r8, r0
 8006e58:	460c      	mov	r4, r1
 8006e5a:	465e      	mov	r6, fp
 8006e5c:	46aa      	mov	sl, r5
 8006e5e:	46a9      	mov	r9, r5
 8006e60:	9501      	str	r5, [sp, #4]
 8006e62:	68a2      	ldr	r2, [r4, #8]
 8006e64:	b152      	cbz	r2, 8006e7c <_scanf_float+0x60>
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	2b4e      	cmp	r3, #78	; 0x4e
 8006e6c:	d864      	bhi.n	8006f38 <_scanf_float+0x11c>
 8006e6e:	2b40      	cmp	r3, #64	; 0x40
 8006e70:	d83c      	bhi.n	8006eec <_scanf_float+0xd0>
 8006e72:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006e76:	b2c8      	uxtb	r0, r1
 8006e78:	280e      	cmp	r0, #14
 8006e7a:	d93a      	bls.n	8006ef2 <_scanf_float+0xd6>
 8006e7c:	f1b9 0f00 	cmp.w	r9, #0
 8006e80:	d003      	beq.n	8006e8a <_scanf_float+0x6e>
 8006e82:	6823      	ldr	r3, [r4, #0]
 8006e84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e88:	6023      	str	r3, [r4, #0]
 8006e8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e8e:	f1ba 0f01 	cmp.w	sl, #1
 8006e92:	f200 8113 	bhi.w	80070bc <_scanf_float+0x2a0>
 8006e96:	455e      	cmp	r6, fp
 8006e98:	f200 8105 	bhi.w	80070a6 <_scanf_float+0x28a>
 8006e9c:	2501      	movs	r5, #1
 8006e9e:	4628      	mov	r0, r5
 8006ea0:	b007      	add	sp, #28
 8006ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ea6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006eaa:	2a0d      	cmp	r2, #13
 8006eac:	d8e6      	bhi.n	8006e7c <_scanf_float+0x60>
 8006eae:	a101      	add	r1, pc, #4	; (adr r1, 8006eb4 <_scanf_float+0x98>)
 8006eb0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006eb4:	08006ff3 	.word	0x08006ff3
 8006eb8:	08006e7d 	.word	0x08006e7d
 8006ebc:	08006e7d 	.word	0x08006e7d
 8006ec0:	08006e7d 	.word	0x08006e7d
 8006ec4:	08007053 	.word	0x08007053
 8006ec8:	0800702b 	.word	0x0800702b
 8006ecc:	08006e7d 	.word	0x08006e7d
 8006ed0:	08006e7d 	.word	0x08006e7d
 8006ed4:	08007001 	.word	0x08007001
 8006ed8:	08006e7d 	.word	0x08006e7d
 8006edc:	08006e7d 	.word	0x08006e7d
 8006ee0:	08006e7d 	.word	0x08006e7d
 8006ee4:	08006e7d 	.word	0x08006e7d
 8006ee8:	08006fb9 	.word	0x08006fb9
 8006eec:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006ef0:	e7db      	b.n	8006eaa <_scanf_float+0x8e>
 8006ef2:	290e      	cmp	r1, #14
 8006ef4:	d8c2      	bhi.n	8006e7c <_scanf_float+0x60>
 8006ef6:	a001      	add	r0, pc, #4	; (adr r0, 8006efc <_scanf_float+0xe0>)
 8006ef8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006efc:	08006fab 	.word	0x08006fab
 8006f00:	08006e7d 	.word	0x08006e7d
 8006f04:	08006fab 	.word	0x08006fab
 8006f08:	0800703f 	.word	0x0800703f
 8006f0c:	08006e7d 	.word	0x08006e7d
 8006f10:	08006f59 	.word	0x08006f59
 8006f14:	08006f95 	.word	0x08006f95
 8006f18:	08006f95 	.word	0x08006f95
 8006f1c:	08006f95 	.word	0x08006f95
 8006f20:	08006f95 	.word	0x08006f95
 8006f24:	08006f95 	.word	0x08006f95
 8006f28:	08006f95 	.word	0x08006f95
 8006f2c:	08006f95 	.word	0x08006f95
 8006f30:	08006f95 	.word	0x08006f95
 8006f34:	08006f95 	.word	0x08006f95
 8006f38:	2b6e      	cmp	r3, #110	; 0x6e
 8006f3a:	d809      	bhi.n	8006f50 <_scanf_float+0x134>
 8006f3c:	2b60      	cmp	r3, #96	; 0x60
 8006f3e:	d8b2      	bhi.n	8006ea6 <_scanf_float+0x8a>
 8006f40:	2b54      	cmp	r3, #84	; 0x54
 8006f42:	d077      	beq.n	8007034 <_scanf_float+0x218>
 8006f44:	2b59      	cmp	r3, #89	; 0x59
 8006f46:	d199      	bne.n	8006e7c <_scanf_float+0x60>
 8006f48:	2d07      	cmp	r5, #7
 8006f4a:	d197      	bne.n	8006e7c <_scanf_float+0x60>
 8006f4c:	2508      	movs	r5, #8
 8006f4e:	e029      	b.n	8006fa4 <_scanf_float+0x188>
 8006f50:	2b74      	cmp	r3, #116	; 0x74
 8006f52:	d06f      	beq.n	8007034 <_scanf_float+0x218>
 8006f54:	2b79      	cmp	r3, #121	; 0x79
 8006f56:	e7f6      	b.n	8006f46 <_scanf_float+0x12a>
 8006f58:	6821      	ldr	r1, [r4, #0]
 8006f5a:	05c8      	lsls	r0, r1, #23
 8006f5c:	d51a      	bpl.n	8006f94 <_scanf_float+0x178>
 8006f5e:	9b02      	ldr	r3, [sp, #8]
 8006f60:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006f64:	6021      	str	r1, [r4, #0]
 8006f66:	f109 0901 	add.w	r9, r9, #1
 8006f6a:	b11b      	cbz	r3, 8006f74 <_scanf_float+0x158>
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	3201      	adds	r2, #1
 8006f70:	9302      	str	r3, [sp, #8]
 8006f72:	60a2      	str	r2, [r4, #8]
 8006f74:	68a3      	ldr	r3, [r4, #8]
 8006f76:	3b01      	subs	r3, #1
 8006f78:	60a3      	str	r3, [r4, #8]
 8006f7a:	6923      	ldr	r3, [r4, #16]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	6123      	str	r3, [r4, #16]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	3b01      	subs	r3, #1
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	607b      	str	r3, [r7, #4]
 8006f88:	f340 8084 	ble.w	8007094 <_scanf_float+0x278>
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	3301      	adds	r3, #1
 8006f90:	603b      	str	r3, [r7, #0]
 8006f92:	e766      	b.n	8006e62 <_scanf_float+0x46>
 8006f94:	eb1a 0f05 	cmn.w	sl, r5
 8006f98:	f47f af70 	bne.w	8006e7c <_scanf_float+0x60>
 8006f9c:	6822      	ldr	r2, [r4, #0]
 8006f9e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006fa2:	6022      	str	r2, [r4, #0]
 8006fa4:	f806 3b01 	strb.w	r3, [r6], #1
 8006fa8:	e7e4      	b.n	8006f74 <_scanf_float+0x158>
 8006faa:	6822      	ldr	r2, [r4, #0]
 8006fac:	0610      	lsls	r0, r2, #24
 8006fae:	f57f af65 	bpl.w	8006e7c <_scanf_float+0x60>
 8006fb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fb6:	e7f4      	b.n	8006fa2 <_scanf_float+0x186>
 8006fb8:	f1ba 0f00 	cmp.w	sl, #0
 8006fbc:	d10e      	bne.n	8006fdc <_scanf_float+0x1c0>
 8006fbe:	f1b9 0f00 	cmp.w	r9, #0
 8006fc2:	d10e      	bne.n	8006fe2 <_scanf_float+0x1c6>
 8006fc4:	6822      	ldr	r2, [r4, #0]
 8006fc6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006fca:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006fce:	d108      	bne.n	8006fe2 <_scanf_float+0x1c6>
 8006fd0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006fd4:	6022      	str	r2, [r4, #0]
 8006fd6:	f04f 0a01 	mov.w	sl, #1
 8006fda:	e7e3      	b.n	8006fa4 <_scanf_float+0x188>
 8006fdc:	f1ba 0f02 	cmp.w	sl, #2
 8006fe0:	d055      	beq.n	800708e <_scanf_float+0x272>
 8006fe2:	2d01      	cmp	r5, #1
 8006fe4:	d002      	beq.n	8006fec <_scanf_float+0x1d0>
 8006fe6:	2d04      	cmp	r5, #4
 8006fe8:	f47f af48 	bne.w	8006e7c <_scanf_float+0x60>
 8006fec:	3501      	adds	r5, #1
 8006fee:	b2ed      	uxtb	r5, r5
 8006ff0:	e7d8      	b.n	8006fa4 <_scanf_float+0x188>
 8006ff2:	f1ba 0f01 	cmp.w	sl, #1
 8006ff6:	f47f af41 	bne.w	8006e7c <_scanf_float+0x60>
 8006ffa:	f04f 0a02 	mov.w	sl, #2
 8006ffe:	e7d1      	b.n	8006fa4 <_scanf_float+0x188>
 8007000:	b97d      	cbnz	r5, 8007022 <_scanf_float+0x206>
 8007002:	f1b9 0f00 	cmp.w	r9, #0
 8007006:	f47f af3c 	bne.w	8006e82 <_scanf_float+0x66>
 800700a:	6822      	ldr	r2, [r4, #0]
 800700c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007010:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007014:	f47f af39 	bne.w	8006e8a <_scanf_float+0x6e>
 8007018:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800701c:	6022      	str	r2, [r4, #0]
 800701e:	2501      	movs	r5, #1
 8007020:	e7c0      	b.n	8006fa4 <_scanf_float+0x188>
 8007022:	2d03      	cmp	r5, #3
 8007024:	d0e2      	beq.n	8006fec <_scanf_float+0x1d0>
 8007026:	2d05      	cmp	r5, #5
 8007028:	e7de      	b.n	8006fe8 <_scanf_float+0x1cc>
 800702a:	2d02      	cmp	r5, #2
 800702c:	f47f af26 	bne.w	8006e7c <_scanf_float+0x60>
 8007030:	2503      	movs	r5, #3
 8007032:	e7b7      	b.n	8006fa4 <_scanf_float+0x188>
 8007034:	2d06      	cmp	r5, #6
 8007036:	f47f af21 	bne.w	8006e7c <_scanf_float+0x60>
 800703a:	2507      	movs	r5, #7
 800703c:	e7b2      	b.n	8006fa4 <_scanf_float+0x188>
 800703e:	6822      	ldr	r2, [r4, #0]
 8007040:	0591      	lsls	r1, r2, #22
 8007042:	f57f af1b 	bpl.w	8006e7c <_scanf_float+0x60>
 8007046:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800704a:	6022      	str	r2, [r4, #0]
 800704c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007050:	e7a8      	b.n	8006fa4 <_scanf_float+0x188>
 8007052:	6822      	ldr	r2, [r4, #0]
 8007054:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007058:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800705c:	d006      	beq.n	800706c <_scanf_float+0x250>
 800705e:	0550      	lsls	r0, r2, #21
 8007060:	f57f af0c 	bpl.w	8006e7c <_scanf_float+0x60>
 8007064:	f1b9 0f00 	cmp.w	r9, #0
 8007068:	f43f af0f 	beq.w	8006e8a <_scanf_float+0x6e>
 800706c:	0591      	lsls	r1, r2, #22
 800706e:	bf58      	it	pl
 8007070:	9901      	ldrpl	r1, [sp, #4]
 8007072:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007076:	bf58      	it	pl
 8007078:	eba9 0101 	subpl.w	r1, r9, r1
 800707c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007080:	bf58      	it	pl
 8007082:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007086:	6022      	str	r2, [r4, #0]
 8007088:	f04f 0900 	mov.w	r9, #0
 800708c:	e78a      	b.n	8006fa4 <_scanf_float+0x188>
 800708e:	f04f 0a03 	mov.w	sl, #3
 8007092:	e787      	b.n	8006fa4 <_scanf_float+0x188>
 8007094:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007098:	4639      	mov	r1, r7
 800709a:	4640      	mov	r0, r8
 800709c:	4798      	blx	r3
 800709e:	2800      	cmp	r0, #0
 80070a0:	f43f aedf 	beq.w	8006e62 <_scanf_float+0x46>
 80070a4:	e6ea      	b.n	8006e7c <_scanf_float+0x60>
 80070a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80070ae:	463a      	mov	r2, r7
 80070b0:	4640      	mov	r0, r8
 80070b2:	4798      	blx	r3
 80070b4:	6923      	ldr	r3, [r4, #16]
 80070b6:	3b01      	subs	r3, #1
 80070b8:	6123      	str	r3, [r4, #16]
 80070ba:	e6ec      	b.n	8006e96 <_scanf_float+0x7a>
 80070bc:	1e6b      	subs	r3, r5, #1
 80070be:	2b06      	cmp	r3, #6
 80070c0:	d825      	bhi.n	800710e <_scanf_float+0x2f2>
 80070c2:	2d02      	cmp	r5, #2
 80070c4:	d836      	bhi.n	8007134 <_scanf_float+0x318>
 80070c6:	455e      	cmp	r6, fp
 80070c8:	f67f aee8 	bls.w	8006e9c <_scanf_float+0x80>
 80070cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070d0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80070d4:	463a      	mov	r2, r7
 80070d6:	4640      	mov	r0, r8
 80070d8:	4798      	blx	r3
 80070da:	6923      	ldr	r3, [r4, #16]
 80070dc:	3b01      	subs	r3, #1
 80070de:	6123      	str	r3, [r4, #16]
 80070e0:	e7f1      	b.n	80070c6 <_scanf_float+0x2aa>
 80070e2:	9802      	ldr	r0, [sp, #8]
 80070e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070e8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80070ec:	9002      	str	r0, [sp, #8]
 80070ee:	463a      	mov	r2, r7
 80070f0:	4640      	mov	r0, r8
 80070f2:	4798      	blx	r3
 80070f4:	6923      	ldr	r3, [r4, #16]
 80070f6:	3b01      	subs	r3, #1
 80070f8:	6123      	str	r3, [r4, #16]
 80070fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070fe:	fa5f fa8a 	uxtb.w	sl, sl
 8007102:	f1ba 0f02 	cmp.w	sl, #2
 8007106:	d1ec      	bne.n	80070e2 <_scanf_float+0x2c6>
 8007108:	3d03      	subs	r5, #3
 800710a:	b2ed      	uxtb	r5, r5
 800710c:	1b76      	subs	r6, r6, r5
 800710e:	6823      	ldr	r3, [r4, #0]
 8007110:	05da      	lsls	r2, r3, #23
 8007112:	d52f      	bpl.n	8007174 <_scanf_float+0x358>
 8007114:	055b      	lsls	r3, r3, #21
 8007116:	d510      	bpl.n	800713a <_scanf_float+0x31e>
 8007118:	455e      	cmp	r6, fp
 800711a:	f67f aebf 	bls.w	8006e9c <_scanf_float+0x80>
 800711e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007122:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007126:	463a      	mov	r2, r7
 8007128:	4640      	mov	r0, r8
 800712a:	4798      	blx	r3
 800712c:	6923      	ldr	r3, [r4, #16]
 800712e:	3b01      	subs	r3, #1
 8007130:	6123      	str	r3, [r4, #16]
 8007132:	e7f1      	b.n	8007118 <_scanf_float+0x2fc>
 8007134:	46aa      	mov	sl, r5
 8007136:	9602      	str	r6, [sp, #8]
 8007138:	e7df      	b.n	80070fa <_scanf_float+0x2de>
 800713a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800713e:	6923      	ldr	r3, [r4, #16]
 8007140:	2965      	cmp	r1, #101	; 0x65
 8007142:	f103 33ff 	add.w	r3, r3, #4294967295
 8007146:	f106 35ff 	add.w	r5, r6, #4294967295
 800714a:	6123      	str	r3, [r4, #16]
 800714c:	d00c      	beq.n	8007168 <_scanf_float+0x34c>
 800714e:	2945      	cmp	r1, #69	; 0x45
 8007150:	d00a      	beq.n	8007168 <_scanf_float+0x34c>
 8007152:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007156:	463a      	mov	r2, r7
 8007158:	4640      	mov	r0, r8
 800715a:	4798      	blx	r3
 800715c:	6923      	ldr	r3, [r4, #16]
 800715e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007162:	3b01      	subs	r3, #1
 8007164:	1eb5      	subs	r5, r6, #2
 8007166:	6123      	str	r3, [r4, #16]
 8007168:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800716c:	463a      	mov	r2, r7
 800716e:	4640      	mov	r0, r8
 8007170:	4798      	blx	r3
 8007172:	462e      	mov	r6, r5
 8007174:	6825      	ldr	r5, [r4, #0]
 8007176:	f015 0510 	ands.w	r5, r5, #16
 800717a:	d159      	bne.n	8007230 <_scanf_float+0x414>
 800717c:	7035      	strb	r5, [r6, #0]
 800717e:	6823      	ldr	r3, [r4, #0]
 8007180:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007188:	d11b      	bne.n	80071c2 <_scanf_float+0x3a6>
 800718a:	9b01      	ldr	r3, [sp, #4]
 800718c:	454b      	cmp	r3, r9
 800718e:	eba3 0209 	sub.w	r2, r3, r9
 8007192:	d123      	bne.n	80071dc <_scanf_float+0x3c0>
 8007194:	2200      	movs	r2, #0
 8007196:	4659      	mov	r1, fp
 8007198:	4640      	mov	r0, r8
 800719a:	f000 fe97 	bl	8007ecc <_strtod_r>
 800719e:	6822      	ldr	r2, [r4, #0]
 80071a0:	9b03      	ldr	r3, [sp, #12]
 80071a2:	f012 0f02 	tst.w	r2, #2
 80071a6:	ec57 6b10 	vmov	r6, r7, d0
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	d021      	beq.n	80071f2 <_scanf_float+0x3d6>
 80071ae:	9903      	ldr	r1, [sp, #12]
 80071b0:	1d1a      	adds	r2, r3, #4
 80071b2:	600a      	str	r2, [r1, #0]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	e9c3 6700 	strd	r6, r7, [r3]
 80071ba:	68e3      	ldr	r3, [r4, #12]
 80071bc:	3301      	adds	r3, #1
 80071be:	60e3      	str	r3, [r4, #12]
 80071c0:	e66d      	b.n	8006e9e <_scanf_float+0x82>
 80071c2:	9b04      	ldr	r3, [sp, #16]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d0e5      	beq.n	8007194 <_scanf_float+0x378>
 80071c8:	9905      	ldr	r1, [sp, #20]
 80071ca:	230a      	movs	r3, #10
 80071cc:	462a      	mov	r2, r5
 80071ce:	3101      	adds	r1, #1
 80071d0:	4640      	mov	r0, r8
 80071d2:	f000 ff03 	bl	8007fdc <_strtol_r>
 80071d6:	9b04      	ldr	r3, [sp, #16]
 80071d8:	9e05      	ldr	r6, [sp, #20]
 80071da:	1ac2      	subs	r2, r0, r3
 80071dc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80071e0:	429e      	cmp	r6, r3
 80071e2:	bf28      	it	cs
 80071e4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80071e8:	4912      	ldr	r1, [pc, #72]	; (8007234 <_scanf_float+0x418>)
 80071ea:	4630      	mov	r0, r6
 80071ec:	f000 f82c 	bl	8007248 <siprintf>
 80071f0:	e7d0      	b.n	8007194 <_scanf_float+0x378>
 80071f2:	9903      	ldr	r1, [sp, #12]
 80071f4:	f012 0f04 	tst.w	r2, #4
 80071f8:	f103 0204 	add.w	r2, r3, #4
 80071fc:	600a      	str	r2, [r1, #0]
 80071fe:	d1d9      	bne.n	80071b4 <_scanf_float+0x398>
 8007200:	f8d3 8000 	ldr.w	r8, [r3]
 8007204:	ee10 2a10 	vmov	r2, s0
 8007208:	ee10 0a10 	vmov	r0, s0
 800720c:	463b      	mov	r3, r7
 800720e:	4639      	mov	r1, r7
 8007210:	f7f9 fc9c 	bl	8000b4c <__aeabi_dcmpun>
 8007214:	b128      	cbz	r0, 8007222 <_scanf_float+0x406>
 8007216:	4808      	ldr	r0, [pc, #32]	; (8007238 <_scanf_float+0x41c>)
 8007218:	f000 f810 	bl	800723c <nanf>
 800721c:	ed88 0a00 	vstr	s0, [r8]
 8007220:	e7cb      	b.n	80071ba <_scanf_float+0x39e>
 8007222:	4630      	mov	r0, r6
 8007224:	4639      	mov	r1, r7
 8007226:	f7f9 fcef 	bl	8000c08 <__aeabi_d2f>
 800722a:	f8c8 0000 	str.w	r0, [r8]
 800722e:	e7c4      	b.n	80071ba <_scanf_float+0x39e>
 8007230:	2500      	movs	r5, #0
 8007232:	e634      	b.n	8006e9e <_scanf_float+0x82>
 8007234:	0800d558 	.word	0x0800d558
 8007238:	0800d960 	.word	0x0800d960

0800723c <nanf>:
 800723c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007244 <nanf+0x8>
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop
 8007244:	7fc00000 	.word	0x7fc00000

08007248 <siprintf>:
 8007248:	b40e      	push	{r1, r2, r3}
 800724a:	b500      	push	{lr}
 800724c:	b09c      	sub	sp, #112	; 0x70
 800724e:	ab1d      	add	r3, sp, #116	; 0x74
 8007250:	9002      	str	r0, [sp, #8]
 8007252:	9006      	str	r0, [sp, #24]
 8007254:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007258:	4809      	ldr	r0, [pc, #36]	; (8007280 <siprintf+0x38>)
 800725a:	9107      	str	r1, [sp, #28]
 800725c:	9104      	str	r1, [sp, #16]
 800725e:	4909      	ldr	r1, [pc, #36]	; (8007284 <siprintf+0x3c>)
 8007260:	f853 2b04 	ldr.w	r2, [r3], #4
 8007264:	9105      	str	r1, [sp, #20]
 8007266:	6800      	ldr	r0, [r0, #0]
 8007268:	9301      	str	r3, [sp, #4]
 800726a:	a902      	add	r1, sp, #8
 800726c:	f002 fee2 	bl	800a034 <_svfiprintf_r>
 8007270:	9b02      	ldr	r3, [sp, #8]
 8007272:	2200      	movs	r2, #0
 8007274:	701a      	strb	r2, [r3, #0]
 8007276:	b01c      	add	sp, #112	; 0x70
 8007278:	f85d eb04 	ldr.w	lr, [sp], #4
 800727c:	b003      	add	sp, #12
 800727e:	4770      	bx	lr
 8007280:	20000090 	.word	0x20000090
 8007284:	ffff0208 	.word	0xffff0208

08007288 <sulp>:
 8007288:	b570      	push	{r4, r5, r6, lr}
 800728a:	4604      	mov	r4, r0
 800728c:	460d      	mov	r5, r1
 800728e:	ec45 4b10 	vmov	d0, r4, r5
 8007292:	4616      	mov	r6, r2
 8007294:	f002 fc2c 	bl	8009af0 <__ulp>
 8007298:	ec51 0b10 	vmov	r0, r1, d0
 800729c:	b17e      	cbz	r6, 80072be <sulp+0x36>
 800729e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80072a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	dd09      	ble.n	80072be <sulp+0x36>
 80072aa:	051b      	lsls	r3, r3, #20
 80072ac:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80072b0:	2400      	movs	r4, #0
 80072b2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80072b6:	4622      	mov	r2, r4
 80072b8:	462b      	mov	r3, r5
 80072ba:	f7f9 f9ad 	bl	8000618 <__aeabi_dmul>
 80072be:	bd70      	pop	{r4, r5, r6, pc}

080072c0 <_strtod_l>:
 80072c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c4:	ed2d 8b02 	vpush	{d8}
 80072c8:	b09d      	sub	sp, #116	; 0x74
 80072ca:	461f      	mov	r7, r3
 80072cc:	2300      	movs	r3, #0
 80072ce:	9318      	str	r3, [sp, #96]	; 0x60
 80072d0:	4ba2      	ldr	r3, [pc, #648]	; (800755c <_strtod_l+0x29c>)
 80072d2:	9213      	str	r2, [sp, #76]	; 0x4c
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	9305      	str	r3, [sp, #20]
 80072d8:	4604      	mov	r4, r0
 80072da:	4618      	mov	r0, r3
 80072dc:	4688      	mov	r8, r1
 80072de:	f7f8 ff87 	bl	80001f0 <strlen>
 80072e2:	f04f 0a00 	mov.w	sl, #0
 80072e6:	4605      	mov	r5, r0
 80072e8:	f04f 0b00 	mov.w	fp, #0
 80072ec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80072f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072f2:	781a      	ldrb	r2, [r3, #0]
 80072f4:	2a2b      	cmp	r2, #43	; 0x2b
 80072f6:	d04e      	beq.n	8007396 <_strtod_l+0xd6>
 80072f8:	d83b      	bhi.n	8007372 <_strtod_l+0xb2>
 80072fa:	2a0d      	cmp	r2, #13
 80072fc:	d834      	bhi.n	8007368 <_strtod_l+0xa8>
 80072fe:	2a08      	cmp	r2, #8
 8007300:	d834      	bhi.n	800736c <_strtod_l+0xac>
 8007302:	2a00      	cmp	r2, #0
 8007304:	d03e      	beq.n	8007384 <_strtod_l+0xc4>
 8007306:	2300      	movs	r3, #0
 8007308:	930a      	str	r3, [sp, #40]	; 0x28
 800730a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800730c:	7833      	ldrb	r3, [r6, #0]
 800730e:	2b30      	cmp	r3, #48	; 0x30
 8007310:	f040 80b0 	bne.w	8007474 <_strtod_l+0x1b4>
 8007314:	7873      	ldrb	r3, [r6, #1]
 8007316:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800731a:	2b58      	cmp	r3, #88	; 0x58
 800731c:	d168      	bne.n	80073f0 <_strtod_l+0x130>
 800731e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007320:	9301      	str	r3, [sp, #4]
 8007322:	ab18      	add	r3, sp, #96	; 0x60
 8007324:	9702      	str	r7, [sp, #8]
 8007326:	9300      	str	r3, [sp, #0]
 8007328:	4a8d      	ldr	r2, [pc, #564]	; (8007560 <_strtod_l+0x2a0>)
 800732a:	ab19      	add	r3, sp, #100	; 0x64
 800732c:	a917      	add	r1, sp, #92	; 0x5c
 800732e:	4620      	mov	r0, r4
 8007330:	f001 fd38 	bl	8008da4 <__gethex>
 8007334:	f010 0707 	ands.w	r7, r0, #7
 8007338:	4605      	mov	r5, r0
 800733a:	d005      	beq.n	8007348 <_strtod_l+0x88>
 800733c:	2f06      	cmp	r7, #6
 800733e:	d12c      	bne.n	800739a <_strtod_l+0xda>
 8007340:	3601      	adds	r6, #1
 8007342:	2300      	movs	r3, #0
 8007344:	9617      	str	r6, [sp, #92]	; 0x5c
 8007346:	930a      	str	r3, [sp, #40]	; 0x28
 8007348:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800734a:	2b00      	cmp	r3, #0
 800734c:	f040 8590 	bne.w	8007e70 <_strtod_l+0xbb0>
 8007350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007352:	b1eb      	cbz	r3, 8007390 <_strtod_l+0xd0>
 8007354:	4652      	mov	r2, sl
 8007356:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800735a:	ec43 2b10 	vmov	d0, r2, r3
 800735e:	b01d      	add	sp, #116	; 0x74
 8007360:	ecbd 8b02 	vpop	{d8}
 8007364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007368:	2a20      	cmp	r2, #32
 800736a:	d1cc      	bne.n	8007306 <_strtod_l+0x46>
 800736c:	3301      	adds	r3, #1
 800736e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007370:	e7be      	b.n	80072f0 <_strtod_l+0x30>
 8007372:	2a2d      	cmp	r2, #45	; 0x2d
 8007374:	d1c7      	bne.n	8007306 <_strtod_l+0x46>
 8007376:	2201      	movs	r2, #1
 8007378:	920a      	str	r2, [sp, #40]	; 0x28
 800737a:	1c5a      	adds	r2, r3, #1
 800737c:	9217      	str	r2, [sp, #92]	; 0x5c
 800737e:	785b      	ldrb	r3, [r3, #1]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1c2      	bne.n	800730a <_strtod_l+0x4a>
 8007384:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007386:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800738a:	2b00      	cmp	r3, #0
 800738c:	f040 856e 	bne.w	8007e6c <_strtod_l+0xbac>
 8007390:	4652      	mov	r2, sl
 8007392:	465b      	mov	r3, fp
 8007394:	e7e1      	b.n	800735a <_strtod_l+0x9a>
 8007396:	2200      	movs	r2, #0
 8007398:	e7ee      	b.n	8007378 <_strtod_l+0xb8>
 800739a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800739c:	b13a      	cbz	r2, 80073ae <_strtod_l+0xee>
 800739e:	2135      	movs	r1, #53	; 0x35
 80073a0:	a81a      	add	r0, sp, #104	; 0x68
 80073a2:	f002 fcb0 	bl	8009d06 <__copybits>
 80073a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80073a8:	4620      	mov	r0, r4
 80073aa:	f002 f86f 	bl	800948c <_Bfree>
 80073ae:	3f01      	subs	r7, #1
 80073b0:	2f04      	cmp	r7, #4
 80073b2:	d806      	bhi.n	80073c2 <_strtod_l+0x102>
 80073b4:	e8df f007 	tbb	[pc, r7]
 80073b8:	1714030a 	.word	0x1714030a
 80073bc:	0a          	.byte	0x0a
 80073bd:	00          	.byte	0x00
 80073be:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80073c2:	0728      	lsls	r0, r5, #28
 80073c4:	d5c0      	bpl.n	8007348 <_strtod_l+0x88>
 80073c6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80073ca:	e7bd      	b.n	8007348 <_strtod_l+0x88>
 80073cc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80073d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80073d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80073d6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80073da:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80073de:	e7f0      	b.n	80073c2 <_strtod_l+0x102>
 80073e0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007564 <_strtod_l+0x2a4>
 80073e4:	e7ed      	b.n	80073c2 <_strtod_l+0x102>
 80073e6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80073ea:	f04f 3aff 	mov.w	sl, #4294967295
 80073ee:	e7e8      	b.n	80073c2 <_strtod_l+0x102>
 80073f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80073f2:	1c5a      	adds	r2, r3, #1
 80073f4:	9217      	str	r2, [sp, #92]	; 0x5c
 80073f6:	785b      	ldrb	r3, [r3, #1]
 80073f8:	2b30      	cmp	r3, #48	; 0x30
 80073fa:	d0f9      	beq.n	80073f0 <_strtod_l+0x130>
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d0a3      	beq.n	8007348 <_strtod_l+0x88>
 8007400:	2301      	movs	r3, #1
 8007402:	f04f 0900 	mov.w	r9, #0
 8007406:	9304      	str	r3, [sp, #16]
 8007408:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800740a:	9308      	str	r3, [sp, #32]
 800740c:	f8cd 901c 	str.w	r9, [sp, #28]
 8007410:	464f      	mov	r7, r9
 8007412:	220a      	movs	r2, #10
 8007414:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007416:	7806      	ldrb	r6, [r0, #0]
 8007418:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800741c:	b2d9      	uxtb	r1, r3
 800741e:	2909      	cmp	r1, #9
 8007420:	d92a      	bls.n	8007478 <_strtod_l+0x1b8>
 8007422:	9905      	ldr	r1, [sp, #20]
 8007424:	462a      	mov	r2, r5
 8007426:	f002 ff1f 	bl	800a268 <strncmp>
 800742a:	b398      	cbz	r0, 8007494 <_strtod_l+0x1d4>
 800742c:	2000      	movs	r0, #0
 800742e:	4632      	mov	r2, r6
 8007430:	463d      	mov	r5, r7
 8007432:	9005      	str	r0, [sp, #20]
 8007434:	4603      	mov	r3, r0
 8007436:	2a65      	cmp	r2, #101	; 0x65
 8007438:	d001      	beq.n	800743e <_strtod_l+0x17e>
 800743a:	2a45      	cmp	r2, #69	; 0x45
 800743c:	d118      	bne.n	8007470 <_strtod_l+0x1b0>
 800743e:	b91d      	cbnz	r5, 8007448 <_strtod_l+0x188>
 8007440:	9a04      	ldr	r2, [sp, #16]
 8007442:	4302      	orrs	r2, r0
 8007444:	d09e      	beq.n	8007384 <_strtod_l+0xc4>
 8007446:	2500      	movs	r5, #0
 8007448:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800744c:	f108 0201 	add.w	r2, r8, #1
 8007450:	9217      	str	r2, [sp, #92]	; 0x5c
 8007452:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007456:	2a2b      	cmp	r2, #43	; 0x2b
 8007458:	d075      	beq.n	8007546 <_strtod_l+0x286>
 800745a:	2a2d      	cmp	r2, #45	; 0x2d
 800745c:	d07b      	beq.n	8007556 <_strtod_l+0x296>
 800745e:	f04f 0c00 	mov.w	ip, #0
 8007462:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007466:	2909      	cmp	r1, #9
 8007468:	f240 8082 	bls.w	8007570 <_strtod_l+0x2b0>
 800746c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007470:	2600      	movs	r6, #0
 8007472:	e09d      	b.n	80075b0 <_strtod_l+0x2f0>
 8007474:	2300      	movs	r3, #0
 8007476:	e7c4      	b.n	8007402 <_strtod_l+0x142>
 8007478:	2f08      	cmp	r7, #8
 800747a:	bfd8      	it	le
 800747c:	9907      	ldrle	r1, [sp, #28]
 800747e:	f100 0001 	add.w	r0, r0, #1
 8007482:	bfda      	itte	le
 8007484:	fb02 3301 	mlale	r3, r2, r1, r3
 8007488:	9307      	strle	r3, [sp, #28]
 800748a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800748e:	3701      	adds	r7, #1
 8007490:	9017      	str	r0, [sp, #92]	; 0x5c
 8007492:	e7bf      	b.n	8007414 <_strtod_l+0x154>
 8007494:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007496:	195a      	adds	r2, r3, r5
 8007498:	9217      	str	r2, [sp, #92]	; 0x5c
 800749a:	5d5a      	ldrb	r2, [r3, r5]
 800749c:	2f00      	cmp	r7, #0
 800749e:	d037      	beq.n	8007510 <_strtod_l+0x250>
 80074a0:	9005      	str	r0, [sp, #20]
 80074a2:	463d      	mov	r5, r7
 80074a4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80074a8:	2b09      	cmp	r3, #9
 80074aa:	d912      	bls.n	80074d2 <_strtod_l+0x212>
 80074ac:	2301      	movs	r3, #1
 80074ae:	e7c2      	b.n	8007436 <_strtod_l+0x176>
 80074b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074b2:	1c5a      	adds	r2, r3, #1
 80074b4:	9217      	str	r2, [sp, #92]	; 0x5c
 80074b6:	785a      	ldrb	r2, [r3, #1]
 80074b8:	3001      	adds	r0, #1
 80074ba:	2a30      	cmp	r2, #48	; 0x30
 80074bc:	d0f8      	beq.n	80074b0 <_strtod_l+0x1f0>
 80074be:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80074c2:	2b08      	cmp	r3, #8
 80074c4:	f200 84d9 	bhi.w	8007e7a <_strtod_l+0xbba>
 80074c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074ca:	9005      	str	r0, [sp, #20]
 80074cc:	2000      	movs	r0, #0
 80074ce:	9308      	str	r3, [sp, #32]
 80074d0:	4605      	mov	r5, r0
 80074d2:	3a30      	subs	r2, #48	; 0x30
 80074d4:	f100 0301 	add.w	r3, r0, #1
 80074d8:	d014      	beq.n	8007504 <_strtod_l+0x244>
 80074da:	9905      	ldr	r1, [sp, #20]
 80074dc:	4419      	add	r1, r3
 80074de:	9105      	str	r1, [sp, #20]
 80074e0:	462b      	mov	r3, r5
 80074e2:	eb00 0e05 	add.w	lr, r0, r5
 80074e6:	210a      	movs	r1, #10
 80074e8:	4573      	cmp	r3, lr
 80074ea:	d113      	bne.n	8007514 <_strtod_l+0x254>
 80074ec:	182b      	adds	r3, r5, r0
 80074ee:	2b08      	cmp	r3, #8
 80074f0:	f105 0501 	add.w	r5, r5, #1
 80074f4:	4405      	add	r5, r0
 80074f6:	dc1c      	bgt.n	8007532 <_strtod_l+0x272>
 80074f8:	9907      	ldr	r1, [sp, #28]
 80074fa:	230a      	movs	r3, #10
 80074fc:	fb03 2301 	mla	r3, r3, r1, r2
 8007500:	9307      	str	r3, [sp, #28]
 8007502:	2300      	movs	r3, #0
 8007504:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007506:	1c51      	adds	r1, r2, #1
 8007508:	9117      	str	r1, [sp, #92]	; 0x5c
 800750a:	7852      	ldrb	r2, [r2, #1]
 800750c:	4618      	mov	r0, r3
 800750e:	e7c9      	b.n	80074a4 <_strtod_l+0x1e4>
 8007510:	4638      	mov	r0, r7
 8007512:	e7d2      	b.n	80074ba <_strtod_l+0x1fa>
 8007514:	2b08      	cmp	r3, #8
 8007516:	dc04      	bgt.n	8007522 <_strtod_l+0x262>
 8007518:	9e07      	ldr	r6, [sp, #28]
 800751a:	434e      	muls	r6, r1
 800751c:	9607      	str	r6, [sp, #28]
 800751e:	3301      	adds	r3, #1
 8007520:	e7e2      	b.n	80074e8 <_strtod_l+0x228>
 8007522:	f103 0c01 	add.w	ip, r3, #1
 8007526:	f1bc 0f10 	cmp.w	ip, #16
 800752a:	bfd8      	it	le
 800752c:	fb01 f909 	mulle.w	r9, r1, r9
 8007530:	e7f5      	b.n	800751e <_strtod_l+0x25e>
 8007532:	2d10      	cmp	r5, #16
 8007534:	bfdc      	itt	le
 8007536:	230a      	movle	r3, #10
 8007538:	fb03 2909 	mlale	r9, r3, r9, r2
 800753c:	e7e1      	b.n	8007502 <_strtod_l+0x242>
 800753e:	2300      	movs	r3, #0
 8007540:	9305      	str	r3, [sp, #20]
 8007542:	2301      	movs	r3, #1
 8007544:	e77c      	b.n	8007440 <_strtod_l+0x180>
 8007546:	f04f 0c00 	mov.w	ip, #0
 800754a:	f108 0202 	add.w	r2, r8, #2
 800754e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007550:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007554:	e785      	b.n	8007462 <_strtod_l+0x1a2>
 8007556:	f04f 0c01 	mov.w	ip, #1
 800755a:	e7f6      	b.n	800754a <_strtod_l+0x28a>
 800755c:	0800d7a8 	.word	0x0800d7a8
 8007560:	0800d560 	.word	0x0800d560
 8007564:	7ff00000 	.word	0x7ff00000
 8007568:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800756a:	1c51      	adds	r1, r2, #1
 800756c:	9117      	str	r1, [sp, #92]	; 0x5c
 800756e:	7852      	ldrb	r2, [r2, #1]
 8007570:	2a30      	cmp	r2, #48	; 0x30
 8007572:	d0f9      	beq.n	8007568 <_strtod_l+0x2a8>
 8007574:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007578:	2908      	cmp	r1, #8
 800757a:	f63f af79 	bhi.w	8007470 <_strtod_l+0x1b0>
 800757e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007582:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007584:	9206      	str	r2, [sp, #24]
 8007586:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007588:	1c51      	adds	r1, r2, #1
 800758a:	9117      	str	r1, [sp, #92]	; 0x5c
 800758c:	7852      	ldrb	r2, [r2, #1]
 800758e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007592:	2e09      	cmp	r6, #9
 8007594:	d937      	bls.n	8007606 <_strtod_l+0x346>
 8007596:	9e06      	ldr	r6, [sp, #24]
 8007598:	1b89      	subs	r1, r1, r6
 800759a:	2908      	cmp	r1, #8
 800759c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80075a0:	dc02      	bgt.n	80075a8 <_strtod_l+0x2e8>
 80075a2:	4576      	cmp	r6, lr
 80075a4:	bfa8      	it	ge
 80075a6:	4676      	movge	r6, lr
 80075a8:	f1bc 0f00 	cmp.w	ip, #0
 80075ac:	d000      	beq.n	80075b0 <_strtod_l+0x2f0>
 80075ae:	4276      	negs	r6, r6
 80075b0:	2d00      	cmp	r5, #0
 80075b2:	d14d      	bne.n	8007650 <_strtod_l+0x390>
 80075b4:	9904      	ldr	r1, [sp, #16]
 80075b6:	4301      	orrs	r1, r0
 80075b8:	f47f aec6 	bne.w	8007348 <_strtod_l+0x88>
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f47f aee1 	bne.w	8007384 <_strtod_l+0xc4>
 80075c2:	2a69      	cmp	r2, #105	; 0x69
 80075c4:	d027      	beq.n	8007616 <_strtod_l+0x356>
 80075c6:	dc24      	bgt.n	8007612 <_strtod_l+0x352>
 80075c8:	2a49      	cmp	r2, #73	; 0x49
 80075ca:	d024      	beq.n	8007616 <_strtod_l+0x356>
 80075cc:	2a4e      	cmp	r2, #78	; 0x4e
 80075ce:	f47f aed9 	bne.w	8007384 <_strtod_l+0xc4>
 80075d2:	499f      	ldr	r1, [pc, #636]	; (8007850 <_strtod_l+0x590>)
 80075d4:	a817      	add	r0, sp, #92	; 0x5c
 80075d6:	f001 fe3d 	bl	8009254 <__match>
 80075da:	2800      	cmp	r0, #0
 80075dc:	f43f aed2 	beq.w	8007384 <_strtod_l+0xc4>
 80075e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	2b28      	cmp	r3, #40	; 0x28
 80075e6:	d12d      	bne.n	8007644 <_strtod_l+0x384>
 80075e8:	499a      	ldr	r1, [pc, #616]	; (8007854 <_strtod_l+0x594>)
 80075ea:	aa1a      	add	r2, sp, #104	; 0x68
 80075ec:	a817      	add	r0, sp, #92	; 0x5c
 80075ee:	f001 fe45 	bl	800927c <__hexnan>
 80075f2:	2805      	cmp	r0, #5
 80075f4:	d126      	bne.n	8007644 <_strtod_l+0x384>
 80075f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80075f8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80075fc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007600:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007604:	e6a0      	b.n	8007348 <_strtod_l+0x88>
 8007606:	210a      	movs	r1, #10
 8007608:	fb01 2e0e 	mla	lr, r1, lr, r2
 800760c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007610:	e7b9      	b.n	8007586 <_strtod_l+0x2c6>
 8007612:	2a6e      	cmp	r2, #110	; 0x6e
 8007614:	e7db      	b.n	80075ce <_strtod_l+0x30e>
 8007616:	4990      	ldr	r1, [pc, #576]	; (8007858 <_strtod_l+0x598>)
 8007618:	a817      	add	r0, sp, #92	; 0x5c
 800761a:	f001 fe1b 	bl	8009254 <__match>
 800761e:	2800      	cmp	r0, #0
 8007620:	f43f aeb0 	beq.w	8007384 <_strtod_l+0xc4>
 8007624:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007626:	498d      	ldr	r1, [pc, #564]	; (800785c <_strtod_l+0x59c>)
 8007628:	3b01      	subs	r3, #1
 800762a:	a817      	add	r0, sp, #92	; 0x5c
 800762c:	9317      	str	r3, [sp, #92]	; 0x5c
 800762e:	f001 fe11 	bl	8009254 <__match>
 8007632:	b910      	cbnz	r0, 800763a <_strtod_l+0x37a>
 8007634:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007636:	3301      	adds	r3, #1
 8007638:	9317      	str	r3, [sp, #92]	; 0x5c
 800763a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800786c <_strtod_l+0x5ac>
 800763e:	f04f 0a00 	mov.w	sl, #0
 8007642:	e681      	b.n	8007348 <_strtod_l+0x88>
 8007644:	4886      	ldr	r0, [pc, #536]	; (8007860 <_strtod_l+0x5a0>)
 8007646:	f002 fdf7 	bl	800a238 <nan>
 800764a:	ec5b ab10 	vmov	sl, fp, d0
 800764e:	e67b      	b.n	8007348 <_strtod_l+0x88>
 8007650:	9b05      	ldr	r3, [sp, #20]
 8007652:	9807      	ldr	r0, [sp, #28]
 8007654:	1af3      	subs	r3, r6, r3
 8007656:	2f00      	cmp	r7, #0
 8007658:	bf08      	it	eq
 800765a:	462f      	moveq	r7, r5
 800765c:	2d10      	cmp	r5, #16
 800765e:	9306      	str	r3, [sp, #24]
 8007660:	46a8      	mov	r8, r5
 8007662:	bfa8      	it	ge
 8007664:	f04f 0810 	movge.w	r8, #16
 8007668:	f7f8 ff5c 	bl	8000524 <__aeabi_ui2d>
 800766c:	2d09      	cmp	r5, #9
 800766e:	4682      	mov	sl, r0
 8007670:	468b      	mov	fp, r1
 8007672:	dd13      	ble.n	800769c <_strtod_l+0x3dc>
 8007674:	4b7b      	ldr	r3, [pc, #492]	; (8007864 <_strtod_l+0x5a4>)
 8007676:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800767a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800767e:	f7f8 ffcb 	bl	8000618 <__aeabi_dmul>
 8007682:	4682      	mov	sl, r0
 8007684:	4648      	mov	r0, r9
 8007686:	468b      	mov	fp, r1
 8007688:	f7f8 ff4c 	bl	8000524 <__aeabi_ui2d>
 800768c:	4602      	mov	r2, r0
 800768e:	460b      	mov	r3, r1
 8007690:	4650      	mov	r0, sl
 8007692:	4659      	mov	r1, fp
 8007694:	f7f8 fe0a 	bl	80002ac <__adddf3>
 8007698:	4682      	mov	sl, r0
 800769a:	468b      	mov	fp, r1
 800769c:	2d0f      	cmp	r5, #15
 800769e:	dc38      	bgt.n	8007712 <_strtod_l+0x452>
 80076a0:	9b06      	ldr	r3, [sp, #24]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	f43f ae50 	beq.w	8007348 <_strtod_l+0x88>
 80076a8:	dd24      	ble.n	80076f4 <_strtod_l+0x434>
 80076aa:	2b16      	cmp	r3, #22
 80076ac:	dc0b      	bgt.n	80076c6 <_strtod_l+0x406>
 80076ae:	496d      	ldr	r1, [pc, #436]	; (8007864 <_strtod_l+0x5a4>)
 80076b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80076b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076b8:	4652      	mov	r2, sl
 80076ba:	465b      	mov	r3, fp
 80076bc:	f7f8 ffac 	bl	8000618 <__aeabi_dmul>
 80076c0:	4682      	mov	sl, r0
 80076c2:	468b      	mov	fp, r1
 80076c4:	e640      	b.n	8007348 <_strtod_l+0x88>
 80076c6:	9a06      	ldr	r2, [sp, #24]
 80076c8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80076cc:	4293      	cmp	r3, r2
 80076ce:	db20      	blt.n	8007712 <_strtod_l+0x452>
 80076d0:	4c64      	ldr	r4, [pc, #400]	; (8007864 <_strtod_l+0x5a4>)
 80076d2:	f1c5 050f 	rsb	r5, r5, #15
 80076d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80076da:	4652      	mov	r2, sl
 80076dc:	465b      	mov	r3, fp
 80076de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076e2:	f7f8 ff99 	bl	8000618 <__aeabi_dmul>
 80076e6:	9b06      	ldr	r3, [sp, #24]
 80076e8:	1b5d      	subs	r5, r3, r5
 80076ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80076ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 80076f2:	e7e3      	b.n	80076bc <_strtod_l+0x3fc>
 80076f4:	9b06      	ldr	r3, [sp, #24]
 80076f6:	3316      	adds	r3, #22
 80076f8:	db0b      	blt.n	8007712 <_strtod_l+0x452>
 80076fa:	9b05      	ldr	r3, [sp, #20]
 80076fc:	1b9e      	subs	r6, r3, r6
 80076fe:	4b59      	ldr	r3, [pc, #356]	; (8007864 <_strtod_l+0x5a4>)
 8007700:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007704:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007708:	4650      	mov	r0, sl
 800770a:	4659      	mov	r1, fp
 800770c:	f7f9 f8ae 	bl	800086c <__aeabi_ddiv>
 8007710:	e7d6      	b.n	80076c0 <_strtod_l+0x400>
 8007712:	9b06      	ldr	r3, [sp, #24]
 8007714:	eba5 0808 	sub.w	r8, r5, r8
 8007718:	4498      	add	r8, r3
 800771a:	f1b8 0f00 	cmp.w	r8, #0
 800771e:	dd74      	ble.n	800780a <_strtod_l+0x54a>
 8007720:	f018 030f 	ands.w	r3, r8, #15
 8007724:	d00a      	beq.n	800773c <_strtod_l+0x47c>
 8007726:	494f      	ldr	r1, [pc, #316]	; (8007864 <_strtod_l+0x5a4>)
 8007728:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800772c:	4652      	mov	r2, sl
 800772e:	465b      	mov	r3, fp
 8007730:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007734:	f7f8 ff70 	bl	8000618 <__aeabi_dmul>
 8007738:	4682      	mov	sl, r0
 800773a:	468b      	mov	fp, r1
 800773c:	f038 080f 	bics.w	r8, r8, #15
 8007740:	d04f      	beq.n	80077e2 <_strtod_l+0x522>
 8007742:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007746:	dd22      	ble.n	800778e <_strtod_l+0x4ce>
 8007748:	2500      	movs	r5, #0
 800774a:	462e      	mov	r6, r5
 800774c:	9507      	str	r5, [sp, #28]
 800774e:	9505      	str	r5, [sp, #20]
 8007750:	2322      	movs	r3, #34	; 0x22
 8007752:	f8df b118 	ldr.w	fp, [pc, #280]	; 800786c <_strtod_l+0x5ac>
 8007756:	6023      	str	r3, [r4, #0]
 8007758:	f04f 0a00 	mov.w	sl, #0
 800775c:	9b07      	ldr	r3, [sp, #28]
 800775e:	2b00      	cmp	r3, #0
 8007760:	f43f adf2 	beq.w	8007348 <_strtod_l+0x88>
 8007764:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007766:	4620      	mov	r0, r4
 8007768:	f001 fe90 	bl	800948c <_Bfree>
 800776c:	9905      	ldr	r1, [sp, #20]
 800776e:	4620      	mov	r0, r4
 8007770:	f001 fe8c 	bl	800948c <_Bfree>
 8007774:	4631      	mov	r1, r6
 8007776:	4620      	mov	r0, r4
 8007778:	f001 fe88 	bl	800948c <_Bfree>
 800777c:	9907      	ldr	r1, [sp, #28]
 800777e:	4620      	mov	r0, r4
 8007780:	f001 fe84 	bl	800948c <_Bfree>
 8007784:	4629      	mov	r1, r5
 8007786:	4620      	mov	r0, r4
 8007788:	f001 fe80 	bl	800948c <_Bfree>
 800778c:	e5dc      	b.n	8007348 <_strtod_l+0x88>
 800778e:	4b36      	ldr	r3, [pc, #216]	; (8007868 <_strtod_l+0x5a8>)
 8007790:	9304      	str	r3, [sp, #16]
 8007792:	2300      	movs	r3, #0
 8007794:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007798:	4650      	mov	r0, sl
 800779a:	4659      	mov	r1, fp
 800779c:	4699      	mov	r9, r3
 800779e:	f1b8 0f01 	cmp.w	r8, #1
 80077a2:	dc21      	bgt.n	80077e8 <_strtod_l+0x528>
 80077a4:	b10b      	cbz	r3, 80077aa <_strtod_l+0x4ea>
 80077a6:	4682      	mov	sl, r0
 80077a8:	468b      	mov	fp, r1
 80077aa:	4b2f      	ldr	r3, [pc, #188]	; (8007868 <_strtod_l+0x5a8>)
 80077ac:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80077b0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80077b4:	4652      	mov	r2, sl
 80077b6:	465b      	mov	r3, fp
 80077b8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80077bc:	f7f8 ff2c 	bl	8000618 <__aeabi_dmul>
 80077c0:	4b2a      	ldr	r3, [pc, #168]	; (800786c <_strtod_l+0x5ac>)
 80077c2:	460a      	mov	r2, r1
 80077c4:	400b      	ands	r3, r1
 80077c6:	492a      	ldr	r1, [pc, #168]	; (8007870 <_strtod_l+0x5b0>)
 80077c8:	428b      	cmp	r3, r1
 80077ca:	4682      	mov	sl, r0
 80077cc:	d8bc      	bhi.n	8007748 <_strtod_l+0x488>
 80077ce:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80077d2:	428b      	cmp	r3, r1
 80077d4:	bf86      	itte	hi
 80077d6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007874 <_strtod_l+0x5b4>
 80077da:	f04f 3aff 	movhi.w	sl, #4294967295
 80077de:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80077e2:	2300      	movs	r3, #0
 80077e4:	9304      	str	r3, [sp, #16]
 80077e6:	e084      	b.n	80078f2 <_strtod_l+0x632>
 80077e8:	f018 0f01 	tst.w	r8, #1
 80077ec:	d005      	beq.n	80077fa <_strtod_l+0x53a>
 80077ee:	9b04      	ldr	r3, [sp, #16]
 80077f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f4:	f7f8 ff10 	bl	8000618 <__aeabi_dmul>
 80077f8:	2301      	movs	r3, #1
 80077fa:	9a04      	ldr	r2, [sp, #16]
 80077fc:	3208      	adds	r2, #8
 80077fe:	f109 0901 	add.w	r9, r9, #1
 8007802:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007806:	9204      	str	r2, [sp, #16]
 8007808:	e7c9      	b.n	800779e <_strtod_l+0x4de>
 800780a:	d0ea      	beq.n	80077e2 <_strtod_l+0x522>
 800780c:	f1c8 0800 	rsb	r8, r8, #0
 8007810:	f018 020f 	ands.w	r2, r8, #15
 8007814:	d00a      	beq.n	800782c <_strtod_l+0x56c>
 8007816:	4b13      	ldr	r3, [pc, #76]	; (8007864 <_strtod_l+0x5a4>)
 8007818:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800781c:	4650      	mov	r0, sl
 800781e:	4659      	mov	r1, fp
 8007820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007824:	f7f9 f822 	bl	800086c <__aeabi_ddiv>
 8007828:	4682      	mov	sl, r0
 800782a:	468b      	mov	fp, r1
 800782c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007830:	d0d7      	beq.n	80077e2 <_strtod_l+0x522>
 8007832:	f1b8 0f1f 	cmp.w	r8, #31
 8007836:	dd1f      	ble.n	8007878 <_strtod_l+0x5b8>
 8007838:	2500      	movs	r5, #0
 800783a:	462e      	mov	r6, r5
 800783c:	9507      	str	r5, [sp, #28]
 800783e:	9505      	str	r5, [sp, #20]
 8007840:	2322      	movs	r3, #34	; 0x22
 8007842:	f04f 0a00 	mov.w	sl, #0
 8007846:	f04f 0b00 	mov.w	fp, #0
 800784a:	6023      	str	r3, [r4, #0]
 800784c:	e786      	b.n	800775c <_strtod_l+0x49c>
 800784e:	bf00      	nop
 8007850:	0800d531 	.word	0x0800d531
 8007854:	0800d574 	.word	0x0800d574
 8007858:	0800d529 	.word	0x0800d529
 800785c:	0800d6b4 	.word	0x0800d6b4
 8007860:	0800d960 	.word	0x0800d960
 8007864:	0800d840 	.word	0x0800d840
 8007868:	0800d818 	.word	0x0800d818
 800786c:	7ff00000 	.word	0x7ff00000
 8007870:	7ca00000 	.word	0x7ca00000
 8007874:	7fefffff 	.word	0x7fefffff
 8007878:	f018 0310 	ands.w	r3, r8, #16
 800787c:	bf18      	it	ne
 800787e:	236a      	movne	r3, #106	; 0x6a
 8007880:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007c30 <_strtod_l+0x970>
 8007884:	9304      	str	r3, [sp, #16]
 8007886:	4650      	mov	r0, sl
 8007888:	4659      	mov	r1, fp
 800788a:	2300      	movs	r3, #0
 800788c:	f018 0f01 	tst.w	r8, #1
 8007890:	d004      	beq.n	800789c <_strtod_l+0x5dc>
 8007892:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007896:	f7f8 febf 	bl	8000618 <__aeabi_dmul>
 800789a:	2301      	movs	r3, #1
 800789c:	ea5f 0868 	movs.w	r8, r8, asr #1
 80078a0:	f109 0908 	add.w	r9, r9, #8
 80078a4:	d1f2      	bne.n	800788c <_strtod_l+0x5cc>
 80078a6:	b10b      	cbz	r3, 80078ac <_strtod_l+0x5ec>
 80078a8:	4682      	mov	sl, r0
 80078aa:	468b      	mov	fp, r1
 80078ac:	9b04      	ldr	r3, [sp, #16]
 80078ae:	b1c3      	cbz	r3, 80078e2 <_strtod_l+0x622>
 80078b0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80078b4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	4659      	mov	r1, fp
 80078bc:	dd11      	ble.n	80078e2 <_strtod_l+0x622>
 80078be:	2b1f      	cmp	r3, #31
 80078c0:	f340 8124 	ble.w	8007b0c <_strtod_l+0x84c>
 80078c4:	2b34      	cmp	r3, #52	; 0x34
 80078c6:	bfde      	ittt	le
 80078c8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80078cc:	f04f 33ff 	movle.w	r3, #4294967295
 80078d0:	fa03 f202 	lslle.w	r2, r3, r2
 80078d4:	f04f 0a00 	mov.w	sl, #0
 80078d8:	bfcc      	ite	gt
 80078da:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80078de:	ea02 0b01 	andle.w	fp, r2, r1
 80078e2:	2200      	movs	r2, #0
 80078e4:	2300      	movs	r3, #0
 80078e6:	4650      	mov	r0, sl
 80078e8:	4659      	mov	r1, fp
 80078ea:	f7f9 f8fd 	bl	8000ae8 <__aeabi_dcmpeq>
 80078ee:	2800      	cmp	r0, #0
 80078f0:	d1a2      	bne.n	8007838 <_strtod_l+0x578>
 80078f2:	9b07      	ldr	r3, [sp, #28]
 80078f4:	9300      	str	r3, [sp, #0]
 80078f6:	9908      	ldr	r1, [sp, #32]
 80078f8:	462b      	mov	r3, r5
 80078fa:	463a      	mov	r2, r7
 80078fc:	4620      	mov	r0, r4
 80078fe:	f001 fe2d 	bl	800955c <__s2b>
 8007902:	9007      	str	r0, [sp, #28]
 8007904:	2800      	cmp	r0, #0
 8007906:	f43f af1f 	beq.w	8007748 <_strtod_l+0x488>
 800790a:	9b05      	ldr	r3, [sp, #20]
 800790c:	1b9e      	subs	r6, r3, r6
 800790e:	9b06      	ldr	r3, [sp, #24]
 8007910:	2b00      	cmp	r3, #0
 8007912:	bfb4      	ite	lt
 8007914:	4633      	movlt	r3, r6
 8007916:	2300      	movge	r3, #0
 8007918:	930c      	str	r3, [sp, #48]	; 0x30
 800791a:	9b06      	ldr	r3, [sp, #24]
 800791c:	2500      	movs	r5, #0
 800791e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007922:	9312      	str	r3, [sp, #72]	; 0x48
 8007924:	462e      	mov	r6, r5
 8007926:	9b07      	ldr	r3, [sp, #28]
 8007928:	4620      	mov	r0, r4
 800792a:	6859      	ldr	r1, [r3, #4]
 800792c:	f001 fd6e 	bl	800940c <_Balloc>
 8007930:	9005      	str	r0, [sp, #20]
 8007932:	2800      	cmp	r0, #0
 8007934:	f43f af0c 	beq.w	8007750 <_strtod_l+0x490>
 8007938:	9b07      	ldr	r3, [sp, #28]
 800793a:	691a      	ldr	r2, [r3, #16]
 800793c:	3202      	adds	r2, #2
 800793e:	f103 010c 	add.w	r1, r3, #12
 8007942:	0092      	lsls	r2, r2, #2
 8007944:	300c      	adds	r0, #12
 8007946:	f001 fd53 	bl	80093f0 <memcpy>
 800794a:	ec4b ab10 	vmov	d0, sl, fp
 800794e:	aa1a      	add	r2, sp, #104	; 0x68
 8007950:	a919      	add	r1, sp, #100	; 0x64
 8007952:	4620      	mov	r0, r4
 8007954:	f002 f948 	bl	8009be8 <__d2b>
 8007958:	ec4b ab18 	vmov	d8, sl, fp
 800795c:	9018      	str	r0, [sp, #96]	; 0x60
 800795e:	2800      	cmp	r0, #0
 8007960:	f43f aef6 	beq.w	8007750 <_strtod_l+0x490>
 8007964:	2101      	movs	r1, #1
 8007966:	4620      	mov	r0, r4
 8007968:	f001 fe92 	bl	8009690 <__i2b>
 800796c:	4606      	mov	r6, r0
 800796e:	2800      	cmp	r0, #0
 8007970:	f43f aeee 	beq.w	8007750 <_strtod_l+0x490>
 8007974:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007976:	9904      	ldr	r1, [sp, #16]
 8007978:	2b00      	cmp	r3, #0
 800797a:	bfab      	itete	ge
 800797c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800797e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007980:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007982:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007986:	bfac      	ite	ge
 8007988:	eb03 0902 	addge.w	r9, r3, r2
 800798c:	1ad7      	sublt	r7, r2, r3
 800798e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007990:	eba3 0801 	sub.w	r8, r3, r1
 8007994:	4490      	add	r8, r2
 8007996:	4ba1      	ldr	r3, [pc, #644]	; (8007c1c <_strtod_l+0x95c>)
 8007998:	f108 38ff 	add.w	r8, r8, #4294967295
 800799c:	4598      	cmp	r8, r3
 800799e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80079a2:	f280 80c7 	bge.w	8007b34 <_strtod_l+0x874>
 80079a6:	eba3 0308 	sub.w	r3, r3, r8
 80079aa:	2b1f      	cmp	r3, #31
 80079ac:	eba2 0203 	sub.w	r2, r2, r3
 80079b0:	f04f 0101 	mov.w	r1, #1
 80079b4:	f300 80b1 	bgt.w	8007b1a <_strtod_l+0x85a>
 80079b8:	fa01 f303 	lsl.w	r3, r1, r3
 80079bc:	930d      	str	r3, [sp, #52]	; 0x34
 80079be:	2300      	movs	r3, #0
 80079c0:	9308      	str	r3, [sp, #32]
 80079c2:	eb09 0802 	add.w	r8, r9, r2
 80079c6:	9b04      	ldr	r3, [sp, #16]
 80079c8:	45c1      	cmp	r9, r8
 80079ca:	4417      	add	r7, r2
 80079cc:	441f      	add	r7, r3
 80079ce:	464b      	mov	r3, r9
 80079d0:	bfa8      	it	ge
 80079d2:	4643      	movge	r3, r8
 80079d4:	42bb      	cmp	r3, r7
 80079d6:	bfa8      	it	ge
 80079d8:	463b      	movge	r3, r7
 80079da:	2b00      	cmp	r3, #0
 80079dc:	bfc2      	ittt	gt
 80079de:	eba8 0803 	subgt.w	r8, r8, r3
 80079e2:	1aff      	subgt	r7, r7, r3
 80079e4:	eba9 0903 	subgt.w	r9, r9, r3
 80079e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	dd17      	ble.n	8007a1e <_strtod_l+0x75e>
 80079ee:	4631      	mov	r1, r6
 80079f0:	461a      	mov	r2, r3
 80079f2:	4620      	mov	r0, r4
 80079f4:	f001 ff0c 	bl	8009810 <__pow5mult>
 80079f8:	4606      	mov	r6, r0
 80079fa:	2800      	cmp	r0, #0
 80079fc:	f43f aea8 	beq.w	8007750 <_strtod_l+0x490>
 8007a00:	4601      	mov	r1, r0
 8007a02:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007a04:	4620      	mov	r0, r4
 8007a06:	f001 fe59 	bl	80096bc <__multiply>
 8007a0a:	900b      	str	r0, [sp, #44]	; 0x2c
 8007a0c:	2800      	cmp	r0, #0
 8007a0e:	f43f ae9f 	beq.w	8007750 <_strtod_l+0x490>
 8007a12:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007a14:	4620      	mov	r0, r4
 8007a16:	f001 fd39 	bl	800948c <_Bfree>
 8007a1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a1c:	9318      	str	r3, [sp, #96]	; 0x60
 8007a1e:	f1b8 0f00 	cmp.w	r8, #0
 8007a22:	f300 808c 	bgt.w	8007b3e <_strtod_l+0x87e>
 8007a26:	9b06      	ldr	r3, [sp, #24]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	dd08      	ble.n	8007a3e <_strtod_l+0x77e>
 8007a2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007a2e:	9905      	ldr	r1, [sp, #20]
 8007a30:	4620      	mov	r0, r4
 8007a32:	f001 feed 	bl	8009810 <__pow5mult>
 8007a36:	9005      	str	r0, [sp, #20]
 8007a38:	2800      	cmp	r0, #0
 8007a3a:	f43f ae89 	beq.w	8007750 <_strtod_l+0x490>
 8007a3e:	2f00      	cmp	r7, #0
 8007a40:	dd08      	ble.n	8007a54 <_strtod_l+0x794>
 8007a42:	9905      	ldr	r1, [sp, #20]
 8007a44:	463a      	mov	r2, r7
 8007a46:	4620      	mov	r0, r4
 8007a48:	f001 ff3c 	bl	80098c4 <__lshift>
 8007a4c:	9005      	str	r0, [sp, #20]
 8007a4e:	2800      	cmp	r0, #0
 8007a50:	f43f ae7e 	beq.w	8007750 <_strtod_l+0x490>
 8007a54:	f1b9 0f00 	cmp.w	r9, #0
 8007a58:	dd08      	ble.n	8007a6c <_strtod_l+0x7ac>
 8007a5a:	4631      	mov	r1, r6
 8007a5c:	464a      	mov	r2, r9
 8007a5e:	4620      	mov	r0, r4
 8007a60:	f001 ff30 	bl	80098c4 <__lshift>
 8007a64:	4606      	mov	r6, r0
 8007a66:	2800      	cmp	r0, #0
 8007a68:	f43f ae72 	beq.w	8007750 <_strtod_l+0x490>
 8007a6c:	9a05      	ldr	r2, [sp, #20]
 8007a6e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007a70:	4620      	mov	r0, r4
 8007a72:	f001 ffb3 	bl	80099dc <__mdiff>
 8007a76:	4605      	mov	r5, r0
 8007a78:	2800      	cmp	r0, #0
 8007a7a:	f43f ae69 	beq.w	8007750 <_strtod_l+0x490>
 8007a7e:	68c3      	ldr	r3, [r0, #12]
 8007a80:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a82:	2300      	movs	r3, #0
 8007a84:	60c3      	str	r3, [r0, #12]
 8007a86:	4631      	mov	r1, r6
 8007a88:	f001 ff8c 	bl	80099a4 <__mcmp>
 8007a8c:	2800      	cmp	r0, #0
 8007a8e:	da60      	bge.n	8007b52 <_strtod_l+0x892>
 8007a90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a92:	ea53 030a 	orrs.w	r3, r3, sl
 8007a96:	f040 8082 	bne.w	8007b9e <_strtod_l+0x8de>
 8007a9a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d17d      	bne.n	8007b9e <_strtod_l+0x8de>
 8007aa2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007aa6:	0d1b      	lsrs	r3, r3, #20
 8007aa8:	051b      	lsls	r3, r3, #20
 8007aaa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007aae:	d976      	bls.n	8007b9e <_strtod_l+0x8de>
 8007ab0:	696b      	ldr	r3, [r5, #20]
 8007ab2:	b913      	cbnz	r3, 8007aba <_strtod_l+0x7fa>
 8007ab4:	692b      	ldr	r3, [r5, #16]
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	dd71      	ble.n	8007b9e <_strtod_l+0x8de>
 8007aba:	4629      	mov	r1, r5
 8007abc:	2201      	movs	r2, #1
 8007abe:	4620      	mov	r0, r4
 8007ac0:	f001 ff00 	bl	80098c4 <__lshift>
 8007ac4:	4631      	mov	r1, r6
 8007ac6:	4605      	mov	r5, r0
 8007ac8:	f001 ff6c 	bl	80099a4 <__mcmp>
 8007acc:	2800      	cmp	r0, #0
 8007ace:	dd66      	ble.n	8007b9e <_strtod_l+0x8de>
 8007ad0:	9904      	ldr	r1, [sp, #16]
 8007ad2:	4a53      	ldr	r2, [pc, #332]	; (8007c20 <_strtod_l+0x960>)
 8007ad4:	465b      	mov	r3, fp
 8007ad6:	2900      	cmp	r1, #0
 8007ad8:	f000 8081 	beq.w	8007bde <_strtod_l+0x91e>
 8007adc:	ea02 010b 	and.w	r1, r2, fp
 8007ae0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007ae4:	dc7b      	bgt.n	8007bde <_strtod_l+0x91e>
 8007ae6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007aea:	f77f aea9 	ble.w	8007840 <_strtod_l+0x580>
 8007aee:	4b4d      	ldr	r3, [pc, #308]	; (8007c24 <_strtod_l+0x964>)
 8007af0:	4650      	mov	r0, sl
 8007af2:	4659      	mov	r1, fp
 8007af4:	2200      	movs	r2, #0
 8007af6:	f7f8 fd8f 	bl	8000618 <__aeabi_dmul>
 8007afa:	460b      	mov	r3, r1
 8007afc:	4303      	orrs	r3, r0
 8007afe:	bf08      	it	eq
 8007b00:	2322      	moveq	r3, #34	; 0x22
 8007b02:	4682      	mov	sl, r0
 8007b04:	468b      	mov	fp, r1
 8007b06:	bf08      	it	eq
 8007b08:	6023      	streq	r3, [r4, #0]
 8007b0a:	e62b      	b.n	8007764 <_strtod_l+0x4a4>
 8007b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b10:	fa02 f303 	lsl.w	r3, r2, r3
 8007b14:	ea03 0a0a 	and.w	sl, r3, sl
 8007b18:	e6e3      	b.n	80078e2 <_strtod_l+0x622>
 8007b1a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007b1e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007b22:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007b26:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007b2a:	fa01 f308 	lsl.w	r3, r1, r8
 8007b2e:	9308      	str	r3, [sp, #32]
 8007b30:	910d      	str	r1, [sp, #52]	; 0x34
 8007b32:	e746      	b.n	80079c2 <_strtod_l+0x702>
 8007b34:	2300      	movs	r3, #0
 8007b36:	9308      	str	r3, [sp, #32]
 8007b38:	2301      	movs	r3, #1
 8007b3a:	930d      	str	r3, [sp, #52]	; 0x34
 8007b3c:	e741      	b.n	80079c2 <_strtod_l+0x702>
 8007b3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007b40:	4642      	mov	r2, r8
 8007b42:	4620      	mov	r0, r4
 8007b44:	f001 febe 	bl	80098c4 <__lshift>
 8007b48:	9018      	str	r0, [sp, #96]	; 0x60
 8007b4a:	2800      	cmp	r0, #0
 8007b4c:	f47f af6b 	bne.w	8007a26 <_strtod_l+0x766>
 8007b50:	e5fe      	b.n	8007750 <_strtod_l+0x490>
 8007b52:	465f      	mov	r7, fp
 8007b54:	d16e      	bne.n	8007c34 <_strtod_l+0x974>
 8007b56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b5c:	b342      	cbz	r2, 8007bb0 <_strtod_l+0x8f0>
 8007b5e:	4a32      	ldr	r2, [pc, #200]	; (8007c28 <_strtod_l+0x968>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d128      	bne.n	8007bb6 <_strtod_l+0x8f6>
 8007b64:	9b04      	ldr	r3, [sp, #16]
 8007b66:	4651      	mov	r1, sl
 8007b68:	b1eb      	cbz	r3, 8007ba6 <_strtod_l+0x8e6>
 8007b6a:	4b2d      	ldr	r3, [pc, #180]	; (8007c20 <_strtod_l+0x960>)
 8007b6c:	403b      	ands	r3, r7
 8007b6e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007b72:	f04f 32ff 	mov.w	r2, #4294967295
 8007b76:	d819      	bhi.n	8007bac <_strtod_l+0x8ec>
 8007b78:	0d1b      	lsrs	r3, r3, #20
 8007b7a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b82:	4299      	cmp	r1, r3
 8007b84:	d117      	bne.n	8007bb6 <_strtod_l+0x8f6>
 8007b86:	4b29      	ldr	r3, [pc, #164]	; (8007c2c <_strtod_l+0x96c>)
 8007b88:	429f      	cmp	r7, r3
 8007b8a:	d102      	bne.n	8007b92 <_strtod_l+0x8d2>
 8007b8c:	3101      	adds	r1, #1
 8007b8e:	f43f addf 	beq.w	8007750 <_strtod_l+0x490>
 8007b92:	4b23      	ldr	r3, [pc, #140]	; (8007c20 <_strtod_l+0x960>)
 8007b94:	403b      	ands	r3, r7
 8007b96:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007b9a:	f04f 0a00 	mov.w	sl, #0
 8007b9e:	9b04      	ldr	r3, [sp, #16]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d1a4      	bne.n	8007aee <_strtod_l+0x82e>
 8007ba4:	e5de      	b.n	8007764 <_strtod_l+0x4a4>
 8007ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8007baa:	e7ea      	b.n	8007b82 <_strtod_l+0x8c2>
 8007bac:	4613      	mov	r3, r2
 8007bae:	e7e8      	b.n	8007b82 <_strtod_l+0x8c2>
 8007bb0:	ea53 030a 	orrs.w	r3, r3, sl
 8007bb4:	d08c      	beq.n	8007ad0 <_strtod_l+0x810>
 8007bb6:	9b08      	ldr	r3, [sp, #32]
 8007bb8:	b1db      	cbz	r3, 8007bf2 <_strtod_l+0x932>
 8007bba:	423b      	tst	r3, r7
 8007bbc:	d0ef      	beq.n	8007b9e <_strtod_l+0x8de>
 8007bbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bc0:	9a04      	ldr	r2, [sp, #16]
 8007bc2:	4650      	mov	r0, sl
 8007bc4:	4659      	mov	r1, fp
 8007bc6:	b1c3      	cbz	r3, 8007bfa <_strtod_l+0x93a>
 8007bc8:	f7ff fb5e 	bl	8007288 <sulp>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	460b      	mov	r3, r1
 8007bd0:	ec51 0b18 	vmov	r0, r1, d8
 8007bd4:	f7f8 fb6a 	bl	80002ac <__adddf3>
 8007bd8:	4682      	mov	sl, r0
 8007bda:	468b      	mov	fp, r1
 8007bdc:	e7df      	b.n	8007b9e <_strtod_l+0x8de>
 8007bde:	4013      	ands	r3, r2
 8007be0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007be4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007be8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007bec:	f04f 3aff 	mov.w	sl, #4294967295
 8007bf0:	e7d5      	b.n	8007b9e <_strtod_l+0x8de>
 8007bf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bf4:	ea13 0f0a 	tst.w	r3, sl
 8007bf8:	e7e0      	b.n	8007bbc <_strtod_l+0x8fc>
 8007bfa:	f7ff fb45 	bl	8007288 <sulp>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	460b      	mov	r3, r1
 8007c02:	ec51 0b18 	vmov	r0, r1, d8
 8007c06:	f7f8 fb4f 	bl	80002a8 <__aeabi_dsub>
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	4682      	mov	sl, r0
 8007c10:	468b      	mov	fp, r1
 8007c12:	f7f8 ff69 	bl	8000ae8 <__aeabi_dcmpeq>
 8007c16:	2800      	cmp	r0, #0
 8007c18:	d0c1      	beq.n	8007b9e <_strtod_l+0x8de>
 8007c1a:	e611      	b.n	8007840 <_strtod_l+0x580>
 8007c1c:	fffffc02 	.word	0xfffffc02
 8007c20:	7ff00000 	.word	0x7ff00000
 8007c24:	39500000 	.word	0x39500000
 8007c28:	000fffff 	.word	0x000fffff
 8007c2c:	7fefffff 	.word	0x7fefffff
 8007c30:	0800d588 	.word	0x0800d588
 8007c34:	4631      	mov	r1, r6
 8007c36:	4628      	mov	r0, r5
 8007c38:	f002 f832 	bl	8009ca0 <__ratio>
 8007c3c:	ec59 8b10 	vmov	r8, r9, d0
 8007c40:	ee10 0a10 	vmov	r0, s0
 8007c44:	2200      	movs	r2, #0
 8007c46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007c4a:	4649      	mov	r1, r9
 8007c4c:	f7f8 ff60 	bl	8000b10 <__aeabi_dcmple>
 8007c50:	2800      	cmp	r0, #0
 8007c52:	d07a      	beq.n	8007d4a <_strtod_l+0xa8a>
 8007c54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d04a      	beq.n	8007cf0 <_strtod_l+0xa30>
 8007c5a:	4b95      	ldr	r3, [pc, #596]	; (8007eb0 <_strtod_l+0xbf0>)
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007c62:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007eb0 <_strtod_l+0xbf0>
 8007c66:	f04f 0800 	mov.w	r8, #0
 8007c6a:	4b92      	ldr	r3, [pc, #584]	; (8007eb4 <_strtod_l+0xbf4>)
 8007c6c:	403b      	ands	r3, r7
 8007c6e:	930d      	str	r3, [sp, #52]	; 0x34
 8007c70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c72:	4b91      	ldr	r3, [pc, #580]	; (8007eb8 <_strtod_l+0xbf8>)
 8007c74:	429a      	cmp	r2, r3
 8007c76:	f040 80b0 	bne.w	8007dda <_strtod_l+0xb1a>
 8007c7a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007c7e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007c82:	ec4b ab10 	vmov	d0, sl, fp
 8007c86:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007c8a:	f001 ff31 	bl	8009af0 <__ulp>
 8007c8e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007c92:	ec53 2b10 	vmov	r2, r3, d0
 8007c96:	f7f8 fcbf 	bl	8000618 <__aeabi_dmul>
 8007c9a:	4652      	mov	r2, sl
 8007c9c:	465b      	mov	r3, fp
 8007c9e:	f7f8 fb05 	bl	80002ac <__adddf3>
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	4983      	ldr	r1, [pc, #524]	; (8007eb4 <_strtod_l+0xbf4>)
 8007ca6:	4a85      	ldr	r2, [pc, #532]	; (8007ebc <_strtod_l+0xbfc>)
 8007ca8:	4019      	ands	r1, r3
 8007caa:	4291      	cmp	r1, r2
 8007cac:	4682      	mov	sl, r0
 8007cae:	d960      	bls.n	8007d72 <_strtod_l+0xab2>
 8007cb0:	ee18 3a90 	vmov	r3, s17
 8007cb4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d104      	bne.n	8007cc6 <_strtod_l+0xa06>
 8007cbc:	ee18 3a10 	vmov	r3, s16
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	f43f ad45 	beq.w	8007750 <_strtod_l+0x490>
 8007cc6:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007ec8 <_strtod_l+0xc08>
 8007cca:	f04f 3aff 	mov.w	sl, #4294967295
 8007cce:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	f001 fbdb 	bl	800948c <_Bfree>
 8007cd6:	9905      	ldr	r1, [sp, #20]
 8007cd8:	4620      	mov	r0, r4
 8007cda:	f001 fbd7 	bl	800948c <_Bfree>
 8007cde:	4631      	mov	r1, r6
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	f001 fbd3 	bl	800948c <_Bfree>
 8007ce6:	4629      	mov	r1, r5
 8007ce8:	4620      	mov	r0, r4
 8007cea:	f001 fbcf 	bl	800948c <_Bfree>
 8007cee:	e61a      	b.n	8007926 <_strtod_l+0x666>
 8007cf0:	f1ba 0f00 	cmp.w	sl, #0
 8007cf4:	d11b      	bne.n	8007d2e <_strtod_l+0xa6e>
 8007cf6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007cfa:	b9f3      	cbnz	r3, 8007d3a <_strtod_l+0xa7a>
 8007cfc:	4b6c      	ldr	r3, [pc, #432]	; (8007eb0 <_strtod_l+0xbf0>)
 8007cfe:	2200      	movs	r2, #0
 8007d00:	4640      	mov	r0, r8
 8007d02:	4649      	mov	r1, r9
 8007d04:	f7f8 fefa 	bl	8000afc <__aeabi_dcmplt>
 8007d08:	b9d0      	cbnz	r0, 8007d40 <_strtod_l+0xa80>
 8007d0a:	4640      	mov	r0, r8
 8007d0c:	4649      	mov	r1, r9
 8007d0e:	4b6c      	ldr	r3, [pc, #432]	; (8007ec0 <_strtod_l+0xc00>)
 8007d10:	2200      	movs	r2, #0
 8007d12:	f7f8 fc81 	bl	8000618 <__aeabi_dmul>
 8007d16:	4680      	mov	r8, r0
 8007d18:	4689      	mov	r9, r1
 8007d1a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007d1e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007d22:	9315      	str	r3, [sp, #84]	; 0x54
 8007d24:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007d28:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007d2c:	e79d      	b.n	8007c6a <_strtod_l+0x9aa>
 8007d2e:	f1ba 0f01 	cmp.w	sl, #1
 8007d32:	d102      	bne.n	8007d3a <_strtod_l+0xa7a>
 8007d34:	2f00      	cmp	r7, #0
 8007d36:	f43f ad83 	beq.w	8007840 <_strtod_l+0x580>
 8007d3a:	4b62      	ldr	r3, [pc, #392]	; (8007ec4 <_strtod_l+0xc04>)
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	e78e      	b.n	8007c5e <_strtod_l+0x99e>
 8007d40:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007ec0 <_strtod_l+0xc00>
 8007d44:	f04f 0800 	mov.w	r8, #0
 8007d48:	e7e7      	b.n	8007d1a <_strtod_l+0xa5a>
 8007d4a:	4b5d      	ldr	r3, [pc, #372]	; (8007ec0 <_strtod_l+0xc00>)
 8007d4c:	4640      	mov	r0, r8
 8007d4e:	4649      	mov	r1, r9
 8007d50:	2200      	movs	r2, #0
 8007d52:	f7f8 fc61 	bl	8000618 <__aeabi_dmul>
 8007d56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d58:	4680      	mov	r8, r0
 8007d5a:	4689      	mov	r9, r1
 8007d5c:	b933      	cbnz	r3, 8007d6c <_strtod_l+0xaac>
 8007d5e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d62:	900e      	str	r0, [sp, #56]	; 0x38
 8007d64:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d66:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007d6a:	e7dd      	b.n	8007d28 <_strtod_l+0xa68>
 8007d6c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007d70:	e7f9      	b.n	8007d66 <_strtod_l+0xaa6>
 8007d72:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007d76:	9b04      	ldr	r3, [sp, #16]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d1a8      	bne.n	8007cce <_strtod_l+0xa0e>
 8007d7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007d80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d82:	0d1b      	lsrs	r3, r3, #20
 8007d84:	051b      	lsls	r3, r3, #20
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d1a1      	bne.n	8007cce <_strtod_l+0xa0e>
 8007d8a:	4640      	mov	r0, r8
 8007d8c:	4649      	mov	r1, r9
 8007d8e:	f7f8 ffa3 	bl	8000cd8 <__aeabi_d2lz>
 8007d92:	f7f8 fc13 	bl	80005bc <__aeabi_l2d>
 8007d96:	4602      	mov	r2, r0
 8007d98:	460b      	mov	r3, r1
 8007d9a:	4640      	mov	r0, r8
 8007d9c:	4649      	mov	r1, r9
 8007d9e:	f7f8 fa83 	bl	80002a8 <__aeabi_dsub>
 8007da2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007da4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007da8:	ea43 030a 	orr.w	r3, r3, sl
 8007dac:	4313      	orrs	r3, r2
 8007dae:	4680      	mov	r8, r0
 8007db0:	4689      	mov	r9, r1
 8007db2:	d055      	beq.n	8007e60 <_strtod_l+0xba0>
 8007db4:	a336      	add	r3, pc, #216	; (adr r3, 8007e90 <_strtod_l+0xbd0>)
 8007db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dba:	f7f8 fe9f 	bl	8000afc <__aeabi_dcmplt>
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	f47f acd0 	bne.w	8007764 <_strtod_l+0x4a4>
 8007dc4:	a334      	add	r3, pc, #208	; (adr r3, 8007e98 <_strtod_l+0xbd8>)
 8007dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dca:	4640      	mov	r0, r8
 8007dcc:	4649      	mov	r1, r9
 8007dce:	f7f8 feb3 	bl	8000b38 <__aeabi_dcmpgt>
 8007dd2:	2800      	cmp	r0, #0
 8007dd4:	f43f af7b 	beq.w	8007cce <_strtod_l+0xa0e>
 8007dd8:	e4c4      	b.n	8007764 <_strtod_l+0x4a4>
 8007dda:	9b04      	ldr	r3, [sp, #16]
 8007ddc:	b333      	cbz	r3, 8007e2c <_strtod_l+0xb6c>
 8007dde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007de0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007de4:	d822      	bhi.n	8007e2c <_strtod_l+0xb6c>
 8007de6:	a32e      	add	r3, pc, #184	; (adr r3, 8007ea0 <_strtod_l+0xbe0>)
 8007de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dec:	4640      	mov	r0, r8
 8007dee:	4649      	mov	r1, r9
 8007df0:	f7f8 fe8e 	bl	8000b10 <__aeabi_dcmple>
 8007df4:	b1a0      	cbz	r0, 8007e20 <_strtod_l+0xb60>
 8007df6:	4649      	mov	r1, r9
 8007df8:	4640      	mov	r0, r8
 8007dfa:	f7f8 fee5 	bl	8000bc8 <__aeabi_d2uiz>
 8007dfe:	2801      	cmp	r0, #1
 8007e00:	bf38      	it	cc
 8007e02:	2001      	movcc	r0, #1
 8007e04:	f7f8 fb8e 	bl	8000524 <__aeabi_ui2d>
 8007e08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e0a:	4680      	mov	r8, r0
 8007e0c:	4689      	mov	r9, r1
 8007e0e:	bb23      	cbnz	r3, 8007e5a <_strtod_l+0xb9a>
 8007e10:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e14:	9010      	str	r0, [sp, #64]	; 0x40
 8007e16:	9311      	str	r3, [sp, #68]	; 0x44
 8007e18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007e1c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e22:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e24:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007e28:	1a9b      	subs	r3, r3, r2
 8007e2a:	9309      	str	r3, [sp, #36]	; 0x24
 8007e2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007e30:	eeb0 0a48 	vmov.f32	s0, s16
 8007e34:	eef0 0a68 	vmov.f32	s1, s17
 8007e38:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007e3c:	f001 fe58 	bl	8009af0 <__ulp>
 8007e40:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007e44:	ec53 2b10 	vmov	r2, r3, d0
 8007e48:	f7f8 fbe6 	bl	8000618 <__aeabi_dmul>
 8007e4c:	ec53 2b18 	vmov	r2, r3, d8
 8007e50:	f7f8 fa2c 	bl	80002ac <__adddf3>
 8007e54:	4682      	mov	sl, r0
 8007e56:	468b      	mov	fp, r1
 8007e58:	e78d      	b.n	8007d76 <_strtod_l+0xab6>
 8007e5a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007e5e:	e7db      	b.n	8007e18 <_strtod_l+0xb58>
 8007e60:	a311      	add	r3, pc, #68	; (adr r3, 8007ea8 <_strtod_l+0xbe8>)
 8007e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e66:	f7f8 fe49 	bl	8000afc <__aeabi_dcmplt>
 8007e6a:	e7b2      	b.n	8007dd2 <_strtod_l+0xb12>
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	930a      	str	r3, [sp, #40]	; 0x28
 8007e70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007e72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e74:	6013      	str	r3, [r2, #0]
 8007e76:	f7ff ba6b 	b.w	8007350 <_strtod_l+0x90>
 8007e7a:	2a65      	cmp	r2, #101	; 0x65
 8007e7c:	f43f ab5f 	beq.w	800753e <_strtod_l+0x27e>
 8007e80:	2a45      	cmp	r2, #69	; 0x45
 8007e82:	f43f ab5c 	beq.w	800753e <_strtod_l+0x27e>
 8007e86:	2301      	movs	r3, #1
 8007e88:	f7ff bb94 	b.w	80075b4 <_strtod_l+0x2f4>
 8007e8c:	f3af 8000 	nop.w
 8007e90:	94a03595 	.word	0x94a03595
 8007e94:	3fdfffff 	.word	0x3fdfffff
 8007e98:	35afe535 	.word	0x35afe535
 8007e9c:	3fe00000 	.word	0x3fe00000
 8007ea0:	ffc00000 	.word	0xffc00000
 8007ea4:	41dfffff 	.word	0x41dfffff
 8007ea8:	94a03595 	.word	0x94a03595
 8007eac:	3fcfffff 	.word	0x3fcfffff
 8007eb0:	3ff00000 	.word	0x3ff00000
 8007eb4:	7ff00000 	.word	0x7ff00000
 8007eb8:	7fe00000 	.word	0x7fe00000
 8007ebc:	7c9fffff 	.word	0x7c9fffff
 8007ec0:	3fe00000 	.word	0x3fe00000
 8007ec4:	bff00000 	.word	0xbff00000
 8007ec8:	7fefffff 	.word	0x7fefffff

08007ecc <_strtod_r>:
 8007ecc:	4b01      	ldr	r3, [pc, #4]	; (8007ed4 <_strtod_r+0x8>)
 8007ece:	f7ff b9f7 	b.w	80072c0 <_strtod_l>
 8007ed2:	bf00      	nop
 8007ed4:	200000f8 	.word	0x200000f8

08007ed8 <_strtol_l.constprop.0>:
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ede:	d001      	beq.n	8007ee4 <_strtol_l.constprop.0+0xc>
 8007ee0:	2b24      	cmp	r3, #36	; 0x24
 8007ee2:	d906      	bls.n	8007ef2 <_strtol_l.constprop.0+0x1a>
 8007ee4:	f7fe fafe 	bl	80064e4 <__errno>
 8007ee8:	2316      	movs	r3, #22
 8007eea:	6003      	str	r3, [r0, #0]
 8007eec:	2000      	movs	r0, #0
 8007eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ef2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007fd8 <_strtol_l.constprop.0+0x100>
 8007ef6:	460d      	mov	r5, r1
 8007ef8:	462e      	mov	r6, r5
 8007efa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007efe:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007f02:	f017 0708 	ands.w	r7, r7, #8
 8007f06:	d1f7      	bne.n	8007ef8 <_strtol_l.constprop.0+0x20>
 8007f08:	2c2d      	cmp	r4, #45	; 0x2d
 8007f0a:	d132      	bne.n	8007f72 <_strtol_l.constprop.0+0x9a>
 8007f0c:	782c      	ldrb	r4, [r5, #0]
 8007f0e:	2701      	movs	r7, #1
 8007f10:	1cb5      	adds	r5, r6, #2
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d05b      	beq.n	8007fce <_strtol_l.constprop.0+0xf6>
 8007f16:	2b10      	cmp	r3, #16
 8007f18:	d109      	bne.n	8007f2e <_strtol_l.constprop.0+0x56>
 8007f1a:	2c30      	cmp	r4, #48	; 0x30
 8007f1c:	d107      	bne.n	8007f2e <_strtol_l.constprop.0+0x56>
 8007f1e:	782c      	ldrb	r4, [r5, #0]
 8007f20:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007f24:	2c58      	cmp	r4, #88	; 0x58
 8007f26:	d14d      	bne.n	8007fc4 <_strtol_l.constprop.0+0xec>
 8007f28:	786c      	ldrb	r4, [r5, #1]
 8007f2a:	2310      	movs	r3, #16
 8007f2c:	3502      	adds	r5, #2
 8007f2e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007f32:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f36:	f04f 0c00 	mov.w	ip, #0
 8007f3a:	fbb8 f9f3 	udiv	r9, r8, r3
 8007f3e:	4666      	mov	r6, ip
 8007f40:	fb03 8a19 	mls	sl, r3, r9, r8
 8007f44:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007f48:	f1be 0f09 	cmp.w	lr, #9
 8007f4c:	d816      	bhi.n	8007f7c <_strtol_l.constprop.0+0xa4>
 8007f4e:	4674      	mov	r4, lr
 8007f50:	42a3      	cmp	r3, r4
 8007f52:	dd24      	ble.n	8007f9e <_strtol_l.constprop.0+0xc6>
 8007f54:	f1bc 0f00 	cmp.w	ip, #0
 8007f58:	db1e      	blt.n	8007f98 <_strtol_l.constprop.0+0xc0>
 8007f5a:	45b1      	cmp	r9, r6
 8007f5c:	d31c      	bcc.n	8007f98 <_strtol_l.constprop.0+0xc0>
 8007f5e:	d101      	bne.n	8007f64 <_strtol_l.constprop.0+0x8c>
 8007f60:	45a2      	cmp	sl, r4
 8007f62:	db19      	blt.n	8007f98 <_strtol_l.constprop.0+0xc0>
 8007f64:	fb06 4603 	mla	r6, r6, r3, r4
 8007f68:	f04f 0c01 	mov.w	ip, #1
 8007f6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f70:	e7e8      	b.n	8007f44 <_strtol_l.constprop.0+0x6c>
 8007f72:	2c2b      	cmp	r4, #43	; 0x2b
 8007f74:	bf04      	itt	eq
 8007f76:	782c      	ldrbeq	r4, [r5, #0]
 8007f78:	1cb5      	addeq	r5, r6, #2
 8007f7a:	e7ca      	b.n	8007f12 <_strtol_l.constprop.0+0x3a>
 8007f7c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007f80:	f1be 0f19 	cmp.w	lr, #25
 8007f84:	d801      	bhi.n	8007f8a <_strtol_l.constprop.0+0xb2>
 8007f86:	3c37      	subs	r4, #55	; 0x37
 8007f88:	e7e2      	b.n	8007f50 <_strtol_l.constprop.0+0x78>
 8007f8a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007f8e:	f1be 0f19 	cmp.w	lr, #25
 8007f92:	d804      	bhi.n	8007f9e <_strtol_l.constprop.0+0xc6>
 8007f94:	3c57      	subs	r4, #87	; 0x57
 8007f96:	e7db      	b.n	8007f50 <_strtol_l.constprop.0+0x78>
 8007f98:	f04f 3cff 	mov.w	ip, #4294967295
 8007f9c:	e7e6      	b.n	8007f6c <_strtol_l.constprop.0+0x94>
 8007f9e:	f1bc 0f00 	cmp.w	ip, #0
 8007fa2:	da05      	bge.n	8007fb0 <_strtol_l.constprop.0+0xd8>
 8007fa4:	2322      	movs	r3, #34	; 0x22
 8007fa6:	6003      	str	r3, [r0, #0]
 8007fa8:	4646      	mov	r6, r8
 8007faa:	b942      	cbnz	r2, 8007fbe <_strtol_l.constprop.0+0xe6>
 8007fac:	4630      	mov	r0, r6
 8007fae:	e79e      	b.n	8007eee <_strtol_l.constprop.0+0x16>
 8007fb0:	b107      	cbz	r7, 8007fb4 <_strtol_l.constprop.0+0xdc>
 8007fb2:	4276      	negs	r6, r6
 8007fb4:	2a00      	cmp	r2, #0
 8007fb6:	d0f9      	beq.n	8007fac <_strtol_l.constprop.0+0xd4>
 8007fb8:	f1bc 0f00 	cmp.w	ip, #0
 8007fbc:	d000      	beq.n	8007fc0 <_strtol_l.constprop.0+0xe8>
 8007fbe:	1e69      	subs	r1, r5, #1
 8007fc0:	6011      	str	r1, [r2, #0]
 8007fc2:	e7f3      	b.n	8007fac <_strtol_l.constprop.0+0xd4>
 8007fc4:	2430      	movs	r4, #48	; 0x30
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d1b1      	bne.n	8007f2e <_strtol_l.constprop.0+0x56>
 8007fca:	2308      	movs	r3, #8
 8007fcc:	e7af      	b.n	8007f2e <_strtol_l.constprop.0+0x56>
 8007fce:	2c30      	cmp	r4, #48	; 0x30
 8007fd0:	d0a5      	beq.n	8007f1e <_strtol_l.constprop.0+0x46>
 8007fd2:	230a      	movs	r3, #10
 8007fd4:	e7ab      	b.n	8007f2e <_strtol_l.constprop.0+0x56>
 8007fd6:	bf00      	nop
 8007fd8:	0800d5b1 	.word	0x0800d5b1

08007fdc <_strtol_r>:
 8007fdc:	f7ff bf7c 	b.w	8007ed8 <_strtol_l.constprop.0>

08007fe0 <quorem>:
 8007fe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe4:	6903      	ldr	r3, [r0, #16]
 8007fe6:	690c      	ldr	r4, [r1, #16]
 8007fe8:	42a3      	cmp	r3, r4
 8007fea:	4607      	mov	r7, r0
 8007fec:	f2c0 8081 	blt.w	80080f2 <quorem+0x112>
 8007ff0:	3c01      	subs	r4, #1
 8007ff2:	f101 0814 	add.w	r8, r1, #20
 8007ff6:	f100 0514 	add.w	r5, r0, #20
 8007ffa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ffe:	9301      	str	r3, [sp, #4]
 8008000:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008004:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008008:	3301      	adds	r3, #1
 800800a:	429a      	cmp	r2, r3
 800800c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008010:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008014:	fbb2 f6f3 	udiv	r6, r2, r3
 8008018:	d331      	bcc.n	800807e <quorem+0x9e>
 800801a:	f04f 0e00 	mov.w	lr, #0
 800801e:	4640      	mov	r0, r8
 8008020:	46ac      	mov	ip, r5
 8008022:	46f2      	mov	sl, lr
 8008024:	f850 2b04 	ldr.w	r2, [r0], #4
 8008028:	b293      	uxth	r3, r2
 800802a:	fb06 e303 	mla	r3, r6, r3, lr
 800802e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008032:	b29b      	uxth	r3, r3
 8008034:	ebaa 0303 	sub.w	r3, sl, r3
 8008038:	f8dc a000 	ldr.w	sl, [ip]
 800803c:	0c12      	lsrs	r2, r2, #16
 800803e:	fa13 f38a 	uxtah	r3, r3, sl
 8008042:	fb06 e202 	mla	r2, r6, r2, lr
 8008046:	9300      	str	r3, [sp, #0]
 8008048:	9b00      	ldr	r3, [sp, #0]
 800804a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800804e:	b292      	uxth	r2, r2
 8008050:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008054:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008058:	f8bd 3000 	ldrh.w	r3, [sp]
 800805c:	4581      	cmp	r9, r0
 800805e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008062:	f84c 3b04 	str.w	r3, [ip], #4
 8008066:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800806a:	d2db      	bcs.n	8008024 <quorem+0x44>
 800806c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008070:	b92b      	cbnz	r3, 800807e <quorem+0x9e>
 8008072:	9b01      	ldr	r3, [sp, #4]
 8008074:	3b04      	subs	r3, #4
 8008076:	429d      	cmp	r5, r3
 8008078:	461a      	mov	r2, r3
 800807a:	d32e      	bcc.n	80080da <quorem+0xfa>
 800807c:	613c      	str	r4, [r7, #16]
 800807e:	4638      	mov	r0, r7
 8008080:	f001 fc90 	bl	80099a4 <__mcmp>
 8008084:	2800      	cmp	r0, #0
 8008086:	db24      	blt.n	80080d2 <quorem+0xf2>
 8008088:	3601      	adds	r6, #1
 800808a:	4628      	mov	r0, r5
 800808c:	f04f 0c00 	mov.w	ip, #0
 8008090:	f858 2b04 	ldr.w	r2, [r8], #4
 8008094:	f8d0 e000 	ldr.w	lr, [r0]
 8008098:	b293      	uxth	r3, r2
 800809a:	ebac 0303 	sub.w	r3, ip, r3
 800809e:	0c12      	lsrs	r2, r2, #16
 80080a0:	fa13 f38e 	uxtah	r3, r3, lr
 80080a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80080a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080b2:	45c1      	cmp	r9, r8
 80080b4:	f840 3b04 	str.w	r3, [r0], #4
 80080b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80080bc:	d2e8      	bcs.n	8008090 <quorem+0xb0>
 80080be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080c6:	b922      	cbnz	r2, 80080d2 <quorem+0xf2>
 80080c8:	3b04      	subs	r3, #4
 80080ca:	429d      	cmp	r5, r3
 80080cc:	461a      	mov	r2, r3
 80080ce:	d30a      	bcc.n	80080e6 <quorem+0x106>
 80080d0:	613c      	str	r4, [r7, #16]
 80080d2:	4630      	mov	r0, r6
 80080d4:	b003      	add	sp, #12
 80080d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080da:	6812      	ldr	r2, [r2, #0]
 80080dc:	3b04      	subs	r3, #4
 80080de:	2a00      	cmp	r2, #0
 80080e0:	d1cc      	bne.n	800807c <quorem+0x9c>
 80080e2:	3c01      	subs	r4, #1
 80080e4:	e7c7      	b.n	8008076 <quorem+0x96>
 80080e6:	6812      	ldr	r2, [r2, #0]
 80080e8:	3b04      	subs	r3, #4
 80080ea:	2a00      	cmp	r2, #0
 80080ec:	d1f0      	bne.n	80080d0 <quorem+0xf0>
 80080ee:	3c01      	subs	r4, #1
 80080f0:	e7eb      	b.n	80080ca <quorem+0xea>
 80080f2:	2000      	movs	r0, #0
 80080f4:	e7ee      	b.n	80080d4 <quorem+0xf4>
	...

080080f8 <_dtoa_r>:
 80080f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080fc:	ed2d 8b04 	vpush	{d8-d9}
 8008100:	ec57 6b10 	vmov	r6, r7, d0
 8008104:	b093      	sub	sp, #76	; 0x4c
 8008106:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008108:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800810c:	9106      	str	r1, [sp, #24]
 800810e:	ee10 aa10 	vmov	sl, s0
 8008112:	4604      	mov	r4, r0
 8008114:	9209      	str	r2, [sp, #36]	; 0x24
 8008116:	930c      	str	r3, [sp, #48]	; 0x30
 8008118:	46bb      	mov	fp, r7
 800811a:	b975      	cbnz	r5, 800813a <_dtoa_r+0x42>
 800811c:	2010      	movs	r0, #16
 800811e:	f001 f94d 	bl	80093bc <malloc>
 8008122:	4602      	mov	r2, r0
 8008124:	6260      	str	r0, [r4, #36]	; 0x24
 8008126:	b920      	cbnz	r0, 8008132 <_dtoa_r+0x3a>
 8008128:	4ba7      	ldr	r3, [pc, #668]	; (80083c8 <_dtoa_r+0x2d0>)
 800812a:	21ea      	movs	r1, #234	; 0xea
 800812c:	48a7      	ldr	r0, [pc, #668]	; (80083cc <_dtoa_r+0x2d4>)
 800812e:	f002 f8bd 	bl	800a2ac <__assert_func>
 8008132:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008136:	6005      	str	r5, [r0, #0]
 8008138:	60c5      	str	r5, [r0, #12]
 800813a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800813c:	6819      	ldr	r1, [r3, #0]
 800813e:	b151      	cbz	r1, 8008156 <_dtoa_r+0x5e>
 8008140:	685a      	ldr	r2, [r3, #4]
 8008142:	604a      	str	r2, [r1, #4]
 8008144:	2301      	movs	r3, #1
 8008146:	4093      	lsls	r3, r2
 8008148:	608b      	str	r3, [r1, #8]
 800814a:	4620      	mov	r0, r4
 800814c:	f001 f99e 	bl	800948c <_Bfree>
 8008150:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008152:	2200      	movs	r2, #0
 8008154:	601a      	str	r2, [r3, #0]
 8008156:	1e3b      	subs	r3, r7, #0
 8008158:	bfaa      	itet	ge
 800815a:	2300      	movge	r3, #0
 800815c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008160:	f8c8 3000 	strge.w	r3, [r8]
 8008164:	4b9a      	ldr	r3, [pc, #616]	; (80083d0 <_dtoa_r+0x2d8>)
 8008166:	bfbc      	itt	lt
 8008168:	2201      	movlt	r2, #1
 800816a:	f8c8 2000 	strlt.w	r2, [r8]
 800816e:	ea33 030b 	bics.w	r3, r3, fp
 8008172:	d11b      	bne.n	80081ac <_dtoa_r+0xb4>
 8008174:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008176:	f242 730f 	movw	r3, #9999	; 0x270f
 800817a:	6013      	str	r3, [r2, #0]
 800817c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008180:	4333      	orrs	r3, r6
 8008182:	f000 8592 	beq.w	8008caa <_dtoa_r+0xbb2>
 8008186:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008188:	b963      	cbnz	r3, 80081a4 <_dtoa_r+0xac>
 800818a:	4b92      	ldr	r3, [pc, #584]	; (80083d4 <_dtoa_r+0x2dc>)
 800818c:	e022      	b.n	80081d4 <_dtoa_r+0xdc>
 800818e:	4b92      	ldr	r3, [pc, #584]	; (80083d8 <_dtoa_r+0x2e0>)
 8008190:	9301      	str	r3, [sp, #4]
 8008192:	3308      	adds	r3, #8
 8008194:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008196:	6013      	str	r3, [r2, #0]
 8008198:	9801      	ldr	r0, [sp, #4]
 800819a:	b013      	add	sp, #76	; 0x4c
 800819c:	ecbd 8b04 	vpop	{d8-d9}
 80081a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081a4:	4b8b      	ldr	r3, [pc, #556]	; (80083d4 <_dtoa_r+0x2dc>)
 80081a6:	9301      	str	r3, [sp, #4]
 80081a8:	3303      	adds	r3, #3
 80081aa:	e7f3      	b.n	8008194 <_dtoa_r+0x9c>
 80081ac:	2200      	movs	r2, #0
 80081ae:	2300      	movs	r3, #0
 80081b0:	4650      	mov	r0, sl
 80081b2:	4659      	mov	r1, fp
 80081b4:	f7f8 fc98 	bl	8000ae8 <__aeabi_dcmpeq>
 80081b8:	ec4b ab19 	vmov	d9, sl, fp
 80081bc:	4680      	mov	r8, r0
 80081be:	b158      	cbz	r0, 80081d8 <_dtoa_r+0xe0>
 80081c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081c2:	2301      	movs	r3, #1
 80081c4:	6013      	str	r3, [r2, #0]
 80081c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	f000 856b 	beq.w	8008ca4 <_dtoa_r+0xbac>
 80081ce:	4883      	ldr	r0, [pc, #524]	; (80083dc <_dtoa_r+0x2e4>)
 80081d0:	6018      	str	r0, [r3, #0]
 80081d2:	1e43      	subs	r3, r0, #1
 80081d4:	9301      	str	r3, [sp, #4]
 80081d6:	e7df      	b.n	8008198 <_dtoa_r+0xa0>
 80081d8:	ec4b ab10 	vmov	d0, sl, fp
 80081dc:	aa10      	add	r2, sp, #64	; 0x40
 80081de:	a911      	add	r1, sp, #68	; 0x44
 80081e0:	4620      	mov	r0, r4
 80081e2:	f001 fd01 	bl	8009be8 <__d2b>
 80081e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80081ea:	ee08 0a10 	vmov	s16, r0
 80081ee:	2d00      	cmp	r5, #0
 80081f0:	f000 8084 	beq.w	80082fc <_dtoa_r+0x204>
 80081f4:	ee19 3a90 	vmov	r3, s19
 80081f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008200:	4656      	mov	r6, sl
 8008202:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008206:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800820a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800820e:	4b74      	ldr	r3, [pc, #464]	; (80083e0 <_dtoa_r+0x2e8>)
 8008210:	2200      	movs	r2, #0
 8008212:	4630      	mov	r0, r6
 8008214:	4639      	mov	r1, r7
 8008216:	f7f8 f847 	bl	80002a8 <__aeabi_dsub>
 800821a:	a365      	add	r3, pc, #404	; (adr r3, 80083b0 <_dtoa_r+0x2b8>)
 800821c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008220:	f7f8 f9fa 	bl	8000618 <__aeabi_dmul>
 8008224:	a364      	add	r3, pc, #400	; (adr r3, 80083b8 <_dtoa_r+0x2c0>)
 8008226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822a:	f7f8 f83f 	bl	80002ac <__adddf3>
 800822e:	4606      	mov	r6, r0
 8008230:	4628      	mov	r0, r5
 8008232:	460f      	mov	r7, r1
 8008234:	f7f8 f986 	bl	8000544 <__aeabi_i2d>
 8008238:	a361      	add	r3, pc, #388	; (adr r3, 80083c0 <_dtoa_r+0x2c8>)
 800823a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823e:	f7f8 f9eb 	bl	8000618 <__aeabi_dmul>
 8008242:	4602      	mov	r2, r0
 8008244:	460b      	mov	r3, r1
 8008246:	4630      	mov	r0, r6
 8008248:	4639      	mov	r1, r7
 800824a:	f7f8 f82f 	bl	80002ac <__adddf3>
 800824e:	4606      	mov	r6, r0
 8008250:	460f      	mov	r7, r1
 8008252:	f7f8 fc91 	bl	8000b78 <__aeabi_d2iz>
 8008256:	2200      	movs	r2, #0
 8008258:	9000      	str	r0, [sp, #0]
 800825a:	2300      	movs	r3, #0
 800825c:	4630      	mov	r0, r6
 800825e:	4639      	mov	r1, r7
 8008260:	f7f8 fc4c 	bl	8000afc <__aeabi_dcmplt>
 8008264:	b150      	cbz	r0, 800827c <_dtoa_r+0x184>
 8008266:	9800      	ldr	r0, [sp, #0]
 8008268:	f7f8 f96c 	bl	8000544 <__aeabi_i2d>
 800826c:	4632      	mov	r2, r6
 800826e:	463b      	mov	r3, r7
 8008270:	f7f8 fc3a 	bl	8000ae8 <__aeabi_dcmpeq>
 8008274:	b910      	cbnz	r0, 800827c <_dtoa_r+0x184>
 8008276:	9b00      	ldr	r3, [sp, #0]
 8008278:	3b01      	subs	r3, #1
 800827a:	9300      	str	r3, [sp, #0]
 800827c:	9b00      	ldr	r3, [sp, #0]
 800827e:	2b16      	cmp	r3, #22
 8008280:	d85a      	bhi.n	8008338 <_dtoa_r+0x240>
 8008282:	9a00      	ldr	r2, [sp, #0]
 8008284:	4b57      	ldr	r3, [pc, #348]	; (80083e4 <_dtoa_r+0x2ec>)
 8008286:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800828a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828e:	ec51 0b19 	vmov	r0, r1, d9
 8008292:	f7f8 fc33 	bl	8000afc <__aeabi_dcmplt>
 8008296:	2800      	cmp	r0, #0
 8008298:	d050      	beq.n	800833c <_dtoa_r+0x244>
 800829a:	9b00      	ldr	r3, [sp, #0]
 800829c:	3b01      	subs	r3, #1
 800829e:	9300      	str	r3, [sp, #0]
 80082a0:	2300      	movs	r3, #0
 80082a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80082a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082a6:	1b5d      	subs	r5, r3, r5
 80082a8:	1e6b      	subs	r3, r5, #1
 80082aa:	9305      	str	r3, [sp, #20]
 80082ac:	bf45      	ittet	mi
 80082ae:	f1c5 0301 	rsbmi	r3, r5, #1
 80082b2:	9304      	strmi	r3, [sp, #16]
 80082b4:	2300      	movpl	r3, #0
 80082b6:	2300      	movmi	r3, #0
 80082b8:	bf4c      	ite	mi
 80082ba:	9305      	strmi	r3, [sp, #20]
 80082bc:	9304      	strpl	r3, [sp, #16]
 80082be:	9b00      	ldr	r3, [sp, #0]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	db3d      	blt.n	8008340 <_dtoa_r+0x248>
 80082c4:	9b05      	ldr	r3, [sp, #20]
 80082c6:	9a00      	ldr	r2, [sp, #0]
 80082c8:	920a      	str	r2, [sp, #40]	; 0x28
 80082ca:	4413      	add	r3, r2
 80082cc:	9305      	str	r3, [sp, #20]
 80082ce:	2300      	movs	r3, #0
 80082d0:	9307      	str	r3, [sp, #28]
 80082d2:	9b06      	ldr	r3, [sp, #24]
 80082d4:	2b09      	cmp	r3, #9
 80082d6:	f200 8089 	bhi.w	80083ec <_dtoa_r+0x2f4>
 80082da:	2b05      	cmp	r3, #5
 80082dc:	bfc4      	itt	gt
 80082de:	3b04      	subgt	r3, #4
 80082e0:	9306      	strgt	r3, [sp, #24]
 80082e2:	9b06      	ldr	r3, [sp, #24]
 80082e4:	f1a3 0302 	sub.w	r3, r3, #2
 80082e8:	bfcc      	ite	gt
 80082ea:	2500      	movgt	r5, #0
 80082ec:	2501      	movle	r5, #1
 80082ee:	2b03      	cmp	r3, #3
 80082f0:	f200 8087 	bhi.w	8008402 <_dtoa_r+0x30a>
 80082f4:	e8df f003 	tbb	[pc, r3]
 80082f8:	59383a2d 	.word	0x59383a2d
 80082fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008300:	441d      	add	r5, r3
 8008302:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008306:	2b20      	cmp	r3, #32
 8008308:	bfc1      	itttt	gt
 800830a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800830e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008312:	fa0b f303 	lslgt.w	r3, fp, r3
 8008316:	fa26 f000 	lsrgt.w	r0, r6, r0
 800831a:	bfda      	itte	le
 800831c:	f1c3 0320 	rsble	r3, r3, #32
 8008320:	fa06 f003 	lslle.w	r0, r6, r3
 8008324:	4318      	orrgt	r0, r3
 8008326:	f7f8 f8fd 	bl	8000524 <__aeabi_ui2d>
 800832a:	2301      	movs	r3, #1
 800832c:	4606      	mov	r6, r0
 800832e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008332:	3d01      	subs	r5, #1
 8008334:	930e      	str	r3, [sp, #56]	; 0x38
 8008336:	e76a      	b.n	800820e <_dtoa_r+0x116>
 8008338:	2301      	movs	r3, #1
 800833a:	e7b2      	b.n	80082a2 <_dtoa_r+0x1aa>
 800833c:	900b      	str	r0, [sp, #44]	; 0x2c
 800833e:	e7b1      	b.n	80082a4 <_dtoa_r+0x1ac>
 8008340:	9b04      	ldr	r3, [sp, #16]
 8008342:	9a00      	ldr	r2, [sp, #0]
 8008344:	1a9b      	subs	r3, r3, r2
 8008346:	9304      	str	r3, [sp, #16]
 8008348:	4253      	negs	r3, r2
 800834a:	9307      	str	r3, [sp, #28]
 800834c:	2300      	movs	r3, #0
 800834e:	930a      	str	r3, [sp, #40]	; 0x28
 8008350:	e7bf      	b.n	80082d2 <_dtoa_r+0x1da>
 8008352:	2300      	movs	r3, #0
 8008354:	9308      	str	r3, [sp, #32]
 8008356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008358:	2b00      	cmp	r3, #0
 800835a:	dc55      	bgt.n	8008408 <_dtoa_r+0x310>
 800835c:	2301      	movs	r3, #1
 800835e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008362:	461a      	mov	r2, r3
 8008364:	9209      	str	r2, [sp, #36]	; 0x24
 8008366:	e00c      	b.n	8008382 <_dtoa_r+0x28a>
 8008368:	2301      	movs	r3, #1
 800836a:	e7f3      	b.n	8008354 <_dtoa_r+0x25c>
 800836c:	2300      	movs	r3, #0
 800836e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008370:	9308      	str	r3, [sp, #32]
 8008372:	9b00      	ldr	r3, [sp, #0]
 8008374:	4413      	add	r3, r2
 8008376:	9302      	str	r3, [sp, #8]
 8008378:	3301      	adds	r3, #1
 800837a:	2b01      	cmp	r3, #1
 800837c:	9303      	str	r3, [sp, #12]
 800837e:	bfb8      	it	lt
 8008380:	2301      	movlt	r3, #1
 8008382:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008384:	2200      	movs	r2, #0
 8008386:	6042      	str	r2, [r0, #4]
 8008388:	2204      	movs	r2, #4
 800838a:	f102 0614 	add.w	r6, r2, #20
 800838e:	429e      	cmp	r6, r3
 8008390:	6841      	ldr	r1, [r0, #4]
 8008392:	d93d      	bls.n	8008410 <_dtoa_r+0x318>
 8008394:	4620      	mov	r0, r4
 8008396:	f001 f839 	bl	800940c <_Balloc>
 800839a:	9001      	str	r0, [sp, #4]
 800839c:	2800      	cmp	r0, #0
 800839e:	d13b      	bne.n	8008418 <_dtoa_r+0x320>
 80083a0:	4b11      	ldr	r3, [pc, #68]	; (80083e8 <_dtoa_r+0x2f0>)
 80083a2:	4602      	mov	r2, r0
 80083a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80083a8:	e6c0      	b.n	800812c <_dtoa_r+0x34>
 80083aa:	2301      	movs	r3, #1
 80083ac:	e7df      	b.n	800836e <_dtoa_r+0x276>
 80083ae:	bf00      	nop
 80083b0:	636f4361 	.word	0x636f4361
 80083b4:	3fd287a7 	.word	0x3fd287a7
 80083b8:	8b60c8b3 	.word	0x8b60c8b3
 80083bc:	3fc68a28 	.word	0x3fc68a28
 80083c0:	509f79fb 	.word	0x509f79fb
 80083c4:	3fd34413 	.word	0x3fd34413
 80083c8:	0800d6be 	.word	0x0800d6be
 80083cc:	0800d6d5 	.word	0x0800d6d5
 80083d0:	7ff00000 	.word	0x7ff00000
 80083d4:	0800d6ba 	.word	0x0800d6ba
 80083d8:	0800d6b1 	.word	0x0800d6b1
 80083dc:	0800d535 	.word	0x0800d535
 80083e0:	3ff80000 	.word	0x3ff80000
 80083e4:	0800d840 	.word	0x0800d840
 80083e8:	0800d730 	.word	0x0800d730
 80083ec:	2501      	movs	r5, #1
 80083ee:	2300      	movs	r3, #0
 80083f0:	9306      	str	r3, [sp, #24]
 80083f2:	9508      	str	r5, [sp, #32]
 80083f4:	f04f 33ff 	mov.w	r3, #4294967295
 80083f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80083fc:	2200      	movs	r2, #0
 80083fe:	2312      	movs	r3, #18
 8008400:	e7b0      	b.n	8008364 <_dtoa_r+0x26c>
 8008402:	2301      	movs	r3, #1
 8008404:	9308      	str	r3, [sp, #32]
 8008406:	e7f5      	b.n	80083f4 <_dtoa_r+0x2fc>
 8008408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800840a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800840e:	e7b8      	b.n	8008382 <_dtoa_r+0x28a>
 8008410:	3101      	adds	r1, #1
 8008412:	6041      	str	r1, [r0, #4]
 8008414:	0052      	lsls	r2, r2, #1
 8008416:	e7b8      	b.n	800838a <_dtoa_r+0x292>
 8008418:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800841a:	9a01      	ldr	r2, [sp, #4]
 800841c:	601a      	str	r2, [r3, #0]
 800841e:	9b03      	ldr	r3, [sp, #12]
 8008420:	2b0e      	cmp	r3, #14
 8008422:	f200 809d 	bhi.w	8008560 <_dtoa_r+0x468>
 8008426:	2d00      	cmp	r5, #0
 8008428:	f000 809a 	beq.w	8008560 <_dtoa_r+0x468>
 800842c:	9b00      	ldr	r3, [sp, #0]
 800842e:	2b00      	cmp	r3, #0
 8008430:	dd32      	ble.n	8008498 <_dtoa_r+0x3a0>
 8008432:	4ab7      	ldr	r2, [pc, #732]	; (8008710 <_dtoa_r+0x618>)
 8008434:	f003 030f 	and.w	r3, r3, #15
 8008438:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800843c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008440:	9b00      	ldr	r3, [sp, #0]
 8008442:	05d8      	lsls	r0, r3, #23
 8008444:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008448:	d516      	bpl.n	8008478 <_dtoa_r+0x380>
 800844a:	4bb2      	ldr	r3, [pc, #712]	; (8008714 <_dtoa_r+0x61c>)
 800844c:	ec51 0b19 	vmov	r0, r1, d9
 8008450:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008454:	f7f8 fa0a 	bl	800086c <__aeabi_ddiv>
 8008458:	f007 070f 	and.w	r7, r7, #15
 800845c:	4682      	mov	sl, r0
 800845e:	468b      	mov	fp, r1
 8008460:	2503      	movs	r5, #3
 8008462:	4eac      	ldr	r6, [pc, #688]	; (8008714 <_dtoa_r+0x61c>)
 8008464:	b957      	cbnz	r7, 800847c <_dtoa_r+0x384>
 8008466:	4642      	mov	r2, r8
 8008468:	464b      	mov	r3, r9
 800846a:	4650      	mov	r0, sl
 800846c:	4659      	mov	r1, fp
 800846e:	f7f8 f9fd 	bl	800086c <__aeabi_ddiv>
 8008472:	4682      	mov	sl, r0
 8008474:	468b      	mov	fp, r1
 8008476:	e028      	b.n	80084ca <_dtoa_r+0x3d2>
 8008478:	2502      	movs	r5, #2
 800847a:	e7f2      	b.n	8008462 <_dtoa_r+0x36a>
 800847c:	07f9      	lsls	r1, r7, #31
 800847e:	d508      	bpl.n	8008492 <_dtoa_r+0x39a>
 8008480:	4640      	mov	r0, r8
 8008482:	4649      	mov	r1, r9
 8008484:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008488:	f7f8 f8c6 	bl	8000618 <__aeabi_dmul>
 800848c:	3501      	adds	r5, #1
 800848e:	4680      	mov	r8, r0
 8008490:	4689      	mov	r9, r1
 8008492:	107f      	asrs	r7, r7, #1
 8008494:	3608      	adds	r6, #8
 8008496:	e7e5      	b.n	8008464 <_dtoa_r+0x36c>
 8008498:	f000 809b 	beq.w	80085d2 <_dtoa_r+0x4da>
 800849c:	9b00      	ldr	r3, [sp, #0]
 800849e:	4f9d      	ldr	r7, [pc, #628]	; (8008714 <_dtoa_r+0x61c>)
 80084a0:	425e      	negs	r6, r3
 80084a2:	4b9b      	ldr	r3, [pc, #620]	; (8008710 <_dtoa_r+0x618>)
 80084a4:	f006 020f 	and.w	r2, r6, #15
 80084a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b0:	ec51 0b19 	vmov	r0, r1, d9
 80084b4:	f7f8 f8b0 	bl	8000618 <__aeabi_dmul>
 80084b8:	1136      	asrs	r6, r6, #4
 80084ba:	4682      	mov	sl, r0
 80084bc:	468b      	mov	fp, r1
 80084be:	2300      	movs	r3, #0
 80084c0:	2502      	movs	r5, #2
 80084c2:	2e00      	cmp	r6, #0
 80084c4:	d17a      	bne.n	80085bc <_dtoa_r+0x4c4>
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1d3      	bne.n	8008472 <_dtoa_r+0x37a>
 80084ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f000 8082 	beq.w	80085d6 <_dtoa_r+0x4de>
 80084d2:	4b91      	ldr	r3, [pc, #580]	; (8008718 <_dtoa_r+0x620>)
 80084d4:	2200      	movs	r2, #0
 80084d6:	4650      	mov	r0, sl
 80084d8:	4659      	mov	r1, fp
 80084da:	f7f8 fb0f 	bl	8000afc <__aeabi_dcmplt>
 80084de:	2800      	cmp	r0, #0
 80084e0:	d079      	beq.n	80085d6 <_dtoa_r+0x4de>
 80084e2:	9b03      	ldr	r3, [sp, #12]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d076      	beq.n	80085d6 <_dtoa_r+0x4de>
 80084e8:	9b02      	ldr	r3, [sp, #8]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	dd36      	ble.n	800855c <_dtoa_r+0x464>
 80084ee:	9b00      	ldr	r3, [sp, #0]
 80084f0:	4650      	mov	r0, sl
 80084f2:	4659      	mov	r1, fp
 80084f4:	1e5f      	subs	r7, r3, #1
 80084f6:	2200      	movs	r2, #0
 80084f8:	4b88      	ldr	r3, [pc, #544]	; (800871c <_dtoa_r+0x624>)
 80084fa:	f7f8 f88d 	bl	8000618 <__aeabi_dmul>
 80084fe:	9e02      	ldr	r6, [sp, #8]
 8008500:	4682      	mov	sl, r0
 8008502:	468b      	mov	fp, r1
 8008504:	3501      	adds	r5, #1
 8008506:	4628      	mov	r0, r5
 8008508:	f7f8 f81c 	bl	8000544 <__aeabi_i2d>
 800850c:	4652      	mov	r2, sl
 800850e:	465b      	mov	r3, fp
 8008510:	f7f8 f882 	bl	8000618 <__aeabi_dmul>
 8008514:	4b82      	ldr	r3, [pc, #520]	; (8008720 <_dtoa_r+0x628>)
 8008516:	2200      	movs	r2, #0
 8008518:	f7f7 fec8 	bl	80002ac <__adddf3>
 800851c:	46d0      	mov	r8, sl
 800851e:	46d9      	mov	r9, fp
 8008520:	4682      	mov	sl, r0
 8008522:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008526:	2e00      	cmp	r6, #0
 8008528:	d158      	bne.n	80085dc <_dtoa_r+0x4e4>
 800852a:	4b7e      	ldr	r3, [pc, #504]	; (8008724 <_dtoa_r+0x62c>)
 800852c:	2200      	movs	r2, #0
 800852e:	4640      	mov	r0, r8
 8008530:	4649      	mov	r1, r9
 8008532:	f7f7 feb9 	bl	80002a8 <__aeabi_dsub>
 8008536:	4652      	mov	r2, sl
 8008538:	465b      	mov	r3, fp
 800853a:	4680      	mov	r8, r0
 800853c:	4689      	mov	r9, r1
 800853e:	f7f8 fafb 	bl	8000b38 <__aeabi_dcmpgt>
 8008542:	2800      	cmp	r0, #0
 8008544:	f040 8295 	bne.w	8008a72 <_dtoa_r+0x97a>
 8008548:	4652      	mov	r2, sl
 800854a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800854e:	4640      	mov	r0, r8
 8008550:	4649      	mov	r1, r9
 8008552:	f7f8 fad3 	bl	8000afc <__aeabi_dcmplt>
 8008556:	2800      	cmp	r0, #0
 8008558:	f040 8289 	bne.w	8008a6e <_dtoa_r+0x976>
 800855c:	ec5b ab19 	vmov	sl, fp, d9
 8008560:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008562:	2b00      	cmp	r3, #0
 8008564:	f2c0 8148 	blt.w	80087f8 <_dtoa_r+0x700>
 8008568:	9a00      	ldr	r2, [sp, #0]
 800856a:	2a0e      	cmp	r2, #14
 800856c:	f300 8144 	bgt.w	80087f8 <_dtoa_r+0x700>
 8008570:	4b67      	ldr	r3, [pc, #412]	; (8008710 <_dtoa_r+0x618>)
 8008572:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008576:	e9d3 8900 	ldrd	r8, r9, [r3]
 800857a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800857c:	2b00      	cmp	r3, #0
 800857e:	f280 80d5 	bge.w	800872c <_dtoa_r+0x634>
 8008582:	9b03      	ldr	r3, [sp, #12]
 8008584:	2b00      	cmp	r3, #0
 8008586:	f300 80d1 	bgt.w	800872c <_dtoa_r+0x634>
 800858a:	f040 826f 	bne.w	8008a6c <_dtoa_r+0x974>
 800858e:	4b65      	ldr	r3, [pc, #404]	; (8008724 <_dtoa_r+0x62c>)
 8008590:	2200      	movs	r2, #0
 8008592:	4640      	mov	r0, r8
 8008594:	4649      	mov	r1, r9
 8008596:	f7f8 f83f 	bl	8000618 <__aeabi_dmul>
 800859a:	4652      	mov	r2, sl
 800859c:	465b      	mov	r3, fp
 800859e:	f7f8 fac1 	bl	8000b24 <__aeabi_dcmpge>
 80085a2:	9e03      	ldr	r6, [sp, #12]
 80085a4:	4637      	mov	r7, r6
 80085a6:	2800      	cmp	r0, #0
 80085a8:	f040 8245 	bne.w	8008a36 <_dtoa_r+0x93e>
 80085ac:	9d01      	ldr	r5, [sp, #4]
 80085ae:	2331      	movs	r3, #49	; 0x31
 80085b0:	f805 3b01 	strb.w	r3, [r5], #1
 80085b4:	9b00      	ldr	r3, [sp, #0]
 80085b6:	3301      	adds	r3, #1
 80085b8:	9300      	str	r3, [sp, #0]
 80085ba:	e240      	b.n	8008a3e <_dtoa_r+0x946>
 80085bc:	07f2      	lsls	r2, r6, #31
 80085be:	d505      	bpl.n	80085cc <_dtoa_r+0x4d4>
 80085c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085c4:	f7f8 f828 	bl	8000618 <__aeabi_dmul>
 80085c8:	3501      	adds	r5, #1
 80085ca:	2301      	movs	r3, #1
 80085cc:	1076      	asrs	r6, r6, #1
 80085ce:	3708      	adds	r7, #8
 80085d0:	e777      	b.n	80084c2 <_dtoa_r+0x3ca>
 80085d2:	2502      	movs	r5, #2
 80085d4:	e779      	b.n	80084ca <_dtoa_r+0x3d2>
 80085d6:	9f00      	ldr	r7, [sp, #0]
 80085d8:	9e03      	ldr	r6, [sp, #12]
 80085da:	e794      	b.n	8008506 <_dtoa_r+0x40e>
 80085dc:	9901      	ldr	r1, [sp, #4]
 80085de:	4b4c      	ldr	r3, [pc, #304]	; (8008710 <_dtoa_r+0x618>)
 80085e0:	4431      	add	r1, r6
 80085e2:	910d      	str	r1, [sp, #52]	; 0x34
 80085e4:	9908      	ldr	r1, [sp, #32]
 80085e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80085ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80085ee:	2900      	cmp	r1, #0
 80085f0:	d043      	beq.n	800867a <_dtoa_r+0x582>
 80085f2:	494d      	ldr	r1, [pc, #308]	; (8008728 <_dtoa_r+0x630>)
 80085f4:	2000      	movs	r0, #0
 80085f6:	f7f8 f939 	bl	800086c <__aeabi_ddiv>
 80085fa:	4652      	mov	r2, sl
 80085fc:	465b      	mov	r3, fp
 80085fe:	f7f7 fe53 	bl	80002a8 <__aeabi_dsub>
 8008602:	9d01      	ldr	r5, [sp, #4]
 8008604:	4682      	mov	sl, r0
 8008606:	468b      	mov	fp, r1
 8008608:	4649      	mov	r1, r9
 800860a:	4640      	mov	r0, r8
 800860c:	f7f8 fab4 	bl	8000b78 <__aeabi_d2iz>
 8008610:	4606      	mov	r6, r0
 8008612:	f7f7 ff97 	bl	8000544 <__aeabi_i2d>
 8008616:	4602      	mov	r2, r0
 8008618:	460b      	mov	r3, r1
 800861a:	4640      	mov	r0, r8
 800861c:	4649      	mov	r1, r9
 800861e:	f7f7 fe43 	bl	80002a8 <__aeabi_dsub>
 8008622:	3630      	adds	r6, #48	; 0x30
 8008624:	f805 6b01 	strb.w	r6, [r5], #1
 8008628:	4652      	mov	r2, sl
 800862a:	465b      	mov	r3, fp
 800862c:	4680      	mov	r8, r0
 800862e:	4689      	mov	r9, r1
 8008630:	f7f8 fa64 	bl	8000afc <__aeabi_dcmplt>
 8008634:	2800      	cmp	r0, #0
 8008636:	d163      	bne.n	8008700 <_dtoa_r+0x608>
 8008638:	4642      	mov	r2, r8
 800863a:	464b      	mov	r3, r9
 800863c:	4936      	ldr	r1, [pc, #216]	; (8008718 <_dtoa_r+0x620>)
 800863e:	2000      	movs	r0, #0
 8008640:	f7f7 fe32 	bl	80002a8 <__aeabi_dsub>
 8008644:	4652      	mov	r2, sl
 8008646:	465b      	mov	r3, fp
 8008648:	f7f8 fa58 	bl	8000afc <__aeabi_dcmplt>
 800864c:	2800      	cmp	r0, #0
 800864e:	f040 80b5 	bne.w	80087bc <_dtoa_r+0x6c4>
 8008652:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008654:	429d      	cmp	r5, r3
 8008656:	d081      	beq.n	800855c <_dtoa_r+0x464>
 8008658:	4b30      	ldr	r3, [pc, #192]	; (800871c <_dtoa_r+0x624>)
 800865a:	2200      	movs	r2, #0
 800865c:	4650      	mov	r0, sl
 800865e:	4659      	mov	r1, fp
 8008660:	f7f7 ffda 	bl	8000618 <__aeabi_dmul>
 8008664:	4b2d      	ldr	r3, [pc, #180]	; (800871c <_dtoa_r+0x624>)
 8008666:	4682      	mov	sl, r0
 8008668:	468b      	mov	fp, r1
 800866a:	4640      	mov	r0, r8
 800866c:	4649      	mov	r1, r9
 800866e:	2200      	movs	r2, #0
 8008670:	f7f7 ffd2 	bl	8000618 <__aeabi_dmul>
 8008674:	4680      	mov	r8, r0
 8008676:	4689      	mov	r9, r1
 8008678:	e7c6      	b.n	8008608 <_dtoa_r+0x510>
 800867a:	4650      	mov	r0, sl
 800867c:	4659      	mov	r1, fp
 800867e:	f7f7 ffcb 	bl	8000618 <__aeabi_dmul>
 8008682:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008684:	9d01      	ldr	r5, [sp, #4]
 8008686:	930f      	str	r3, [sp, #60]	; 0x3c
 8008688:	4682      	mov	sl, r0
 800868a:	468b      	mov	fp, r1
 800868c:	4649      	mov	r1, r9
 800868e:	4640      	mov	r0, r8
 8008690:	f7f8 fa72 	bl	8000b78 <__aeabi_d2iz>
 8008694:	4606      	mov	r6, r0
 8008696:	f7f7 ff55 	bl	8000544 <__aeabi_i2d>
 800869a:	3630      	adds	r6, #48	; 0x30
 800869c:	4602      	mov	r2, r0
 800869e:	460b      	mov	r3, r1
 80086a0:	4640      	mov	r0, r8
 80086a2:	4649      	mov	r1, r9
 80086a4:	f7f7 fe00 	bl	80002a8 <__aeabi_dsub>
 80086a8:	f805 6b01 	strb.w	r6, [r5], #1
 80086ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086ae:	429d      	cmp	r5, r3
 80086b0:	4680      	mov	r8, r0
 80086b2:	4689      	mov	r9, r1
 80086b4:	f04f 0200 	mov.w	r2, #0
 80086b8:	d124      	bne.n	8008704 <_dtoa_r+0x60c>
 80086ba:	4b1b      	ldr	r3, [pc, #108]	; (8008728 <_dtoa_r+0x630>)
 80086bc:	4650      	mov	r0, sl
 80086be:	4659      	mov	r1, fp
 80086c0:	f7f7 fdf4 	bl	80002ac <__adddf3>
 80086c4:	4602      	mov	r2, r0
 80086c6:	460b      	mov	r3, r1
 80086c8:	4640      	mov	r0, r8
 80086ca:	4649      	mov	r1, r9
 80086cc:	f7f8 fa34 	bl	8000b38 <__aeabi_dcmpgt>
 80086d0:	2800      	cmp	r0, #0
 80086d2:	d173      	bne.n	80087bc <_dtoa_r+0x6c4>
 80086d4:	4652      	mov	r2, sl
 80086d6:	465b      	mov	r3, fp
 80086d8:	4913      	ldr	r1, [pc, #76]	; (8008728 <_dtoa_r+0x630>)
 80086da:	2000      	movs	r0, #0
 80086dc:	f7f7 fde4 	bl	80002a8 <__aeabi_dsub>
 80086e0:	4602      	mov	r2, r0
 80086e2:	460b      	mov	r3, r1
 80086e4:	4640      	mov	r0, r8
 80086e6:	4649      	mov	r1, r9
 80086e8:	f7f8 fa08 	bl	8000afc <__aeabi_dcmplt>
 80086ec:	2800      	cmp	r0, #0
 80086ee:	f43f af35 	beq.w	800855c <_dtoa_r+0x464>
 80086f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80086f4:	1e6b      	subs	r3, r5, #1
 80086f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80086f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80086fc:	2b30      	cmp	r3, #48	; 0x30
 80086fe:	d0f8      	beq.n	80086f2 <_dtoa_r+0x5fa>
 8008700:	9700      	str	r7, [sp, #0]
 8008702:	e049      	b.n	8008798 <_dtoa_r+0x6a0>
 8008704:	4b05      	ldr	r3, [pc, #20]	; (800871c <_dtoa_r+0x624>)
 8008706:	f7f7 ff87 	bl	8000618 <__aeabi_dmul>
 800870a:	4680      	mov	r8, r0
 800870c:	4689      	mov	r9, r1
 800870e:	e7bd      	b.n	800868c <_dtoa_r+0x594>
 8008710:	0800d840 	.word	0x0800d840
 8008714:	0800d818 	.word	0x0800d818
 8008718:	3ff00000 	.word	0x3ff00000
 800871c:	40240000 	.word	0x40240000
 8008720:	401c0000 	.word	0x401c0000
 8008724:	40140000 	.word	0x40140000
 8008728:	3fe00000 	.word	0x3fe00000
 800872c:	9d01      	ldr	r5, [sp, #4]
 800872e:	4656      	mov	r6, sl
 8008730:	465f      	mov	r7, fp
 8008732:	4642      	mov	r2, r8
 8008734:	464b      	mov	r3, r9
 8008736:	4630      	mov	r0, r6
 8008738:	4639      	mov	r1, r7
 800873a:	f7f8 f897 	bl	800086c <__aeabi_ddiv>
 800873e:	f7f8 fa1b 	bl	8000b78 <__aeabi_d2iz>
 8008742:	4682      	mov	sl, r0
 8008744:	f7f7 fefe 	bl	8000544 <__aeabi_i2d>
 8008748:	4642      	mov	r2, r8
 800874a:	464b      	mov	r3, r9
 800874c:	f7f7 ff64 	bl	8000618 <__aeabi_dmul>
 8008750:	4602      	mov	r2, r0
 8008752:	460b      	mov	r3, r1
 8008754:	4630      	mov	r0, r6
 8008756:	4639      	mov	r1, r7
 8008758:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800875c:	f7f7 fda4 	bl	80002a8 <__aeabi_dsub>
 8008760:	f805 6b01 	strb.w	r6, [r5], #1
 8008764:	9e01      	ldr	r6, [sp, #4]
 8008766:	9f03      	ldr	r7, [sp, #12]
 8008768:	1bae      	subs	r6, r5, r6
 800876a:	42b7      	cmp	r7, r6
 800876c:	4602      	mov	r2, r0
 800876e:	460b      	mov	r3, r1
 8008770:	d135      	bne.n	80087de <_dtoa_r+0x6e6>
 8008772:	f7f7 fd9b 	bl	80002ac <__adddf3>
 8008776:	4642      	mov	r2, r8
 8008778:	464b      	mov	r3, r9
 800877a:	4606      	mov	r6, r0
 800877c:	460f      	mov	r7, r1
 800877e:	f7f8 f9db 	bl	8000b38 <__aeabi_dcmpgt>
 8008782:	b9d0      	cbnz	r0, 80087ba <_dtoa_r+0x6c2>
 8008784:	4642      	mov	r2, r8
 8008786:	464b      	mov	r3, r9
 8008788:	4630      	mov	r0, r6
 800878a:	4639      	mov	r1, r7
 800878c:	f7f8 f9ac 	bl	8000ae8 <__aeabi_dcmpeq>
 8008790:	b110      	cbz	r0, 8008798 <_dtoa_r+0x6a0>
 8008792:	f01a 0f01 	tst.w	sl, #1
 8008796:	d110      	bne.n	80087ba <_dtoa_r+0x6c2>
 8008798:	4620      	mov	r0, r4
 800879a:	ee18 1a10 	vmov	r1, s16
 800879e:	f000 fe75 	bl	800948c <_Bfree>
 80087a2:	2300      	movs	r3, #0
 80087a4:	9800      	ldr	r0, [sp, #0]
 80087a6:	702b      	strb	r3, [r5, #0]
 80087a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087aa:	3001      	adds	r0, #1
 80087ac:	6018      	str	r0, [r3, #0]
 80087ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	f43f acf1 	beq.w	8008198 <_dtoa_r+0xa0>
 80087b6:	601d      	str	r5, [r3, #0]
 80087b8:	e4ee      	b.n	8008198 <_dtoa_r+0xa0>
 80087ba:	9f00      	ldr	r7, [sp, #0]
 80087bc:	462b      	mov	r3, r5
 80087be:	461d      	mov	r5, r3
 80087c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087c4:	2a39      	cmp	r2, #57	; 0x39
 80087c6:	d106      	bne.n	80087d6 <_dtoa_r+0x6de>
 80087c8:	9a01      	ldr	r2, [sp, #4]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d1f7      	bne.n	80087be <_dtoa_r+0x6c6>
 80087ce:	9901      	ldr	r1, [sp, #4]
 80087d0:	2230      	movs	r2, #48	; 0x30
 80087d2:	3701      	adds	r7, #1
 80087d4:	700a      	strb	r2, [r1, #0]
 80087d6:	781a      	ldrb	r2, [r3, #0]
 80087d8:	3201      	adds	r2, #1
 80087da:	701a      	strb	r2, [r3, #0]
 80087dc:	e790      	b.n	8008700 <_dtoa_r+0x608>
 80087de:	4ba6      	ldr	r3, [pc, #664]	; (8008a78 <_dtoa_r+0x980>)
 80087e0:	2200      	movs	r2, #0
 80087e2:	f7f7 ff19 	bl	8000618 <__aeabi_dmul>
 80087e6:	2200      	movs	r2, #0
 80087e8:	2300      	movs	r3, #0
 80087ea:	4606      	mov	r6, r0
 80087ec:	460f      	mov	r7, r1
 80087ee:	f7f8 f97b 	bl	8000ae8 <__aeabi_dcmpeq>
 80087f2:	2800      	cmp	r0, #0
 80087f4:	d09d      	beq.n	8008732 <_dtoa_r+0x63a>
 80087f6:	e7cf      	b.n	8008798 <_dtoa_r+0x6a0>
 80087f8:	9a08      	ldr	r2, [sp, #32]
 80087fa:	2a00      	cmp	r2, #0
 80087fc:	f000 80d7 	beq.w	80089ae <_dtoa_r+0x8b6>
 8008800:	9a06      	ldr	r2, [sp, #24]
 8008802:	2a01      	cmp	r2, #1
 8008804:	f300 80ba 	bgt.w	800897c <_dtoa_r+0x884>
 8008808:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800880a:	2a00      	cmp	r2, #0
 800880c:	f000 80b2 	beq.w	8008974 <_dtoa_r+0x87c>
 8008810:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008814:	9e07      	ldr	r6, [sp, #28]
 8008816:	9d04      	ldr	r5, [sp, #16]
 8008818:	9a04      	ldr	r2, [sp, #16]
 800881a:	441a      	add	r2, r3
 800881c:	9204      	str	r2, [sp, #16]
 800881e:	9a05      	ldr	r2, [sp, #20]
 8008820:	2101      	movs	r1, #1
 8008822:	441a      	add	r2, r3
 8008824:	4620      	mov	r0, r4
 8008826:	9205      	str	r2, [sp, #20]
 8008828:	f000 ff32 	bl	8009690 <__i2b>
 800882c:	4607      	mov	r7, r0
 800882e:	2d00      	cmp	r5, #0
 8008830:	dd0c      	ble.n	800884c <_dtoa_r+0x754>
 8008832:	9b05      	ldr	r3, [sp, #20]
 8008834:	2b00      	cmp	r3, #0
 8008836:	dd09      	ble.n	800884c <_dtoa_r+0x754>
 8008838:	42ab      	cmp	r3, r5
 800883a:	9a04      	ldr	r2, [sp, #16]
 800883c:	bfa8      	it	ge
 800883e:	462b      	movge	r3, r5
 8008840:	1ad2      	subs	r2, r2, r3
 8008842:	9204      	str	r2, [sp, #16]
 8008844:	9a05      	ldr	r2, [sp, #20]
 8008846:	1aed      	subs	r5, r5, r3
 8008848:	1ad3      	subs	r3, r2, r3
 800884a:	9305      	str	r3, [sp, #20]
 800884c:	9b07      	ldr	r3, [sp, #28]
 800884e:	b31b      	cbz	r3, 8008898 <_dtoa_r+0x7a0>
 8008850:	9b08      	ldr	r3, [sp, #32]
 8008852:	2b00      	cmp	r3, #0
 8008854:	f000 80af 	beq.w	80089b6 <_dtoa_r+0x8be>
 8008858:	2e00      	cmp	r6, #0
 800885a:	dd13      	ble.n	8008884 <_dtoa_r+0x78c>
 800885c:	4639      	mov	r1, r7
 800885e:	4632      	mov	r2, r6
 8008860:	4620      	mov	r0, r4
 8008862:	f000 ffd5 	bl	8009810 <__pow5mult>
 8008866:	ee18 2a10 	vmov	r2, s16
 800886a:	4601      	mov	r1, r0
 800886c:	4607      	mov	r7, r0
 800886e:	4620      	mov	r0, r4
 8008870:	f000 ff24 	bl	80096bc <__multiply>
 8008874:	ee18 1a10 	vmov	r1, s16
 8008878:	4680      	mov	r8, r0
 800887a:	4620      	mov	r0, r4
 800887c:	f000 fe06 	bl	800948c <_Bfree>
 8008880:	ee08 8a10 	vmov	s16, r8
 8008884:	9b07      	ldr	r3, [sp, #28]
 8008886:	1b9a      	subs	r2, r3, r6
 8008888:	d006      	beq.n	8008898 <_dtoa_r+0x7a0>
 800888a:	ee18 1a10 	vmov	r1, s16
 800888e:	4620      	mov	r0, r4
 8008890:	f000 ffbe 	bl	8009810 <__pow5mult>
 8008894:	ee08 0a10 	vmov	s16, r0
 8008898:	2101      	movs	r1, #1
 800889a:	4620      	mov	r0, r4
 800889c:	f000 fef8 	bl	8009690 <__i2b>
 80088a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	4606      	mov	r6, r0
 80088a6:	f340 8088 	ble.w	80089ba <_dtoa_r+0x8c2>
 80088aa:	461a      	mov	r2, r3
 80088ac:	4601      	mov	r1, r0
 80088ae:	4620      	mov	r0, r4
 80088b0:	f000 ffae 	bl	8009810 <__pow5mult>
 80088b4:	9b06      	ldr	r3, [sp, #24]
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	4606      	mov	r6, r0
 80088ba:	f340 8081 	ble.w	80089c0 <_dtoa_r+0x8c8>
 80088be:	f04f 0800 	mov.w	r8, #0
 80088c2:	6933      	ldr	r3, [r6, #16]
 80088c4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80088c8:	6918      	ldr	r0, [r3, #16]
 80088ca:	f000 fe91 	bl	80095f0 <__hi0bits>
 80088ce:	f1c0 0020 	rsb	r0, r0, #32
 80088d2:	9b05      	ldr	r3, [sp, #20]
 80088d4:	4418      	add	r0, r3
 80088d6:	f010 001f 	ands.w	r0, r0, #31
 80088da:	f000 8092 	beq.w	8008a02 <_dtoa_r+0x90a>
 80088de:	f1c0 0320 	rsb	r3, r0, #32
 80088e2:	2b04      	cmp	r3, #4
 80088e4:	f340 808a 	ble.w	80089fc <_dtoa_r+0x904>
 80088e8:	f1c0 001c 	rsb	r0, r0, #28
 80088ec:	9b04      	ldr	r3, [sp, #16]
 80088ee:	4403      	add	r3, r0
 80088f0:	9304      	str	r3, [sp, #16]
 80088f2:	9b05      	ldr	r3, [sp, #20]
 80088f4:	4403      	add	r3, r0
 80088f6:	4405      	add	r5, r0
 80088f8:	9305      	str	r3, [sp, #20]
 80088fa:	9b04      	ldr	r3, [sp, #16]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	dd07      	ble.n	8008910 <_dtoa_r+0x818>
 8008900:	ee18 1a10 	vmov	r1, s16
 8008904:	461a      	mov	r2, r3
 8008906:	4620      	mov	r0, r4
 8008908:	f000 ffdc 	bl	80098c4 <__lshift>
 800890c:	ee08 0a10 	vmov	s16, r0
 8008910:	9b05      	ldr	r3, [sp, #20]
 8008912:	2b00      	cmp	r3, #0
 8008914:	dd05      	ble.n	8008922 <_dtoa_r+0x82a>
 8008916:	4631      	mov	r1, r6
 8008918:	461a      	mov	r2, r3
 800891a:	4620      	mov	r0, r4
 800891c:	f000 ffd2 	bl	80098c4 <__lshift>
 8008920:	4606      	mov	r6, r0
 8008922:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008924:	2b00      	cmp	r3, #0
 8008926:	d06e      	beq.n	8008a06 <_dtoa_r+0x90e>
 8008928:	ee18 0a10 	vmov	r0, s16
 800892c:	4631      	mov	r1, r6
 800892e:	f001 f839 	bl	80099a4 <__mcmp>
 8008932:	2800      	cmp	r0, #0
 8008934:	da67      	bge.n	8008a06 <_dtoa_r+0x90e>
 8008936:	9b00      	ldr	r3, [sp, #0]
 8008938:	3b01      	subs	r3, #1
 800893a:	ee18 1a10 	vmov	r1, s16
 800893e:	9300      	str	r3, [sp, #0]
 8008940:	220a      	movs	r2, #10
 8008942:	2300      	movs	r3, #0
 8008944:	4620      	mov	r0, r4
 8008946:	f000 fdc3 	bl	80094d0 <__multadd>
 800894a:	9b08      	ldr	r3, [sp, #32]
 800894c:	ee08 0a10 	vmov	s16, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	f000 81b1 	beq.w	8008cb8 <_dtoa_r+0xbc0>
 8008956:	2300      	movs	r3, #0
 8008958:	4639      	mov	r1, r7
 800895a:	220a      	movs	r2, #10
 800895c:	4620      	mov	r0, r4
 800895e:	f000 fdb7 	bl	80094d0 <__multadd>
 8008962:	9b02      	ldr	r3, [sp, #8]
 8008964:	2b00      	cmp	r3, #0
 8008966:	4607      	mov	r7, r0
 8008968:	f300 808e 	bgt.w	8008a88 <_dtoa_r+0x990>
 800896c:	9b06      	ldr	r3, [sp, #24]
 800896e:	2b02      	cmp	r3, #2
 8008970:	dc51      	bgt.n	8008a16 <_dtoa_r+0x91e>
 8008972:	e089      	b.n	8008a88 <_dtoa_r+0x990>
 8008974:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008976:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800897a:	e74b      	b.n	8008814 <_dtoa_r+0x71c>
 800897c:	9b03      	ldr	r3, [sp, #12]
 800897e:	1e5e      	subs	r6, r3, #1
 8008980:	9b07      	ldr	r3, [sp, #28]
 8008982:	42b3      	cmp	r3, r6
 8008984:	bfbf      	itttt	lt
 8008986:	9b07      	ldrlt	r3, [sp, #28]
 8008988:	9607      	strlt	r6, [sp, #28]
 800898a:	1af2      	sublt	r2, r6, r3
 800898c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800898e:	bfb6      	itet	lt
 8008990:	189b      	addlt	r3, r3, r2
 8008992:	1b9e      	subge	r6, r3, r6
 8008994:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008996:	9b03      	ldr	r3, [sp, #12]
 8008998:	bfb8      	it	lt
 800899a:	2600      	movlt	r6, #0
 800899c:	2b00      	cmp	r3, #0
 800899e:	bfb7      	itett	lt
 80089a0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80089a4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80089a8:	1a9d      	sublt	r5, r3, r2
 80089aa:	2300      	movlt	r3, #0
 80089ac:	e734      	b.n	8008818 <_dtoa_r+0x720>
 80089ae:	9e07      	ldr	r6, [sp, #28]
 80089b0:	9d04      	ldr	r5, [sp, #16]
 80089b2:	9f08      	ldr	r7, [sp, #32]
 80089b4:	e73b      	b.n	800882e <_dtoa_r+0x736>
 80089b6:	9a07      	ldr	r2, [sp, #28]
 80089b8:	e767      	b.n	800888a <_dtoa_r+0x792>
 80089ba:	9b06      	ldr	r3, [sp, #24]
 80089bc:	2b01      	cmp	r3, #1
 80089be:	dc18      	bgt.n	80089f2 <_dtoa_r+0x8fa>
 80089c0:	f1ba 0f00 	cmp.w	sl, #0
 80089c4:	d115      	bne.n	80089f2 <_dtoa_r+0x8fa>
 80089c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80089ca:	b993      	cbnz	r3, 80089f2 <_dtoa_r+0x8fa>
 80089cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80089d0:	0d1b      	lsrs	r3, r3, #20
 80089d2:	051b      	lsls	r3, r3, #20
 80089d4:	b183      	cbz	r3, 80089f8 <_dtoa_r+0x900>
 80089d6:	9b04      	ldr	r3, [sp, #16]
 80089d8:	3301      	adds	r3, #1
 80089da:	9304      	str	r3, [sp, #16]
 80089dc:	9b05      	ldr	r3, [sp, #20]
 80089de:	3301      	adds	r3, #1
 80089e0:	9305      	str	r3, [sp, #20]
 80089e2:	f04f 0801 	mov.w	r8, #1
 80089e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f47f af6a 	bne.w	80088c2 <_dtoa_r+0x7ca>
 80089ee:	2001      	movs	r0, #1
 80089f0:	e76f      	b.n	80088d2 <_dtoa_r+0x7da>
 80089f2:	f04f 0800 	mov.w	r8, #0
 80089f6:	e7f6      	b.n	80089e6 <_dtoa_r+0x8ee>
 80089f8:	4698      	mov	r8, r3
 80089fa:	e7f4      	b.n	80089e6 <_dtoa_r+0x8ee>
 80089fc:	f43f af7d 	beq.w	80088fa <_dtoa_r+0x802>
 8008a00:	4618      	mov	r0, r3
 8008a02:	301c      	adds	r0, #28
 8008a04:	e772      	b.n	80088ec <_dtoa_r+0x7f4>
 8008a06:	9b03      	ldr	r3, [sp, #12]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	dc37      	bgt.n	8008a7c <_dtoa_r+0x984>
 8008a0c:	9b06      	ldr	r3, [sp, #24]
 8008a0e:	2b02      	cmp	r3, #2
 8008a10:	dd34      	ble.n	8008a7c <_dtoa_r+0x984>
 8008a12:	9b03      	ldr	r3, [sp, #12]
 8008a14:	9302      	str	r3, [sp, #8]
 8008a16:	9b02      	ldr	r3, [sp, #8]
 8008a18:	b96b      	cbnz	r3, 8008a36 <_dtoa_r+0x93e>
 8008a1a:	4631      	mov	r1, r6
 8008a1c:	2205      	movs	r2, #5
 8008a1e:	4620      	mov	r0, r4
 8008a20:	f000 fd56 	bl	80094d0 <__multadd>
 8008a24:	4601      	mov	r1, r0
 8008a26:	4606      	mov	r6, r0
 8008a28:	ee18 0a10 	vmov	r0, s16
 8008a2c:	f000 ffba 	bl	80099a4 <__mcmp>
 8008a30:	2800      	cmp	r0, #0
 8008a32:	f73f adbb 	bgt.w	80085ac <_dtoa_r+0x4b4>
 8008a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a38:	9d01      	ldr	r5, [sp, #4]
 8008a3a:	43db      	mvns	r3, r3
 8008a3c:	9300      	str	r3, [sp, #0]
 8008a3e:	f04f 0800 	mov.w	r8, #0
 8008a42:	4631      	mov	r1, r6
 8008a44:	4620      	mov	r0, r4
 8008a46:	f000 fd21 	bl	800948c <_Bfree>
 8008a4a:	2f00      	cmp	r7, #0
 8008a4c:	f43f aea4 	beq.w	8008798 <_dtoa_r+0x6a0>
 8008a50:	f1b8 0f00 	cmp.w	r8, #0
 8008a54:	d005      	beq.n	8008a62 <_dtoa_r+0x96a>
 8008a56:	45b8      	cmp	r8, r7
 8008a58:	d003      	beq.n	8008a62 <_dtoa_r+0x96a>
 8008a5a:	4641      	mov	r1, r8
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	f000 fd15 	bl	800948c <_Bfree>
 8008a62:	4639      	mov	r1, r7
 8008a64:	4620      	mov	r0, r4
 8008a66:	f000 fd11 	bl	800948c <_Bfree>
 8008a6a:	e695      	b.n	8008798 <_dtoa_r+0x6a0>
 8008a6c:	2600      	movs	r6, #0
 8008a6e:	4637      	mov	r7, r6
 8008a70:	e7e1      	b.n	8008a36 <_dtoa_r+0x93e>
 8008a72:	9700      	str	r7, [sp, #0]
 8008a74:	4637      	mov	r7, r6
 8008a76:	e599      	b.n	80085ac <_dtoa_r+0x4b4>
 8008a78:	40240000 	.word	0x40240000
 8008a7c:	9b08      	ldr	r3, [sp, #32]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	f000 80ca 	beq.w	8008c18 <_dtoa_r+0xb20>
 8008a84:	9b03      	ldr	r3, [sp, #12]
 8008a86:	9302      	str	r3, [sp, #8]
 8008a88:	2d00      	cmp	r5, #0
 8008a8a:	dd05      	ble.n	8008a98 <_dtoa_r+0x9a0>
 8008a8c:	4639      	mov	r1, r7
 8008a8e:	462a      	mov	r2, r5
 8008a90:	4620      	mov	r0, r4
 8008a92:	f000 ff17 	bl	80098c4 <__lshift>
 8008a96:	4607      	mov	r7, r0
 8008a98:	f1b8 0f00 	cmp.w	r8, #0
 8008a9c:	d05b      	beq.n	8008b56 <_dtoa_r+0xa5e>
 8008a9e:	6879      	ldr	r1, [r7, #4]
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	f000 fcb3 	bl	800940c <_Balloc>
 8008aa6:	4605      	mov	r5, r0
 8008aa8:	b928      	cbnz	r0, 8008ab6 <_dtoa_r+0x9be>
 8008aaa:	4b87      	ldr	r3, [pc, #540]	; (8008cc8 <_dtoa_r+0xbd0>)
 8008aac:	4602      	mov	r2, r0
 8008aae:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008ab2:	f7ff bb3b 	b.w	800812c <_dtoa_r+0x34>
 8008ab6:	693a      	ldr	r2, [r7, #16]
 8008ab8:	3202      	adds	r2, #2
 8008aba:	0092      	lsls	r2, r2, #2
 8008abc:	f107 010c 	add.w	r1, r7, #12
 8008ac0:	300c      	adds	r0, #12
 8008ac2:	f000 fc95 	bl	80093f0 <memcpy>
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	4629      	mov	r1, r5
 8008aca:	4620      	mov	r0, r4
 8008acc:	f000 fefa 	bl	80098c4 <__lshift>
 8008ad0:	9b01      	ldr	r3, [sp, #4]
 8008ad2:	f103 0901 	add.w	r9, r3, #1
 8008ad6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008ada:	4413      	add	r3, r2
 8008adc:	9305      	str	r3, [sp, #20]
 8008ade:	f00a 0301 	and.w	r3, sl, #1
 8008ae2:	46b8      	mov	r8, r7
 8008ae4:	9304      	str	r3, [sp, #16]
 8008ae6:	4607      	mov	r7, r0
 8008ae8:	4631      	mov	r1, r6
 8008aea:	ee18 0a10 	vmov	r0, s16
 8008aee:	f7ff fa77 	bl	8007fe0 <quorem>
 8008af2:	4641      	mov	r1, r8
 8008af4:	9002      	str	r0, [sp, #8]
 8008af6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008afa:	ee18 0a10 	vmov	r0, s16
 8008afe:	f000 ff51 	bl	80099a4 <__mcmp>
 8008b02:	463a      	mov	r2, r7
 8008b04:	9003      	str	r0, [sp, #12]
 8008b06:	4631      	mov	r1, r6
 8008b08:	4620      	mov	r0, r4
 8008b0a:	f000 ff67 	bl	80099dc <__mdiff>
 8008b0e:	68c2      	ldr	r2, [r0, #12]
 8008b10:	f109 3bff 	add.w	fp, r9, #4294967295
 8008b14:	4605      	mov	r5, r0
 8008b16:	bb02      	cbnz	r2, 8008b5a <_dtoa_r+0xa62>
 8008b18:	4601      	mov	r1, r0
 8008b1a:	ee18 0a10 	vmov	r0, s16
 8008b1e:	f000 ff41 	bl	80099a4 <__mcmp>
 8008b22:	4602      	mov	r2, r0
 8008b24:	4629      	mov	r1, r5
 8008b26:	4620      	mov	r0, r4
 8008b28:	9207      	str	r2, [sp, #28]
 8008b2a:	f000 fcaf 	bl	800948c <_Bfree>
 8008b2e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008b32:	ea43 0102 	orr.w	r1, r3, r2
 8008b36:	9b04      	ldr	r3, [sp, #16]
 8008b38:	430b      	orrs	r3, r1
 8008b3a:	464d      	mov	r5, r9
 8008b3c:	d10f      	bne.n	8008b5e <_dtoa_r+0xa66>
 8008b3e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008b42:	d02a      	beq.n	8008b9a <_dtoa_r+0xaa2>
 8008b44:	9b03      	ldr	r3, [sp, #12]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	dd02      	ble.n	8008b50 <_dtoa_r+0xa58>
 8008b4a:	9b02      	ldr	r3, [sp, #8]
 8008b4c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008b50:	f88b a000 	strb.w	sl, [fp]
 8008b54:	e775      	b.n	8008a42 <_dtoa_r+0x94a>
 8008b56:	4638      	mov	r0, r7
 8008b58:	e7ba      	b.n	8008ad0 <_dtoa_r+0x9d8>
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	e7e2      	b.n	8008b24 <_dtoa_r+0xa2c>
 8008b5e:	9b03      	ldr	r3, [sp, #12]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	db04      	blt.n	8008b6e <_dtoa_r+0xa76>
 8008b64:	9906      	ldr	r1, [sp, #24]
 8008b66:	430b      	orrs	r3, r1
 8008b68:	9904      	ldr	r1, [sp, #16]
 8008b6a:	430b      	orrs	r3, r1
 8008b6c:	d122      	bne.n	8008bb4 <_dtoa_r+0xabc>
 8008b6e:	2a00      	cmp	r2, #0
 8008b70:	ddee      	ble.n	8008b50 <_dtoa_r+0xa58>
 8008b72:	ee18 1a10 	vmov	r1, s16
 8008b76:	2201      	movs	r2, #1
 8008b78:	4620      	mov	r0, r4
 8008b7a:	f000 fea3 	bl	80098c4 <__lshift>
 8008b7e:	4631      	mov	r1, r6
 8008b80:	ee08 0a10 	vmov	s16, r0
 8008b84:	f000 ff0e 	bl	80099a4 <__mcmp>
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	dc03      	bgt.n	8008b94 <_dtoa_r+0xa9c>
 8008b8c:	d1e0      	bne.n	8008b50 <_dtoa_r+0xa58>
 8008b8e:	f01a 0f01 	tst.w	sl, #1
 8008b92:	d0dd      	beq.n	8008b50 <_dtoa_r+0xa58>
 8008b94:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008b98:	d1d7      	bne.n	8008b4a <_dtoa_r+0xa52>
 8008b9a:	2339      	movs	r3, #57	; 0x39
 8008b9c:	f88b 3000 	strb.w	r3, [fp]
 8008ba0:	462b      	mov	r3, r5
 8008ba2:	461d      	mov	r5, r3
 8008ba4:	3b01      	subs	r3, #1
 8008ba6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008baa:	2a39      	cmp	r2, #57	; 0x39
 8008bac:	d071      	beq.n	8008c92 <_dtoa_r+0xb9a>
 8008bae:	3201      	adds	r2, #1
 8008bb0:	701a      	strb	r2, [r3, #0]
 8008bb2:	e746      	b.n	8008a42 <_dtoa_r+0x94a>
 8008bb4:	2a00      	cmp	r2, #0
 8008bb6:	dd07      	ble.n	8008bc8 <_dtoa_r+0xad0>
 8008bb8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008bbc:	d0ed      	beq.n	8008b9a <_dtoa_r+0xaa2>
 8008bbe:	f10a 0301 	add.w	r3, sl, #1
 8008bc2:	f88b 3000 	strb.w	r3, [fp]
 8008bc6:	e73c      	b.n	8008a42 <_dtoa_r+0x94a>
 8008bc8:	9b05      	ldr	r3, [sp, #20]
 8008bca:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008bce:	4599      	cmp	r9, r3
 8008bd0:	d047      	beq.n	8008c62 <_dtoa_r+0xb6a>
 8008bd2:	ee18 1a10 	vmov	r1, s16
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	220a      	movs	r2, #10
 8008bda:	4620      	mov	r0, r4
 8008bdc:	f000 fc78 	bl	80094d0 <__multadd>
 8008be0:	45b8      	cmp	r8, r7
 8008be2:	ee08 0a10 	vmov	s16, r0
 8008be6:	f04f 0300 	mov.w	r3, #0
 8008bea:	f04f 020a 	mov.w	r2, #10
 8008bee:	4641      	mov	r1, r8
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	d106      	bne.n	8008c02 <_dtoa_r+0xb0a>
 8008bf4:	f000 fc6c 	bl	80094d0 <__multadd>
 8008bf8:	4680      	mov	r8, r0
 8008bfa:	4607      	mov	r7, r0
 8008bfc:	f109 0901 	add.w	r9, r9, #1
 8008c00:	e772      	b.n	8008ae8 <_dtoa_r+0x9f0>
 8008c02:	f000 fc65 	bl	80094d0 <__multadd>
 8008c06:	4639      	mov	r1, r7
 8008c08:	4680      	mov	r8, r0
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	220a      	movs	r2, #10
 8008c0e:	4620      	mov	r0, r4
 8008c10:	f000 fc5e 	bl	80094d0 <__multadd>
 8008c14:	4607      	mov	r7, r0
 8008c16:	e7f1      	b.n	8008bfc <_dtoa_r+0xb04>
 8008c18:	9b03      	ldr	r3, [sp, #12]
 8008c1a:	9302      	str	r3, [sp, #8]
 8008c1c:	9d01      	ldr	r5, [sp, #4]
 8008c1e:	ee18 0a10 	vmov	r0, s16
 8008c22:	4631      	mov	r1, r6
 8008c24:	f7ff f9dc 	bl	8007fe0 <quorem>
 8008c28:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008c2c:	9b01      	ldr	r3, [sp, #4]
 8008c2e:	f805 ab01 	strb.w	sl, [r5], #1
 8008c32:	1aea      	subs	r2, r5, r3
 8008c34:	9b02      	ldr	r3, [sp, #8]
 8008c36:	4293      	cmp	r3, r2
 8008c38:	dd09      	ble.n	8008c4e <_dtoa_r+0xb56>
 8008c3a:	ee18 1a10 	vmov	r1, s16
 8008c3e:	2300      	movs	r3, #0
 8008c40:	220a      	movs	r2, #10
 8008c42:	4620      	mov	r0, r4
 8008c44:	f000 fc44 	bl	80094d0 <__multadd>
 8008c48:	ee08 0a10 	vmov	s16, r0
 8008c4c:	e7e7      	b.n	8008c1e <_dtoa_r+0xb26>
 8008c4e:	9b02      	ldr	r3, [sp, #8]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	bfc8      	it	gt
 8008c54:	461d      	movgt	r5, r3
 8008c56:	9b01      	ldr	r3, [sp, #4]
 8008c58:	bfd8      	it	le
 8008c5a:	2501      	movle	r5, #1
 8008c5c:	441d      	add	r5, r3
 8008c5e:	f04f 0800 	mov.w	r8, #0
 8008c62:	ee18 1a10 	vmov	r1, s16
 8008c66:	2201      	movs	r2, #1
 8008c68:	4620      	mov	r0, r4
 8008c6a:	f000 fe2b 	bl	80098c4 <__lshift>
 8008c6e:	4631      	mov	r1, r6
 8008c70:	ee08 0a10 	vmov	s16, r0
 8008c74:	f000 fe96 	bl	80099a4 <__mcmp>
 8008c78:	2800      	cmp	r0, #0
 8008c7a:	dc91      	bgt.n	8008ba0 <_dtoa_r+0xaa8>
 8008c7c:	d102      	bne.n	8008c84 <_dtoa_r+0xb8c>
 8008c7e:	f01a 0f01 	tst.w	sl, #1
 8008c82:	d18d      	bne.n	8008ba0 <_dtoa_r+0xaa8>
 8008c84:	462b      	mov	r3, r5
 8008c86:	461d      	mov	r5, r3
 8008c88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c8c:	2a30      	cmp	r2, #48	; 0x30
 8008c8e:	d0fa      	beq.n	8008c86 <_dtoa_r+0xb8e>
 8008c90:	e6d7      	b.n	8008a42 <_dtoa_r+0x94a>
 8008c92:	9a01      	ldr	r2, [sp, #4]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d184      	bne.n	8008ba2 <_dtoa_r+0xaaa>
 8008c98:	9b00      	ldr	r3, [sp, #0]
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	9300      	str	r3, [sp, #0]
 8008c9e:	2331      	movs	r3, #49	; 0x31
 8008ca0:	7013      	strb	r3, [r2, #0]
 8008ca2:	e6ce      	b.n	8008a42 <_dtoa_r+0x94a>
 8008ca4:	4b09      	ldr	r3, [pc, #36]	; (8008ccc <_dtoa_r+0xbd4>)
 8008ca6:	f7ff ba95 	b.w	80081d4 <_dtoa_r+0xdc>
 8008caa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f47f aa6e 	bne.w	800818e <_dtoa_r+0x96>
 8008cb2:	4b07      	ldr	r3, [pc, #28]	; (8008cd0 <_dtoa_r+0xbd8>)
 8008cb4:	f7ff ba8e 	b.w	80081d4 <_dtoa_r+0xdc>
 8008cb8:	9b02      	ldr	r3, [sp, #8]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	dcae      	bgt.n	8008c1c <_dtoa_r+0xb24>
 8008cbe:	9b06      	ldr	r3, [sp, #24]
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	f73f aea8 	bgt.w	8008a16 <_dtoa_r+0x91e>
 8008cc6:	e7a9      	b.n	8008c1c <_dtoa_r+0xb24>
 8008cc8:	0800d730 	.word	0x0800d730
 8008ccc:	0800d534 	.word	0x0800d534
 8008cd0:	0800d6b1 	.word	0x0800d6b1

08008cd4 <rshift>:
 8008cd4:	6903      	ldr	r3, [r0, #16]
 8008cd6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008cda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008cde:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008ce2:	f100 0414 	add.w	r4, r0, #20
 8008ce6:	dd45      	ble.n	8008d74 <rshift+0xa0>
 8008ce8:	f011 011f 	ands.w	r1, r1, #31
 8008cec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008cf0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008cf4:	d10c      	bne.n	8008d10 <rshift+0x3c>
 8008cf6:	f100 0710 	add.w	r7, r0, #16
 8008cfa:	4629      	mov	r1, r5
 8008cfc:	42b1      	cmp	r1, r6
 8008cfe:	d334      	bcc.n	8008d6a <rshift+0x96>
 8008d00:	1a9b      	subs	r3, r3, r2
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	1eea      	subs	r2, r5, #3
 8008d06:	4296      	cmp	r6, r2
 8008d08:	bf38      	it	cc
 8008d0a:	2300      	movcc	r3, #0
 8008d0c:	4423      	add	r3, r4
 8008d0e:	e015      	b.n	8008d3c <rshift+0x68>
 8008d10:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008d14:	f1c1 0820 	rsb	r8, r1, #32
 8008d18:	40cf      	lsrs	r7, r1
 8008d1a:	f105 0e04 	add.w	lr, r5, #4
 8008d1e:	46a1      	mov	r9, r4
 8008d20:	4576      	cmp	r6, lr
 8008d22:	46f4      	mov	ip, lr
 8008d24:	d815      	bhi.n	8008d52 <rshift+0x7e>
 8008d26:	1a9a      	subs	r2, r3, r2
 8008d28:	0092      	lsls	r2, r2, #2
 8008d2a:	3a04      	subs	r2, #4
 8008d2c:	3501      	adds	r5, #1
 8008d2e:	42ae      	cmp	r6, r5
 8008d30:	bf38      	it	cc
 8008d32:	2200      	movcc	r2, #0
 8008d34:	18a3      	adds	r3, r4, r2
 8008d36:	50a7      	str	r7, [r4, r2]
 8008d38:	b107      	cbz	r7, 8008d3c <rshift+0x68>
 8008d3a:	3304      	adds	r3, #4
 8008d3c:	1b1a      	subs	r2, r3, r4
 8008d3e:	42a3      	cmp	r3, r4
 8008d40:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008d44:	bf08      	it	eq
 8008d46:	2300      	moveq	r3, #0
 8008d48:	6102      	str	r2, [r0, #16]
 8008d4a:	bf08      	it	eq
 8008d4c:	6143      	streq	r3, [r0, #20]
 8008d4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d52:	f8dc c000 	ldr.w	ip, [ip]
 8008d56:	fa0c fc08 	lsl.w	ip, ip, r8
 8008d5a:	ea4c 0707 	orr.w	r7, ip, r7
 8008d5e:	f849 7b04 	str.w	r7, [r9], #4
 8008d62:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008d66:	40cf      	lsrs	r7, r1
 8008d68:	e7da      	b.n	8008d20 <rshift+0x4c>
 8008d6a:	f851 cb04 	ldr.w	ip, [r1], #4
 8008d6e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008d72:	e7c3      	b.n	8008cfc <rshift+0x28>
 8008d74:	4623      	mov	r3, r4
 8008d76:	e7e1      	b.n	8008d3c <rshift+0x68>

08008d78 <__hexdig_fun>:
 8008d78:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008d7c:	2b09      	cmp	r3, #9
 8008d7e:	d802      	bhi.n	8008d86 <__hexdig_fun+0xe>
 8008d80:	3820      	subs	r0, #32
 8008d82:	b2c0      	uxtb	r0, r0
 8008d84:	4770      	bx	lr
 8008d86:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008d8a:	2b05      	cmp	r3, #5
 8008d8c:	d801      	bhi.n	8008d92 <__hexdig_fun+0x1a>
 8008d8e:	3847      	subs	r0, #71	; 0x47
 8008d90:	e7f7      	b.n	8008d82 <__hexdig_fun+0xa>
 8008d92:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008d96:	2b05      	cmp	r3, #5
 8008d98:	d801      	bhi.n	8008d9e <__hexdig_fun+0x26>
 8008d9a:	3827      	subs	r0, #39	; 0x27
 8008d9c:	e7f1      	b.n	8008d82 <__hexdig_fun+0xa>
 8008d9e:	2000      	movs	r0, #0
 8008da0:	4770      	bx	lr
	...

08008da4 <__gethex>:
 8008da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008da8:	ed2d 8b02 	vpush	{d8}
 8008dac:	b089      	sub	sp, #36	; 0x24
 8008dae:	ee08 0a10 	vmov	s16, r0
 8008db2:	9304      	str	r3, [sp, #16]
 8008db4:	4bb4      	ldr	r3, [pc, #720]	; (8009088 <__gethex+0x2e4>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	9301      	str	r3, [sp, #4]
 8008dba:	4618      	mov	r0, r3
 8008dbc:	468b      	mov	fp, r1
 8008dbe:	4690      	mov	r8, r2
 8008dc0:	f7f7 fa16 	bl	80001f0 <strlen>
 8008dc4:	9b01      	ldr	r3, [sp, #4]
 8008dc6:	f8db 2000 	ldr.w	r2, [fp]
 8008dca:	4403      	add	r3, r0
 8008dcc:	4682      	mov	sl, r0
 8008dce:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008dd2:	9305      	str	r3, [sp, #20]
 8008dd4:	1c93      	adds	r3, r2, #2
 8008dd6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008dda:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008dde:	32fe      	adds	r2, #254	; 0xfe
 8008de0:	18d1      	adds	r1, r2, r3
 8008de2:	461f      	mov	r7, r3
 8008de4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008de8:	9100      	str	r1, [sp, #0]
 8008dea:	2830      	cmp	r0, #48	; 0x30
 8008dec:	d0f8      	beq.n	8008de0 <__gethex+0x3c>
 8008dee:	f7ff ffc3 	bl	8008d78 <__hexdig_fun>
 8008df2:	4604      	mov	r4, r0
 8008df4:	2800      	cmp	r0, #0
 8008df6:	d13a      	bne.n	8008e6e <__gethex+0xca>
 8008df8:	9901      	ldr	r1, [sp, #4]
 8008dfa:	4652      	mov	r2, sl
 8008dfc:	4638      	mov	r0, r7
 8008dfe:	f001 fa33 	bl	800a268 <strncmp>
 8008e02:	4605      	mov	r5, r0
 8008e04:	2800      	cmp	r0, #0
 8008e06:	d168      	bne.n	8008eda <__gethex+0x136>
 8008e08:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008e0c:	eb07 060a 	add.w	r6, r7, sl
 8008e10:	f7ff ffb2 	bl	8008d78 <__hexdig_fun>
 8008e14:	2800      	cmp	r0, #0
 8008e16:	d062      	beq.n	8008ede <__gethex+0x13a>
 8008e18:	4633      	mov	r3, r6
 8008e1a:	7818      	ldrb	r0, [r3, #0]
 8008e1c:	2830      	cmp	r0, #48	; 0x30
 8008e1e:	461f      	mov	r7, r3
 8008e20:	f103 0301 	add.w	r3, r3, #1
 8008e24:	d0f9      	beq.n	8008e1a <__gethex+0x76>
 8008e26:	f7ff ffa7 	bl	8008d78 <__hexdig_fun>
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	fab0 f480 	clz	r4, r0
 8008e30:	0964      	lsrs	r4, r4, #5
 8008e32:	4635      	mov	r5, r6
 8008e34:	9300      	str	r3, [sp, #0]
 8008e36:	463a      	mov	r2, r7
 8008e38:	4616      	mov	r6, r2
 8008e3a:	3201      	adds	r2, #1
 8008e3c:	7830      	ldrb	r0, [r6, #0]
 8008e3e:	f7ff ff9b 	bl	8008d78 <__hexdig_fun>
 8008e42:	2800      	cmp	r0, #0
 8008e44:	d1f8      	bne.n	8008e38 <__gethex+0x94>
 8008e46:	9901      	ldr	r1, [sp, #4]
 8008e48:	4652      	mov	r2, sl
 8008e4a:	4630      	mov	r0, r6
 8008e4c:	f001 fa0c 	bl	800a268 <strncmp>
 8008e50:	b980      	cbnz	r0, 8008e74 <__gethex+0xd0>
 8008e52:	b94d      	cbnz	r5, 8008e68 <__gethex+0xc4>
 8008e54:	eb06 050a 	add.w	r5, r6, sl
 8008e58:	462a      	mov	r2, r5
 8008e5a:	4616      	mov	r6, r2
 8008e5c:	3201      	adds	r2, #1
 8008e5e:	7830      	ldrb	r0, [r6, #0]
 8008e60:	f7ff ff8a 	bl	8008d78 <__hexdig_fun>
 8008e64:	2800      	cmp	r0, #0
 8008e66:	d1f8      	bne.n	8008e5a <__gethex+0xb6>
 8008e68:	1bad      	subs	r5, r5, r6
 8008e6a:	00ad      	lsls	r5, r5, #2
 8008e6c:	e004      	b.n	8008e78 <__gethex+0xd4>
 8008e6e:	2400      	movs	r4, #0
 8008e70:	4625      	mov	r5, r4
 8008e72:	e7e0      	b.n	8008e36 <__gethex+0x92>
 8008e74:	2d00      	cmp	r5, #0
 8008e76:	d1f7      	bne.n	8008e68 <__gethex+0xc4>
 8008e78:	7833      	ldrb	r3, [r6, #0]
 8008e7a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008e7e:	2b50      	cmp	r3, #80	; 0x50
 8008e80:	d13b      	bne.n	8008efa <__gethex+0x156>
 8008e82:	7873      	ldrb	r3, [r6, #1]
 8008e84:	2b2b      	cmp	r3, #43	; 0x2b
 8008e86:	d02c      	beq.n	8008ee2 <__gethex+0x13e>
 8008e88:	2b2d      	cmp	r3, #45	; 0x2d
 8008e8a:	d02e      	beq.n	8008eea <__gethex+0x146>
 8008e8c:	1c71      	adds	r1, r6, #1
 8008e8e:	f04f 0900 	mov.w	r9, #0
 8008e92:	7808      	ldrb	r0, [r1, #0]
 8008e94:	f7ff ff70 	bl	8008d78 <__hexdig_fun>
 8008e98:	1e43      	subs	r3, r0, #1
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	2b18      	cmp	r3, #24
 8008e9e:	d82c      	bhi.n	8008efa <__gethex+0x156>
 8008ea0:	f1a0 0210 	sub.w	r2, r0, #16
 8008ea4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008ea8:	f7ff ff66 	bl	8008d78 <__hexdig_fun>
 8008eac:	1e43      	subs	r3, r0, #1
 8008eae:	b2db      	uxtb	r3, r3
 8008eb0:	2b18      	cmp	r3, #24
 8008eb2:	d91d      	bls.n	8008ef0 <__gethex+0x14c>
 8008eb4:	f1b9 0f00 	cmp.w	r9, #0
 8008eb8:	d000      	beq.n	8008ebc <__gethex+0x118>
 8008eba:	4252      	negs	r2, r2
 8008ebc:	4415      	add	r5, r2
 8008ebe:	f8cb 1000 	str.w	r1, [fp]
 8008ec2:	b1e4      	cbz	r4, 8008efe <__gethex+0x15a>
 8008ec4:	9b00      	ldr	r3, [sp, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	bf14      	ite	ne
 8008eca:	2700      	movne	r7, #0
 8008ecc:	2706      	moveq	r7, #6
 8008ece:	4638      	mov	r0, r7
 8008ed0:	b009      	add	sp, #36	; 0x24
 8008ed2:	ecbd 8b02 	vpop	{d8}
 8008ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eda:	463e      	mov	r6, r7
 8008edc:	4625      	mov	r5, r4
 8008ede:	2401      	movs	r4, #1
 8008ee0:	e7ca      	b.n	8008e78 <__gethex+0xd4>
 8008ee2:	f04f 0900 	mov.w	r9, #0
 8008ee6:	1cb1      	adds	r1, r6, #2
 8008ee8:	e7d3      	b.n	8008e92 <__gethex+0xee>
 8008eea:	f04f 0901 	mov.w	r9, #1
 8008eee:	e7fa      	b.n	8008ee6 <__gethex+0x142>
 8008ef0:	230a      	movs	r3, #10
 8008ef2:	fb03 0202 	mla	r2, r3, r2, r0
 8008ef6:	3a10      	subs	r2, #16
 8008ef8:	e7d4      	b.n	8008ea4 <__gethex+0x100>
 8008efa:	4631      	mov	r1, r6
 8008efc:	e7df      	b.n	8008ebe <__gethex+0x11a>
 8008efe:	1bf3      	subs	r3, r6, r7
 8008f00:	3b01      	subs	r3, #1
 8008f02:	4621      	mov	r1, r4
 8008f04:	2b07      	cmp	r3, #7
 8008f06:	dc0b      	bgt.n	8008f20 <__gethex+0x17c>
 8008f08:	ee18 0a10 	vmov	r0, s16
 8008f0c:	f000 fa7e 	bl	800940c <_Balloc>
 8008f10:	4604      	mov	r4, r0
 8008f12:	b940      	cbnz	r0, 8008f26 <__gethex+0x182>
 8008f14:	4b5d      	ldr	r3, [pc, #372]	; (800908c <__gethex+0x2e8>)
 8008f16:	4602      	mov	r2, r0
 8008f18:	21de      	movs	r1, #222	; 0xde
 8008f1a:	485d      	ldr	r0, [pc, #372]	; (8009090 <__gethex+0x2ec>)
 8008f1c:	f001 f9c6 	bl	800a2ac <__assert_func>
 8008f20:	3101      	adds	r1, #1
 8008f22:	105b      	asrs	r3, r3, #1
 8008f24:	e7ee      	b.n	8008f04 <__gethex+0x160>
 8008f26:	f100 0914 	add.w	r9, r0, #20
 8008f2a:	f04f 0b00 	mov.w	fp, #0
 8008f2e:	f1ca 0301 	rsb	r3, sl, #1
 8008f32:	f8cd 9008 	str.w	r9, [sp, #8]
 8008f36:	f8cd b000 	str.w	fp, [sp]
 8008f3a:	9306      	str	r3, [sp, #24]
 8008f3c:	42b7      	cmp	r7, r6
 8008f3e:	d340      	bcc.n	8008fc2 <__gethex+0x21e>
 8008f40:	9802      	ldr	r0, [sp, #8]
 8008f42:	9b00      	ldr	r3, [sp, #0]
 8008f44:	f840 3b04 	str.w	r3, [r0], #4
 8008f48:	eba0 0009 	sub.w	r0, r0, r9
 8008f4c:	1080      	asrs	r0, r0, #2
 8008f4e:	0146      	lsls	r6, r0, #5
 8008f50:	6120      	str	r0, [r4, #16]
 8008f52:	4618      	mov	r0, r3
 8008f54:	f000 fb4c 	bl	80095f0 <__hi0bits>
 8008f58:	1a30      	subs	r0, r6, r0
 8008f5a:	f8d8 6000 	ldr.w	r6, [r8]
 8008f5e:	42b0      	cmp	r0, r6
 8008f60:	dd63      	ble.n	800902a <__gethex+0x286>
 8008f62:	1b87      	subs	r7, r0, r6
 8008f64:	4639      	mov	r1, r7
 8008f66:	4620      	mov	r0, r4
 8008f68:	f000 fef0 	bl	8009d4c <__any_on>
 8008f6c:	4682      	mov	sl, r0
 8008f6e:	b1a8      	cbz	r0, 8008f9c <__gethex+0x1f8>
 8008f70:	1e7b      	subs	r3, r7, #1
 8008f72:	1159      	asrs	r1, r3, #5
 8008f74:	f003 021f 	and.w	r2, r3, #31
 8008f78:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008f7c:	f04f 0a01 	mov.w	sl, #1
 8008f80:	fa0a f202 	lsl.w	r2, sl, r2
 8008f84:	420a      	tst	r2, r1
 8008f86:	d009      	beq.n	8008f9c <__gethex+0x1f8>
 8008f88:	4553      	cmp	r3, sl
 8008f8a:	dd05      	ble.n	8008f98 <__gethex+0x1f4>
 8008f8c:	1eb9      	subs	r1, r7, #2
 8008f8e:	4620      	mov	r0, r4
 8008f90:	f000 fedc 	bl	8009d4c <__any_on>
 8008f94:	2800      	cmp	r0, #0
 8008f96:	d145      	bne.n	8009024 <__gethex+0x280>
 8008f98:	f04f 0a02 	mov.w	sl, #2
 8008f9c:	4639      	mov	r1, r7
 8008f9e:	4620      	mov	r0, r4
 8008fa0:	f7ff fe98 	bl	8008cd4 <rshift>
 8008fa4:	443d      	add	r5, r7
 8008fa6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008faa:	42ab      	cmp	r3, r5
 8008fac:	da4c      	bge.n	8009048 <__gethex+0x2a4>
 8008fae:	ee18 0a10 	vmov	r0, s16
 8008fb2:	4621      	mov	r1, r4
 8008fb4:	f000 fa6a 	bl	800948c <_Bfree>
 8008fb8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008fba:	2300      	movs	r3, #0
 8008fbc:	6013      	str	r3, [r2, #0]
 8008fbe:	27a3      	movs	r7, #163	; 0xa3
 8008fc0:	e785      	b.n	8008ece <__gethex+0x12a>
 8008fc2:	1e73      	subs	r3, r6, #1
 8008fc4:	9a05      	ldr	r2, [sp, #20]
 8008fc6:	9303      	str	r3, [sp, #12]
 8008fc8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d019      	beq.n	8009004 <__gethex+0x260>
 8008fd0:	f1bb 0f20 	cmp.w	fp, #32
 8008fd4:	d107      	bne.n	8008fe6 <__gethex+0x242>
 8008fd6:	9b02      	ldr	r3, [sp, #8]
 8008fd8:	9a00      	ldr	r2, [sp, #0]
 8008fda:	f843 2b04 	str.w	r2, [r3], #4
 8008fde:	9302      	str	r3, [sp, #8]
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	9300      	str	r3, [sp, #0]
 8008fe4:	469b      	mov	fp, r3
 8008fe6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008fea:	f7ff fec5 	bl	8008d78 <__hexdig_fun>
 8008fee:	9b00      	ldr	r3, [sp, #0]
 8008ff0:	f000 000f 	and.w	r0, r0, #15
 8008ff4:	fa00 f00b 	lsl.w	r0, r0, fp
 8008ff8:	4303      	orrs	r3, r0
 8008ffa:	9300      	str	r3, [sp, #0]
 8008ffc:	f10b 0b04 	add.w	fp, fp, #4
 8009000:	9b03      	ldr	r3, [sp, #12]
 8009002:	e00d      	b.n	8009020 <__gethex+0x27c>
 8009004:	9b03      	ldr	r3, [sp, #12]
 8009006:	9a06      	ldr	r2, [sp, #24]
 8009008:	4413      	add	r3, r2
 800900a:	42bb      	cmp	r3, r7
 800900c:	d3e0      	bcc.n	8008fd0 <__gethex+0x22c>
 800900e:	4618      	mov	r0, r3
 8009010:	9901      	ldr	r1, [sp, #4]
 8009012:	9307      	str	r3, [sp, #28]
 8009014:	4652      	mov	r2, sl
 8009016:	f001 f927 	bl	800a268 <strncmp>
 800901a:	9b07      	ldr	r3, [sp, #28]
 800901c:	2800      	cmp	r0, #0
 800901e:	d1d7      	bne.n	8008fd0 <__gethex+0x22c>
 8009020:	461e      	mov	r6, r3
 8009022:	e78b      	b.n	8008f3c <__gethex+0x198>
 8009024:	f04f 0a03 	mov.w	sl, #3
 8009028:	e7b8      	b.n	8008f9c <__gethex+0x1f8>
 800902a:	da0a      	bge.n	8009042 <__gethex+0x29e>
 800902c:	1a37      	subs	r7, r6, r0
 800902e:	4621      	mov	r1, r4
 8009030:	ee18 0a10 	vmov	r0, s16
 8009034:	463a      	mov	r2, r7
 8009036:	f000 fc45 	bl	80098c4 <__lshift>
 800903a:	1bed      	subs	r5, r5, r7
 800903c:	4604      	mov	r4, r0
 800903e:	f100 0914 	add.w	r9, r0, #20
 8009042:	f04f 0a00 	mov.w	sl, #0
 8009046:	e7ae      	b.n	8008fa6 <__gethex+0x202>
 8009048:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800904c:	42a8      	cmp	r0, r5
 800904e:	dd72      	ble.n	8009136 <__gethex+0x392>
 8009050:	1b45      	subs	r5, r0, r5
 8009052:	42ae      	cmp	r6, r5
 8009054:	dc36      	bgt.n	80090c4 <__gethex+0x320>
 8009056:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800905a:	2b02      	cmp	r3, #2
 800905c:	d02a      	beq.n	80090b4 <__gethex+0x310>
 800905e:	2b03      	cmp	r3, #3
 8009060:	d02c      	beq.n	80090bc <__gethex+0x318>
 8009062:	2b01      	cmp	r3, #1
 8009064:	d11c      	bne.n	80090a0 <__gethex+0x2fc>
 8009066:	42ae      	cmp	r6, r5
 8009068:	d11a      	bne.n	80090a0 <__gethex+0x2fc>
 800906a:	2e01      	cmp	r6, #1
 800906c:	d112      	bne.n	8009094 <__gethex+0x2f0>
 800906e:	9a04      	ldr	r2, [sp, #16]
 8009070:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009074:	6013      	str	r3, [r2, #0]
 8009076:	2301      	movs	r3, #1
 8009078:	6123      	str	r3, [r4, #16]
 800907a:	f8c9 3000 	str.w	r3, [r9]
 800907e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009080:	2762      	movs	r7, #98	; 0x62
 8009082:	601c      	str	r4, [r3, #0]
 8009084:	e723      	b.n	8008ece <__gethex+0x12a>
 8009086:	bf00      	nop
 8009088:	0800d7a8 	.word	0x0800d7a8
 800908c:	0800d730 	.word	0x0800d730
 8009090:	0800d741 	.word	0x0800d741
 8009094:	1e71      	subs	r1, r6, #1
 8009096:	4620      	mov	r0, r4
 8009098:	f000 fe58 	bl	8009d4c <__any_on>
 800909c:	2800      	cmp	r0, #0
 800909e:	d1e6      	bne.n	800906e <__gethex+0x2ca>
 80090a0:	ee18 0a10 	vmov	r0, s16
 80090a4:	4621      	mov	r1, r4
 80090a6:	f000 f9f1 	bl	800948c <_Bfree>
 80090aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80090ac:	2300      	movs	r3, #0
 80090ae:	6013      	str	r3, [r2, #0]
 80090b0:	2750      	movs	r7, #80	; 0x50
 80090b2:	e70c      	b.n	8008ece <__gethex+0x12a>
 80090b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d1f2      	bne.n	80090a0 <__gethex+0x2fc>
 80090ba:	e7d8      	b.n	800906e <__gethex+0x2ca>
 80090bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d1d5      	bne.n	800906e <__gethex+0x2ca>
 80090c2:	e7ed      	b.n	80090a0 <__gethex+0x2fc>
 80090c4:	1e6f      	subs	r7, r5, #1
 80090c6:	f1ba 0f00 	cmp.w	sl, #0
 80090ca:	d131      	bne.n	8009130 <__gethex+0x38c>
 80090cc:	b127      	cbz	r7, 80090d8 <__gethex+0x334>
 80090ce:	4639      	mov	r1, r7
 80090d0:	4620      	mov	r0, r4
 80090d2:	f000 fe3b 	bl	8009d4c <__any_on>
 80090d6:	4682      	mov	sl, r0
 80090d8:	117b      	asrs	r3, r7, #5
 80090da:	2101      	movs	r1, #1
 80090dc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80090e0:	f007 071f 	and.w	r7, r7, #31
 80090e4:	fa01 f707 	lsl.w	r7, r1, r7
 80090e8:	421f      	tst	r7, r3
 80090ea:	4629      	mov	r1, r5
 80090ec:	4620      	mov	r0, r4
 80090ee:	bf18      	it	ne
 80090f0:	f04a 0a02 	orrne.w	sl, sl, #2
 80090f4:	1b76      	subs	r6, r6, r5
 80090f6:	f7ff fded 	bl	8008cd4 <rshift>
 80090fa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80090fe:	2702      	movs	r7, #2
 8009100:	f1ba 0f00 	cmp.w	sl, #0
 8009104:	d048      	beq.n	8009198 <__gethex+0x3f4>
 8009106:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800910a:	2b02      	cmp	r3, #2
 800910c:	d015      	beq.n	800913a <__gethex+0x396>
 800910e:	2b03      	cmp	r3, #3
 8009110:	d017      	beq.n	8009142 <__gethex+0x39e>
 8009112:	2b01      	cmp	r3, #1
 8009114:	d109      	bne.n	800912a <__gethex+0x386>
 8009116:	f01a 0f02 	tst.w	sl, #2
 800911a:	d006      	beq.n	800912a <__gethex+0x386>
 800911c:	f8d9 0000 	ldr.w	r0, [r9]
 8009120:	ea4a 0a00 	orr.w	sl, sl, r0
 8009124:	f01a 0f01 	tst.w	sl, #1
 8009128:	d10e      	bne.n	8009148 <__gethex+0x3a4>
 800912a:	f047 0710 	orr.w	r7, r7, #16
 800912e:	e033      	b.n	8009198 <__gethex+0x3f4>
 8009130:	f04f 0a01 	mov.w	sl, #1
 8009134:	e7d0      	b.n	80090d8 <__gethex+0x334>
 8009136:	2701      	movs	r7, #1
 8009138:	e7e2      	b.n	8009100 <__gethex+0x35c>
 800913a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800913c:	f1c3 0301 	rsb	r3, r3, #1
 8009140:	9315      	str	r3, [sp, #84]	; 0x54
 8009142:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009144:	2b00      	cmp	r3, #0
 8009146:	d0f0      	beq.n	800912a <__gethex+0x386>
 8009148:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800914c:	f104 0314 	add.w	r3, r4, #20
 8009150:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009154:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009158:	f04f 0c00 	mov.w	ip, #0
 800915c:	4618      	mov	r0, r3
 800915e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009162:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009166:	d01c      	beq.n	80091a2 <__gethex+0x3fe>
 8009168:	3201      	adds	r2, #1
 800916a:	6002      	str	r2, [r0, #0]
 800916c:	2f02      	cmp	r7, #2
 800916e:	f104 0314 	add.w	r3, r4, #20
 8009172:	d13f      	bne.n	80091f4 <__gethex+0x450>
 8009174:	f8d8 2000 	ldr.w	r2, [r8]
 8009178:	3a01      	subs	r2, #1
 800917a:	42b2      	cmp	r2, r6
 800917c:	d10a      	bne.n	8009194 <__gethex+0x3f0>
 800917e:	1171      	asrs	r1, r6, #5
 8009180:	2201      	movs	r2, #1
 8009182:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009186:	f006 061f 	and.w	r6, r6, #31
 800918a:	fa02 f606 	lsl.w	r6, r2, r6
 800918e:	421e      	tst	r6, r3
 8009190:	bf18      	it	ne
 8009192:	4617      	movne	r7, r2
 8009194:	f047 0720 	orr.w	r7, r7, #32
 8009198:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800919a:	601c      	str	r4, [r3, #0]
 800919c:	9b04      	ldr	r3, [sp, #16]
 800919e:	601d      	str	r5, [r3, #0]
 80091a0:	e695      	b.n	8008ece <__gethex+0x12a>
 80091a2:	4299      	cmp	r1, r3
 80091a4:	f843 cc04 	str.w	ip, [r3, #-4]
 80091a8:	d8d8      	bhi.n	800915c <__gethex+0x3b8>
 80091aa:	68a3      	ldr	r3, [r4, #8]
 80091ac:	459b      	cmp	fp, r3
 80091ae:	db19      	blt.n	80091e4 <__gethex+0x440>
 80091b0:	6861      	ldr	r1, [r4, #4]
 80091b2:	ee18 0a10 	vmov	r0, s16
 80091b6:	3101      	adds	r1, #1
 80091b8:	f000 f928 	bl	800940c <_Balloc>
 80091bc:	4681      	mov	r9, r0
 80091be:	b918      	cbnz	r0, 80091c8 <__gethex+0x424>
 80091c0:	4b1a      	ldr	r3, [pc, #104]	; (800922c <__gethex+0x488>)
 80091c2:	4602      	mov	r2, r0
 80091c4:	2184      	movs	r1, #132	; 0x84
 80091c6:	e6a8      	b.n	8008f1a <__gethex+0x176>
 80091c8:	6922      	ldr	r2, [r4, #16]
 80091ca:	3202      	adds	r2, #2
 80091cc:	f104 010c 	add.w	r1, r4, #12
 80091d0:	0092      	lsls	r2, r2, #2
 80091d2:	300c      	adds	r0, #12
 80091d4:	f000 f90c 	bl	80093f0 <memcpy>
 80091d8:	4621      	mov	r1, r4
 80091da:	ee18 0a10 	vmov	r0, s16
 80091de:	f000 f955 	bl	800948c <_Bfree>
 80091e2:	464c      	mov	r4, r9
 80091e4:	6923      	ldr	r3, [r4, #16]
 80091e6:	1c5a      	adds	r2, r3, #1
 80091e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80091ec:	6122      	str	r2, [r4, #16]
 80091ee:	2201      	movs	r2, #1
 80091f0:	615a      	str	r2, [r3, #20]
 80091f2:	e7bb      	b.n	800916c <__gethex+0x3c8>
 80091f4:	6922      	ldr	r2, [r4, #16]
 80091f6:	455a      	cmp	r2, fp
 80091f8:	dd0b      	ble.n	8009212 <__gethex+0x46e>
 80091fa:	2101      	movs	r1, #1
 80091fc:	4620      	mov	r0, r4
 80091fe:	f7ff fd69 	bl	8008cd4 <rshift>
 8009202:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009206:	3501      	adds	r5, #1
 8009208:	42ab      	cmp	r3, r5
 800920a:	f6ff aed0 	blt.w	8008fae <__gethex+0x20a>
 800920e:	2701      	movs	r7, #1
 8009210:	e7c0      	b.n	8009194 <__gethex+0x3f0>
 8009212:	f016 061f 	ands.w	r6, r6, #31
 8009216:	d0fa      	beq.n	800920e <__gethex+0x46a>
 8009218:	4453      	add	r3, sl
 800921a:	f1c6 0620 	rsb	r6, r6, #32
 800921e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009222:	f000 f9e5 	bl	80095f0 <__hi0bits>
 8009226:	42b0      	cmp	r0, r6
 8009228:	dbe7      	blt.n	80091fa <__gethex+0x456>
 800922a:	e7f0      	b.n	800920e <__gethex+0x46a>
 800922c:	0800d730 	.word	0x0800d730

08009230 <L_shift>:
 8009230:	f1c2 0208 	rsb	r2, r2, #8
 8009234:	0092      	lsls	r2, r2, #2
 8009236:	b570      	push	{r4, r5, r6, lr}
 8009238:	f1c2 0620 	rsb	r6, r2, #32
 800923c:	6843      	ldr	r3, [r0, #4]
 800923e:	6804      	ldr	r4, [r0, #0]
 8009240:	fa03 f506 	lsl.w	r5, r3, r6
 8009244:	432c      	orrs	r4, r5
 8009246:	40d3      	lsrs	r3, r2
 8009248:	6004      	str	r4, [r0, #0]
 800924a:	f840 3f04 	str.w	r3, [r0, #4]!
 800924e:	4288      	cmp	r0, r1
 8009250:	d3f4      	bcc.n	800923c <L_shift+0xc>
 8009252:	bd70      	pop	{r4, r5, r6, pc}

08009254 <__match>:
 8009254:	b530      	push	{r4, r5, lr}
 8009256:	6803      	ldr	r3, [r0, #0]
 8009258:	3301      	adds	r3, #1
 800925a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800925e:	b914      	cbnz	r4, 8009266 <__match+0x12>
 8009260:	6003      	str	r3, [r0, #0]
 8009262:	2001      	movs	r0, #1
 8009264:	bd30      	pop	{r4, r5, pc}
 8009266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800926a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800926e:	2d19      	cmp	r5, #25
 8009270:	bf98      	it	ls
 8009272:	3220      	addls	r2, #32
 8009274:	42a2      	cmp	r2, r4
 8009276:	d0f0      	beq.n	800925a <__match+0x6>
 8009278:	2000      	movs	r0, #0
 800927a:	e7f3      	b.n	8009264 <__match+0x10>

0800927c <__hexnan>:
 800927c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009280:	680b      	ldr	r3, [r1, #0]
 8009282:	115e      	asrs	r6, r3, #5
 8009284:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009288:	f013 031f 	ands.w	r3, r3, #31
 800928c:	b087      	sub	sp, #28
 800928e:	bf18      	it	ne
 8009290:	3604      	addne	r6, #4
 8009292:	2500      	movs	r5, #0
 8009294:	1f37      	subs	r7, r6, #4
 8009296:	4690      	mov	r8, r2
 8009298:	6802      	ldr	r2, [r0, #0]
 800929a:	9301      	str	r3, [sp, #4]
 800929c:	4682      	mov	sl, r0
 800929e:	f846 5c04 	str.w	r5, [r6, #-4]
 80092a2:	46b9      	mov	r9, r7
 80092a4:	463c      	mov	r4, r7
 80092a6:	9502      	str	r5, [sp, #8]
 80092a8:	46ab      	mov	fp, r5
 80092aa:	7851      	ldrb	r1, [r2, #1]
 80092ac:	1c53      	adds	r3, r2, #1
 80092ae:	9303      	str	r3, [sp, #12]
 80092b0:	b341      	cbz	r1, 8009304 <__hexnan+0x88>
 80092b2:	4608      	mov	r0, r1
 80092b4:	9205      	str	r2, [sp, #20]
 80092b6:	9104      	str	r1, [sp, #16]
 80092b8:	f7ff fd5e 	bl	8008d78 <__hexdig_fun>
 80092bc:	2800      	cmp	r0, #0
 80092be:	d14f      	bne.n	8009360 <__hexnan+0xe4>
 80092c0:	9904      	ldr	r1, [sp, #16]
 80092c2:	9a05      	ldr	r2, [sp, #20]
 80092c4:	2920      	cmp	r1, #32
 80092c6:	d818      	bhi.n	80092fa <__hexnan+0x7e>
 80092c8:	9b02      	ldr	r3, [sp, #8]
 80092ca:	459b      	cmp	fp, r3
 80092cc:	dd13      	ble.n	80092f6 <__hexnan+0x7a>
 80092ce:	454c      	cmp	r4, r9
 80092d0:	d206      	bcs.n	80092e0 <__hexnan+0x64>
 80092d2:	2d07      	cmp	r5, #7
 80092d4:	dc04      	bgt.n	80092e0 <__hexnan+0x64>
 80092d6:	462a      	mov	r2, r5
 80092d8:	4649      	mov	r1, r9
 80092da:	4620      	mov	r0, r4
 80092dc:	f7ff ffa8 	bl	8009230 <L_shift>
 80092e0:	4544      	cmp	r4, r8
 80092e2:	d950      	bls.n	8009386 <__hexnan+0x10a>
 80092e4:	2300      	movs	r3, #0
 80092e6:	f1a4 0904 	sub.w	r9, r4, #4
 80092ea:	f844 3c04 	str.w	r3, [r4, #-4]
 80092ee:	f8cd b008 	str.w	fp, [sp, #8]
 80092f2:	464c      	mov	r4, r9
 80092f4:	461d      	mov	r5, r3
 80092f6:	9a03      	ldr	r2, [sp, #12]
 80092f8:	e7d7      	b.n	80092aa <__hexnan+0x2e>
 80092fa:	2929      	cmp	r1, #41	; 0x29
 80092fc:	d156      	bne.n	80093ac <__hexnan+0x130>
 80092fe:	3202      	adds	r2, #2
 8009300:	f8ca 2000 	str.w	r2, [sl]
 8009304:	f1bb 0f00 	cmp.w	fp, #0
 8009308:	d050      	beq.n	80093ac <__hexnan+0x130>
 800930a:	454c      	cmp	r4, r9
 800930c:	d206      	bcs.n	800931c <__hexnan+0xa0>
 800930e:	2d07      	cmp	r5, #7
 8009310:	dc04      	bgt.n	800931c <__hexnan+0xa0>
 8009312:	462a      	mov	r2, r5
 8009314:	4649      	mov	r1, r9
 8009316:	4620      	mov	r0, r4
 8009318:	f7ff ff8a 	bl	8009230 <L_shift>
 800931c:	4544      	cmp	r4, r8
 800931e:	d934      	bls.n	800938a <__hexnan+0x10e>
 8009320:	f1a8 0204 	sub.w	r2, r8, #4
 8009324:	4623      	mov	r3, r4
 8009326:	f853 1b04 	ldr.w	r1, [r3], #4
 800932a:	f842 1f04 	str.w	r1, [r2, #4]!
 800932e:	429f      	cmp	r7, r3
 8009330:	d2f9      	bcs.n	8009326 <__hexnan+0xaa>
 8009332:	1b3b      	subs	r3, r7, r4
 8009334:	f023 0303 	bic.w	r3, r3, #3
 8009338:	3304      	adds	r3, #4
 800933a:	3401      	adds	r4, #1
 800933c:	3e03      	subs	r6, #3
 800933e:	42b4      	cmp	r4, r6
 8009340:	bf88      	it	hi
 8009342:	2304      	movhi	r3, #4
 8009344:	4443      	add	r3, r8
 8009346:	2200      	movs	r2, #0
 8009348:	f843 2b04 	str.w	r2, [r3], #4
 800934c:	429f      	cmp	r7, r3
 800934e:	d2fb      	bcs.n	8009348 <__hexnan+0xcc>
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	b91b      	cbnz	r3, 800935c <__hexnan+0xe0>
 8009354:	4547      	cmp	r7, r8
 8009356:	d127      	bne.n	80093a8 <__hexnan+0x12c>
 8009358:	2301      	movs	r3, #1
 800935a:	603b      	str	r3, [r7, #0]
 800935c:	2005      	movs	r0, #5
 800935e:	e026      	b.n	80093ae <__hexnan+0x132>
 8009360:	3501      	adds	r5, #1
 8009362:	2d08      	cmp	r5, #8
 8009364:	f10b 0b01 	add.w	fp, fp, #1
 8009368:	dd06      	ble.n	8009378 <__hexnan+0xfc>
 800936a:	4544      	cmp	r4, r8
 800936c:	d9c3      	bls.n	80092f6 <__hexnan+0x7a>
 800936e:	2300      	movs	r3, #0
 8009370:	f844 3c04 	str.w	r3, [r4, #-4]
 8009374:	2501      	movs	r5, #1
 8009376:	3c04      	subs	r4, #4
 8009378:	6822      	ldr	r2, [r4, #0]
 800937a:	f000 000f 	and.w	r0, r0, #15
 800937e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009382:	6022      	str	r2, [r4, #0]
 8009384:	e7b7      	b.n	80092f6 <__hexnan+0x7a>
 8009386:	2508      	movs	r5, #8
 8009388:	e7b5      	b.n	80092f6 <__hexnan+0x7a>
 800938a:	9b01      	ldr	r3, [sp, #4]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d0df      	beq.n	8009350 <__hexnan+0xd4>
 8009390:	f04f 32ff 	mov.w	r2, #4294967295
 8009394:	f1c3 0320 	rsb	r3, r3, #32
 8009398:	fa22 f303 	lsr.w	r3, r2, r3
 800939c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80093a0:	401a      	ands	r2, r3
 80093a2:	f846 2c04 	str.w	r2, [r6, #-4]
 80093a6:	e7d3      	b.n	8009350 <__hexnan+0xd4>
 80093a8:	3f04      	subs	r7, #4
 80093aa:	e7d1      	b.n	8009350 <__hexnan+0xd4>
 80093ac:	2004      	movs	r0, #4
 80093ae:	b007      	add	sp, #28
 80093b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080093b4 <_localeconv_r>:
 80093b4:	4800      	ldr	r0, [pc, #0]	; (80093b8 <_localeconv_r+0x4>)
 80093b6:	4770      	bx	lr
 80093b8:	200001e8 	.word	0x200001e8

080093bc <malloc>:
 80093bc:	4b02      	ldr	r3, [pc, #8]	; (80093c8 <malloc+0xc>)
 80093be:	4601      	mov	r1, r0
 80093c0:	6818      	ldr	r0, [r3, #0]
 80093c2:	f000 bd67 	b.w	8009e94 <_malloc_r>
 80093c6:	bf00      	nop
 80093c8:	20000090 	.word	0x20000090

080093cc <__ascii_mbtowc>:
 80093cc:	b082      	sub	sp, #8
 80093ce:	b901      	cbnz	r1, 80093d2 <__ascii_mbtowc+0x6>
 80093d0:	a901      	add	r1, sp, #4
 80093d2:	b142      	cbz	r2, 80093e6 <__ascii_mbtowc+0x1a>
 80093d4:	b14b      	cbz	r3, 80093ea <__ascii_mbtowc+0x1e>
 80093d6:	7813      	ldrb	r3, [r2, #0]
 80093d8:	600b      	str	r3, [r1, #0]
 80093da:	7812      	ldrb	r2, [r2, #0]
 80093dc:	1e10      	subs	r0, r2, #0
 80093de:	bf18      	it	ne
 80093e0:	2001      	movne	r0, #1
 80093e2:	b002      	add	sp, #8
 80093e4:	4770      	bx	lr
 80093e6:	4610      	mov	r0, r2
 80093e8:	e7fb      	b.n	80093e2 <__ascii_mbtowc+0x16>
 80093ea:	f06f 0001 	mvn.w	r0, #1
 80093ee:	e7f8      	b.n	80093e2 <__ascii_mbtowc+0x16>

080093f0 <memcpy>:
 80093f0:	440a      	add	r2, r1
 80093f2:	4291      	cmp	r1, r2
 80093f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80093f8:	d100      	bne.n	80093fc <memcpy+0xc>
 80093fa:	4770      	bx	lr
 80093fc:	b510      	push	{r4, lr}
 80093fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009402:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009406:	4291      	cmp	r1, r2
 8009408:	d1f9      	bne.n	80093fe <memcpy+0xe>
 800940a:	bd10      	pop	{r4, pc}

0800940c <_Balloc>:
 800940c:	b570      	push	{r4, r5, r6, lr}
 800940e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009410:	4604      	mov	r4, r0
 8009412:	460d      	mov	r5, r1
 8009414:	b976      	cbnz	r6, 8009434 <_Balloc+0x28>
 8009416:	2010      	movs	r0, #16
 8009418:	f7ff ffd0 	bl	80093bc <malloc>
 800941c:	4602      	mov	r2, r0
 800941e:	6260      	str	r0, [r4, #36]	; 0x24
 8009420:	b920      	cbnz	r0, 800942c <_Balloc+0x20>
 8009422:	4b18      	ldr	r3, [pc, #96]	; (8009484 <_Balloc+0x78>)
 8009424:	4818      	ldr	r0, [pc, #96]	; (8009488 <_Balloc+0x7c>)
 8009426:	2166      	movs	r1, #102	; 0x66
 8009428:	f000 ff40 	bl	800a2ac <__assert_func>
 800942c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009430:	6006      	str	r6, [r0, #0]
 8009432:	60c6      	str	r6, [r0, #12]
 8009434:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009436:	68f3      	ldr	r3, [r6, #12]
 8009438:	b183      	cbz	r3, 800945c <_Balloc+0x50>
 800943a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800943c:	68db      	ldr	r3, [r3, #12]
 800943e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009442:	b9b8      	cbnz	r0, 8009474 <_Balloc+0x68>
 8009444:	2101      	movs	r1, #1
 8009446:	fa01 f605 	lsl.w	r6, r1, r5
 800944a:	1d72      	adds	r2, r6, #5
 800944c:	0092      	lsls	r2, r2, #2
 800944e:	4620      	mov	r0, r4
 8009450:	f000 fc9d 	bl	8009d8e <_calloc_r>
 8009454:	b160      	cbz	r0, 8009470 <_Balloc+0x64>
 8009456:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800945a:	e00e      	b.n	800947a <_Balloc+0x6e>
 800945c:	2221      	movs	r2, #33	; 0x21
 800945e:	2104      	movs	r1, #4
 8009460:	4620      	mov	r0, r4
 8009462:	f000 fc94 	bl	8009d8e <_calloc_r>
 8009466:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009468:	60f0      	str	r0, [r6, #12]
 800946a:	68db      	ldr	r3, [r3, #12]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d1e4      	bne.n	800943a <_Balloc+0x2e>
 8009470:	2000      	movs	r0, #0
 8009472:	bd70      	pop	{r4, r5, r6, pc}
 8009474:	6802      	ldr	r2, [r0, #0]
 8009476:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800947a:	2300      	movs	r3, #0
 800947c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009480:	e7f7      	b.n	8009472 <_Balloc+0x66>
 8009482:	bf00      	nop
 8009484:	0800d6be 	.word	0x0800d6be
 8009488:	0800d7bc 	.word	0x0800d7bc

0800948c <_Bfree>:
 800948c:	b570      	push	{r4, r5, r6, lr}
 800948e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009490:	4605      	mov	r5, r0
 8009492:	460c      	mov	r4, r1
 8009494:	b976      	cbnz	r6, 80094b4 <_Bfree+0x28>
 8009496:	2010      	movs	r0, #16
 8009498:	f7ff ff90 	bl	80093bc <malloc>
 800949c:	4602      	mov	r2, r0
 800949e:	6268      	str	r0, [r5, #36]	; 0x24
 80094a0:	b920      	cbnz	r0, 80094ac <_Bfree+0x20>
 80094a2:	4b09      	ldr	r3, [pc, #36]	; (80094c8 <_Bfree+0x3c>)
 80094a4:	4809      	ldr	r0, [pc, #36]	; (80094cc <_Bfree+0x40>)
 80094a6:	218a      	movs	r1, #138	; 0x8a
 80094a8:	f000 ff00 	bl	800a2ac <__assert_func>
 80094ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094b0:	6006      	str	r6, [r0, #0]
 80094b2:	60c6      	str	r6, [r0, #12]
 80094b4:	b13c      	cbz	r4, 80094c6 <_Bfree+0x3a>
 80094b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80094b8:	6862      	ldr	r2, [r4, #4]
 80094ba:	68db      	ldr	r3, [r3, #12]
 80094bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80094c0:	6021      	str	r1, [r4, #0]
 80094c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80094c6:	bd70      	pop	{r4, r5, r6, pc}
 80094c8:	0800d6be 	.word	0x0800d6be
 80094cc:	0800d7bc 	.word	0x0800d7bc

080094d0 <__multadd>:
 80094d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094d4:	690d      	ldr	r5, [r1, #16]
 80094d6:	4607      	mov	r7, r0
 80094d8:	460c      	mov	r4, r1
 80094da:	461e      	mov	r6, r3
 80094dc:	f101 0c14 	add.w	ip, r1, #20
 80094e0:	2000      	movs	r0, #0
 80094e2:	f8dc 3000 	ldr.w	r3, [ip]
 80094e6:	b299      	uxth	r1, r3
 80094e8:	fb02 6101 	mla	r1, r2, r1, r6
 80094ec:	0c1e      	lsrs	r6, r3, #16
 80094ee:	0c0b      	lsrs	r3, r1, #16
 80094f0:	fb02 3306 	mla	r3, r2, r6, r3
 80094f4:	b289      	uxth	r1, r1
 80094f6:	3001      	adds	r0, #1
 80094f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80094fc:	4285      	cmp	r5, r0
 80094fe:	f84c 1b04 	str.w	r1, [ip], #4
 8009502:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009506:	dcec      	bgt.n	80094e2 <__multadd+0x12>
 8009508:	b30e      	cbz	r6, 800954e <__multadd+0x7e>
 800950a:	68a3      	ldr	r3, [r4, #8]
 800950c:	42ab      	cmp	r3, r5
 800950e:	dc19      	bgt.n	8009544 <__multadd+0x74>
 8009510:	6861      	ldr	r1, [r4, #4]
 8009512:	4638      	mov	r0, r7
 8009514:	3101      	adds	r1, #1
 8009516:	f7ff ff79 	bl	800940c <_Balloc>
 800951a:	4680      	mov	r8, r0
 800951c:	b928      	cbnz	r0, 800952a <__multadd+0x5a>
 800951e:	4602      	mov	r2, r0
 8009520:	4b0c      	ldr	r3, [pc, #48]	; (8009554 <__multadd+0x84>)
 8009522:	480d      	ldr	r0, [pc, #52]	; (8009558 <__multadd+0x88>)
 8009524:	21b5      	movs	r1, #181	; 0xb5
 8009526:	f000 fec1 	bl	800a2ac <__assert_func>
 800952a:	6922      	ldr	r2, [r4, #16]
 800952c:	3202      	adds	r2, #2
 800952e:	f104 010c 	add.w	r1, r4, #12
 8009532:	0092      	lsls	r2, r2, #2
 8009534:	300c      	adds	r0, #12
 8009536:	f7ff ff5b 	bl	80093f0 <memcpy>
 800953a:	4621      	mov	r1, r4
 800953c:	4638      	mov	r0, r7
 800953e:	f7ff ffa5 	bl	800948c <_Bfree>
 8009542:	4644      	mov	r4, r8
 8009544:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009548:	3501      	adds	r5, #1
 800954a:	615e      	str	r6, [r3, #20]
 800954c:	6125      	str	r5, [r4, #16]
 800954e:	4620      	mov	r0, r4
 8009550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009554:	0800d730 	.word	0x0800d730
 8009558:	0800d7bc 	.word	0x0800d7bc

0800955c <__s2b>:
 800955c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009560:	460c      	mov	r4, r1
 8009562:	4615      	mov	r5, r2
 8009564:	461f      	mov	r7, r3
 8009566:	2209      	movs	r2, #9
 8009568:	3308      	adds	r3, #8
 800956a:	4606      	mov	r6, r0
 800956c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009570:	2100      	movs	r1, #0
 8009572:	2201      	movs	r2, #1
 8009574:	429a      	cmp	r2, r3
 8009576:	db09      	blt.n	800958c <__s2b+0x30>
 8009578:	4630      	mov	r0, r6
 800957a:	f7ff ff47 	bl	800940c <_Balloc>
 800957e:	b940      	cbnz	r0, 8009592 <__s2b+0x36>
 8009580:	4602      	mov	r2, r0
 8009582:	4b19      	ldr	r3, [pc, #100]	; (80095e8 <__s2b+0x8c>)
 8009584:	4819      	ldr	r0, [pc, #100]	; (80095ec <__s2b+0x90>)
 8009586:	21ce      	movs	r1, #206	; 0xce
 8009588:	f000 fe90 	bl	800a2ac <__assert_func>
 800958c:	0052      	lsls	r2, r2, #1
 800958e:	3101      	adds	r1, #1
 8009590:	e7f0      	b.n	8009574 <__s2b+0x18>
 8009592:	9b08      	ldr	r3, [sp, #32]
 8009594:	6143      	str	r3, [r0, #20]
 8009596:	2d09      	cmp	r5, #9
 8009598:	f04f 0301 	mov.w	r3, #1
 800959c:	6103      	str	r3, [r0, #16]
 800959e:	dd16      	ble.n	80095ce <__s2b+0x72>
 80095a0:	f104 0909 	add.w	r9, r4, #9
 80095a4:	46c8      	mov	r8, r9
 80095a6:	442c      	add	r4, r5
 80095a8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80095ac:	4601      	mov	r1, r0
 80095ae:	3b30      	subs	r3, #48	; 0x30
 80095b0:	220a      	movs	r2, #10
 80095b2:	4630      	mov	r0, r6
 80095b4:	f7ff ff8c 	bl	80094d0 <__multadd>
 80095b8:	45a0      	cmp	r8, r4
 80095ba:	d1f5      	bne.n	80095a8 <__s2b+0x4c>
 80095bc:	f1a5 0408 	sub.w	r4, r5, #8
 80095c0:	444c      	add	r4, r9
 80095c2:	1b2d      	subs	r5, r5, r4
 80095c4:	1963      	adds	r3, r4, r5
 80095c6:	42bb      	cmp	r3, r7
 80095c8:	db04      	blt.n	80095d4 <__s2b+0x78>
 80095ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095ce:	340a      	adds	r4, #10
 80095d0:	2509      	movs	r5, #9
 80095d2:	e7f6      	b.n	80095c2 <__s2b+0x66>
 80095d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80095d8:	4601      	mov	r1, r0
 80095da:	3b30      	subs	r3, #48	; 0x30
 80095dc:	220a      	movs	r2, #10
 80095de:	4630      	mov	r0, r6
 80095e0:	f7ff ff76 	bl	80094d0 <__multadd>
 80095e4:	e7ee      	b.n	80095c4 <__s2b+0x68>
 80095e6:	bf00      	nop
 80095e8:	0800d730 	.word	0x0800d730
 80095ec:	0800d7bc 	.word	0x0800d7bc

080095f0 <__hi0bits>:
 80095f0:	0c03      	lsrs	r3, r0, #16
 80095f2:	041b      	lsls	r3, r3, #16
 80095f4:	b9d3      	cbnz	r3, 800962c <__hi0bits+0x3c>
 80095f6:	0400      	lsls	r0, r0, #16
 80095f8:	2310      	movs	r3, #16
 80095fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80095fe:	bf04      	itt	eq
 8009600:	0200      	lsleq	r0, r0, #8
 8009602:	3308      	addeq	r3, #8
 8009604:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009608:	bf04      	itt	eq
 800960a:	0100      	lsleq	r0, r0, #4
 800960c:	3304      	addeq	r3, #4
 800960e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009612:	bf04      	itt	eq
 8009614:	0080      	lsleq	r0, r0, #2
 8009616:	3302      	addeq	r3, #2
 8009618:	2800      	cmp	r0, #0
 800961a:	db05      	blt.n	8009628 <__hi0bits+0x38>
 800961c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009620:	f103 0301 	add.w	r3, r3, #1
 8009624:	bf08      	it	eq
 8009626:	2320      	moveq	r3, #32
 8009628:	4618      	mov	r0, r3
 800962a:	4770      	bx	lr
 800962c:	2300      	movs	r3, #0
 800962e:	e7e4      	b.n	80095fa <__hi0bits+0xa>

08009630 <__lo0bits>:
 8009630:	6803      	ldr	r3, [r0, #0]
 8009632:	f013 0207 	ands.w	r2, r3, #7
 8009636:	4601      	mov	r1, r0
 8009638:	d00b      	beq.n	8009652 <__lo0bits+0x22>
 800963a:	07da      	lsls	r2, r3, #31
 800963c:	d423      	bmi.n	8009686 <__lo0bits+0x56>
 800963e:	0798      	lsls	r0, r3, #30
 8009640:	bf49      	itett	mi
 8009642:	085b      	lsrmi	r3, r3, #1
 8009644:	089b      	lsrpl	r3, r3, #2
 8009646:	2001      	movmi	r0, #1
 8009648:	600b      	strmi	r3, [r1, #0]
 800964a:	bf5c      	itt	pl
 800964c:	600b      	strpl	r3, [r1, #0]
 800964e:	2002      	movpl	r0, #2
 8009650:	4770      	bx	lr
 8009652:	b298      	uxth	r0, r3
 8009654:	b9a8      	cbnz	r0, 8009682 <__lo0bits+0x52>
 8009656:	0c1b      	lsrs	r3, r3, #16
 8009658:	2010      	movs	r0, #16
 800965a:	b2da      	uxtb	r2, r3
 800965c:	b90a      	cbnz	r2, 8009662 <__lo0bits+0x32>
 800965e:	3008      	adds	r0, #8
 8009660:	0a1b      	lsrs	r3, r3, #8
 8009662:	071a      	lsls	r2, r3, #28
 8009664:	bf04      	itt	eq
 8009666:	091b      	lsreq	r3, r3, #4
 8009668:	3004      	addeq	r0, #4
 800966a:	079a      	lsls	r2, r3, #30
 800966c:	bf04      	itt	eq
 800966e:	089b      	lsreq	r3, r3, #2
 8009670:	3002      	addeq	r0, #2
 8009672:	07da      	lsls	r2, r3, #31
 8009674:	d403      	bmi.n	800967e <__lo0bits+0x4e>
 8009676:	085b      	lsrs	r3, r3, #1
 8009678:	f100 0001 	add.w	r0, r0, #1
 800967c:	d005      	beq.n	800968a <__lo0bits+0x5a>
 800967e:	600b      	str	r3, [r1, #0]
 8009680:	4770      	bx	lr
 8009682:	4610      	mov	r0, r2
 8009684:	e7e9      	b.n	800965a <__lo0bits+0x2a>
 8009686:	2000      	movs	r0, #0
 8009688:	4770      	bx	lr
 800968a:	2020      	movs	r0, #32
 800968c:	4770      	bx	lr
	...

08009690 <__i2b>:
 8009690:	b510      	push	{r4, lr}
 8009692:	460c      	mov	r4, r1
 8009694:	2101      	movs	r1, #1
 8009696:	f7ff feb9 	bl	800940c <_Balloc>
 800969a:	4602      	mov	r2, r0
 800969c:	b928      	cbnz	r0, 80096aa <__i2b+0x1a>
 800969e:	4b05      	ldr	r3, [pc, #20]	; (80096b4 <__i2b+0x24>)
 80096a0:	4805      	ldr	r0, [pc, #20]	; (80096b8 <__i2b+0x28>)
 80096a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80096a6:	f000 fe01 	bl	800a2ac <__assert_func>
 80096aa:	2301      	movs	r3, #1
 80096ac:	6144      	str	r4, [r0, #20]
 80096ae:	6103      	str	r3, [r0, #16]
 80096b0:	bd10      	pop	{r4, pc}
 80096b2:	bf00      	nop
 80096b4:	0800d730 	.word	0x0800d730
 80096b8:	0800d7bc 	.word	0x0800d7bc

080096bc <__multiply>:
 80096bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096c0:	4691      	mov	r9, r2
 80096c2:	690a      	ldr	r2, [r1, #16]
 80096c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80096c8:	429a      	cmp	r2, r3
 80096ca:	bfb8      	it	lt
 80096cc:	460b      	movlt	r3, r1
 80096ce:	460c      	mov	r4, r1
 80096d0:	bfbc      	itt	lt
 80096d2:	464c      	movlt	r4, r9
 80096d4:	4699      	movlt	r9, r3
 80096d6:	6927      	ldr	r7, [r4, #16]
 80096d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80096dc:	68a3      	ldr	r3, [r4, #8]
 80096de:	6861      	ldr	r1, [r4, #4]
 80096e0:	eb07 060a 	add.w	r6, r7, sl
 80096e4:	42b3      	cmp	r3, r6
 80096e6:	b085      	sub	sp, #20
 80096e8:	bfb8      	it	lt
 80096ea:	3101      	addlt	r1, #1
 80096ec:	f7ff fe8e 	bl	800940c <_Balloc>
 80096f0:	b930      	cbnz	r0, 8009700 <__multiply+0x44>
 80096f2:	4602      	mov	r2, r0
 80096f4:	4b44      	ldr	r3, [pc, #272]	; (8009808 <__multiply+0x14c>)
 80096f6:	4845      	ldr	r0, [pc, #276]	; (800980c <__multiply+0x150>)
 80096f8:	f240 115d 	movw	r1, #349	; 0x15d
 80096fc:	f000 fdd6 	bl	800a2ac <__assert_func>
 8009700:	f100 0514 	add.w	r5, r0, #20
 8009704:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009708:	462b      	mov	r3, r5
 800970a:	2200      	movs	r2, #0
 800970c:	4543      	cmp	r3, r8
 800970e:	d321      	bcc.n	8009754 <__multiply+0x98>
 8009710:	f104 0314 	add.w	r3, r4, #20
 8009714:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009718:	f109 0314 	add.w	r3, r9, #20
 800971c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009720:	9202      	str	r2, [sp, #8]
 8009722:	1b3a      	subs	r2, r7, r4
 8009724:	3a15      	subs	r2, #21
 8009726:	f022 0203 	bic.w	r2, r2, #3
 800972a:	3204      	adds	r2, #4
 800972c:	f104 0115 	add.w	r1, r4, #21
 8009730:	428f      	cmp	r7, r1
 8009732:	bf38      	it	cc
 8009734:	2204      	movcc	r2, #4
 8009736:	9201      	str	r2, [sp, #4]
 8009738:	9a02      	ldr	r2, [sp, #8]
 800973a:	9303      	str	r3, [sp, #12]
 800973c:	429a      	cmp	r2, r3
 800973e:	d80c      	bhi.n	800975a <__multiply+0x9e>
 8009740:	2e00      	cmp	r6, #0
 8009742:	dd03      	ble.n	800974c <__multiply+0x90>
 8009744:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009748:	2b00      	cmp	r3, #0
 800974a:	d05a      	beq.n	8009802 <__multiply+0x146>
 800974c:	6106      	str	r6, [r0, #16]
 800974e:	b005      	add	sp, #20
 8009750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009754:	f843 2b04 	str.w	r2, [r3], #4
 8009758:	e7d8      	b.n	800970c <__multiply+0x50>
 800975a:	f8b3 a000 	ldrh.w	sl, [r3]
 800975e:	f1ba 0f00 	cmp.w	sl, #0
 8009762:	d024      	beq.n	80097ae <__multiply+0xf2>
 8009764:	f104 0e14 	add.w	lr, r4, #20
 8009768:	46a9      	mov	r9, r5
 800976a:	f04f 0c00 	mov.w	ip, #0
 800976e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009772:	f8d9 1000 	ldr.w	r1, [r9]
 8009776:	fa1f fb82 	uxth.w	fp, r2
 800977a:	b289      	uxth	r1, r1
 800977c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009780:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009784:	f8d9 2000 	ldr.w	r2, [r9]
 8009788:	4461      	add	r1, ip
 800978a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800978e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009792:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009796:	b289      	uxth	r1, r1
 8009798:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800979c:	4577      	cmp	r7, lr
 800979e:	f849 1b04 	str.w	r1, [r9], #4
 80097a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80097a6:	d8e2      	bhi.n	800976e <__multiply+0xb2>
 80097a8:	9a01      	ldr	r2, [sp, #4]
 80097aa:	f845 c002 	str.w	ip, [r5, r2]
 80097ae:	9a03      	ldr	r2, [sp, #12]
 80097b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80097b4:	3304      	adds	r3, #4
 80097b6:	f1b9 0f00 	cmp.w	r9, #0
 80097ba:	d020      	beq.n	80097fe <__multiply+0x142>
 80097bc:	6829      	ldr	r1, [r5, #0]
 80097be:	f104 0c14 	add.w	ip, r4, #20
 80097c2:	46ae      	mov	lr, r5
 80097c4:	f04f 0a00 	mov.w	sl, #0
 80097c8:	f8bc b000 	ldrh.w	fp, [ip]
 80097cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80097d0:	fb09 220b 	mla	r2, r9, fp, r2
 80097d4:	4492      	add	sl, r2
 80097d6:	b289      	uxth	r1, r1
 80097d8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80097dc:	f84e 1b04 	str.w	r1, [lr], #4
 80097e0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80097e4:	f8be 1000 	ldrh.w	r1, [lr]
 80097e8:	0c12      	lsrs	r2, r2, #16
 80097ea:	fb09 1102 	mla	r1, r9, r2, r1
 80097ee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80097f2:	4567      	cmp	r7, ip
 80097f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80097f8:	d8e6      	bhi.n	80097c8 <__multiply+0x10c>
 80097fa:	9a01      	ldr	r2, [sp, #4]
 80097fc:	50a9      	str	r1, [r5, r2]
 80097fe:	3504      	adds	r5, #4
 8009800:	e79a      	b.n	8009738 <__multiply+0x7c>
 8009802:	3e01      	subs	r6, #1
 8009804:	e79c      	b.n	8009740 <__multiply+0x84>
 8009806:	bf00      	nop
 8009808:	0800d730 	.word	0x0800d730
 800980c:	0800d7bc 	.word	0x0800d7bc

08009810 <__pow5mult>:
 8009810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009814:	4615      	mov	r5, r2
 8009816:	f012 0203 	ands.w	r2, r2, #3
 800981a:	4606      	mov	r6, r0
 800981c:	460f      	mov	r7, r1
 800981e:	d007      	beq.n	8009830 <__pow5mult+0x20>
 8009820:	4c25      	ldr	r4, [pc, #148]	; (80098b8 <__pow5mult+0xa8>)
 8009822:	3a01      	subs	r2, #1
 8009824:	2300      	movs	r3, #0
 8009826:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800982a:	f7ff fe51 	bl	80094d0 <__multadd>
 800982e:	4607      	mov	r7, r0
 8009830:	10ad      	asrs	r5, r5, #2
 8009832:	d03d      	beq.n	80098b0 <__pow5mult+0xa0>
 8009834:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009836:	b97c      	cbnz	r4, 8009858 <__pow5mult+0x48>
 8009838:	2010      	movs	r0, #16
 800983a:	f7ff fdbf 	bl	80093bc <malloc>
 800983e:	4602      	mov	r2, r0
 8009840:	6270      	str	r0, [r6, #36]	; 0x24
 8009842:	b928      	cbnz	r0, 8009850 <__pow5mult+0x40>
 8009844:	4b1d      	ldr	r3, [pc, #116]	; (80098bc <__pow5mult+0xac>)
 8009846:	481e      	ldr	r0, [pc, #120]	; (80098c0 <__pow5mult+0xb0>)
 8009848:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800984c:	f000 fd2e 	bl	800a2ac <__assert_func>
 8009850:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009854:	6004      	str	r4, [r0, #0]
 8009856:	60c4      	str	r4, [r0, #12]
 8009858:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800985c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009860:	b94c      	cbnz	r4, 8009876 <__pow5mult+0x66>
 8009862:	f240 2171 	movw	r1, #625	; 0x271
 8009866:	4630      	mov	r0, r6
 8009868:	f7ff ff12 	bl	8009690 <__i2b>
 800986c:	2300      	movs	r3, #0
 800986e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009872:	4604      	mov	r4, r0
 8009874:	6003      	str	r3, [r0, #0]
 8009876:	f04f 0900 	mov.w	r9, #0
 800987a:	07eb      	lsls	r3, r5, #31
 800987c:	d50a      	bpl.n	8009894 <__pow5mult+0x84>
 800987e:	4639      	mov	r1, r7
 8009880:	4622      	mov	r2, r4
 8009882:	4630      	mov	r0, r6
 8009884:	f7ff ff1a 	bl	80096bc <__multiply>
 8009888:	4639      	mov	r1, r7
 800988a:	4680      	mov	r8, r0
 800988c:	4630      	mov	r0, r6
 800988e:	f7ff fdfd 	bl	800948c <_Bfree>
 8009892:	4647      	mov	r7, r8
 8009894:	106d      	asrs	r5, r5, #1
 8009896:	d00b      	beq.n	80098b0 <__pow5mult+0xa0>
 8009898:	6820      	ldr	r0, [r4, #0]
 800989a:	b938      	cbnz	r0, 80098ac <__pow5mult+0x9c>
 800989c:	4622      	mov	r2, r4
 800989e:	4621      	mov	r1, r4
 80098a0:	4630      	mov	r0, r6
 80098a2:	f7ff ff0b 	bl	80096bc <__multiply>
 80098a6:	6020      	str	r0, [r4, #0]
 80098a8:	f8c0 9000 	str.w	r9, [r0]
 80098ac:	4604      	mov	r4, r0
 80098ae:	e7e4      	b.n	800987a <__pow5mult+0x6a>
 80098b0:	4638      	mov	r0, r7
 80098b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098b6:	bf00      	nop
 80098b8:	0800d908 	.word	0x0800d908
 80098bc:	0800d6be 	.word	0x0800d6be
 80098c0:	0800d7bc 	.word	0x0800d7bc

080098c4 <__lshift>:
 80098c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098c8:	460c      	mov	r4, r1
 80098ca:	6849      	ldr	r1, [r1, #4]
 80098cc:	6923      	ldr	r3, [r4, #16]
 80098ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80098d2:	68a3      	ldr	r3, [r4, #8]
 80098d4:	4607      	mov	r7, r0
 80098d6:	4691      	mov	r9, r2
 80098d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80098dc:	f108 0601 	add.w	r6, r8, #1
 80098e0:	42b3      	cmp	r3, r6
 80098e2:	db0b      	blt.n	80098fc <__lshift+0x38>
 80098e4:	4638      	mov	r0, r7
 80098e6:	f7ff fd91 	bl	800940c <_Balloc>
 80098ea:	4605      	mov	r5, r0
 80098ec:	b948      	cbnz	r0, 8009902 <__lshift+0x3e>
 80098ee:	4602      	mov	r2, r0
 80098f0:	4b2a      	ldr	r3, [pc, #168]	; (800999c <__lshift+0xd8>)
 80098f2:	482b      	ldr	r0, [pc, #172]	; (80099a0 <__lshift+0xdc>)
 80098f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80098f8:	f000 fcd8 	bl	800a2ac <__assert_func>
 80098fc:	3101      	adds	r1, #1
 80098fe:	005b      	lsls	r3, r3, #1
 8009900:	e7ee      	b.n	80098e0 <__lshift+0x1c>
 8009902:	2300      	movs	r3, #0
 8009904:	f100 0114 	add.w	r1, r0, #20
 8009908:	f100 0210 	add.w	r2, r0, #16
 800990c:	4618      	mov	r0, r3
 800990e:	4553      	cmp	r3, sl
 8009910:	db37      	blt.n	8009982 <__lshift+0xbe>
 8009912:	6920      	ldr	r0, [r4, #16]
 8009914:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009918:	f104 0314 	add.w	r3, r4, #20
 800991c:	f019 091f 	ands.w	r9, r9, #31
 8009920:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009924:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009928:	d02f      	beq.n	800998a <__lshift+0xc6>
 800992a:	f1c9 0e20 	rsb	lr, r9, #32
 800992e:	468a      	mov	sl, r1
 8009930:	f04f 0c00 	mov.w	ip, #0
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	fa02 f209 	lsl.w	r2, r2, r9
 800993a:	ea42 020c 	orr.w	r2, r2, ip
 800993e:	f84a 2b04 	str.w	r2, [sl], #4
 8009942:	f853 2b04 	ldr.w	r2, [r3], #4
 8009946:	4298      	cmp	r0, r3
 8009948:	fa22 fc0e 	lsr.w	ip, r2, lr
 800994c:	d8f2      	bhi.n	8009934 <__lshift+0x70>
 800994e:	1b03      	subs	r3, r0, r4
 8009950:	3b15      	subs	r3, #21
 8009952:	f023 0303 	bic.w	r3, r3, #3
 8009956:	3304      	adds	r3, #4
 8009958:	f104 0215 	add.w	r2, r4, #21
 800995c:	4290      	cmp	r0, r2
 800995e:	bf38      	it	cc
 8009960:	2304      	movcc	r3, #4
 8009962:	f841 c003 	str.w	ip, [r1, r3]
 8009966:	f1bc 0f00 	cmp.w	ip, #0
 800996a:	d001      	beq.n	8009970 <__lshift+0xac>
 800996c:	f108 0602 	add.w	r6, r8, #2
 8009970:	3e01      	subs	r6, #1
 8009972:	4638      	mov	r0, r7
 8009974:	612e      	str	r6, [r5, #16]
 8009976:	4621      	mov	r1, r4
 8009978:	f7ff fd88 	bl	800948c <_Bfree>
 800997c:	4628      	mov	r0, r5
 800997e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009982:	f842 0f04 	str.w	r0, [r2, #4]!
 8009986:	3301      	adds	r3, #1
 8009988:	e7c1      	b.n	800990e <__lshift+0x4a>
 800998a:	3904      	subs	r1, #4
 800998c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009990:	f841 2f04 	str.w	r2, [r1, #4]!
 8009994:	4298      	cmp	r0, r3
 8009996:	d8f9      	bhi.n	800998c <__lshift+0xc8>
 8009998:	e7ea      	b.n	8009970 <__lshift+0xac>
 800999a:	bf00      	nop
 800999c:	0800d730 	.word	0x0800d730
 80099a0:	0800d7bc 	.word	0x0800d7bc

080099a4 <__mcmp>:
 80099a4:	b530      	push	{r4, r5, lr}
 80099a6:	6902      	ldr	r2, [r0, #16]
 80099a8:	690c      	ldr	r4, [r1, #16]
 80099aa:	1b12      	subs	r2, r2, r4
 80099ac:	d10e      	bne.n	80099cc <__mcmp+0x28>
 80099ae:	f100 0314 	add.w	r3, r0, #20
 80099b2:	3114      	adds	r1, #20
 80099b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80099b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80099bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80099c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80099c4:	42a5      	cmp	r5, r4
 80099c6:	d003      	beq.n	80099d0 <__mcmp+0x2c>
 80099c8:	d305      	bcc.n	80099d6 <__mcmp+0x32>
 80099ca:	2201      	movs	r2, #1
 80099cc:	4610      	mov	r0, r2
 80099ce:	bd30      	pop	{r4, r5, pc}
 80099d0:	4283      	cmp	r3, r0
 80099d2:	d3f3      	bcc.n	80099bc <__mcmp+0x18>
 80099d4:	e7fa      	b.n	80099cc <__mcmp+0x28>
 80099d6:	f04f 32ff 	mov.w	r2, #4294967295
 80099da:	e7f7      	b.n	80099cc <__mcmp+0x28>

080099dc <__mdiff>:
 80099dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e0:	460c      	mov	r4, r1
 80099e2:	4606      	mov	r6, r0
 80099e4:	4611      	mov	r1, r2
 80099e6:	4620      	mov	r0, r4
 80099e8:	4690      	mov	r8, r2
 80099ea:	f7ff ffdb 	bl	80099a4 <__mcmp>
 80099ee:	1e05      	subs	r5, r0, #0
 80099f0:	d110      	bne.n	8009a14 <__mdiff+0x38>
 80099f2:	4629      	mov	r1, r5
 80099f4:	4630      	mov	r0, r6
 80099f6:	f7ff fd09 	bl	800940c <_Balloc>
 80099fa:	b930      	cbnz	r0, 8009a0a <__mdiff+0x2e>
 80099fc:	4b3a      	ldr	r3, [pc, #232]	; (8009ae8 <__mdiff+0x10c>)
 80099fe:	4602      	mov	r2, r0
 8009a00:	f240 2132 	movw	r1, #562	; 0x232
 8009a04:	4839      	ldr	r0, [pc, #228]	; (8009aec <__mdiff+0x110>)
 8009a06:	f000 fc51 	bl	800a2ac <__assert_func>
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009a10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a14:	bfa4      	itt	ge
 8009a16:	4643      	movge	r3, r8
 8009a18:	46a0      	movge	r8, r4
 8009a1a:	4630      	mov	r0, r6
 8009a1c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009a20:	bfa6      	itte	ge
 8009a22:	461c      	movge	r4, r3
 8009a24:	2500      	movge	r5, #0
 8009a26:	2501      	movlt	r5, #1
 8009a28:	f7ff fcf0 	bl	800940c <_Balloc>
 8009a2c:	b920      	cbnz	r0, 8009a38 <__mdiff+0x5c>
 8009a2e:	4b2e      	ldr	r3, [pc, #184]	; (8009ae8 <__mdiff+0x10c>)
 8009a30:	4602      	mov	r2, r0
 8009a32:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009a36:	e7e5      	b.n	8009a04 <__mdiff+0x28>
 8009a38:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009a3c:	6926      	ldr	r6, [r4, #16]
 8009a3e:	60c5      	str	r5, [r0, #12]
 8009a40:	f104 0914 	add.w	r9, r4, #20
 8009a44:	f108 0514 	add.w	r5, r8, #20
 8009a48:	f100 0e14 	add.w	lr, r0, #20
 8009a4c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009a50:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009a54:	f108 0210 	add.w	r2, r8, #16
 8009a58:	46f2      	mov	sl, lr
 8009a5a:	2100      	movs	r1, #0
 8009a5c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009a60:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009a64:	fa1f f883 	uxth.w	r8, r3
 8009a68:	fa11 f18b 	uxtah	r1, r1, fp
 8009a6c:	0c1b      	lsrs	r3, r3, #16
 8009a6e:	eba1 0808 	sub.w	r8, r1, r8
 8009a72:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009a76:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009a7a:	fa1f f888 	uxth.w	r8, r8
 8009a7e:	1419      	asrs	r1, r3, #16
 8009a80:	454e      	cmp	r6, r9
 8009a82:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009a86:	f84a 3b04 	str.w	r3, [sl], #4
 8009a8a:	d8e7      	bhi.n	8009a5c <__mdiff+0x80>
 8009a8c:	1b33      	subs	r3, r6, r4
 8009a8e:	3b15      	subs	r3, #21
 8009a90:	f023 0303 	bic.w	r3, r3, #3
 8009a94:	3304      	adds	r3, #4
 8009a96:	3415      	adds	r4, #21
 8009a98:	42a6      	cmp	r6, r4
 8009a9a:	bf38      	it	cc
 8009a9c:	2304      	movcc	r3, #4
 8009a9e:	441d      	add	r5, r3
 8009aa0:	4473      	add	r3, lr
 8009aa2:	469e      	mov	lr, r3
 8009aa4:	462e      	mov	r6, r5
 8009aa6:	4566      	cmp	r6, ip
 8009aa8:	d30e      	bcc.n	8009ac8 <__mdiff+0xec>
 8009aaa:	f10c 0203 	add.w	r2, ip, #3
 8009aae:	1b52      	subs	r2, r2, r5
 8009ab0:	f022 0203 	bic.w	r2, r2, #3
 8009ab4:	3d03      	subs	r5, #3
 8009ab6:	45ac      	cmp	ip, r5
 8009ab8:	bf38      	it	cc
 8009aba:	2200      	movcc	r2, #0
 8009abc:	441a      	add	r2, r3
 8009abe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009ac2:	b17b      	cbz	r3, 8009ae4 <__mdiff+0x108>
 8009ac4:	6107      	str	r7, [r0, #16]
 8009ac6:	e7a3      	b.n	8009a10 <__mdiff+0x34>
 8009ac8:	f856 8b04 	ldr.w	r8, [r6], #4
 8009acc:	fa11 f288 	uxtah	r2, r1, r8
 8009ad0:	1414      	asrs	r4, r2, #16
 8009ad2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009ad6:	b292      	uxth	r2, r2
 8009ad8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009adc:	f84e 2b04 	str.w	r2, [lr], #4
 8009ae0:	1421      	asrs	r1, r4, #16
 8009ae2:	e7e0      	b.n	8009aa6 <__mdiff+0xca>
 8009ae4:	3f01      	subs	r7, #1
 8009ae6:	e7ea      	b.n	8009abe <__mdiff+0xe2>
 8009ae8:	0800d730 	.word	0x0800d730
 8009aec:	0800d7bc 	.word	0x0800d7bc

08009af0 <__ulp>:
 8009af0:	b082      	sub	sp, #8
 8009af2:	ed8d 0b00 	vstr	d0, [sp]
 8009af6:	9b01      	ldr	r3, [sp, #4]
 8009af8:	4912      	ldr	r1, [pc, #72]	; (8009b44 <__ulp+0x54>)
 8009afa:	4019      	ands	r1, r3
 8009afc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009b00:	2900      	cmp	r1, #0
 8009b02:	dd05      	ble.n	8009b10 <__ulp+0x20>
 8009b04:	2200      	movs	r2, #0
 8009b06:	460b      	mov	r3, r1
 8009b08:	ec43 2b10 	vmov	d0, r2, r3
 8009b0c:	b002      	add	sp, #8
 8009b0e:	4770      	bx	lr
 8009b10:	4249      	negs	r1, r1
 8009b12:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009b16:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009b1a:	f04f 0200 	mov.w	r2, #0
 8009b1e:	f04f 0300 	mov.w	r3, #0
 8009b22:	da04      	bge.n	8009b2e <__ulp+0x3e>
 8009b24:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009b28:	fa41 f300 	asr.w	r3, r1, r0
 8009b2c:	e7ec      	b.n	8009b08 <__ulp+0x18>
 8009b2e:	f1a0 0114 	sub.w	r1, r0, #20
 8009b32:	291e      	cmp	r1, #30
 8009b34:	bfda      	itte	le
 8009b36:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009b3a:	fa20 f101 	lsrle.w	r1, r0, r1
 8009b3e:	2101      	movgt	r1, #1
 8009b40:	460a      	mov	r2, r1
 8009b42:	e7e1      	b.n	8009b08 <__ulp+0x18>
 8009b44:	7ff00000 	.word	0x7ff00000

08009b48 <__b2d>:
 8009b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b4a:	6905      	ldr	r5, [r0, #16]
 8009b4c:	f100 0714 	add.w	r7, r0, #20
 8009b50:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009b54:	1f2e      	subs	r6, r5, #4
 8009b56:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009b5a:	4620      	mov	r0, r4
 8009b5c:	f7ff fd48 	bl	80095f0 <__hi0bits>
 8009b60:	f1c0 0320 	rsb	r3, r0, #32
 8009b64:	280a      	cmp	r0, #10
 8009b66:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009be4 <__b2d+0x9c>
 8009b6a:	600b      	str	r3, [r1, #0]
 8009b6c:	dc14      	bgt.n	8009b98 <__b2d+0x50>
 8009b6e:	f1c0 0e0b 	rsb	lr, r0, #11
 8009b72:	fa24 f10e 	lsr.w	r1, r4, lr
 8009b76:	42b7      	cmp	r7, r6
 8009b78:	ea41 030c 	orr.w	r3, r1, ip
 8009b7c:	bf34      	ite	cc
 8009b7e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009b82:	2100      	movcs	r1, #0
 8009b84:	3015      	adds	r0, #21
 8009b86:	fa04 f000 	lsl.w	r0, r4, r0
 8009b8a:	fa21 f10e 	lsr.w	r1, r1, lr
 8009b8e:	ea40 0201 	orr.w	r2, r0, r1
 8009b92:	ec43 2b10 	vmov	d0, r2, r3
 8009b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b98:	42b7      	cmp	r7, r6
 8009b9a:	bf3a      	itte	cc
 8009b9c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009ba0:	f1a5 0608 	subcc.w	r6, r5, #8
 8009ba4:	2100      	movcs	r1, #0
 8009ba6:	380b      	subs	r0, #11
 8009ba8:	d017      	beq.n	8009bda <__b2d+0x92>
 8009baa:	f1c0 0c20 	rsb	ip, r0, #32
 8009bae:	fa04 f500 	lsl.w	r5, r4, r0
 8009bb2:	42be      	cmp	r6, r7
 8009bb4:	fa21 f40c 	lsr.w	r4, r1, ip
 8009bb8:	ea45 0504 	orr.w	r5, r5, r4
 8009bbc:	bf8c      	ite	hi
 8009bbe:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009bc2:	2400      	movls	r4, #0
 8009bc4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009bc8:	fa01 f000 	lsl.w	r0, r1, r0
 8009bcc:	fa24 f40c 	lsr.w	r4, r4, ip
 8009bd0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009bd4:	ea40 0204 	orr.w	r2, r0, r4
 8009bd8:	e7db      	b.n	8009b92 <__b2d+0x4a>
 8009bda:	ea44 030c 	orr.w	r3, r4, ip
 8009bde:	460a      	mov	r2, r1
 8009be0:	e7d7      	b.n	8009b92 <__b2d+0x4a>
 8009be2:	bf00      	nop
 8009be4:	3ff00000 	.word	0x3ff00000

08009be8 <__d2b>:
 8009be8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009bec:	4689      	mov	r9, r1
 8009bee:	2101      	movs	r1, #1
 8009bf0:	ec57 6b10 	vmov	r6, r7, d0
 8009bf4:	4690      	mov	r8, r2
 8009bf6:	f7ff fc09 	bl	800940c <_Balloc>
 8009bfa:	4604      	mov	r4, r0
 8009bfc:	b930      	cbnz	r0, 8009c0c <__d2b+0x24>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	4b25      	ldr	r3, [pc, #148]	; (8009c98 <__d2b+0xb0>)
 8009c02:	4826      	ldr	r0, [pc, #152]	; (8009c9c <__d2b+0xb4>)
 8009c04:	f240 310a 	movw	r1, #778	; 0x30a
 8009c08:	f000 fb50 	bl	800a2ac <__assert_func>
 8009c0c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009c10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009c14:	bb35      	cbnz	r5, 8009c64 <__d2b+0x7c>
 8009c16:	2e00      	cmp	r6, #0
 8009c18:	9301      	str	r3, [sp, #4]
 8009c1a:	d028      	beq.n	8009c6e <__d2b+0x86>
 8009c1c:	4668      	mov	r0, sp
 8009c1e:	9600      	str	r6, [sp, #0]
 8009c20:	f7ff fd06 	bl	8009630 <__lo0bits>
 8009c24:	9900      	ldr	r1, [sp, #0]
 8009c26:	b300      	cbz	r0, 8009c6a <__d2b+0x82>
 8009c28:	9a01      	ldr	r2, [sp, #4]
 8009c2a:	f1c0 0320 	rsb	r3, r0, #32
 8009c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c32:	430b      	orrs	r3, r1
 8009c34:	40c2      	lsrs	r2, r0
 8009c36:	6163      	str	r3, [r4, #20]
 8009c38:	9201      	str	r2, [sp, #4]
 8009c3a:	9b01      	ldr	r3, [sp, #4]
 8009c3c:	61a3      	str	r3, [r4, #24]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	bf14      	ite	ne
 8009c42:	2202      	movne	r2, #2
 8009c44:	2201      	moveq	r2, #1
 8009c46:	6122      	str	r2, [r4, #16]
 8009c48:	b1d5      	cbz	r5, 8009c80 <__d2b+0x98>
 8009c4a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009c4e:	4405      	add	r5, r0
 8009c50:	f8c9 5000 	str.w	r5, [r9]
 8009c54:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009c58:	f8c8 0000 	str.w	r0, [r8]
 8009c5c:	4620      	mov	r0, r4
 8009c5e:	b003      	add	sp, #12
 8009c60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c68:	e7d5      	b.n	8009c16 <__d2b+0x2e>
 8009c6a:	6161      	str	r1, [r4, #20]
 8009c6c:	e7e5      	b.n	8009c3a <__d2b+0x52>
 8009c6e:	a801      	add	r0, sp, #4
 8009c70:	f7ff fcde 	bl	8009630 <__lo0bits>
 8009c74:	9b01      	ldr	r3, [sp, #4]
 8009c76:	6163      	str	r3, [r4, #20]
 8009c78:	2201      	movs	r2, #1
 8009c7a:	6122      	str	r2, [r4, #16]
 8009c7c:	3020      	adds	r0, #32
 8009c7e:	e7e3      	b.n	8009c48 <__d2b+0x60>
 8009c80:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009c84:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009c88:	f8c9 0000 	str.w	r0, [r9]
 8009c8c:	6918      	ldr	r0, [r3, #16]
 8009c8e:	f7ff fcaf 	bl	80095f0 <__hi0bits>
 8009c92:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009c96:	e7df      	b.n	8009c58 <__d2b+0x70>
 8009c98:	0800d730 	.word	0x0800d730
 8009c9c:	0800d7bc 	.word	0x0800d7bc

08009ca0 <__ratio>:
 8009ca0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ca4:	4688      	mov	r8, r1
 8009ca6:	4669      	mov	r1, sp
 8009ca8:	4681      	mov	r9, r0
 8009caa:	f7ff ff4d 	bl	8009b48 <__b2d>
 8009cae:	a901      	add	r1, sp, #4
 8009cb0:	4640      	mov	r0, r8
 8009cb2:	ec55 4b10 	vmov	r4, r5, d0
 8009cb6:	f7ff ff47 	bl	8009b48 <__b2d>
 8009cba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009cbe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009cc2:	eba3 0c02 	sub.w	ip, r3, r2
 8009cc6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009cca:	1a9b      	subs	r3, r3, r2
 8009ccc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009cd0:	ec51 0b10 	vmov	r0, r1, d0
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	bfd6      	itet	le
 8009cd8:	460a      	movle	r2, r1
 8009cda:	462a      	movgt	r2, r5
 8009cdc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009ce0:	468b      	mov	fp, r1
 8009ce2:	462f      	mov	r7, r5
 8009ce4:	bfd4      	ite	le
 8009ce6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009cea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009cee:	4620      	mov	r0, r4
 8009cf0:	ee10 2a10 	vmov	r2, s0
 8009cf4:	465b      	mov	r3, fp
 8009cf6:	4639      	mov	r1, r7
 8009cf8:	f7f6 fdb8 	bl	800086c <__aeabi_ddiv>
 8009cfc:	ec41 0b10 	vmov	d0, r0, r1
 8009d00:	b003      	add	sp, #12
 8009d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009d06 <__copybits>:
 8009d06:	3901      	subs	r1, #1
 8009d08:	b570      	push	{r4, r5, r6, lr}
 8009d0a:	1149      	asrs	r1, r1, #5
 8009d0c:	6914      	ldr	r4, [r2, #16]
 8009d0e:	3101      	adds	r1, #1
 8009d10:	f102 0314 	add.w	r3, r2, #20
 8009d14:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009d18:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009d1c:	1f05      	subs	r5, r0, #4
 8009d1e:	42a3      	cmp	r3, r4
 8009d20:	d30c      	bcc.n	8009d3c <__copybits+0x36>
 8009d22:	1aa3      	subs	r3, r4, r2
 8009d24:	3b11      	subs	r3, #17
 8009d26:	f023 0303 	bic.w	r3, r3, #3
 8009d2a:	3211      	adds	r2, #17
 8009d2c:	42a2      	cmp	r2, r4
 8009d2e:	bf88      	it	hi
 8009d30:	2300      	movhi	r3, #0
 8009d32:	4418      	add	r0, r3
 8009d34:	2300      	movs	r3, #0
 8009d36:	4288      	cmp	r0, r1
 8009d38:	d305      	bcc.n	8009d46 <__copybits+0x40>
 8009d3a:	bd70      	pop	{r4, r5, r6, pc}
 8009d3c:	f853 6b04 	ldr.w	r6, [r3], #4
 8009d40:	f845 6f04 	str.w	r6, [r5, #4]!
 8009d44:	e7eb      	b.n	8009d1e <__copybits+0x18>
 8009d46:	f840 3b04 	str.w	r3, [r0], #4
 8009d4a:	e7f4      	b.n	8009d36 <__copybits+0x30>

08009d4c <__any_on>:
 8009d4c:	f100 0214 	add.w	r2, r0, #20
 8009d50:	6900      	ldr	r0, [r0, #16]
 8009d52:	114b      	asrs	r3, r1, #5
 8009d54:	4298      	cmp	r0, r3
 8009d56:	b510      	push	{r4, lr}
 8009d58:	db11      	blt.n	8009d7e <__any_on+0x32>
 8009d5a:	dd0a      	ble.n	8009d72 <__any_on+0x26>
 8009d5c:	f011 011f 	ands.w	r1, r1, #31
 8009d60:	d007      	beq.n	8009d72 <__any_on+0x26>
 8009d62:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009d66:	fa24 f001 	lsr.w	r0, r4, r1
 8009d6a:	fa00 f101 	lsl.w	r1, r0, r1
 8009d6e:	428c      	cmp	r4, r1
 8009d70:	d10b      	bne.n	8009d8a <__any_on+0x3e>
 8009d72:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d803      	bhi.n	8009d82 <__any_on+0x36>
 8009d7a:	2000      	movs	r0, #0
 8009d7c:	bd10      	pop	{r4, pc}
 8009d7e:	4603      	mov	r3, r0
 8009d80:	e7f7      	b.n	8009d72 <__any_on+0x26>
 8009d82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009d86:	2900      	cmp	r1, #0
 8009d88:	d0f5      	beq.n	8009d76 <__any_on+0x2a>
 8009d8a:	2001      	movs	r0, #1
 8009d8c:	e7f6      	b.n	8009d7c <__any_on+0x30>

08009d8e <_calloc_r>:
 8009d8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d90:	fba1 2402 	umull	r2, r4, r1, r2
 8009d94:	b94c      	cbnz	r4, 8009daa <_calloc_r+0x1c>
 8009d96:	4611      	mov	r1, r2
 8009d98:	9201      	str	r2, [sp, #4]
 8009d9a:	f000 f87b 	bl	8009e94 <_malloc_r>
 8009d9e:	9a01      	ldr	r2, [sp, #4]
 8009da0:	4605      	mov	r5, r0
 8009da2:	b930      	cbnz	r0, 8009db2 <_calloc_r+0x24>
 8009da4:	4628      	mov	r0, r5
 8009da6:	b003      	add	sp, #12
 8009da8:	bd30      	pop	{r4, r5, pc}
 8009daa:	220c      	movs	r2, #12
 8009dac:	6002      	str	r2, [r0, #0]
 8009dae:	2500      	movs	r5, #0
 8009db0:	e7f8      	b.n	8009da4 <_calloc_r+0x16>
 8009db2:	4621      	mov	r1, r4
 8009db4:	f7fc fbc0 	bl	8006538 <memset>
 8009db8:	e7f4      	b.n	8009da4 <_calloc_r+0x16>
	...

08009dbc <_free_r>:
 8009dbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009dbe:	2900      	cmp	r1, #0
 8009dc0:	d044      	beq.n	8009e4c <_free_r+0x90>
 8009dc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dc6:	9001      	str	r0, [sp, #4]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	f1a1 0404 	sub.w	r4, r1, #4
 8009dce:	bfb8      	it	lt
 8009dd0:	18e4      	addlt	r4, r4, r3
 8009dd2:	f000 fab5 	bl	800a340 <__malloc_lock>
 8009dd6:	4a1e      	ldr	r2, [pc, #120]	; (8009e50 <_free_r+0x94>)
 8009dd8:	9801      	ldr	r0, [sp, #4]
 8009dda:	6813      	ldr	r3, [r2, #0]
 8009ddc:	b933      	cbnz	r3, 8009dec <_free_r+0x30>
 8009dde:	6063      	str	r3, [r4, #4]
 8009de0:	6014      	str	r4, [r2, #0]
 8009de2:	b003      	add	sp, #12
 8009de4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009de8:	f000 bab0 	b.w	800a34c <__malloc_unlock>
 8009dec:	42a3      	cmp	r3, r4
 8009dee:	d908      	bls.n	8009e02 <_free_r+0x46>
 8009df0:	6825      	ldr	r5, [r4, #0]
 8009df2:	1961      	adds	r1, r4, r5
 8009df4:	428b      	cmp	r3, r1
 8009df6:	bf01      	itttt	eq
 8009df8:	6819      	ldreq	r1, [r3, #0]
 8009dfa:	685b      	ldreq	r3, [r3, #4]
 8009dfc:	1949      	addeq	r1, r1, r5
 8009dfe:	6021      	streq	r1, [r4, #0]
 8009e00:	e7ed      	b.n	8009dde <_free_r+0x22>
 8009e02:	461a      	mov	r2, r3
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	b10b      	cbz	r3, 8009e0c <_free_r+0x50>
 8009e08:	42a3      	cmp	r3, r4
 8009e0a:	d9fa      	bls.n	8009e02 <_free_r+0x46>
 8009e0c:	6811      	ldr	r1, [r2, #0]
 8009e0e:	1855      	adds	r5, r2, r1
 8009e10:	42a5      	cmp	r5, r4
 8009e12:	d10b      	bne.n	8009e2c <_free_r+0x70>
 8009e14:	6824      	ldr	r4, [r4, #0]
 8009e16:	4421      	add	r1, r4
 8009e18:	1854      	adds	r4, r2, r1
 8009e1a:	42a3      	cmp	r3, r4
 8009e1c:	6011      	str	r1, [r2, #0]
 8009e1e:	d1e0      	bne.n	8009de2 <_free_r+0x26>
 8009e20:	681c      	ldr	r4, [r3, #0]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	6053      	str	r3, [r2, #4]
 8009e26:	4421      	add	r1, r4
 8009e28:	6011      	str	r1, [r2, #0]
 8009e2a:	e7da      	b.n	8009de2 <_free_r+0x26>
 8009e2c:	d902      	bls.n	8009e34 <_free_r+0x78>
 8009e2e:	230c      	movs	r3, #12
 8009e30:	6003      	str	r3, [r0, #0]
 8009e32:	e7d6      	b.n	8009de2 <_free_r+0x26>
 8009e34:	6825      	ldr	r5, [r4, #0]
 8009e36:	1961      	adds	r1, r4, r5
 8009e38:	428b      	cmp	r3, r1
 8009e3a:	bf04      	itt	eq
 8009e3c:	6819      	ldreq	r1, [r3, #0]
 8009e3e:	685b      	ldreq	r3, [r3, #4]
 8009e40:	6063      	str	r3, [r4, #4]
 8009e42:	bf04      	itt	eq
 8009e44:	1949      	addeq	r1, r1, r5
 8009e46:	6021      	streq	r1, [r4, #0]
 8009e48:	6054      	str	r4, [r2, #4]
 8009e4a:	e7ca      	b.n	8009de2 <_free_r+0x26>
 8009e4c:	b003      	add	sp, #12
 8009e4e:	bd30      	pop	{r4, r5, pc}
 8009e50:	2000053c 	.word	0x2000053c

08009e54 <sbrk_aligned>:
 8009e54:	b570      	push	{r4, r5, r6, lr}
 8009e56:	4e0e      	ldr	r6, [pc, #56]	; (8009e90 <sbrk_aligned+0x3c>)
 8009e58:	460c      	mov	r4, r1
 8009e5a:	6831      	ldr	r1, [r6, #0]
 8009e5c:	4605      	mov	r5, r0
 8009e5e:	b911      	cbnz	r1, 8009e66 <sbrk_aligned+0x12>
 8009e60:	f000 f9f2 	bl	800a248 <_sbrk_r>
 8009e64:	6030      	str	r0, [r6, #0]
 8009e66:	4621      	mov	r1, r4
 8009e68:	4628      	mov	r0, r5
 8009e6a:	f000 f9ed 	bl	800a248 <_sbrk_r>
 8009e6e:	1c43      	adds	r3, r0, #1
 8009e70:	d00a      	beq.n	8009e88 <sbrk_aligned+0x34>
 8009e72:	1cc4      	adds	r4, r0, #3
 8009e74:	f024 0403 	bic.w	r4, r4, #3
 8009e78:	42a0      	cmp	r0, r4
 8009e7a:	d007      	beq.n	8009e8c <sbrk_aligned+0x38>
 8009e7c:	1a21      	subs	r1, r4, r0
 8009e7e:	4628      	mov	r0, r5
 8009e80:	f000 f9e2 	bl	800a248 <_sbrk_r>
 8009e84:	3001      	adds	r0, #1
 8009e86:	d101      	bne.n	8009e8c <sbrk_aligned+0x38>
 8009e88:	f04f 34ff 	mov.w	r4, #4294967295
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	bd70      	pop	{r4, r5, r6, pc}
 8009e90:	20000540 	.word	0x20000540

08009e94 <_malloc_r>:
 8009e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e98:	1ccd      	adds	r5, r1, #3
 8009e9a:	f025 0503 	bic.w	r5, r5, #3
 8009e9e:	3508      	adds	r5, #8
 8009ea0:	2d0c      	cmp	r5, #12
 8009ea2:	bf38      	it	cc
 8009ea4:	250c      	movcc	r5, #12
 8009ea6:	2d00      	cmp	r5, #0
 8009ea8:	4607      	mov	r7, r0
 8009eaa:	db01      	blt.n	8009eb0 <_malloc_r+0x1c>
 8009eac:	42a9      	cmp	r1, r5
 8009eae:	d905      	bls.n	8009ebc <_malloc_r+0x28>
 8009eb0:	230c      	movs	r3, #12
 8009eb2:	603b      	str	r3, [r7, #0]
 8009eb4:	2600      	movs	r6, #0
 8009eb6:	4630      	mov	r0, r6
 8009eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ebc:	4e2e      	ldr	r6, [pc, #184]	; (8009f78 <_malloc_r+0xe4>)
 8009ebe:	f000 fa3f 	bl	800a340 <__malloc_lock>
 8009ec2:	6833      	ldr	r3, [r6, #0]
 8009ec4:	461c      	mov	r4, r3
 8009ec6:	bb34      	cbnz	r4, 8009f16 <_malloc_r+0x82>
 8009ec8:	4629      	mov	r1, r5
 8009eca:	4638      	mov	r0, r7
 8009ecc:	f7ff ffc2 	bl	8009e54 <sbrk_aligned>
 8009ed0:	1c43      	adds	r3, r0, #1
 8009ed2:	4604      	mov	r4, r0
 8009ed4:	d14d      	bne.n	8009f72 <_malloc_r+0xde>
 8009ed6:	6834      	ldr	r4, [r6, #0]
 8009ed8:	4626      	mov	r6, r4
 8009eda:	2e00      	cmp	r6, #0
 8009edc:	d140      	bne.n	8009f60 <_malloc_r+0xcc>
 8009ede:	6823      	ldr	r3, [r4, #0]
 8009ee0:	4631      	mov	r1, r6
 8009ee2:	4638      	mov	r0, r7
 8009ee4:	eb04 0803 	add.w	r8, r4, r3
 8009ee8:	f000 f9ae 	bl	800a248 <_sbrk_r>
 8009eec:	4580      	cmp	r8, r0
 8009eee:	d13a      	bne.n	8009f66 <_malloc_r+0xd2>
 8009ef0:	6821      	ldr	r1, [r4, #0]
 8009ef2:	3503      	adds	r5, #3
 8009ef4:	1a6d      	subs	r5, r5, r1
 8009ef6:	f025 0503 	bic.w	r5, r5, #3
 8009efa:	3508      	adds	r5, #8
 8009efc:	2d0c      	cmp	r5, #12
 8009efe:	bf38      	it	cc
 8009f00:	250c      	movcc	r5, #12
 8009f02:	4629      	mov	r1, r5
 8009f04:	4638      	mov	r0, r7
 8009f06:	f7ff ffa5 	bl	8009e54 <sbrk_aligned>
 8009f0a:	3001      	adds	r0, #1
 8009f0c:	d02b      	beq.n	8009f66 <_malloc_r+0xd2>
 8009f0e:	6823      	ldr	r3, [r4, #0]
 8009f10:	442b      	add	r3, r5
 8009f12:	6023      	str	r3, [r4, #0]
 8009f14:	e00e      	b.n	8009f34 <_malloc_r+0xa0>
 8009f16:	6822      	ldr	r2, [r4, #0]
 8009f18:	1b52      	subs	r2, r2, r5
 8009f1a:	d41e      	bmi.n	8009f5a <_malloc_r+0xc6>
 8009f1c:	2a0b      	cmp	r2, #11
 8009f1e:	d916      	bls.n	8009f4e <_malloc_r+0xba>
 8009f20:	1961      	adds	r1, r4, r5
 8009f22:	42a3      	cmp	r3, r4
 8009f24:	6025      	str	r5, [r4, #0]
 8009f26:	bf18      	it	ne
 8009f28:	6059      	strne	r1, [r3, #4]
 8009f2a:	6863      	ldr	r3, [r4, #4]
 8009f2c:	bf08      	it	eq
 8009f2e:	6031      	streq	r1, [r6, #0]
 8009f30:	5162      	str	r2, [r4, r5]
 8009f32:	604b      	str	r3, [r1, #4]
 8009f34:	4638      	mov	r0, r7
 8009f36:	f104 060b 	add.w	r6, r4, #11
 8009f3a:	f000 fa07 	bl	800a34c <__malloc_unlock>
 8009f3e:	f026 0607 	bic.w	r6, r6, #7
 8009f42:	1d23      	adds	r3, r4, #4
 8009f44:	1af2      	subs	r2, r6, r3
 8009f46:	d0b6      	beq.n	8009eb6 <_malloc_r+0x22>
 8009f48:	1b9b      	subs	r3, r3, r6
 8009f4a:	50a3      	str	r3, [r4, r2]
 8009f4c:	e7b3      	b.n	8009eb6 <_malloc_r+0x22>
 8009f4e:	6862      	ldr	r2, [r4, #4]
 8009f50:	42a3      	cmp	r3, r4
 8009f52:	bf0c      	ite	eq
 8009f54:	6032      	streq	r2, [r6, #0]
 8009f56:	605a      	strne	r2, [r3, #4]
 8009f58:	e7ec      	b.n	8009f34 <_malloc_r+0xa0>
 8009f5a:	4623      	mov	r3, r4
 8009f5c:	6864      	ldr	r4, [r4, #4]
 8009f5e:	e7b2      	b.n	8009ec6 <_malloc_r+0x32>
 8009f60:	4634      	mov	r4, r6
 8009f62:	6876      	ldr	r6, [r6, #4]
 8009f64:	e7b9      	b.n	8009eda <_malloc_r+0x46>
 8009f66:	230c      	movs	r3, #12
 8009f68:	603b      	str	r3, [r7, #0]
 8009f6a:	4638      	mov	r0, r7
 8009f6c:	f000 f9ee 	bl	800a34c <__malloc_unlock>
 8009f70:	e7a1      	b.n	8009eb6 <_malloc_r+0x22>
 8009f72:	6025      	str	r5, [r4, #0]
 8009f74:	e7de      	b.n	8009f34 <_malloc_r+0xa0>
 8009f76:	bf00      	nop
 8009f78:	2000053c 	.word	0x2000053c

08009f7c <__ssputs_r>:
 8009f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f80:	688e      	ldr	r6, [r1, #8]
 8009f82:	429e      	cmp	r6, r3
 8009f84:	4682      	mov	sl, r0
 8009f86:	460c      	mov	r4, r1
 8009f88:	4690      	mov	r8, r2
 8009f8a:	461f      	mov	r7, r3
 8009f8c:	d838      	bhi.n	800a000 <__ssputs_r+0x84>
 8009f8e:	898a      	ldrh	r2, [r1, #12]
 8009f90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f94:	d032      	beq.n	8009ffc <__ssputs_r+0x80>
 8009f96:	6825      	ldr	r5, [r4, #0]
 8009f98:	6909      	ldr	r1, [r1, #16]
 8009f9a:	eba5 0901 	sub.w	r9, r5, r1
 8009f9e:	6965      	ldr	r5, [r4, #20]
 8009fa0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009fa4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009fa8:	3301      	adds	r3, #1
 8009faa:	444b      	add	r3, r9
 8009fac:	106d      	asrs	r5, r5, #1
 8009fae:	429d      	cmp	r5, r3
 8009fb0:	bf38      	it	cc
 8009fb2:	461d      	movcc	r5, r3
 8009fb4:	0553      	lsls	r3, r2, #21
 8009fb6:	d531      	bpl.n	800a01c <__ssputs_r+0xa0>
 8009fb8:	4629      	mov	r1, r5
 8009fba:	f7ff ff6b 	bl	8009e94 <_malloc_r>
 8009fbe:	4606      	mov	r6, r0
 8009fc0:	b950      	cbnz	r0, 8009fd8 <__ssputs_r+0x5c>
 8009fc2:	230c      	movs	r3, #12
 8009fc4:	f8ca 3000 	str.w	r3, [sl]
 8009fc8:	89a3      	ldrh	r3, [r4, #12]
 8009fca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fce:	81a3      	strh	r3, [r4, #12]
 8009fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8009fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fd8:	6921      	ldr	r1, [r4, #16]
 8009fda:	464a      	mov	r2, r9
 8009fdc:	f7ff fa08 	bl	80093f0 <memcpy>
 8009fe0:	89a3      	ldrh	r3, [r4, #12]
 8009fe2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fea:	81a3      	strh	r3, [r4, #12]
 8009fec:	6126      	str	r6, [r4, #16]
 8009fee:	6165      	str	r5, [r4, #20]
 8009ff0:	444e      	add	r6, r9
 8009ff2:	eba5 0509 	sub.w	r5, r5, r9
 8009ff6:	6026      	str	r6, [r4, #0]
 8009ff8:	60a5      	str	r5, [r4, #8]
 8009ffa:	463e      	mov	r6, r7
 8009ffc:	42be      	cmp	r6, r7
 8009ffe:	d900      	bls.n	800a002 <__ssputs_r+0x86>
 800a000:	463e      	mov	r6, r7
 800a002:	6820      	ldr	r0, [r4, #0]
 800a004:	4632      	mov	r2, r6
 800a006:	4641      	mov	r1, r8
 800a008:	f000 f980 	bl	800a30c <memmove>
 800a00c:	68a3      	ldr	r3, [r4, #8]
 800a00e:	1b9b      	subs	r3, r3, r6
 800a010:	60a3      	str	r3, [r4, #8]
 800a012:	6823      	ldr	r3, [r4, #0]
 800a014:	4433      	add	r3, r6
 800a016:	6023      	str	r3, [r4, #0]
 800a018:	2000      	movs	r0, #0
 800a01a:	e7db      	b.n	8009fd4 <__ssputs_r+0x58>
 800a01c:	462a      	mov	r2, r5
 800a01e:	f000 f99b 	bl	800a358 <_realloc_r>
 800a022:	4606      	mov	r6, r0
 800a024:	2800      	cmp	r0, #0
 800a026:	d1e1      	bne.n	8009fec <__ssputs_r+0x70>
 800a028:	6921      	ldr	r1, [r4, #16]
 800a02a:	4650      	mov	r0, sl
 800a02c:	f7ff fec6 	bl	8009dbc <_free_r>
 800a030:	e7c7      	b.n	8009fc2 <__ssputs_r+0x46>
	...

0800a034 <_svfiprintf_r>:
 800a034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a038:	4698      	mov	r8, r3
 800a03a:	898b      	ldrh	r3, [r1, #12]
 800a03c:	061b      	lsls	r3, r3, #24
 800a03e:	b09d      	sub	sp, #116	; 0x74
 800a040:	4607      	mov	r7, r0
 800a042:	460d      	mov	r5, r1
 800a044:	4614      	mov	r4, r2
 800a046:	d50e      	bpl.n	800a066 <_svfiprintf_r+0x32>
 800a048:	690b      	ldr	r3, [r1, #16]
 800a04a:	b963      	cbnz	r3, 800a066 <_svfiprintf_r+0x32>
 800a04c:	2140      	movs	r1, #64	; 0x40
 800a04e:	f7ff ff21 	bl	8009e94 <_malloc_r>
 800a052:	6028      	str	r0, [r5, #0]
 800a054:	6128      	str	r0, [r5, #16]
 800a056:	b920      	cbnz	r0, 800a062 <_svfiprintf_r+0x2e>
 800a058:	230c      	movs	r3, #12
 800a05a:	603b      	str	r3, [r7, #0]
 800a05c:	f04f 30ff 	mov.w	r0, #4294967295
 800a060:	e0d1      	b.n	800a206 <_svfiprintf_r+0x1d2>
 800a062:	2340      	movs	r3, #64	; 0x40
 800a064:	616b      	str	r3, [r5, #20]
 800a066:	2300      	movs	r3, #0
 800a068:	9309      	str	r3, [sp, #36]	; 0x24
 800a06a:	2320      	movs	r3, #32
 800a06c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a070:	f8cd 800c 	str.w	r8, [sp, #12]
 800a074:	2330      	movs	r3, #48	; 0x30
 800a076:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a220 <_svfiprintf_r+0x1ec>
 800a07a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a07e:	f04f 0901 	mov.w	r9, #1
 800a082:	4623      	mov	r3, r4
 800a084:	469a      	mov	sl, r3
 800a086:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a08a:	b10a      	cbz	r2, 800a090 <_svfiprintf_r+0x5c>
 800a08c:	2a25      	cmp	r2, #37	; 0x25
 800a08e:	d1f9      	bne.n	800a084 <_svfiprintf_r+0x50>
 800a090:	ebba 0b04 	subs.w	fp, sl, r4
 800a094:	d00b      	beq.n	800a0ae <_svfiprintf_r+0x7a>
 800a096:	465b      	mov	r3, fp
 800a098:	4622      	mov	r2, r4
 800a09a:	4629      	mov	r1, r5
 800a09c:	4638      	mov	r0, r7
 800a09e:	f7ff ff6d 	bl	8009f7c <__ssputs_r>
 800a0a2:	3001      	adds	r0, #1
 800a0a4:	f000 80aa 	beq.w	800a1fc <_svfiprintf_r+0x1c8>
 800a0a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0aa:	445a      	add	r2, fp
 800a0ac:	9209      	str	r2, [sp, #36]	; 0x24
 800a0ae:	f89a 3000 	ldrb.w	r3, [sl]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	f000 80a2 	beq.w	800a1fc <_svfiprintf_r+0x1c8>
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a0be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0c2:	f10a 0a01 	add.w	sl, sl, #1
 800a0c6:	9304      	str	r3, [sp, #16]
 800a0c8:	9307      	str	r3, [sp, #28]
 800a0ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0ce:	931a      	str	r3, [sp, #104]	; 0x68
 800a0d0:	4654      	mov	r4, sl
 800a0d2:	2205      	movs	r2, #5
 800a0d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0d8:	4851      	ldr	r0, [pc, #324]	; (800a220 <_svfiprintf_r+0x1ec>)
 800a0da:	f7f6 f891 	bl	8000200 <memchr>
 800a0de:	9a04      	ldr	r2, [sp, #16]
 800a0e0:	b9d8      	cbnz	r0, 800a11a <_svfiprintf_r+0xe6>
 800a0e2:	06d0      	lsls	r0, r2, #27
 800a0e4:	bf44      	itt	mi
 800a0e6:	2320      	movmi	r3, #32
 800a0e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0ec:	0711      	lsls	r1, r2, #28
 800a0ee:	bf44      	itt	mi
 800a0f0:	232b      	movmi	r3, #43	; 0x2b
 800a0f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0f6:	f89a 3000 	ldrb.w	r3, [sl]
 800a0fa:	2b2a      	cmp	r3, #42	; 0x2a
 800a0fc:	d015      	beq.n	800a12a <_svfiprintf_r+0xf6>
 800a0fe:	9a07      	ldr	r2, [sp, #28]
 800a100:	4654      	mov	r4, sl
 800a102:	2000      	movs	r0, #0
 800a104:	f04f 0c0a 	mov.w	ip, #10
 800a108:	4621      	mov	r1, r4
 800a10a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a10e:	3b30      	subs	r3, #48	; 0x30
 800a110:	2b09      	cmp	r3, #9
 800a112:	d94e      	bls.n	800a1b2 <_svfiprintf_r+0x17e>
 800a114:	b1b0      	cbz	r0, 800a144 <_svfiprintf_r+0x110>
 800a116:	9207      	str	r2, [sp, #28]
 800a118:	e014      	b.n	800a144 <_svfiprintf_r+0x110>
 800a11a:	eba0 0308 	sub.w	r3, r0, r8
 800a11e:	fa09 f303 	lsl.w	r3, r9, r3
 800a122:	4313      	orrs	r3, r2
 800a124:	9304      	str	r3, [sp, #16]
 800a126:	46a2      	mov	sl, r4
 800a128:	e7d2      	b.n	800a0d0 <_svfiprintf_r+0x9c>
 800a12a:	9b03      	ldr	r3, [sp, #12]
 800a12c:	1d19      	adds	r1, r3, #4
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	9103      	str	r1, [sp, #12]
 800a132:	2b00      	cmp	r3, #0
 800a134:	bfbb      	ittet	lt
 800a136:	425b      	neglt	r3, r3
 800a138:	f042 0202 	orrlt.w	r2, r2, #2
 800a13c:	9307      	strge	r3, [sp, #28]
 800a13e:	9307      	strlt	r3, [sp, #28]
 800a140:	bfb8      	it	lt
 800a142:	9204      	strlt	r2, [sp, #16]
 800a144:	7823      	ldrb	r3, [r4, #0]
 800a146:	2b2e      	cmp	r3, #46	; 0x2e
 800a148:	d10c      	bne.n	800a164 <_svfiprintf_r+0x130>
 800a14a:	7863      	ldrb	r3, [r4, #1]
 800a14c:	2b2a      	cmp	r3, #42	; 0x2a
 800a14e:	d135      	bne.n	800a1bc <_svfiprintf_r+0x188>
 800a150:	9b03      	ldr	r3, [sp, #12]
 800a152:	1d1a      	adds	r2, r3, #4
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	9203      	str	r2, [sp, #12]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	bfb8      	it	lt
 800a15c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a160:	3402      	adds	r4, #2
 800a162:	9305      	str	r3, [sp, #20]
 800a164:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a230 <_svfiprintf_r+0x1fc>
 800a168:	7821      	ldrb	r1, [r4, #0]
 800a16a:	2203      	movs	r2, #3
 800a16c:	4650      	mov	r0, sl
 800a16e:	f7f6 f847 	bl	8000200 <memchr>
 800a172:	b140      	cbz	r0, 800a186 <_svfiprintf_r+0x152>
 800a174:	2340      	movs	r3, #64	; 0x40
 800a176:	eba0 000a 	sub.w	r0, r0, sl
 800a17a:	fa03 f000 	lsl.w	r0, r3, r0
 800a17e:	9b04      	ldr	r3, [sp, #16]
 800a180:	4303      	orrs	r3, r0
 800a182:	3401      	adds	r4, #1
 800a184:	9304      	str	r3, [sp, #16]
 800a186:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a18a:	4826      	ldr	r0, [pc, #152]	; (800a224 <_svfiprintf_r+0x1f0>)
 800a18c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a190:	2206      	movs	r2, #6
 800a192:	f7f6 f835 	bl	8000200 <memchr>
 800a196:	2800      	cmp	r0, #0
 800a198:	d038      	beq.n	800a20c <_svfiprintf_r+0x1d8>
 800a19a:	4b23      	ldr	r3, [pc, #140]	; (800a228 <_svfiprintf_r+0x1f4>)
 800a19c:	bb1b      	cbnz	r3, 800a1e6 <_svfiprintf_r+0x1b2>
 800a19e:	9b03      	ldr	r3, [sp, #12]
 800a1a0:	3307      	adds	r3, #7
 800a1a2:	f023 0307 	bic.w	r3, r3, #7
 800a1a6:	3308      	adds	r3, #8
 800a1a8:	9303      	str	r3, [sp, #12]
 800a1aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1ac:	4433      	add	r3, r6
 800a1ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a1b0:	e767      	b.n	800a082 <_svfiprintf_r+0x4e>
 800a1b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1b6:	460c      	mov	r4, r1
 800a1b8:	2001      	movs	r0, #1
 800a1ba:	e7a5      	b.n	800a108 <_svfiprintf_r+0xd4>
 800a1bc:	2300      	movs	r3, #0
 800a1be:	3401      	adds	r4, #1
 800a1c0:	9305      	str	r3, [sp, #20]
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	f04f 0c0a 	mov.w	ip, #10
 800a1c8:	4620      	mov	r0, r4
 800a1ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1ce:	3a30      	subs	r2, #48	; 0x30
 800a1d0:	2a09      	cmp	r2, #9
 800a1d2:	d903      	bls.n	800a1dc <_svfiprintf_r+0x1a8>
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d0c5      	beq.n	800a164 <_svfiprintf_r+0x130>
 800a1d8:	9105      	str	r1, [sp, #20]
 800a1da:	e7c3      	b.n	800a164 <_svfiprintf_r+0x130>
 800a1dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1e0:	4604      	mov	r4, r0
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	e7f0      	b.n	800a1c8 <_svfiprintf_r+0x194>
 800a1e6:	ab03      	add	r3, sp, #12
 800a1e8:	9300      	str	r3, [sp, #0]
 800a1ea:	462a      	mov	r2, r5
 800a1ec:	4b0f      	ldr	r3, [pc, #60]	; (800a22c <_svfiprintf_r+0x1f8>)
 800a1ee:	a904      	add	r1, sp, #16
 800a1f0:	4638      	mov	r0, r7
 800a1f2:	f7fc fa49 	bl	8006688 <_printf_float>
 800a1f6:	1c42      	adds	r2, r0, #1
 800a1f8:	4606      	mov	r6, r0
 800a1fa:	d1d6      	bne.n	800a1aa <_svfiprintf_r+0x176>
 800a1fc:	89ab      	ldrh	r3, [r5, #12]
 800a1fe:	065b      	lsls	r3, r3, #25
 800a200:	f53f af2c 	bmi.w	800a05c <_svfiprintf_r+0x28>
 800a204:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a206:	b01d      	add	sp, #116	; 0x74
 800a208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a20c:	ab03      	add	r3, sp, #12
 800a20e:	9300      	str	r3, [sp, #0]
 800a210:	462a      	mov	r2, r5
 800a212:	4b06      	ldr	r3, [pc, #24]	; (800a22c <_svfiprintf_r+0x1f8>)
 800a214:	a904      	add	r1, sp, #16
 800a216:	4638      	mov	r0, r7
 800a218:	f7fc fcda 	bl	8006bd0 <_printf_i>
 800a21c:	e7eb      	b.n	800a1f6 <_svfiprintf_r+0x1c2>
 800a21e:	bf00      	nop
 800a220:	0800d914 	.word	0x0800d914
 800a224:	0800d91e 	.word	0x0800d91e
 800a228:	08006689 	.word	0x08006689
 800a22c:	08009f7d 	.word	0x08009f7d
 800a230:	0800d91a 	.word	0x0800d91a
 800a234:	00000000 	.word	0x00000000

0800a238 <nan>:
 800a238:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a240 <nan+0x8>
 800a23c:	4770      	bx	lr
 800a23e:	bf00      	nop
 800a240:	00000000 	.word	0x00000000
 800a244:	7ff80000 	.word	0x7ff80000

0800a248 <_sbrk_r>:
 800a248:	b538      	push	{r3, r4, r5, lr}
 800a24a:	4d06      	ldr	r5, [pc, #24]	; (800a264 <_sbrk_r+0x1c>)
 800a24c:	2300      	movs	r3, #0
 800a24e:	4604      	mov	r4, r0
 800a250:	4608      	mov	r0, r1
 800a252:	602b      	str	r3, [r5, #0]
 800a254:	f7f7 f97c 	bl	8001550 <_sbrk>
 800a258:	1c43      	adds	r3, r0, #1
 800a25a:	d102      	bne.n	800a262 <_sbrk_r+0x1a>
 800a25c:	682b      	ldr	r3, [r5, #0]
 800a25e:	b103      	cbz	r3, 800a262 <_sbrk_r+0x1a>
 800a260:	6023      	str	r3, [r4, #0]
 800a262:	bd38      	pop	{r3, r4, r5, pc}
 800a264:	20000544 	.word	0x20000544

0800a268 <strncmp>:
 800a268:	b510      	push	{r4, lr}
 800a26a:	b17a      	cbz	r2, 800a28c <strncmp+0x24>
 800a26c:	4603      	mov	r3, r0
 800a26e:	3901      	subs	r1, #1
 800a270:	1884      	adds	r4, r0, r2
 800a272:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a276:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a27a:	4290      	cmp	r0, r2
 800a27c:	d101      	bne.n	800a282 <strncmp+0x1a>
 800a27e:	42a3      	cmp	r3, r4
 800a280:	d101      	bne.n	800a286 <strncmp+0x1e>
 800a282:	1a80      	subs	r0, r0, r2
 800a284:	bd10      	pop	{r4, pc}
 800a286:	2800      	cmp	r0, #0
 800a288:	d1f3      	bne.n	800a272 <strncmp+0xa>
 800a28a:	e7fa      	b.n	800a282 <strncmp+0x1a>
 800a28c:	4610      	mov	r0, r2
 800a28e:	e7f9      	b.n	800a284 <strncmp+0x1c>

0800a290 <__ascii_wctomb>:
 800a290:	b149      	cbz	r1, 800a2a6 <__ascii_wctomb+0x16>
 800a292:	2aff      	cmp	r2, #255	; 0xff
 800a294:	bf85      	ittet	hi
 800a296:	238a      	movhi	r3, #138	; 0x8a
 800a298:	6003      	strhi	r3, [r0, #0]
 800a29a:	700a      	strbls	r2, [r1, #0]
 800a29c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a2a0:	bf98      	it	ls
 800a2a2:	2001      	movls	r0, #1
 800a2a4:	4770      	bx	lr
 800a2a6:	4608      	mov	r0, r1
 800a2a8:	4770      	bx	lr
	...

0800a2ac <__assert_func>:
 800a2ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a2ae:	4614      	mov	r4, r2
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	4b09      	ldr	r3, [pc, #36]	; (800a2d8 <__assert_func+0x2c>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4605      	mov	r5, r0
 800a2b8:	68d8      	ldr	r0, [r3, #12]
 800a2ba:	b14c      	cbz	r4, 800a2d0 <__assert_func+0x24>
 800a2bc:	4b07      	ldr	r3, [pc, #28]	; (800a2dc <__assert_func+0x30>)
 800a2be:	9100      	str	r1, [sp, #0]
 800a2c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a2c4:	4906      	ldr	r1, [pc, #24]	; (800a2e0 <__assert_func+0x34>)
 800a2c6:	462b      	mov	r3, r5
 800a2c8:	f000 f80e 	bl	800a2e8 <fiprintf>
 800a2cc:	f000 fa8c 	bl	800a7e8 <abort>
 800a2d0:	4b04      	ldr	r3, [pc, #16]	; (800a2e4 <__assert_func+0x38>)
 800a2d2:	461c      	mov	r4, r3
 800a2d4:	e7f3      	b.n	800a2be <__assert_func+0x12>
 800a2d6:	bf00      	nop
 800a2d8:	20000090 	.word	0x20000090
 800a2dc:	0800d925 	.word	0x0800d925
 800a2e0:	0800d932 	.word	0x0800d932
 800a2e4:	0800d960 	.word	0x0800d960

0800a2e8 <fiprintf>:
 800a2e8:	b40e      	push	{r1, r2, r3}
 800a2ea:	b503      	push	{r0, r1, lr}
 800a2ec:	4601      	mov	r1, r0
 800a2ee:	ab03      	add	r3, sp, #12
 800a2f0:	4805      	ldr	r0, [pc, #20]	; (800a308 <fiprintf+0x20>)
 800a2f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2f6:	6800      	ldr	r0, [r0, #0]
 800a2f8:	9301      	str	r3, [sp, #4]
 800a2fa:	f000 f885 	bl	800a408 <_vfiprintf_r>
 800a2fe:	b002      	add	sp, #8
 800a300:	f85d eb04 	ldr.w	lr, [sp], #4
 800a304:	b003      	add	sp, #12
 800a306:	4770      	bx	lr
 800a308:	20000090 	.word	0x20000090

0800a30c <memmove>:
 800a30c:	4288      	cmp	r0, r1
 800a30e:	b510      	push	{r4, lr}
 800a310:	eb01 0402 	add.w	r4, r1, r2
 800a314:	d902      	bls.n	800a31c <memmove+0x10>
 800a316:	4284      	cmp	r4, r0
 800a318:	4623      	mov	r3, r4
 800a31a:	d807      	bhi.n	800a32c <memmove+0x20>
 800a31c:	1e43      	subs	r3, r0, #1
 800a31e:	42a1      	cmp	r1, r4
 800a320:	d008      	beq.n	800a334 <memmove+0x28>
 800a322:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a326:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a32a:	e7f8      	b.n	800a31e <memmove+0x12>
 800a32c:	4402      	add	r2, r0
 800a32e:	4601      	mov	r1, r0
 800a330:	428a      	cmp	r2, r1
 800a332:	d100      	bne.n	800a336 <memmove+0x2a>
 800a334:	bd10      	pop	{r4, pc}
 800a336:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a33a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a33e:	e7f7      	b.n	800a330 <memmove+0x24>

0800a340 <__malloc_lock>:
 800a340:	4801      	ldr	r0, [pc, #4]	; (800a348 <__malloc_lock+0x8>)
 800a342:	f000 bc11 	b.w	800ab68 <__retarget_lock_acquire_recursive>
 800a346:	bf00      	nop
 800a348:	20000548 	.word	0x20000548

0800a34c <__malloc_unlock>:
 800a34c:	4801      	ldr	r0, [pc, #4]	; (800a354 <__malloc_unlock+0x8>)
 800a34e:	f000 bc0c 	b.w	800ab6a <__retarget_lock_release_recursive>
 800a352:	bf00      	nop
 800a354:	20000548 	.word	0x20000548

0800a358 <_realloc_r>:
 800a358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a35c:	4680      	mov	r8, r0
 800a35e:	4614      	mov	r4, r2
 800a360:	460e      	mov	r6, r1
 800a362:	b921      	cbnz	r1, 800a36e <_realloc_r+0x16>
 800a364:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a368:	4611      	mov	r1, r2
 800a36a:	f7ff bd93 	b.w	8009e94 <_malloc_r>
 800a36e:	b92a      	cbnz	r2, 800a37c <_realloc_r+0x24>
 800a370:	f7ff fd24 	bl	8009dbc <_free_r>
 800a374:	4625      	mov	r5, r4
 800a376:	4628      	mov	r0, r5
 800a378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a37c:	f000 fc5c 	bl	800ac38 <_malloc_usable_size_r>
 800a380:	4284      	cmp	r4, r0
 800a382:	4607      	mov	r7, r0
 800a384:	d802      	bhi.n	800a38c <_realloc_r+0x34>
 800a386:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a38a:	d812      	bhi.n	800a3b2 <_realloc_r+0x5a>
 800a38c:	4621      	mov	r1, r4
 800a38e:	4640      	mov	r0, r8
 800a390:	f7ff fd80 	bl	8009e94 <_malloc_r>
 800a394:	4605      	mov	r5, r0
 800a396:	2800      	cmp	r0, #0
 800a398:	d0ed      	beq.n	800a376 <_realloc_r+0x1e>
 800a39a:	42bc      	cmp	r4, r7
 800a39c:	4622      	mov	r2, r4
 800a39e:	4631      	mov	r1, r6
 800a3a0:	bf28      	it	cs
 800a3a2:	463a      	movcs	r2, r7
 800a3a4:	f7ff f824 	bl	80093f0 <memcpy>
 800a3a8:	4631      	mov	r1, r6
 800a3aa:	4640      	mov	r0, r8
 800a3ac:	f7ff fd06 	bl	8009dbc <_free_r>
 800a3b0:	e7e1      	b.n	800a376 <_realloc_r+0x1e>
 800a3b2:	4635      	mov	r5, r6
 800a3b4:	e7df      	b.n	800a376 <_realloc_r+0x1e>

0800a3b6 <__sfputc_r>:
 800a3b6:	6893      	ldr	r3, [r2, #8]
 800a3b8:	3b01      	subs	r3, #1
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	b410      	push	{r4}
 800a3be:	6093      	str	r3, [r2, #8]
 800a3c0:	da08      	bge.n	800a3d4 <__sfputc_r+0x1e>
 800a3c2:	6994      	ldr	r4, [r2, #24]
 800a3c4:	42a3      	cmp	r3, r4
 800a3c6:	db01      	blt.n	800a3cc <__sfputc_r+0x16>
 800a3c8:	290a      	cmp	r1, #10
 800a3ca:	d103      	bne.n	800a3d4 <__sfputc_r+0x1e>
 800a3cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3d0:	f000 b94a 	b.w	800a668 <__swbuf_r>
 800a3d4:	6813      	ldr	r3, [r2, #0]
 800a3d6:	1c58      	adds	r0, r3, #1
 800a3d8:	6010      	str	r0, [r2, #0]
 800a3da:	7019      	strb	r1, [r3, #0]
 800a3dc:	4608      	mov	r0, r1
 800a3de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3e2:	4770      	bx	lr

0800a3e4 <__sfputs_r>:
 800a3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3e6:	4606      	mov	r6, r0
 800a3e8:	460f      	mov	r7, r1
 800a3ea:	4614      	mov	r4, r2
 800a3ec:	18d5      	adds	r5, r2, r3
 800a3ee:	42ac      	cmp	r4, r5
 800a3f0:	d101      	bne.n	800a3f6 <__sfputs_r+0x12>
 800a3f2:	2000      	movs	r0, #0
 800a3f4:	e007      	b.n	800a406 <__sfputs_r+0x22>
 800a3f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3fa:	463a      	mov	r2, r7
 800a3fc:	4630      	mov	r0, r6
 800a3fe:	f7ff ffda 	bl	800a3b6 <__sfputc_r>
 800a402:	1c43      	adds	r3, r0, #1
 800a404:	d1f3      	bne.n	800a3ee <__sfputs_r+0xa>
 800a406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a408 <_vfiprintf_r>:
 800a408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a40c:	460d      	mov	r5, r1
 800a40e:	b09d      	sub	sp, #116	; 0x74
 800a410:	4614      	mov	r4, r2
 800a412:	4698      	mov	r8, r3
 800a414:	4606      	mov	r6, r0
 800a416:	b118      	cbz	r0, 800a420 <_vfiprintf_r+0x18>
 800a418:	6983      	ldr	r3, [r0, #24]
 800a41a:	b90b      	cbnz	r3, 800a420 <_vfiprintf_r+0x18>
 800a41c:	f000 fb06 	bl	800aa2c <__sinit>
 800a420:	4b89      	ldr	r3, [pc, #548]	; (800a648 <_vfiprintf_r+0x240>)
 800a422:	429d      	cmp	r5, r3
 800a424:	d11b      	bne.n	800a45e <_vfiprintf_r+0x56>
 800a426:	6875      	ldr	r5, [r6, #4]
 800a428:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a42a:	07d9      	lsls	r1, r3, #31
 800a42c:	d405      	bmi.n	800a43a <_vfiprintf_r+0x32>
 800a42e:	89ab      	ldrh	r3, [r5, #12]
 800a430:	059a      	lsls	r2, r3, #22
 800a432:	d402      	bmi.n	800a43a <_vfiprintf_r+0x32>
 800a434:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a436:	f000 fb97 	bl	800ab68 <__retarget_lock_acquire_recursive>
 800a43a:	89ab      	ldrh	r3, [r5, #12]
 800a43c:	071b      	lsls	r3, r3, #28
 800a43e:	d501      	bpl.n	800a444 <_vfiprintf_r+0x3c>
 800a440:	692b      	ldr	r3, [r5, #16]
 800a442:	b9eb      	cbnz	r3, 800a480 <_vfiprintf_r+0x78>
 800a444:	4629      	mov	r1, r5
 800a446:	4630      	mov	r0, r6
 800a448:	f000 f960 	bl	800a70c <__swsetup_r>
 800a44c:	b1c0      	cbz	r0, 800a480 <_vfiprintf_r+0x78>
 800a44e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a450:	07dc      	lsls	r4, r3, #31
 800a452:	d50e      	bpl.n	800a472 <_vfiprintf_r+0x6a>
 800a454:	f04f 30ff 	mov.w	r0, #4294967295
 800a458:	b01d      	add	sp, #116	; 0x74
 800a45a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a45e:	4b7b      	ldr	r3, [pc, #492]	; (800a64c <_vfiprintf_r+0x244>)
 800a460:	429d      	cmp	r5, r3
 800a462:	d101      	bne.n	800a468 <_vfiprintf_r+0x60>
 800a464:	68b5      	ldr	r5, [r6, #8]
 800a466:	e7df      	b.n	800a428 <_vfiprintf_r+0x20>
 800a468:	4b79      	ldr	r3, [pc, #484]	; (800a650 <_vfiprintf_r+0x248>)
 800a46a:	429d      	cmp	r5, r3
 800a46c:	bf08      	it	eq
 800a46e:	68f5      	ldreq	r5, [r6, #12]
 800a470:	e7da      	b.n	800a428 <_vfiprintf_r+0x20>
 800a472:	89ab      	ldrh	r3, [r5, #12]
 800a474:	0598      	lsls	r0, r3, #22
 800a476:	d4ed      	bmi.n	800a454 <_vfiprintf_r+0x4c>
 800a478:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a47a:	f000 fb76 	bl	800ab6a <__retarget_lock_release_recursive>
 800a47e:	e7e9      	b.n	800a454 <_vfiprintf_r+0x4c>
 800a480:	2300      	movs	r3, #0
 800a482:	9309      	str	r3, [sp, #36]	; 0x24
 800a484:	2320      	movs	r3, #32
 800a486:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a48a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a48e:	2330      	movs	r3, #48	; 0x30
 800a490:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a654 <_vfiprintf_r+0x24c>
 800a494:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a498:	f04f 0901 	mov.w	r9, #1
 800a49c:	4623      	mov	r3, r4
 800a49e:	469a      	mov	sl, r3
 800a4a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4a4:	b10a      	cbz	r2, 800a4aa <_vfiprintf_r+0xa2>
 800a4a6:	2a25      	cmp	r2, #37	; 0x25
 800a4a8:	d1f9      	bne.n	800a49e <_vfiprintf_r+0x96>
 800a4aa:	ebba 0b04 	subs.w	fp, sl, r4
 800a4ae:	d00b      	beq.n	800a4c8 <_vfiprintf_r+0xc0>
 800a4b0:	465b      	mov	r3, fp
 800a4b2:	4622      	mov	r2, r4
 800a4b4:	4629      	mov	r1, r5
 800a4b6:	4630      	mov	r0, r6
 800a4b8:	f7ff ff94 	bl	800a3e4 <__sfputs_r>
 800a4bc:	3001      	adds	r0, #1
 800a4be:	f000 80aa 	beq.w	800a616 <_vfiprintf_r+0x20e>
 800a4c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4c4:	445a      	add	r2, fp
 800a4c6:	9209      	str	r2, [sp, #36]	; 0x24
 800a4c8:	f89a 3000 	ldrb.w	r3, [sl]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	f000 80a2 	beq.w	800a616 <_vfiprintf_r+0x20e>
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a4d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4dc:	f10a 0a01 	add.w	sl, sl, #1
 800a4e0:	9304      	str	r3, [sp, #16]
 800a4e2:	9307      	str	r3, [sp, #28]
 800a4e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4e8:	931a      	str	r3, [sp, #104]	; 0x68
 800a4ea:	4654      	mov	r4, sl
 800a4ec:	2205      	movs	r2, #5
 800a4ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4f2:	4858      	ldr	r0, [pc, #352]	; (800a654 <_vfiprintf_r+0x24c>)
 800a4f4:	f7f5 fe84 	bl	8000200 <memchr>
 800a4f8:	9a04      	ldr	r2, [sp, #16]
 800a4fa:	b9d8      	cbnz	r0, 800a534 <_vfiprintf_r+0x12c>
 800a4fc:	06d1      	lsls	r1, r2, #27
 800a4fe:	bf44      	itt	mi
 800a500:	2320      	movmi	r3, #32
 800a502:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a506:	0713      	lsls	r3, r2, #28
 800a508:	bf44      	itt	mi
 800a50a:	232b      	movmi	r3, #43	; 0x2b
 800a50c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a510:	f89a 3000 	ldrb.w	r3, [sl]
 800a514:	2b2a      	cmp	r3, #42	; 0x2a
 800a516:	d015      	beq.n	800a544 <_vfiprintf_r+0x13c>
 800a518:	9a07      	ldr	r2, [sp, #28]
 800a51a:	4654      	mov	r4, sl
 800a51c:	2000      	movs	r0, #0
 800a51e:	f04f 0c0a 	mov.w	ip, #10
 800a522:	4621      	mov	r1, r4
 800a524:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a528:	3b30      	subs	r3, #48	; 0x30
 800a52a:	2b09      	cmp	r3, #9
 800a52c:	d94e      	bls.n	800a5cc <_vfiprintf_r+0x1c4>
 800a52e:	b1b0      	cbz	r0, 800a55e <_vfiprintf_r+0x156>
 800a530:	9207      	str	r2, [sp, #28]
 800a532:	e014      	b.n	800a55e <_vfiprintf_r+0x156>
 800a534:	eba0 0308 	sub.w	r3, r0, r8
 800a538:	fa09 f303 	lsl.w	r3, r9, r3
 800a53c:	4313      	orrs	r3, r2
 800a53e:	9304      	str	r3, [sp, #16]
 800a540:	46a2      	mov	sl, r4
 800a542:	e7d2      	b.n	800a4ea <_vfiprintf_r+0xe2>
 800a544:	9b03      	ldr	r3, [sp, #12]
 800a546:	1d19      	adds	r1, r3, #4
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	9103      	str	r1, [sp, #12]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	bfbb      	ittet	lt
 800a550:	425b      	neglt	r3, r3
 800a552:	f042 0202 	orrlt.w	r2, r2, #2
 800a556:	9307      	strge	r3, [sp, #28]
 800a558:	9307      	strlt	r3, [sp, #28]
 800a55a:	bfb8      	it	lt
 800a55c:	9204      	strlt	r2, [sp, #16]
 800a55e:	7823      	ldrb	r3, [r4, #0]
 800a560:	2b2e      	cmp	r3, #46	; 0x2e
 800a562:	d10c      	bne.n	800a57e <_vfiprintf_r+0x176>
 800a564:	7863      	ldrb	r3, [r4, #1]
 800a566:	2b2a      	cmp	r3, #42	; 0x2a
 800a568:	d135      	bne.n	800a5d6 <_vfiprintf_r+0x1ce>
 800a56a:	9b03      	ldr	r3, [sp, #12]
 800a56c:	1d1a      	adds	r2, r3, #4
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	9203      	str	r2, [sp, #12]
 800a572:	2b00      	cmp	r3, #0
 800a574:	bfb8      	it	lt
 800a576:	f04f 33ff 	movlt.w	r3, #4294967295
 800a57a:	3402      	adds	r4, #2
 800a57c:	9305      	str	r3, [sp, #20]
 800a57e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a664 <_vfiprintf_r+0x25c>
 800a582:	7821      	ldrb	r1, [r4, #0]
 800a584:	2203      	movs	r2, #3
 800a586:	4650      	mov	r0, sl
 800a588:	f7f5 fe3a 	bl	8000200 <memchr>
 800a58c:	b140      	cbz	r0, 800a5a0 <_vfiprintf_r+0x198>
 800a58e:	2340      	movs	r3, #64	; 0x40
 800a590:	eba0 000a 	sub.w	r0, r0, sl
 800a594:	fa03 f000 	lsl.w	r0, r3, r0
 800a598:	9b04      	ldr	r3, [sp, #16]
 800a59a:	4303      	orrs	r3, r0
 800a59c:	3401      	adds	r4, #1
 800a59e:	9304      	str	r3, [sp, #16]
 800a5a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5a4:	482c      	ldr	r0, [pc, #176]	; (800a658 <_vfiprintf_r+0x250>)
 800a5a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5aa:	2206      	movs	r2, #6
 800a5ac:	f7f5 fe28 	bl	8000200 <memchr>
 800a5b0:	2800      	cmp	r0, #0
 800a5b2:	d03f      	beq.n	800a634 <_vfiprintf_r+0x22c>
 800a5b4:	4b29      	ldr	r3, [pc, #164]	; (800a65c <_vfiprintf_r+0x254>)
 800a5b6:	bb1b      	cbnz	r3, 800a600 <_vfiprintf_r+0x1f8>
 800a5b8:	9b03      	ldr	r3, [sp, #12]
 800a5ba:	3307      	adds	r3, #7
 800a5bc:	f023 0307 	bic.w	r3, r3, #7
 800a5c0:	3308      	adds	r3, #8
 800a5c2:	9303      	str	r3, [sp, #12]
 800a5c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5c6:	443b      	add	r3, r7
 800a5c8:	9309      	str	r3, [sp, #36]	; 0x24
 800a5ca:	e767      	b.n	800a49c <_vfiprintf_r+0x94>
 800a5cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5d0:	460c      	mov	r4, r1
 800a5d2:	2001      	movs	r0, #1
 800a5d4:	e7a5      	b.n	800a522 <_vfiprintf_r+0x11a>
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	3401      	adds	r4, #1
 800a5da:	9305      	str	r3, [sp, #20]
 800a5dc:	4619      	mov	r1, r3
 800a5de:	f04f 0c0a 	mov.w	ip, #10
 800a5e2:	4620      	mov	r0, r4
 800a5e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5e8:	3a30      	subs	r2, #48	; 0x30
 800a5ea:	2a09      	cmp	r2, #9
 800a5ec:	d903      	bls.n	800a5f6 <_vfiprintf_r+0x1ee>
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d0c5      	beq.n	800a57e <_vfiprintf_r+0x176>
 800a5f2:	9105      	str	r1, [sp, #20]
 800a5f4:	e7c3      	b.n	800a57e <_vfiprintf_r+0x176>
 800a5f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5fa:	4604      	mov	r4, r0
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	e7f0      	b.n	800a5e2 <_vfiprintf_r+0x1da>
 800a600:	ab03      	add	r3, sp, #12
 800a602:	9300      	str	r3, [sp, #0]
 800a604:	462a      	mov	r2, r5
 800a606:	4b16      	ldr	r3, [pc, #88]	; (800a660 <_vfiprintf_r+0x258>)
 800a608:	a904      	add	r1, sp, #16
 800a60a:	4630      	mov	r0, r6
 800a60c:	f7fc f83c 	bl	8006688 <_printf_float>
 800a610:	4607      	mov	r7, r0
 800a612:	1c78      	adds	r0, r7, #1
 800a614:	d1d6      	bne.n	800a5c4 <_vfiprintf_r+0x1bc>
 800a616:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a618:	07d9      	lsls	r1, r3, #31
 800a61a:	d405      	bmi.n	800a628 <_vfiprintf_r+0x220>
 800a61c:	89ab      	ldrh	r3, [r5, #12]
 800a61e:	059a      	lsls	r2, r3, #22
 800a620:	d402      	bmi.n	800a628 <_vfiprintf_r+0x220>
 800a622:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a624:	f000 faa1 	bl	800ab6a <__retarget_lock_release_recursive>
 800a628:	89ab      	ldrh	r3, [r5, #12]
 800a62a:	065b      	lsls	r3, r3, #25
 800a62c:	f53f af12 	bmi.w	800a454 <_vfiprintf_r+0x4c>
 800a630:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a632:	e711      	b.n	800a458 <_vfiprintf_r+0x50>
 800a634:	ab03      	add	r3, sp, #12
 800a636:	9300      	str	r3, [sp, #0]
 800a638:	462a      	mov	r2, r5
 800a63a:	4b09      	ldr	r3, [pc, #36]	; (800a660 <_vfiprintf_r+0x258>)
 800a63c:	a904      	add	r1, sp, #16
 800a63e:	4630      	mov	r0, r6
 800a640:	f7fc fac6 	bl	8006bd0 <_printf_i>
 800a644:	e7e4      	b.n	800a610 <_vfiprintf_r+0x208>
 800a646:	bf00      	nop
 800a648:	0800d984 	.word	0x0800d984
 800a64c:	0800d9a4 	.word	0x0800d9a4
 800a650:	0800d964 	.word	0x0800d964
 800a654:	0800d914 	.word	0x0800d914
 800a658:	0800d91e 	.word	0x0800d91e
 800a65c:	08006689 	.word	0x08006689
 800a660:	0800a3e5 	.word	0x0800a3e5
 800a664:	0800d91a 	.word	0x0800d91a

0800a668 <__swbuf_r>:
 800a668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a66a:	460e      	mov	r6, r1
 800a66c:	4614      	mov	r4, r2
 800a66e:	4605      	mov	r5, r0
 800a670:	b118      	cbz	r0, 800a67a <__swbuf_r+0x12>
 800a672:	6983      	ldr	r3, [r0, #24]
 800a674:	b90b      	cbnz	r3, 800a67a <__swbuf_r+0x12>
 800a676:	f000 f9d9 	bl	800aa2c <__sinit>
 800a67a:	4b21      	ldr	r3, [pc, #132]	; (800a700 <__swbuf_r+0x98>)
 800a67c:	429c      	cmp	r4, r3
 800a67e:	d12b      	bne.n	800a6d8 <__swbuf_r+0x70>
 800a680:	686c      	ldr	r4, [r5, #4]
 800a682:	69a3      	ldr	r3, [r4, #24]
 800a684:	60a3      	str	r3, [r4, #8]
 800a686:	89a3      	ldrh	r3, [r4, #12]
 800a688:	071a      	lsls	r2, r3, #28
 800a68a:	d52f      	bpl.n	800a6ec <__swbuf_r+0x84>
 800a68c:	6923      	ldr	r3, [r4, #16]
 800a68e:	b36b      	cbz	r3, 800a6ec <__swbuf_r+0x84>
 800a690:	6923      	ldr	r3, [r4, #16]
 800a692:	6820      	ldr	r0, [r4, #0]
 800a694:	1ac0      	subs	r0, r0, r3
 800a696:	6963      	ldr	r3, [r4, #20]
 800a698:	b2f6      	uxtb	r6, r6
 800a69a:	4283      	cmp	r3, r0
 800a69c:	4637      	mov	r7, r6
 800a69e:	dc04      	bgt.n	800a6aa <__swbuf_r+0x42>
 800a6a0:	4621      	mov	r1, r4
 800a6a2:	4628      	mov	r0, r5
 800a6a4:	f000 f92e 	bl	800a904 <_fflush_r>
 800a6a8:	bb30      	cbnz	r0, 800a6f8 <__swbuf_r+0x90>
 800a6aa:	68a3      	ldr	r3, [r4, #8]
 800a6ac:	3b01      	subs	r3, #1
 800a6ae:	60a3      	str	r3, [r4, #8]
 800a6b0:	6823      	ldr	r3, [r4, #0]
 800a6b2:	1c5a      	adds	r2, r3, #1
 800a6b4:	6022      	str	r2, [r4, #0]
 800a6b6:	701e      	strb	r6, [r3, #0]
 800a6b8:	6963      	ldr	r3, [r4, #20]
 800a6ba:	3001      	adds	r0, #1
 800a6bc:	4283      	cmp	r3, r0
 800a6be:	d004      	beq.n	800a6ca <__swbuf_r+0x62>
 800a6c0:	89a3      	ldrh	r3, [r4, #12]
 800a6c2:	07db      	lsls	r3, r3, #31
 800a6c4:	d506      	bpl.n	800a6d4 <__swbuf_r+0x6c>
 800a6c6:	2e0a      	cmp	r6, #10
 800a6c8:	d104      	bne.n	800a6d4 <__swbuf_r+0x6c>
 800a6ca:	4621      	mov	r1, r4
 800a6cc:	4628      	mov	r0, r5
 800a6ce:	f000 f919 	bl	800a904 <_fflush_r>
 800a6d2:	b988      	cbnz	r0, 800a6f8 <__swbuf_r+0x90>
 800a6d4:	4638      	mov	r0, r7
 800a6d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6d8:	4b0a      	ldr	r3, [pc, #40]	; (800a704 <__swbuf_r+0x9c>)
 800a6da:	429c      	cmp	r4, r3
 800a6dc:	d101      	bne.n	800a6e2 <__swbuf_r+0x7a>
 800a6de:	68ac      	ldr	r4, [r5, #8]
 800a6e0:	e7cf      	b.n	800a682 <__swbuf_r+0x1a>
 800a6e2:	4b09      	ldr	r3, [pc, #36]	; (800a708 <__swbuf_r+0xa0>)
 800a6e4:	429c      	cmp	r4, r3
 800a6e6:	bf08      	it	eq
 800a6e8:	68ec      	ldreq	r4, [r5, #12]
 800a6ea:	e7ca      	b.n	800a682 <__swbuf_r+0x1a>
 800a6ec:	4621      	mov	r1, r4
 800a6ee:	4628      	mov	r0, r5
 800a6f0:	f000 f80c 	bl	800a70c <__swsetup_r>
 800a6f4:	2800      	cmp	r0, #0
 800a6f6:	d0cb      	beq.n	800a690 <__swbuf_r+0x28>
 800a6f8:	f04f 37ff 	mov.w	r7, #4294967295
 800a6fc:	e7ea      	b.n	800a6d4 <__swbuf_r+0x6c>
 800a6fe:	bf00      	nop
 800a700:	0800d984 	.word	0x0800d984
 800a704:	0800d9a4 	.word	0x0800d9a4
 800a708:	0800d964 	.word	0x0800d964

0800a70c <__swsetup_r>:
 800a70c:	4b32      	ldr	r3, [pc, #200]	; (800a7d8 <__swsetup_r+0xcc>)
 800a70e:	b570      	push	{r4, r5, r6, lr}
 800a710:	681d      	ldr	r5, [r3, #0]
 800a712:	4606      	mov	r6, r0
 800a714:	460c      	mov	r4, r1
 800a716:	b125      	cbz	r5, 800a722 <__swsetup_r+0x16>
 800a718:	69ab      	ldr	r3, [r5, #24]
 800a71a:	b913      	cbnz	r3, 800a722 <__swsetup_r+0x16>
 800a71c:	4628      	mov	r0, r5
 800a71e:	f000 f985 	bl	800aa2c <__sinit>
 800a722:	4b2e      	ldr	r3, [pc, #184]	; (800a7dc <__swsetup_r+0xd0>)
 800a724:	429c      	cmp	r4, r3
 800a726:	d10f      	bne.n	800a748 <__swsetup_r+0x3c>
 800a728:	686c      	ldr	r4, [r5, #4]
 800a72a:	89a3      	ldrh	r3, [r4, #12]
 800a72c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a730:	0719      	lsls	r1, r3, #28
 800a732:	d42c      	bmi.n	800a78e <__swsetup_r+0x82>
 800a734:	06dd      	lsls	r5, r3, #27
 800a736:	d411      	bmi.n	800a75c <__swsetup_r+0x50>
 800a738:	2309      	movs	r3, #9
 800a73a:	6033      	str	r3, [r6, #0]
 800a73c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a740:	81a3      	strh	r3, [r4, #12]
 800a742:	f04f 30ff 	mov.w	r0, #4294967295
 800a746:	e03e      	b.n	800a7c6 <__swsetup_r+0xba>
 800a748:	4b25      	ldr	r3, [pc, #148]	; (800a7e0 <__swsetup_r+0xd4>)
 800a74a:	429c      	cmp	r4, r3
 800a74c:	d101      	bne.n	800a752 <__swsetup_r+0x46>
 800a74e:	68ac      	ldr	r4, [r5, #8]
 800a750:	e7eb      	b.n	800a72a <__swsetup_r+0x1e>
 800a752:	4b24      	ldr	r3, [pc, #144]	; (800a7e4 <__swsetup_r+0xd8>)
 800a754:	429c      	cmp	r4, r3
 800a756:	bf08      	it	eq
 800a758:	68ec      	ldreq	r4, [r5, #12]
 800a75a:	e7e6      	b.n	800a72a <__swsetup_r+0x1e>
 800a75c:	0758      	lsls	r0, r3, #29
 800a75e:	d512      	bpl.n	800a786 <__swsetup_r+0x7a>
 800a760:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a762:	b141      	cbz	r1, 800a776 <__swsetup_r+0x6a>
 800a764:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a768:	4299      	cmp	r1, r3
 800a76a:	d002      	beq.n	800a772 <__swsetup_r+0x66>
 800a76c:	4630      	mov	r0, r6
 800a76e:	f7ff fb25 	bl	8009dbc <_free_r>
 800a772:	2300      	movs	r3, #0
 800a774:	6363      	str	r3, [r4, #52]	; 0x34
 800a776:	89a3      	ldrh	r3, [r4, #12]
 800a778:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a77c:	81a3      	strh	r3, [r4, #12]
 800a77e:	2300      	movs	r3, #0
 800a780:	6063      	str	r3, [r4, #4]
 800a782:	6923      	ldr	r3, [r4, #16]
 800a784:	6023      	str	r3, [r4, #0]
 800a786:	89a3      	ldrh	r3, [r4, #12]
 800a788:	f043 0308 	orr.w	r3, r3, #8
 800a78c:	81a3      	strh	r3, [r4, #12]
 800a78e:	6923      	ldr	r3, [r4, #16]
 800a790:	b94b      	cbnz	r3, 800a7a6 <__swsetup_r+0x9a>
 800a792:	89a3      	ldrh	r3, [r4, #12]
 800a794:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a79c:	d003      	beq.n	800a7a6 <__swsetup_r+0x9a>
 800a79e:	4621      	mov	r1, r4
 800a7a0:	4630      	mov	r0, r6
 800a7a2:	f000 fa09 	bl	800abb8 <__smakebuf_r>
 800a7a6:	89a0      	ldrh	r0, [r4, #12]
 800a7a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a7ac:	f010 0301 	ands.w	r3, r0, #1
 800a7b0:	d00a      	beq.n	800a7c8 <__swsetup_r+0xbc>
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	60a3      	str	r3, [r4, #8]
 800a7b6:	6963      	ldr	r3, [r4, #20]
 800a7b8:	425b      	negs	r3, r3
 800a7ba:	61a3      	str	r3, [r4, #24]
 800a7bc:	6923      	ldr	r3, [r4, #16]
 800a7be:	b943      	cbnz	r3, 800a7d2 <__swsetup_r+0xc6>
 800a7c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a7c4:	d1ba      	bne.n	800a73c <__swsetup_r+0x30>
 800a7c6:	bd70      	pop	{r4, r5, r6, pc}
 800a7c8:	0781      	lsls	r1, r0, #30
 800a7ca:	bf58      	it	pl
 800a7cc:	6963      	ldrpl	r3, [r4, #20]
 800a7ce:	60a3      	str	r3, [r4, #8]
 800a7d0:	e7f4      	b.n	800a7bc <__swsetup_r+0xb0>
 800a7d2:	2000      	movs	r0, #0
 800a7d4:	e7f7      	b.n	800a7c6 <__swsetup_r+0xba>
 800a7d6:	bf00      	nop
 800a7d8:	20000090 	.word	0x20000090
 800a7dc:	0800d984 	.word	0x0800d984
 800a7e0:	0800d9a4 	.word	0x0800d9a4
 800a7e4:	0800d964 	.word	0x0800d964

0800a7e8 <abort>:
 800a7e8:	b508      	push	{r3, lr}
 800a7ea:	2006      	movs	r0, #6
 800a7ec:	f000 fa54 	bl	800ac98 <raise>
 800a7f0:	2001      	movs	r0, #1
 800a7f2:	f7f6 fe35 	bl	8001460 <_exit>
	...

0800a7f8 <__sflush_r>:
 800a7f8:	898a      	ldrh	r2, [r1, #12]
 800a7fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7fe:	4605      	mov	r5, r0
 800a800:	0710      	lsls	r0, r2, #28
 800a802:	460c      	mov	r4, r1
 800a804:	d458      	bmi.n	800a8b8 <__sflush_r+0xc0>
 800a806:	684b      	ldr	r3, [r1, #4]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	dc05      	bgt.n	800a818 <__sflush_r+0x20>
 800a80c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a80e:	2b00      	cmp	r3, #0
 800a810:	dc02      	bgt.n	800a818 <__sflush_r+0x20>
 800a812:	2000      	movs	r0, #0
 800a814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a818:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a81a:	2e00      	cmp	r6, #0
 800a81c:	d0f9      	beq.n	800a812 <__sflush_r+0x1a>
 800a81e:	2300      	movs	r3, #0
 800a820:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a824:	682f      	ldr	r7, [r5, #0]
 800a826:	602b      	str	r3, [r5, #0]
 800a828:	d032      	beq.n	800a890 <__sflush_r+0x98>
 800a82a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a82c:	89a3      	ldrh	r3, [r4, #12]
 800a82e:	075a      	lsls	r2, r3, #29
 800a830:	d505      	bpl.n	800a83e <__sflush_r+0x46>
 800a832:	6863      	ldr	r3, [r4, #4]
 800a834:	1ac0      	subs	r0, r0, r3
 800a836:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a838:	b10b      	cbz	r3, 800a83e <__sflush_r+0x46>
 800a83a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a83c:	1ac0      	subs	r0, r0, r3
 800a83e:	2300      	movs	r3, #0
 800a840:	4602      	mov	r2, r0
 800a842:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a844:	6a21      	ldr	r1, [r4, #32]
 800a846:	4628      	mov	r0, r5
 800a848:	47b0      	blx	r6
 800a84a:	1c43      	adds	r3, r0, #1
 800a84c:	89a3      	ldrh	r3, [r4, #12]
 800a84e:	d106      	bne.n	800a85e <__sflush_r+0x66>
 800a850:	6829      	ldr	r1, [r5, #0]
 800a852:	291d      	cmp	r1, #29
 800a854:	d82c      	bhi.n	800a8b0 <__sflush_r+0xb8>
 800a856:	4a2a      	ldr	r2, [pc, #168]	; (800a900 <__sflush_r+0x108>)
 800a858:	40ca      	lsrs	r2, r1
 800a85a:	07d6      	lsls	r6, r2, #31
 800a85c:	d528      	bpl.n	800a8b0 <__sflush_r+0xb8>
 800a85e:	2200      	movs	r2, #0
 800a860:	6062      	str	r2, [r4, #4]
 800a862:	04d9      	lsls	r1, r3, #19
 800a864:	6922      	ldr	r2, [r4, #16]
 800a866:	6022      	str	r2, [r4, #0]
 800a868:	d504      	bpl.n	800a874 <__sflush_r+0x7c>
 800a86a:	1c42      	adds	r2, r0, #1
 800a86c:	d101      	bne.n	800a872 <__sflush_r+0x7a>
 800a86e:	682b      	ldr	r3, [r5, #0]
 800a870:	b903      	cbnz	r3, 800a874 <__sflush_r+0x7c>
 800a872:	6560      	str	r0, [r4, #84]	; 0x54
 800a874:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a876:	602f      	str	r7, [r5, #0]
 800a878:	2900      	cmp	r1, #0
 800a87a:	d0ca      	beq.n	800a812 <__sflush_r+0x1a>
 800a87c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a880:	4299      	cmp	r1, r3
 800a882:	d002      	beq.n	800a88a <__sflush_r+0x92>
 800a884:	4628      	mov	r0, r5
 800a886:	f7ff fa99 	bl	8009dbc <_free_r>
 800a88a:	2000      	movs	r0, #0
 800a88c:	6360      	str	r0, [r4, #52]	; 0x34
 800a88e:	e7c1      	b.n	800a814 <__sflush_r+0x1c>
 800a890:	6a21      	ldr	r1, [r4, #32]
 800a892:	2301      	movs	r3, #1
 800a894:	4628      	mov	r0, r5
 800a896:	47b0      	blx	r6
 800a898:	1c41      	adds	r1, r0, #1
 800a89a:	d1c7      	bne.n	800a82c <__sflush_r+0x34>
 800a89c:	682b      	ldr	r3, [r5, #0]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d0c4      	beq.n	800a82c <__sflush_r+0x34>
 800a8a2:	2b1d      	cmp	r3, #29
 800a8a4:	d001      	beq.n	800a8aa <__sflush_r+0xb2>
 800a8a6:	2b16      	cmp	r3, #22
 800a8a8:	d101      	bne.n	800a8ae <__sflush_r+0xb6>
 800a8aa:	602f      	str	r7, [r5, #0]
 800a8ac:	e7b1      	b.n	800a812 <__sflush_r+0x1a>
 800a8ae:	89a3      	ldrh	r3, [r4, #12]
 800a8b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8b4:	81a3      	strh	r3, [r4, #12]
 800a8b6:	e7ad      	b.n	800a814 <__sflush_r+0x1c>
 800a8b8:	690f      	ldr	r7, [r1, #16]
 800a8ba:	2f00      	cmp	r7, #0
 800a8bc:	d0a9      	beq.n	800a812 <__sflush_r+0x1a>
 800a8be:	0793      	lsls	r3, r2, #30
 800a8c0:	680e      	ldr	r6, [r1, #0]
 800a8c2:	bf08      	it	eq
 800a8c4:	694b      	ldreq	r3, [r1, #20]
 800a8c6:	600f      	str	r7, [r1, #0]
 800a8c8:	bf18      	it	ne
 800a8ca:	2300      	movne	r3, #0
 800a8cc:	eba6 0807 	sub.w	r8, r6, r7
 800a8d0:	608b      	str	r3, [r1, #8]
 800a8d2:	f1b8 0f00 	cmp.w	r8, #0
 800a8d6:	dd9c      	ble.n	800a812 <__sflush_r+0x1a>
 800a8d8:	6a21      	ldr	r1, [r4, #32]
 800a8da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a8dc:	4643      	mov	r3, r8
 800a8de:	463a      	mov	r2, r7
 800a8e0:	4628      	mov	r0, r5
 800a8e2:	47b0      	blx	r6
 800a8e4:	2800      	cmp	r0, #0
 800a8e6:	dc06      	bgt.n	800a8f6 <__sflush_r+0xfe>
 800a8e8:	89a3      	ldrh	r3, [r4, #12]
 800a8ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8ee:	81a3      	strh	r3, [r4, #12]
 800a8f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8f4:	e78e      	b.n	800a814 <__sflush_r+0x1c>
 800a8f6:	4407      	add	r7, r0
 800a8f8:	eba8 0800 	sub.w	r8, r8, r0
 800a8fc:	e7e9      	b.n	800a8d2 <__sflush_r+0xda>
 800a8fe:	bf00      	nop
 800a900:	20400001 	.word	0x20400001

0800a904 <_fflush_r>:
 800a904:	b538      	push	{r3, r4, r5, lr}
 800a906:	690b      	ldr	r3, [r1, #16]
 800a908:	4605      	mov	r5, r0
 800a90a:	460c      	mov	r4, r1
 800a90c:	b913      	cbnz	r3, 800a914 <_fflush_r+0x10>
 800a90e:	2500      	movs	r5, #0
 800a910:	4628      	mov	r0, r5
 800a912:	bd38      	pop	{r3, r4, r5, pc}
 800a914:	b118      	cbz	r0, 800a91e <_fflush_r+0x1a>
 800a916:	6983      	ldr	r3, [r0, #24]
 800a918:	b90b      	cbnz	r3, 800a91e <_fflush_r+0x1a>
 800a91a:	f000 f887 	bl	800aa2c <__sinit>
 800a91e:	4b14      	ldr	r3, [pc, #80]	; (800a970 <_fflush_r+0x6c>)
 800a920:	429c      	cmp	r4, r3
 800a922:	d11b      	bne.n	800a95c <_fflush_r+0x58>
 800a924:	686c      	ldr	r4, [r5, #4]
 800a926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d0ef      	beq.n	800a90e <_fflush_r+0xa>
 800a92e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a930:	07d0      	lsls	r0, r2, #31
 800a932:	d404      	bmi.n	800a93e <_fflush_r+0x3a>
 800a934:	0599      	lsls	r1, r3, #22
 800a936:	d402      	bmi.n	800a93e <_fflush_r+0x3a>
 800a938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a93a:	f000 f915 	bl	800ab68 <__retarget_lock_acquire_recursive>
 800a93e:	4628      	mov	r0, r5
 800a940:	4621      	mov	r1, r4
 800a942:	f7ff ff59 	bl	800a7f8 <__sflush_r>
 800a946:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a948:	07da      	lsls	r2, r3, #31
 800a94a:	4605      	mov	r5, r0
 800a94c:	d4e0      	bmi.n	800a910 <_fflush_r+0xc>
 800a94e:	89a3      	ldrh	r3, [r4, #12]
 800a950:	059b      	lsls	r3, r3, #22
 800a952:	d4dd      	bmi.n	800a910 <_fflush_r+0xc>
 800a954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a956:	f000 f908 	bl	800ab6a <__retarget_lock_release_recursive>
 800a95a:	e7d9      	b.n	800a910 <_fflush_r+0xc>
 800a95c:	4b05      	ldr	r3, [pc, #20]	; (800a974 <_fflush_r+0x70>)
 800a95e:	429c      	cmp	r4, r3
 800a960:	d101      	bne.n	800a966 <_fflush_r+0x62>
 800a962:	68ac      	ldr	r4, [r5, #8]
 800a964:	e7df      	b.n	800a926 <_fflush_r+0x22>
 800a966:	4b04      	ldr	r3, [pc, #16]	; (800a978 <_fflush_r+0x74>)
 800a968:	429c      	cmp	r4, r3
 800a96a:	bf08      	it	eq
 800a96c:	68ec      	ldreq	r4, [r5, #12]
 800a96e:	e7da      	b.n	800a926 <_fflush_r+0x22>
 800a970:	0800d984 	.word	0x0800d984
 800a974:	0800d9a4 	.word	0x0800d9a4
 800a978:	0800d964 	.word	0x0800d964

0800a97c <std>:
 800a97c:	2300      	movs	r3, #0
 800a97e:	b510      	push	{r4, lr}
 800a980:	4604      	mov	r4, r0
 800a982:	e9c0 3300 	strd	r3, r3, [r0]
 800a986:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a98a:	6083      	str	r3, [r0, #8]
 800a98c:	8181      	strh	r1, [r0, #12]
 800a98e:	6643      	str	r3, [r0, #100]	; 0x64
 800a990:	81c2      	strh	r2, [r0, #14]
 800a992:	6183      	str	r3, [r0, #24]
 800a994:	4619      	mov	r1, r3
 800a996:	2208      	movs	r2, #8
 800a998:	305c      	adds	r0, #92	; 0x5c
 800a99a:	f7fb fdcd 	bl	8006538 <memset>
 800a99e:	4b05      	ldr	r3, [pc, #20]	; (800a9b4 <std+0x38>)
 800a9a0:	6263      	str	r3, [r4, #36]	; 0x24
 800a9a2:	4b05      	ldr	r3, [pc, #20]	; (800a9b8 <std+0x3c>)
 800a9a4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a9a6:	4b05      	ldr	r3, [pc, #20]	; (800a9bc <std+0x40>)
 800a9a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a9aa:	4b05      	ldr	r3, [pc, #20]	; (800a9c0 <std+0x44>)
 800a9ac:	6224      	str	r4, [r4, #32]
 800a9ae:	6323      	str	r3, [r4, #48]	; 0x30
 800a9b0:	bd10      	pop	{r4, pc}
 800a9b2:	bf00      	nop
 800a9b4:	0800acd1 	.word	0x0800acd1
 800a9b8:	0800acf3 	.word	0x0800acf3
 800a9bc:	0800ad2b 	.word	0x0800ad2b
 800a9c0:	0800ad4f 	.word	0x0800ad4f

0800a9c4 <_cleanup_r>:
 800a9c4:	4901      	ldr	r1, [pc, #4]	; (800a9cc <_cleanup_r+0x8>)
 800a9c6:	f000 b8af 	b.w	800ab28 <_fwalk_reent>
 800a9ca:	bf00      	nop
 800a9cc:	0800a905 	.word	0x0800a905

0800a9d0 <__sfmoreglue>:
 800a9d0:	b570      	push	{r4, r5, r6, lr}
 800a9d2:	2268      	movs	r2, #104	; 0x68
 800a9d4:	1e4d      	subs	r5, r1, #1
 800a9d6:	4355      	muls	r5, r2
 800a9d8:	460e      	mov	r6, r1
 800a9da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a9de:	f7ff fa59 	bl	8009e94 <_malloc_r>
 800a9e2:	4604      	mov	r4, r0
 800a9e4:	b140      	cbz	r0, 800a9f8 <__sfmoreglue+0x28>
 800a9e6:	2100      	movs	r1, #0
 800a9e8:	e9c0 1600 	strd	r1, r6, [r0]
 800a9ec:	300c      	adds	r0, #12
 800a9ee:	60a0      	str	r0, [r4, #8]
 800a9f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a9f4:	f7fb fda0 	bl	8006538 <memset>
 800a9f8:	4620      	mov	r0, r4
 800a9fa:	bd70      	pop	{r4, r5, r6, pc}

0800a9fc <__sfp_lock_acquire>:
 800a9fc:	4801      	ldr	r0, [pc, #4]	; (800aa04 <__sfp_lock_acquire+0x8>)
 800a9fe:	f000 b8b3 	b.w	800ab68 <__retarget_lock_acquire_recursive>
 800aa02:	bf00      	nop
 800aa04:	20000549 	.word	0x20000549

0800aa08 <__sfp_lock_release>:
 800aa08:	4801      	ldr	r0, [pc, #4]	; (800aa10 <__sfp_lock_release+0x8>)
 800aa0a:	f000 b8ae 	b.w	800ab6a <__retarget_lock_release_recursive>
 800aa0e:	bf00      	nop
 800aa10:	20000549 	.word	0x20000549

0800aa14 <__sinit_lock_acquire>:
 800aa14:	4801      	ldr	r0, [pc, #4]	; (800aa1c <__sinit_lock_acquire+0x8>)
 800aa16:	f000 b8a7 	b.w	800ab68 <__retarget_lock_acquire_recursive>
 800aa1a:	bf00      	nop
 800aa1c:	2000054a 	.word	0x2000054a

0800aa20 <__sinit_lock_release>:
 800aa20:	4801      	ldr	r0, [pc, #4]	; (800aa28 <__sinit_lock_release+0x8>)
 800aa22:	f000 b8a2 	b.w	800ab6a <__retarget_lock_release_recursive>
 800aa26:	bf00      	nop
 800aa28:	2000054a 	.word	0x2000054a

0800aa2c <__sinit>:
 800aa2c:	b510      	push	{r4, lr}
 800aa2e:	4604      	mov	r4, r0
 800aa30:	f7ff fff0 	bl	800aa14 <__sinit_lock_acquire>
 800aa34:	69a3      	ldr	r3, [r4, #24]
 800aa36:	b11b      	cbz	r3, 800aa40 <__sinit+0x14>
 800aa38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa3c:	f7ff bff0 	b.w	800aa20 <__sinit_lock_release>
 800aa40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aa44:	6523      	str	r3, [r4, #80]	; 0x50
 800aa46:	4b13      	ldr	r3, [pc, #76]	; (800aa94 <__sinit+0x68>)
 800aa48:	4a13      	ldr	r2, [pc, #76]	; (800aa98 <__sinit+0x6c>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	62a2      	str	r2, [r4, #40]	; 0x28
 800aa4e:	42a3      	cmp	r3, r4
 800aa50:	bf04      	itt	eq
 800aa52:	2301      	moveq	r3, #1
 800aa54:	61a3      	streq	r3, [r4, #24]
 800aa56:	4620      	mov	r0, r4
 800aa58:	f000 f820 	bl	800aa9c <__sfp>
 800aa5c:	6060      	str	r0, [r4, #4]
 800aa5e:	4620      	mov	r0, r4
 800aa60:	f000 f81c 	bl	800aa9c <__sfp>
 800aa64:	60a0      	str	r0, [r4, #8]
 800aa66:	4620      	mov	r0, r4
 800aa68:	f000 f818 	bl	800aa9c <__sfp>
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	60e0      	str	r0, [r4, #12]
 800aa70:	2104      	movs	r1, #4
 800aa72:	6860      	ldr	r0, [r4, #4]
 800aa74:	f7ff ff82 	bl	800a97c <std>
 800aa78:	68a0      	ldr	r0, [r4, #8]
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	2109      	movs	r1, #9
 800aa7e:	f7ff ff7d 	bl	800a97c <std>
 800aa82:	68e0      	ldr	r0, [r4, #12]
 800aa84:	2202      	movs	r2, #2
 800aa86:	2112      	movs	r1, #18
 800aa88:	f7ff ff78 	bl	800a97c <std>
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	61a3      	str	r3, [r4, #24]
 800aa90:	e7d2      	b.n	800aa38 <__sinit+0xc>
 800aa92:	bf00      	nop
 800aa94:	0800d520 	.word	0x0800d520
 800aa98:	0800a9c5 	.word	0x0800a9c5

0800aa9c <__sfp>:
 800aa9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa9e:	4607      	mov	r7, r0
 800aaa0:	f7ff ffac 	bl	800a9fc <__sfp_lock_acquire>
 800aaa4:	4b1e      	ldr	r3, [pc, #120]	; (800ab20 <__sfp+0x84>)
 800aaa6:	681e      	ldr	r6, [r3, #0]
 800aaa8:	69b3      	ldr	r3, [r6, #24]
 800aaaa:	b913      	cbnz	r3, 800aab2 <__sfp+0x16>
 800aaac:	4630      	mov	r0, r6
 800aaae:	f7ff ffbd 	bl	800aa2c <__sinit>
 800aab2:	3648      	adds	r6, #72	; 0x48
 800aab4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aab8:	3b01      	subs	r3, #1
 800aaba:	d503      	bpl.n	800aac4 <__sfp+0x28>
 800aabc:	6833      	ldr	r3, [r6, #0]
 800aabe:	b30b      	cbz	r3, 800ab04 <__sfp+0x68>
 800aac0:	6836      	ldr	r6, [r6, #0]
 800aac2:	e7f7      	b.n	800aab4 <__sfp+0x18>
 800aac4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aac8:	b9d5      	cbnz	r5, 800ab00 <__sfp+0x64>
 800aaca:	4b16      	ldr	r3, [pc, #88]	; (800ab24 <__sfp+0x88>)
 800aacc:	60e3      	str	r3, [r4, #12]
 800aace:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aad2:	6665      	str	r5, [r4, #100]	; 0x64
 800aad4:	f000 f847 	bl	800ab66 <__retarget_lock_init_recursive>
 800aad8:	f7ff ff96 	bl	800aa08 <__sfp_lock_release>
 800aadc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aae0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aae4:	6025      	str	r5, [r4, #0]
 800aae6:	61a5      	str	r5, [r4, #24]
 800aae8:	2208      	movs	r2, #8
 800aaea:	4629      	mov	r1, r5
 800aaec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aaf0:	f7fb fd22 	bl	8006538 <memset>
 800aaf4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aaf8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aafc:	4620      	mov	r0, r4
 800aafe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab00:	3468      	adds	r4, #104	; 0x68
 800ab02:	e7d9      	b.n	800aab8 <__sfp+0x1c>
 800ab04:	2104      	movs	r1, #4
 800ab06:	4638      	mov	r0, r7
 800ab08:	f7ff ff62 	bl	800a9d0 <__sfmoreglue>
 800ab0c:	4604      	mov	r4, r0
 800ab0e:	6030      	str	r0, [r6, #0]
 800ab10:	2800      	cmp	r0, #0
 800ab12:	d1d5      	bne.n	800aac0 <__sfp+0x24>
 800ab14:	f7ff ff78 	bl	800aa08 <__sfp_lock_release>
 800ab18:	230c      	movs	r3, #12
 800ab1a:	603b      	str	r3, [r7, #0]
 800ab1c:	e7ee      	b.n	800aafc <__sfp+0x60>
 800ab1e:	bf00      	nop
 800ab20:	0800d520 	.word	0x0800d520
 800ab24:	ffff0001 	.word	0xffff0001

0800ab28 <_fwalk_reent>:
 800ab28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab2c:	4606      	mov	r6, r0
 800ab2e:	4688      	mov	r8, r1
 800ab30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ab34:	2700      	movs	r7, #0
 800ab36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab3a:	f1b9 0901 	subs.w	r9, r9, #1
 800ab3e:	d505      	bpl.n	800ab4c <_fwalk_reent+0x24>
 800ab40:	6824      	ldr	r4, [r4, #0]
 800ab42:	2c00      	cmp	r4, #0
 800ab44:	d1f7      	bne.n	800ab36 <_fwalk_reent+0xe>
 800ab46:	4638      	mov	r0, r7
 800ab48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab4c:	89ab      	ldrh	r3, [r5, #12]
 800ab4e:	2b01      	cmp	r3, #1
 800ab50:	d907      	bls.n	800ab62 <_fwalk_reent+0x3a>
 800ab52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab56:	3301      	adds	r3, #1
 800ab58:	d003      	beq.n	800ab62 <_fwalk_reent+0x3a>
 800ab5a:	4629      	mov	r1, r5
 800ab5c:	4630      	mov	r0, r6
 800ab5e:	47c0      	blx	r8
 800ab60:	4307      	orrs	r7, r0
 800ab62:	3568      	adds	r5, #104	; 0x68
 800ab64:	e7e9      	b.n	800ab3a <_fwalk_reent+0x12>

0800ab66 <__retarget_lock_init_recursive>:
 800ab66:	4770      	bx	lr

0800ab68 <__retarget_lock_acquire_recursive>:
 800ab68:	4770      	bx	lr

0800ab6a <__retarget_lock_release_recursive>:
 800ab6a:	4770      	bx	lr

0800ab6c <__swhatbuf_r>:
 800ab6c:	b570      	push	{r4, r5, r6, lr}
 800ab6e:	460e      	mov	r6, r1
 800ab70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab74:	2900      	cmp	r1, #0
 800ab76:	b096      	sub	sp, #88	; 0x58
 800ab78:	4614      	mov	r4, r2
 800ab7a:	461d      	mov	r5, r3
 800ab7c:	da08      	bge.n	800ab90 <__swhatbuf_r+0x24>
 800ab7e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ab82:	2200      	movs	r2, #0
 800ab84:	602a      	str	r2, [r5, #0]
 800ab86:	061a      	lsls	r2, r3, #24
 800ab88:	d410      	bmi.n	800abac <__swhatbuf_r+0x40>
 800ab8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab8e:	e00e      	b.n	800abae <__swhatbuf_r+0x42>
 800ab90:	466a      	mov	r2, sp
 800ab92:	f000 f903 	bl	800ad9c <_fstat_r>
 800ab96:	2800      	cmp	r0, #0
 800ab98:	dbf1      	blt.n	800ab7e <__swhatbuf_r+0x12>
 800ab9a:	9a01      	ldr	r2, [sp, #4]
 800ab9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aba0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aba4:	425a      	negs	r2, r3
 800aba6:	415a      	adcs	r2, r3
 800aba8:	602a      	str	r2, [r5, #0]
 800abaa:	e7ee      	b.n	800ab8a <__swhatbuf_r+0x1e>
 800abac:	2340      	movs	r3, #64	; 0x40
 800abae:	2000      	movs	r0, #0
 800abb0:	6023      	str	r3, [r4, #0]
 800abb2:	b016      	add	sp, #88	; 0x58
 800abb4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800abb8 <__smakebuf_r>:
 800abb8:	898b      	ldrh	r3, [r1, #12]
 800abba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800abbc:	079d      	lsls	r5, r3, #30
 800abbe:	4606      	mov	r6, r0
 800abc0:	460c      	mov	r4, r1
 800abc2:	d507      	bpl.n	800abd4 <__smakebuf_r+0x1c>
 800abc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800abc8:	6023      	str	r3, [r4, #0]
 800abca:	6123      	str	r3, [r4, #16]
 800abcc:	2301      	movs	r3, #1
 800abce:	6163      	str	r3, [r4, #20]
 800abd0:	b002      	add	sp, #8
 800abd2:	bd70      	pop	{r4, r5, r6, pc}
 800abd4:	ab01      	add	r3, sp, #4
 800abd6:	466a      	mov	r2, sp
 800abd8:	f7ff ffc8 	bl	800ab6c <__swhatbuf_r>
 800abdc:	9900      	ldr	r1, [sp, #0]
 800abde:	4605      	mov	r5, r0
 800abe0:	4630      	mov	r0, r6
 800abe2:	f7ff f957 	bl	8009e94 <_malloc_r>
 800abe6:	b948      	cbnz	r0, 800abfc <__smakebuf_r+0x44>
 800abe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abec:	059a      	lsls	r2, r3, #22
 800abee:	d4ef      	bmi.n	800abd0 <__smakebuf_r+0x18>
 800abf0:	f023 0303 	bic.w	r3, r3, #3
 800abf4:	f043 0302 	orr.w	r3, r3, #2
 800abf8:	81a3      	strh	r3, [r4, #12]
 800abfa:	e7e3      	b.n	800abc4 <__smakebuf_r+0xc>
 800abfc:	4b0d      	ldr	r3, [pc, #52]	; (800ac34 <__smakebuf_r+0x7c>)
 800abfe:	62b3      	str	r3, [r6, #40]	; 0x28
 800ac00:	89a3      	ldrh	r3, [r4, #12]
 800ac02:	6020      	str	r0, [r4, #0]
 800ac04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac08:	81a3      	strh	r3, [r4, #12]
 800ac0a:	9b00      	ldr	r3, [sp, #0]
 800ac0c:	6163      	str	r3, [r4, #20]
 800ac0e:	9b01      	ldr	r3, [sp, #4]
 800ac10:	6120      	str	r0, [r4, #16]
 800ac12:	b15b      	cbz	r3, 800ac2c <__smakebuf_r+0x74>
 800ac14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac18:	4630      	mov	r0, r6
 800ac1a:	f000 f8d1 	bl	800adc0 <_isatty_r>
 800ac1e:	b128      	cbz	r0, 800ac2c <__smakebuf_r+0x74>
 800ac20:	89a3      	ldrh	r3, [r4, #12]
 800ac22:	f023 0303 	bic.w	r3, r3, #3
 800ac26:	f043 0301 	orr.w	r3, r3, #1
 800ac2a:	81a3      	strh	r3, [r4, #12]
 800ac2c:	89a0      	ldrh	r0, [r4, #12]
 800ac2e:	4305      	orrs	r5, r0
 800ac30:	81a5      	strh	r5, [r4, #12]
 800ac32:	e7cd      	b.n	800abd0 <__smakebuf_r+0x18>
 800ac34:	0800a9c5 	.word	0x0800a9c5

0800ac38 <_malloc_usable_size_r>:
 800ac38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac3c:	1f18      	subs	r0, r3, #4
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	bfbc      	itt	lt
 800ac42:	580b      	ldrlt	r3, [r1, r0]
 800ac44:	18c0      	addlt	r0, r0, r3
 800ac46:	4770      	bx	lr

0800ac48 <_raise_r>:
 800ac48:	291f      	cmp	r1, #31
 800ac4a:	b538      	push	{r3, r4, r5, lr}
 800ac4c:	4604      	mov	r4, r0
 800ac4e:	460d      	mov	r5, r1
 800ac50:	d904      	bls.n	800ac5c <_raise_r+0x14>
 800ac52:	2316      	movs	r3, #22
 800ac54:	6003      	str	r3, [r0, #0]
 800ac56:	f04f 30ff 	mov.w	r0, #4294967295
 800ac5a:	bd38      	pop	{r3, r4, r5, pc}
 800ac5c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ac5e:	b112      	cbz	r2, 800ac66 <_raise_r+0x1e>
 800ac60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac64:	b94b      	cbnz	r3, 800ac7a <_raise_r+0x32>
 800ac66:	4620      	mov	r0, r4
 800ac68:	f000 f830 	bl	800accc <_getpid_r>
 800ac6c:	462a      	mov	r2, r5
 800ac6e:	4601      	mov	r1, r0
 800ac70:	4620      	mov	r0, r4
 800ac72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac76:	f000 b817 	b.w	800aca8 <_kill_r>
 800ac7a:	2b01      	cmp	r3, #1
 800ac7c:	d00a      	beq.n	800ac94 <_raise_r+0x4c>
 800ac7e:	1c59      	adds	r1, r3, #1
 800ac80:	d103      	bne.n	800ac8a <_raise_r+0x42>
 800ac82:	2316      	movs	r3, #22
 800ac84:	6003      	str	r3, [r0, #0]
 800ac86:	2001      	movs	r0, #1
 800ac88:	e7e7      	b.n	800ac5a <_raise_r+0x12>
 800ac8a:	2400      	movs	r4, #0
 800ac8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ac90:	4628      	mov	r0, r5
 800ac92:	4798      	blx	r3
 800ac94:	2000      	movs	r0, #0
 800ac96:	e7e0      	b.n	800ac5a <_raise_r+0x12>

0800ac98 <raise>:
 800ac98:	4b02      	ldr	r3, [pc, #8]	; (800aca4 <raise+0xc>)
 800ac9a:	4601      	mov	r1, r0
 800ac9c:	6818      	ldr	r0, [r3, #0]
 800ac9e:	f7ff bfd3 	b.w	800ac48 <_raise_r>
 800aca2:	bf00      	nop
 800aca4:	20000090 	.word	0x20000090

0800aca8 <_kill_r>:
 800aca8:	b538      	push	{r3, r4, r5, lr}
 800acaa:	4d07      	ldr	r5, [pc, #28]	; (800acc8 <_kill_r+0x20>)
 800acac:	2300      	movs	r3, #0
 800acae:	4604      	mov	r4, r0
 800acb0:	4608      	mov	r0, r1
 800acb2:	4611      	mov	r1, r2
 800acb4:	602b      	str	r3, [r5, #0]
 800acb6:	f7f6 fbc3 	bl	8001440 <_kill>
 800acba:	1c43      	adds	r3, r0, #1
 800acbc:	d102      	bne.n	800acc4 <_kill_r+0x1c>
 800acbe:	682b      	ldr	r3, [r5, #0]
 800acc0:	b103      	cbz	r3, 800acc4 <_kill_r+0x1c>
 800acc2:	6023      	str	r3, [r4, #0]
 800acc4:	bd38      	pop	{r3, r4, r5, pc}
 800acc6:	bf00      	nop
 800acc8:	20000544 	.word	0x20000544

0800accc <_getpid_r>:
 800accc:	f7f6 bbb0 	b.w	8001430 <_getpid>

0800acd0 <__sread>:
 800acd0:	b510      	push	{r4, lr}
 800acd2:	460c      	mov	r4, r1
 800acd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acd8:	f000 f894 	bl	800ae04 <_read_r>
 800acdc:	2800      	cmp	r0, #0
 800acde:	bfab      	itete	ge
 800ace0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ace2:	89a3      	ldrhlt	r3, [r4, #12]
 800ace4:	181b      	addge	r3, r3, r0
 800ace6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800acea:	bfac      	ite	ge
 800acec:	6563      	strge	r3, [r4, #84]	; 0x54
 800acee:	81a3      	strhlt	r3, [r4, #12]
 800acf0:	bd10      	pop	{r4, pc}

0800acf2 <__swrite>:
 800acf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acf6:	461f      	mov	r7, r3
 800acf8:	898b      	ldrh	r3, [r1, #12]
 800acfa:	05db      	lsls	r3, r3, #23
 800acfc:	4605      	mov	r5, r0
 800acfe:	460c      	mov	r4, r1
 800ad00:	4616      	mov	r6, r2
 800ad02:	d505      	bpl.n	800ad10 <__swrite+0x1e>
 800ad04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad08:	2302      	movs	r3, #2
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	f000 f868 	bl	800ade0 <_lseek_r>
 800ad10:	89a3      	ldrh	r3, [r4, #12]
 800ad12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad1a:	81a3      	strh	r3, [r4, #12]
 800ad1c:	4632      	mov	r2, r6
 800ad1e:	463b      	mov	r3, r7
 800ad20:	4628      	mov	r0, r5
 800ad22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad26:	f000 b817 	b.w	800ad58 <_write_r>

0800ad2a <__sseek>:
 800ad2a:	b510      	push	{r4, lr}
 800ad2c:	460c      	mov	r4, r1
 800ad2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad32:	f000 f855 	bl	800ade0 <_lseek_r>
 800ad36:	1c43      	adds	r3, r0, #1
 800ad38:	89a3      	ldrh	r3, [r4, #12]
 800ad3a:	bf15      	itete	ne
 800ad3c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ad3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ad42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ad46:	81a3      	strheq	r3, [r4, #12]
 800ad48:	bf18      	it	ne
 800ad4a:	81a3      	strhne	r3, [r4, #12]
 800ad4c:	bd10      	pop	{r4, pc}

0800ad4e <__sclose>:
 800ad4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad52:	f000 b813 	b.w	800ad7c <_close_r>
	...

0800ad58 <_write_r>:
 800ad58:	b538      	push	{r3, r4, r5, lr}
 800ad5a:	4d07      	ldr	r5, [pc, #28]	; (800ad78 <_write_r+0x20>)
 800ad5c:	4604      	mov	r4, r0
 800ad5e:	4608      	mov	r0, r1
 800ad60:	4611      	mov	r1, r2
 800ad62:	2200      	movs	r2, #0
 800ad64:	602a      	str	r2, [r5, #0]
 800ad66:	461a      	mov	r2, r3
 800ad68:	f7f6 fba1 	bl	80014ae <_write>
 800ad6c:	1c43      	adds	r3, r0, #1
 800ad6e:	d102      	bne.n	800ad76 <_write_r+0x1e>
 800ad70:	682b      	ldr	r3, [r5, #0]
 800ad72:	b103      	cbz	r3, 800ad76 <_write_r+0x1e>
 800ad74:	6023      	str	r3, [r4, #0]
 800ad76:	bd38      	pop	{r3, r4, r5, pc}
 800ad78:	20000544 	.word	0x20000544

0800ad7c <_close_r>:
 800ad7c:	b538      	push	{r3, r4, r5, lr}
 800ad7e:	4d06      	ldr	r5, [pc, #24]	; (800ad98 <_close_r+0x1c>)
 800ad80:	2300      	movs	r3, #0
 800ad82:	4604      	mov	r4, r0
 800ad84:	4608      	mov	r0, r1
 800ad86:	602b      	str	r3, [r5, #0]
 800ad88:	f7f6 fbad 	bl	80014e6 <_close>
 800ad8c:	1c43      	adds	r3, r0, #1
 800ad8e:	d102      	bne.n	800ad96 <_close_r+0x1a>
 800ad90:	682b      	ldr	r3, [r5, #0]
 800ad92:	b103      	cbz	r3, 800ad96 <_close_r+0x1a>
 800ad94:	6023      	str	r3, [r4, #0]
 800ad96:	bd38      	pop	{r3, r4, r5, pc}
 800ad98:	20000544 	.word	0x20000544

0800ad9c <_fstat_r>:
 800ad9c:	b538      	push	{r3, r4, r5, lr}
 800ad9e:	4d07      	ldr	r5, [pc, #28]	; (800adbc <_fstat_r+0x20>)
 800ada0:	2300      	movs	r3, #0
 800ada2:	4604      	mov	r4, r0
 800ada4:	4608      	mov	r0, r1
 800ada6:	4611      	mov	r1, r2
 800ada8:	602b      	str	r3, [r5, #0]
 800adaa:	f7f6 fba8 	bl	80014fe <_fstat>
 800adae:	1c43      	adds	r3, r0, #1
 800adb0:	d102      	bne.n	800adb8 <_fstat_r+0x1c>
 800adb2:	682b      	ldr	r3, [r5, #0]
 800adb4:	b103      	cbz	r3, 800adb8 <_fstat_r+0x1c>
 800adb6:	6023      	str	r3, [r4, #0]
 800adb8:	bd38      	pop	{r3, r4, r5, pc}
 800adba:	bf00      	nop
 800adbc:	20000544 	.word	0x20000544

0800adc0 <_isatty_r>:
 800adc0:	b538      	push	{r3, r4, r5, lr}
 800adc2:	4d06      	ldr	r5, [pc, #24]	; (800addc <_isatty_r+0x1c>)
 800adc4:	2300      	movs	r3, #0
 800adc6:	4604      	mov	r4, r0
 800adc8:	4608      	mov	r0, r1
 800adca:	602b      	str	r3, [r5, #0]
 800adcc:	f7f6 fba7 	bl	800151e <_isatty>
 800add0:	1c43      	adds	r3, r0, #1
 800add2:	d102      	bne.n	800adda <_isatty_r+0x1a>
 800add4:	682b      	ldr	r3, [r5, #0]
 800add6:	b103      	cbz	r3, 800adda <_isatty_r+0x1a>
 800add8:	6023      	str	r3, [r4, #0]
 800adda:	bd38      	pop	{r3, r4, r5, pc}
 800addc:	20000544 	.word	0x20000544

0800ade0 <_lseek_r>:
 800ade0:	b538      	push	{r3, r4, r5, lr}
 800ade2:	4d07      	ldr	r5, [pc, #28]	; (800ae00 <_lseek_r+0x20>)
 800ade4:	4604      	mov	r4, r0
 800ade6:	4608      	mov	r0, r1
 800ade8:	4611      	mov	r1, r2
 800adea:	2200      	movs	r2, #0
 800adec:	602a      	str	r2, [r5, #0]
 800adee:	461a      	mov	r2, r3
 800adf0:	f7f6 fba0 	bl	8001534 <_lseek>
 800adf4:	1c43      	adds	r3, r0, #1
 800adf6:	d102      	bne.n	800adfe <_lseek_r+0x1e>
 800adf8:	682b      	ldr	r3, [r5, #0]
 800adfa:	b103      	cbz	r3, 800adfe <_lseek_r+0x1e>
 800adfc:	6023      	str	r3, [r4, #0]
 800adfe:	bd38      	pop	{r3, r4, r5, pc}
 800ae00:	20000544 	.word	0x20000544

0800ae04 <_read_r>:
 800ae04:	b538      	push	{r3, r4, r5, lr}
 800ae06:	4d07      	ldr	r5, [pc, #28]	; (800ae24 <_read_r+0x20>)
 800ae08:	4604      	mov	r4, r0
 800ae0a:	4608      	mov	r0, r1
 800ae0c:	4611      	mov	r1, r2
 800ae0e:	2200      	movs	r2, #0
 800ae10:	602a      	str	r2, [r5, #0]
 800ae12:	461a      	mov	r2, r3
 800ae14:	f7f6 fb2e 	bl	8001474 <_read>
 800ae18:	1c43      	adds	r3, r0, #1
 800ae1a:	d102      	bne.n	800ae22 <_read_r+0x1e>
 800ae1c:	682b      	ldr	r3, [r5, #0]
 800ae1e:	b103      	cbz	r3, 800ae22 <_read_r+0x1e>
 800ae20:	6023      	str	r3, [r4, #0]
 800ae22:	bd38      	pop	{r3, r4, r5, pc}
 800ae24:	20000544 	.word	0x20000544

0800ae28 <_init>:
 800ae28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae2a:	bf00      	nop
 800ae2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae2e:	bc08      	pop	{r3}
 800ae30:	469e      	mov	lr, r3
 800ae32:	4770      	bx	lr

0800ae34 <_fini>:
 800ae34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae36:	bf00      	nop
 800ae38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae3a:	bc08      	pop	{r3}
 800ae3c:	469e      	mov	lr, r3
 800ae3e:	4770      	bx	lr
