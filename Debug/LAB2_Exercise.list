
LAB2_Exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010938  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000201c  08010ae8  08010ae8  00020ae8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012b04  08012b04  0003034c  2**0
                  CONTENTS
  4 .ARM          00000008  08012b04  08012b04  00022b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012b0c  08012b0c  0003034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012b0c  08012b0c  00022b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012b10  08012b10  00022b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  08012b14  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003034c  2**0
                  CONTENTS
 10 .bss          00001d40  2000034c  2000034c  0003034c  2**2
                  ALLOC
 11 ._user_heap_stack 00002404  2000208c  2000208c  0003034c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003034c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bad9  00000000  00000000  0003037c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000483a  00000000  00000000  0004be55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001798  00000000  00000000  00050690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001570  00000000  00000000  00051e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a6a0  00000000  00000000  00053398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f28f  00000000  00000000  0007da38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e987c  00000000  00000000  0009ccc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00186543  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007634  00000000  00000000  00186594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000034c 	.word	0x2000034c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08010ad0 	.word	0x08010ad0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000350 	.word	0x20000350
 80001ec:	08010ad0 	.word	0x08010ad0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b09e      	sub	sp, #120	; 0x78
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	float pfData[3] = {0};
 800101e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
	char angel1[20];
	char angel2[20];
	char angel3[20];
	Point UpArr [] = {{120, 0}, {110, 10}, {130, 10}};
 800102a:	4a68      	ldr	r2, [pc, #416]	; (80011cc <main+0x1b4>)
 800102c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001030:	ca07      	ldmia	r2, {r0, r1, r2}
 8001032:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	Point DownArr [] = {{120, 320}, {110, 310}, {130, 310}};
 8001036:	4a66      	ldr	r2, [pc, #408]	; (80011d0 <main+0x1b8>)
 8001038:	f107 0318 	add.w	r3, r7, #24
 800103c:	ca07      	ldmia	r2, {r0, r1, r2}
 800103e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	Point LeftArr [] = {{0, 160}, {10, 150}, {10, 170}};
 8001042:	4a64      	ldr	r2, [pc, #400]	; (80011d4 <main+0x1bc>)
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	ca07      	ldmia	r2, {r0, r1, r2}
 800104a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	Point RightArr [] = {{240, 160}, {230, 150}, {230, 170}};
 800104e:	4a62      	ldr	r2, [pc, #392]	; (80011d8 <main+0x1c0>)
 8001050:	463b      	mov	r3, r7
 8001052:	ca07      	ldmia	r2, {r0, r1, r2}
 8001054:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001058:	f002 fb66 	bl	8003728 <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_GYRO_Init();
 800105c:	f001 fa1e 	bl	800249c <BSP_GYRO_Init>
  BSP_LCD_Init();
 8001060:	f001 fa96 	bl	8002590 <BSP_LCD_Init>
  HAL_SPI_Init(&hspi5);
 8001064:	485d      	ldr	r0, [pc, #372]	; (80011dc <main+0x1c4>)
 8001066:	f006 f84e 	bl	8007106 <HAL_SPI_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800106a:	f000 f8c3 	bl	80011f4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_USB_DEVICE_Init();
 800106e:	f00a fb3d 	bl	800b6ec <MX_USB_DEVICE_Init>
  MX_GPIO_Init();
 8001072:	f000 f95f 	bl	8001334 <MX_GPIO_Init>
  MX_SPI5_Init();
 8001076:	f000 f927 	bl	80012c8 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
  BSP_SDRAM_Init();
 800107a:	f002 f98b 	bl	8003394 <BSP_SDRAM_Init>

  BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
 800107e:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001082:	2001      	movs	r0, #1
 8001084:	f001 fb06 	bl	8002694 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);//select on which layer we write
 8001088:	2001      	movs	r0, #1
 800108a:	f001 fb67 	bl	800275c <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();//turn on LCD
 800108e:	f001 ff83 	bl	8002f98 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLUE);//clear the LCD on blue s
 8001092:	4853      	ldr	r0, [pc, #332]	; (80011e0 <main+0x1c8>)
 8001094:	f001 fbd4 	bl	8002840 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);//set text background color
 8001098:	4851      	ldr	r0, [pc, #324]	; (80011e0 <main+0x1c8>)
 800109a:	f001 fb87 	bl	80027ac <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);//set text color
 800109e:	f04f 30ff 	mov.w	r0, #4294967295
 80010a2:	f001 fb6b 	bl	800277c <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font24);
 80010a6:	484f      	ldr	r0, [pc, #316]	; (80011e4 <main+0x1cc>)
 80010a8:	f001 fb9a 	bl	80027e0 <BSP_LCD_SetFont>
  BSP_LCD_GetFont();
 80010ac:	f001 fbb2 	bl	8002814 <BSP_LCD_GetFont>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BSP_GYRO_GetXYZ((float *) pfData);
 80010b0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010b4:	4618      	mov	r0, r3
 80010b6:	f001 fa57 	bl	8002568 <BSP_GYRO_GetXYZ>
	  HAL_Delay(750);
 80010ba:	f240 20ee 	movw	r0, #750	; 0x2ee
 80010be:	f002 fba5 	bl	800380c <HAL_Delay>
	  sprintf(angel1, "x rota: %.1f\n", pfData[0]);
 80010c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fa4f 	bl	8000568 <__aeabi_f2d>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80010d2:	4945      	ldr	r1, [pc, #276]	; (80011e8 <main+0x1d0>)
 80010d4:	f00b ff0a 	bl	800ceec <siprintf>
	  CDC_Transmit_HS((uint8_t *) angel1, strlen(angel1));
 80010d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff f887 	bl	80001f0 <strlen>
 80010e2:	4603      	mov	r3, r0
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010ea:	4611      	mov	r1, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f00a fbef 	bl	800b8d0 <CDC_Transmit_HS>
	  sprintf(angel2, "y rota: %.1f\n", pfData[1]);
 80010f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fa37 	bl	8000568 <__aeabi_f2d>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001102:	493a      	ldr	r1, [pc, #232]	; (80011ec <main+0x1d4>)
 8001104:	f00b fef2 	bl	800ceec <siprintf>
	  CDC_Transmit_HS((uint8_t *) angel2, strlen(angel2));
 8001108:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff f86f 	bl	80001f0 <strlen>
 8001112:	4603      	mov	r3, r0
 8001114:	b29a      	uxth	r2, r3
 8001116:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f00a fbd7 	bl	800b8d0 <CDC_Transmit_HS>
	  sprintf(angel3, "z rota: %.1f\n", pfData[2]);
 8001122:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff fa1f 	bl	8000568 <__aeabi_f2d>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001132:	492f      	ldr	r1, [pc, #188]	; (80011f0 <main+0x1d8>)
 8001134:	f00b feda 	bl	800ceec <siprintf>
	  BSP_LCD_DisplayStringAtLine(1, (uint8_t *) angel3);
 8001138:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800113c:	4619      	mov	r1, r3
 800113e:	2001      	movs	r0, #1
 8001140:	f001 fca8 	bl	8002a94 <BSP_LCD_DisplayStringAtLine>
	  BSP_LCD_Clear(LCD_COLOR_BLUE);
 8001144:	4826      	ldr	r0, [pc, #152]	; (80011e0 <main+0x1c8>)
 8001146:	f001 fb7b 	bl	8002840 <BSP_LCD_Clear>
	  CDC_Transmit_HS((uint8_t *) angel3, strlen(angel3));
 800114a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff f84e 	bl	80001f0 <strlen>
 8001154:	4603      	mov	r3, r0
 8001156:	b29a      	uxth	r2, r3
 8001158:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800115c:	4611      	mov	r1, r2
 800115e:	4618      	mov	r0, r3
 8001160:	f00a fbb6 	bl	800b8d0 <CDC_Transmit_HS>
	  if (pfData[0] > 0) {
 8001164:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001168:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800116c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001170:	dd05      	ble.n	800117e <main+0x166>
		  BSP_LCD_FillPolygon(DownArr, 3);
 8001172:	f107 0318 	add.w	r3, r7, #24
 8001176:	2103      	movs	r1, #3
 8001178:	4618      	mov	r0, r3
 800117a:	f001 fe2b 	bl	8002dd4 <BSP_LCD_FillPolygon>
	  }
	  if (pfData[0] < 0) {
 800117e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001182:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118a:	d505      	bpl.n	8001198 <main+0x180>
		  BSP_LCD_FillPolygon(UpArr, 3);
 800118c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001190:	2103      	movs	r1, #3
 8001192:	4618      	mov	r0, r3
 8001194:	f001 fe1e 	bl	8002dd4 <BSP_LCD_FillPolygon>
	  }
	  if (pfData[1] > 0) {
 8001198:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800119c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a4:	dd04      	ble.n	80011b0 <main+0x198>
	  		  BSP_LCD_FillPolygon(RightArr, 3);
 80011a6:	463b      	mov	r3, r7
 80011a8:	2103      	movs	r1, #3
 80011aa:	4618      	mov	r0, r3
 80011ac:	f001 fe12 	bl	8002dd4 <BSP_LCD_FillPolygon>
	  	  }

	  if (pfData[1] < 0) {
 80011b0:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80011b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011bc:	d505      	bpl.n	80011ca <main+0x1b2>
	  	  		  BSP_LCD_FillPolygon(LeftArr, 3);
 80011be:	f107 030c 	add.w	r3, r7, #12
 80011c2:	2103      	movs	r1, #3
 80011c4:	4618      	mov	r0, r3
 80011c6:	f001 fe05 	bl	8002dd4 <BSP_LCD_FillPolygon>
	  BSP_GYRO_GetXYZ((float *) pfData);
 80011ca:	e771      	b.n	80010b0 <main+0x98>
 80011cc:	08010b18 	.word	0x08010b18
 80011d0:	08010b24 	.word	0x08010b24
 80011d4:	08010b30 	.word	0x08010b30
 80011d8:	08010b3c 	.word	0x08010b3c
 80011dc:	20000368 	.word	0x20000368
 80011e0:	ff0000ff 	.word	0xff0000ff
 80011e4:	20000074 	.word	0x20000074
 80011e8:	08010ae8 	.word	0x08010ae8
 80011ec:	08010af8 	.word	0x08010af8
 80011f0:	08010b08 	.word	0x08010b08

080011f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b094      	sub	sp, #80	; 0x50
 80011f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fa:	f107 0320 	add.w	r3, r7, #32
 80011fe:	2230      	movs	r2, #48	; 0x30
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f00a ffea 	bl	800c1dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001218:	2300      	movs	r3, #0
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	4b28      	ldr	r3, [pc, #160]	; (80012c0 <SystemClock_Config+0xcc>)
 800121e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001220:	4a27      	ldr	r2, [pc, #156]	; (80012c0 <SystemClock_Config+0xcc>)
 8001222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001226:	6413      	str	r3, [r2, #64]	; 0x40
 8001228:	4b25      	ldr	r3, [pc, #148]	; (80012c0 <SystemClock_Config+0xcc>)
 800122a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001234:	2300      	movs	r3, #0
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	4b22      	ldr	r3, [pc, #136]	; (80012c4 <SystemClock_Config+0xd0>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a21      	ldr	r2, [pc, #132]	; (80012c4 <SystemClock_Config+0xd0>)
 800123e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <SystemClock_Config+0xd0>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001250:	2301      	movs	r3, #1
 8001252:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001254:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800125a:	2302      	movs	r3, #2
 800125c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800125e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001262:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001264:	2308      	movs	r3, #8
 8001266:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001268:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800126c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800126e:	2302      	movs	r3, #2
 8001270:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001272:	2307      	movs	r3, #7
 8001274:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001276:	f107 0320 	add.w	r3, r7, #32
 800127a:	4618      	mov	r0, r3
 800127c:	f005 f878 	bl	8006370 <HAL_RCC_OscConfig>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001286:	f000 f899 	bl	80013bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800128a:	230f      	movs	r3, #15
 800128c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800128e:	2302      	movs	r3, #2
 8001290:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001296:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800129a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800129c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012a2:	f107 030c 	add.w	r3, r7, #12
 80012a6:	2105      	movs	r1, #5
 80012a8:	4618      	mov	r0, r3
 80012aa:	f005 fad9 	bl	8006860 <HAL_RCC_ClockConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80012b4:	f000 f882 	bl	80013bc <Error_Handler>
  }
}
 80012b8:	bf00      	nop
 80012ba:	3750      	adds	r7, #80	; 0x50
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40007000 	.word	0x40007000

080012c8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80012cc:	4b17      	ldr	r3, [pc, #92]	; (800132c <MX_SPI5_Init+0x64>)
 80012ce:	4a18      	ldr	r2, [pc, #96]	; (8001330 <MX_SPI5_Init+0x68>)
 80012d0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80012d2:	4b16      	ldr	r3, [pc, #88]	; (800132c <MX_SPI5_Init+0x64>)
 80012d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012d8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80012da:	4b14      	ldr	r3, [pc, #80]	; (800132c <MX_SPI5_Init+0x64>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80012e0:	4b12      	ldr	r3, [pc, #72]	; (800132c <MX_SPI5_Init+0x64>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012e6:	4b11      	ldr	r3, [pc, #68]	; (800132c <MX_SPI5_Init+0x64>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <MX_SPI5_Init+0x64>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <MX_SPI5_Init+0x64>)
 80012f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012f8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80012fa:	4b0c      	ldr	r3, [pc, #48]	; (800132c <MX_SPI5_Init+0x64>)
 80012fc:	2218      	movs	r2, #24
 80012fe:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001300:	4b0a      	ldr	r3, [pc, #40]	; (800132c <MX_SPI5_Init+0x64>)
 8001302:	2200      	movs	r2, #0
 8001304:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001306:	4b09      	ldr	r3, [pc, #36]	; (800132c <MX_SPI5_Init+0x64>)
 8001308:	2200      	movs	r2, #0
 800130a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800130c:	4b07      	ldr	r3, [pc, #28]	; (800132c <MX_SPI5_Init+0x64>)
 800130e:	2200      	movs	r2, #0
 8001310:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <MX_SPI5_Init+0x64>)
 8001314:	220a      	movs	r2, #10
 8001316:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001318:	4804      	ldr	r0, [pc, #16]	; (800132c <MX_SPI5_Init+0x64>)
 800131a:	f005 fef4 	bl	8007106 <HAL_SPI_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001324:	f000 f84a 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000368 	.word	0x20000368
 8001330:	40015000 	.word	0x40015000

08001334 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	4b1e      	ldr	r3, [pc, #120]	; (80013b8 <MX_GPIO_Init+0x84>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a1d      	ldr	r2, [pc, #116]	; (80013b8 <MX_GPIO_Init+0x84>)
 8001344:	f043 0320 	orr.w	r3, r3, #32
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <MX_GPIO_Init+0x84>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f003 0320 	and.w	r3, r3, #32
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <MX_GPIO_Init+0x84>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a16      	ldr	r2, [pc, #88]	; (80013b8 <MX_GPIO_Init+0x84>)
 8001360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <MX_GPIO_Init+0x84>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <MX_GPIO_Init+0x84>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a0f      	ldr	r2, [pc, #60]	; (80013b8 <MX_GPIO_Init+0x84>)
 800137c:	f043 0302 	orr.w	r3, r3, #2
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <MX_GPIO_Init+0x84>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	603b      	str	r3, [r7, #0]
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <MX_GPIO_Init+0x84>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a08      	ldr	r2, [pc, #32]	; (80013b8 <MX_GPIO_Init+0x84>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <MX_GPIO_Init+0x84>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	603b      	str	r3, [r7, #0]
 80013a8:	683b      	ldr	r3, [r7, #0]

}
 80013aa:	bf00      	nop
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40023800 	.word	0x40023800

080013bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c0:	b672      	cpsid	i
}
 80013c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <Error_Handler+0x8>
	...

080013c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	4b10      	ldr	r3, [pc, #64]	; (8001414 <HAL_MspInit+0x4c>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	4a0f      	ldr	r2, [pc, #60]	; (8001414 <HAL_MspInit+0x4c>)
 80013d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013dc:	6453      	str	r3, [r2, #68]	; 0x44
 80013de:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <HAL_MspInit+0x4c>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	603b      	str	r3, [r7, #0]
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <HAL_MspInit+0x4c>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	4a08      	ldr	r2, [pc, #32]	; (8001414 <HAL_MspInit+0x4c>)
 80013f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f8:	6413      	str	r3, [r2, #64]	; 0x40
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_MspInit+0x4c>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001402:	603b      	str	r3, [r7, #0]
 8001404:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	40023800 	.word	0x40023800

08001418 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	; 0x28
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a19      	ldr	r2, [pc, #100]	; (800149c <HAL_SPI_MspInit+0x84>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d12c      	bne.n	8001494 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <HAL_SPI_MspInit+0x88>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	4a17      	ldr	r2, [pc, #92]	; (80014a0 <HAL_SPI_MspInit+0x88>)
 8001444:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001448:	6453      	str	r3, [r2, #68]	; 0x44
 800144a:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <HAL_SPI_MspInit+0x88>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <HAL_SPI_MspInit+0x88>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a10      	ldr	r2, [pc, #64]	; (80014a0 <HAL_SPI_MspInit+0x88>)
 8001460:	f043 0320 	orr.w	r3, r3, #32
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <HAL_SPI_MspInit+0x88>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f003 0320 	and.w	r3, r3, #32
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001472:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001478:	2302      	movs	r3, #2
 800147a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001480:	2303      	movs	r3, #3
 8001482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001484:	2305      	movs	r3, #5
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	4619      	mov	r1, r3
 800148e:	4805      	ldr	r0, [pc, #20]	; (80014a4 <HAL_SPI_MspInit+0x8c>)
 8001490:	f002 ff46 	bl	8004320 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001494:	bf00      	nop
 8001496:	3728      	adds	r7, #40	; 0x28
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40015000 	.word	0x40015000
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40021400 	.word	0x40021400

080014a8 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a08      	ldr	r2, [pc, #32]	; (80014d8 <HAL_SPI_MspDeInit+0x30>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d10a      	bne.n	80014d0 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80014ba:	4b08      	ldr	r3, [pc, #32]	; (80014dc <HAL_SPI_MspDeInit+0x34>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	4a07      	ldr	r2, [pc, #28]	; (80014dc <HAL_SPI_MspDeInit+0x34>)
 80014c0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80014c4:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 80014c6:	f44f 7160 	mov.w	r1, #896	; 0x380
 80014ca:	4805      	ldr	r0, [pc, #20]	; (80014e0 <HAL_SPI_MspDeInit+0x38>)
 80014cc:	f003 f8d4 	bl	8004678 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40015000 	.word	0x40015000
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40021400 	.word	0x40021400

080014e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <NMI_Handler+0x4>

080014ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ee:	e7fe      	b.n	80014ee <HardFault_Handler+0x4>

080014f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <MemManage_Handler+0x4>

080014f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014fa:	e7fe      	b.n	80014fa <BusFault_Handler+0x4>

080014fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <UsageFault_Handler+0x4>

08001502 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001530:	f002 f94c 	bl	80037cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}

08001538 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800153c:	4802      	ldr	r0, [pc, #8]	; (8001548 <OTG_HS_IRQHandler+0x10>)
 800153e:	f003 fdea 	bl	8005116 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20001b10 	.word	0x20001b10

0800154c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
	return 1;
 8001550:	2301      	movs	r3, #1
}
 8001552:	4618      	mov	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <_kill>:

int _kill(int pid, int sig)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001566:	f00a fe0f 	bl	800c188 <__errno>
 800156a:	4603      	mov	r3, r0
 800156c:	2216      	movs	r2, #22
 800156e:	601a      	str	r2, [r3, #0]
	return -1;
 8001570:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001574:	4618      	mov	r0, r3
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <_exit>:

void _exit (int status)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001584:	f04f 31ff 	mov.w	r1, #4294967295
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff ffe7 	bl	800155c <_kill>
	while (1) {}		/* Make sure we hang here */
 800158e:	e7fe      	b.n	800158e <_exit+0x12>

08001590 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	e00a      	b.n	80015b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015a2:	f3af 8000 	nop.w
 80015a6:	4601      	mov	r1, r0
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	1c5a      	adds	r2, r3, #1
 80015ac:	60ba      	str	r2, [r7, #8]
 80015ae:	b2ca      	uxtb	r2, r1
 80015b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	3301      	adds	r3, #1
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	429a      	cmp	r2, r3
 80015be:	dbf0      	blt.n	80015a2 <_read+0x12>
	}

return len;
 80015c0:	687b      	ldr	r3, [r7, #4]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b086      	sub	sp, #24
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	60f8      	str	r0, [r7, #12]
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	e009      	b.n	80015f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	1c5a      	adds	r2, r3, #1
 80015e0:	60ba      	str	r2, [r7, #8]
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	3301      	adds	r3, #1
 80015ee:	617b      	str	r3, [r7, #20]
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	dbf1      	blt.n	80015dc <_write+0x12>
	}
	return len;
 80015f8:	687b      	ldr	r3, [r7, #4]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <_close>:

int _close(int file)
{
 8001602:	b480      	push	{r7}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
	return -1;
 800160a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800160e:	4618      	mov	r0, r3
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
 8001622:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800162a:	605a      	str	r2, [r3, #4]
	return 0;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <_isatty>:

int _isatty(int file)
{
 800163a:	b480      	push	{r7}
 800163c:	b083      	sub	sp, #12
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
	return 1;
 8001642:	2301      	movs	r3, #1
}
 8001644:	4618      	mov	r0, r3
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
	return 0;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
	...

0800166c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001674:	4a14      	ldr	r2, [pc, #80]	; (80016c8 <_sbrk+0x5c>)
 8001676:	4b15      	ldr	r3, [pc, #84]	; (80016cc <_sbrk+0x60>)
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001680:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <_sbrk+0x64>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d102      	bne.n	800168e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <_sbrk+0x64>)
 800168a:	4a12      	ldr	r2, [pc, #72]	; (80016d4 <_sbrk+0x68>)
 800168c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <_sbrk+0x64>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	429a      	cmp	r2, r3
 800169a:	d207      	bcs.n	80016ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800169c:	f00a fd74 	bl	800c188 <__errno>
 80016a0:	4603      	mov	r3, r0
 80016a2:	220c      	movs	r2, #12
 80016a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016a6:	f04f 33ff 	mov.w	r3, #4294967295
 80016aa:	e009      	b.n	80016c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <_sbrk+0x64>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016b2:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <_sbrk+0x64>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4413      	add	r3, r2
 80016ba:	4a05      	ldr	r2, [pc, #20]	; (80016d0 <_sbrk+0x64>)
 80016bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016be:	68fb      	ldr	r3, [r7, #12]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20030000 	.word	0x20030000
 80016cc:	00000400 	.word	0x00000400
 80016d0:	200003c8 	.word	0x200003c8
 80016d4:	20002090 	.word	0x20002090

080016d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <SystemInit+0x20>)
 80016de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016e2:	4a05      	ldr	r2, [pc, #20]	; (80016f8 <SystemInit+0x20>)
 80016e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80016fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001734 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001700:	480d      	ldr	r0, [pc, #52]	; (8001738 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001702:	490e      	ldr	r1, [pc, #56]	; (800173c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001704:	4a0e      	ldr	r2, [pc, #56]	; (8001740 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001708:	e002      	b.n	8001710 <LoopCopyDataInit>

0800170a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800170a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800170c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800170e:	3304      	adds	r3, #4

08001710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001714:	d3f9      	bcc.n	800170a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001716:	4a0b      	ldr	r2, [pc, #44]	; (8001744 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001718:	4c0b      	ldr	r4, [pc, #44]	; (8001748 <LoopFillZerobss+0x26>)
  movs r3, #0
 800171a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800171c:	e001      	b.n	8001722 <LoopFillZerobss>

0800171e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800171e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001720:	3204      	adds	r2, #4

08001722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001724:	d3fb      	bcc.n	800171e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001726:	f7ff ffd7 	bl	80016d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800172a:	f00a fd33 	bl	800c194 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800172e:	f7ff fc73 	bl	8001018 <main>
  bx  lr    
 8001732:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001734:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800173c:	2000034c 	.word	0x2000034c
  ldr r2, =_sidata
 8001740:	08012b14 	.word	0x08012b14
  ldr r2, =_sbss
 8001744:	2000034c 	.word	0x2000034c
  ldr r4, =_ebss
 8001748:	2000208c 	.word	0x2000208c

0800174c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800174c:	e7fe      	b.n	800174c <ADC_IRQHandler>

0800174e <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001752:	f000 fcf1 	bl	8002138 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001756:	20ca      	movs	r0, #202	; 0xca
 8001758:	f000 f95d 	bl	8001a16 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 800175c:	20c3      	movs	r0, #195	; 0xc3
 800175e:	f000 f967 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001762:	2008      	movs	r0, #8
 8001764:	f000 f964 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001768:	2050      	movs	r0, #80	; 0x50
 800176a:	f000 f961 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 800176e:	20cf      	movs	r0, #207	; 0xcf
 8001770:	f000 f951 	bl	8001a16 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001774:	2000      	movs	r0, #0
 8001776:	f000 f95b 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 800177a:	20c1      	movs	r0, #193	; 0xc1
 800177c:	f000 f958 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001780:	2030      	movs	r0, #48	; 0x30
 8001782:	f000 f955 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001786:	20ed      	movs	r0, #237	; 0xed
 8001788:	f000 f945 	bl	8001a16 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 800178c:	2064      	movs	r0, #100	; 0x64
 800178e:	f000 f94f 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001792:	2003      	movs	r0, #3
 8001794:	f000 f94c 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001798:	2012      	movs	r0, #18
 800179a:	f000 f949 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 800179e:	2081      	movs	r0, #129	; 0x81
 80017a0:	f000 f946 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80017a4:	20e8      	movs	r0, #232	; 0xe8
 80017a6:	f000 f936 	bl	8001a16 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80017aa:	2085      	movs	r0, #133	; 0x85
 80017ac:	f000 f940 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80017b0:	2000      	movs	r0, #0
 80017b2:	f000 f93d 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80017b6:	2078      	movs	r0, #120	; 0x78
 80017b8:	f000 f93a 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80017bc:	20cb      	movs	r0, #203	; 0xcb
 80017be:	f000 f92a 	bl	8001a16 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80017c2:	2039      	movs	r0, #57	; 0x39
 80017c4:	f000 f934 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80017c8:	202c      	movs	r0, #44	; 0x2c
 80017ca:	f000 f931 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80017ce:	2000      	movs	r0, #0
 80017d0:	f000 f92e 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80017d4:	2034      	movs	r0, #52	; 0x34
 80017d6:	f000 f92b 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80017da:	2002      	movs	r0, #2
 80017dc:	f000 f928 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80017e0:	20f7      	movs	r0, #247	; 0xf7
 80017e2:	f000 f918 	bl	8001a16 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80017e6:	2020      	movs	r0, #32
 80017e8:	f000 f922 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80017ec:	20ea      	movs	r0, #234	; 0xea
 80017ee:	f000 f912 	bl	8001a16 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80017f2:	2000      	movs	r0, #0
 80017f4:	f000 f91c 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80017f8:	2000      	movs	r0, #0
 80017fa:	f000 f919 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80017fe:	20b1      	movs	r0, #177	; 0xb1
 8001800:	f000 f909 	bl	8001a16 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001804:	2000      	movs	r0, #0
 8001806:	f000 f913 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800180a:	201b      	movs	r0, #27
 800180c:	f000 f910 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001810:	20b6      	movs	r0, #182	; 0xb6
 8001812:	f000 f900 	bl	8001a16 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001816:	200a      	movs	r0, #10
 8001818:	f000 f90a 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 800181c:	20a2      	movs	r0, #162	; 0xa2
 800181e:	f000 f907 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001822:	20c0      	movs	r0, #192	; 0xc0
 8001824:	f000 f8f7 	bl	8001a16 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001828:	2010      	movs	r0, #16
 800182a:	f000 f901 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 800182e:	20c1      	movs	r0, #193	; 0xc1
 8001830:	f000 f8f1 	bl	8001a16 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001834:	2010      	movs	r0, #16
 8001836:	f000 f8fb 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 800183a:	20c5      	movs	r0, #197	; 0xc5
 800183c:	f000 f8eb 	bl	8001a16 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001840:	2045      	movs	r0, #69	; 0x45
 8001842:	f000 f8f5 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001846:	2015      	movs	r0, #21
 8001848:	f000 f8f2 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 800184c:	20c7      	movs	r0, #199	; 0xc7
 800184e:	f000 f8e2 	bl	8001a16 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001852:	2090      	movs	r0, #144	; 0x90
 8001854:	f000 f8ec 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001858:	2036      	movs	r0, #54	; 0x36
 800185a:	f000 f8dc 	bl	8001a16 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 800185e:	20c8      	movs	r0, #200	; 0xc8
 8001860:	f000 f8e6 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001864:	20f2      	movs	r0, #242	; 0xf2
 8001866:	f000 f8d6 	bl	8001a16 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800186a:	2000      	movs	r0, #0
 800186c:	f000 f8e0 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001870:	20b0      	movs	r0, #176	; 0xb0
 8001872:	f000 f8d0 	bl	8001a16 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001876:	20c2      	movs	r0, #194	; 0xc2
 8001878:	f000 f8da 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800187c:	20b6      	movs	r0, #182	; 0xb6
 800187e:	f000 f8ca 	bl	8001a16 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001882:	200a      	movs	r0, #10
 8001884:	f000 f8d4 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001888:	20a7      	movs	r0, #167	; 0xa7
 800188a:	f000 f8d1 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 800188e:	2027      	movs	r0, #39	; 0x27
 8001890:	f000 f8ce 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001894:	2004      	movs	r0, #4
 8001896:	f000 f8cb 	bl	8001a30 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 800189a:	202a      	movs	r0, #42	; 0x2a
 800189c:	f000 f8bb 	bl	8001a16 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80018a0:	2000      	movs	r0, #0
 80018a2:	f000 f8c5 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80018a6:	2000      	movs	r0, #0
 80018a8:	f000 f8c2 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80018ac:	2000      	movs	r0, #0
 80018ae:	f000 f8bf 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80018b2:	20ef      	movs	r0, #239	; 0xef
 80018b4:	f000 f8bc 	bl	8001a30 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80018b8:	202b      	movs	r0, #43	; 0x2b
 80018ba:	f000 f8ac 	bl	8001a16 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80018be:	2000      	movs	r0, #0
 80018c0:	f000 f8b6 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80018c4:	2000      	movs	r0, #0
 80018c6:	f000 f8b3 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80018ca:	2001      	movs	r0, #1
 80018cc:	f000 f8b0 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 80018d0:	203f      	movs	r0, #63	; 0x3f
 80018d2:	f000 f8ad 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 80018d6:	20f6      	movs	r0, #246	; 0xf6
 80018d8:	f000 f89d 	bl	8001a16 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80018dc:	2001      	movs	r0, #1
 80018de:	f000 f8a7 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80018e2:	2000      	movs	r0, #0
 80018e4:	f000 f8a4 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80018e8:	2006      	movs	r0, #6
 80018ea:	f000 f8a1 	bl	8001a30 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80018ee:	202c      	movs	r0, #44	; 0x2c
 80018f0:	f000 f891 	bl	8001a16 <ili9341_WriteReg>
  LCD_Delay(200);
 80018f4:	20c8      	movs	r0, #200	; 0xc8
 80018f6:	f000 fd0d 	bl	8002314 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80018fa:	2026      	movs	r0, #38	; 0x26
 80018fc:	f000 f88b 	bl	8001a16 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001900:	2001      	movs	r0, #1
 8001902:	f000 f895 	bl	8001a30 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001906:	20e0      	movs	r0, #224	; 0xe0
 8001908:	f000 f885 	bl	8001a16 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 800190c:	200f      	movs	r0, #15
 800190e:	f000 f88f 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001912:	2029      	movs	r0, #41	; 0x29
 8001914:	f000 f88c 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001918:	2024      	movs	r0, #36	; 0x24
 800191a:	f000 f889 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800191e:	200c      	movs	r0, #12
 8001920:	f000 f886 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001924:	200e      	movs	r0, #14
 8001926:	f000 f883 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800192a:	2009      	movs	r0, #9
 800192c:	f000 f880 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001930:	204e      	movs	r0, #78	; 0x4e
 8001932:	f000 f87d 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001936:	2078      	movs	r0, #120	; 0x78
 8001938:	f000 f87a 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 800193c:	203c      	movs	r0, #60	; 0x3c
 800193e:	f000 f877 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001942:	2009      	movs	r0, #9
 8001944:	f000 f874 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001948:	2013      	movs	r0, #19
 800194a:	f000 f871 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800194e:	2005      	movs	r0, #5
 8001950:	f000 f86e 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001954:	2017      	movs	r0, #23
 8001956:	f000 f86b 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800195a:	2011      	movs	r0, #17
 800195c:	f000 f868 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001960:	2000      	movs	r0, #0
 8001962:	f000 f865 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001966:	20e1      	movs	r0, #225	; 0xe1
 8001968:	f000 f855 	bl	8001a16 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800196c:	2000      	movs	r0, #0
 800196e:	f000 f85f 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001972:	2016      	movs	r0, #22
 8001974:	f000 f85c 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001978:	201b      	movs	r0, #27
 800197a:	f000 f859 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800197e:	2004      	movs	r0, #4
 8001980:	f000 f856 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001984:	2011      	movs	r0, #17
 8001986:	f000 f853 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 800198a:	2007      	movs	r0, #7
 800198c:	f000 f850 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001990:	2031      	movs	r0, #49	; 0x31
 8001992:	f000 f84d 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001996:	2033      	movs	r0, #51	; 0x33
 8001998:	f000 f84a 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 800199c:	2042      	movs	r0, #66	; 0x42
 800199e:	f000 f847 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80019a2:	2005      	movs	r0, #5
 80019a4:	f000 f844 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80019a8:	200c      	movs	r0, #12
 80019aa:	f000 f841 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80019ae:	200a      	movs	r0, #10
 80019b0:	f000 f83e 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80019b4:	2028      	movs	r0, #40	; 0x28
 80019b6:	f000 f83b 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80019ba:	202f      	movs	r0, #47	; 0x2f
 80019bc:	f000 f838 	bl	8001a30 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80019c0:	200f      	movs	r0, #15
 80019c2:	f000 f835 	bl	8001a30 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80019c6:	2011      	movs	r0, #17
 80019c8:	f000 f825 	bl	8001a16 <ili9341_WriteReg>
  LCD_Delay(200);
 80019cc:	20c8      	movs	r0, #200	; 0xc8
 80019ce:	f000 fca1 	bl	8002314 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80019d2:	2029      	movs	r0, #41	; 0x29
 80019d4:	f000 f81f 	bl	8001a16 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 80019d8:	202c      	movs	r0, #44	; 0x2c
 80019da:	f000 f81c 	bl	8001a16 <ili9341_WriteReg>
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80019e6:	f000 fba7 	bl	8002138 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80019ea:	2103      	movs	r1, #3
 80019ec:	20d3      	movs	r0, #211	; 0xd3
 80019ee:	f000 f82c 	bl	8001a4a <ili9341_ReadData>
 80019f2:	4603      	mov	r3, r0
 80019f4:	b29b      	uxth	r3, r3
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	bd80      	pop	{r7, pc}

080019fa <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80019fe:	2029      	movs	r0, #41	; 0x29
 8001a00:	f000 f809 	bl	8001a16 <ili9341_WriteReg>
}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001a0c:	2028      	movs	r0, #40	; 0x28
 8001a0e:	f000 f802 	bl	8001a16 <ili9341_WriteReg>
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b082      	sub	sp, #8
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001a20:	79fb      	ldrb	r3, [r7, #7]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f000 fc22 	bl	800226c <LCD_IO_WriteReg>
}
 8001a28:	bf00      	nop
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001a3a:	88fb      	ldrh	r3, [r7, #6]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f000 fbf3 	bl	8002228 <LCD_IO_WriteData>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	4603      	mov	r3, r0
 8001a52:	460a      	mov	r2, r1
 8001a54:	80fb      	strh	r3, [r7, #6]
 8001a56:	4613      	mov	r3, r2
 8001a58:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001a5a:	797a      	ldrb	r2, [r7, #5]
 8001a5c:	88fb      	ldrh	r3, [r7, #6]
 8001a5e:	4611      	mov	r1, r2
 8001a60:	4618      	mov	r0, r3
 8001a62:	f000 fc25 	bl	80022b0 <LCD_IO_ReadData>
 8001a66:	4603      	mov	r3, r0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001a74:	23f0      	movs	r3, #240	; 0xf0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001a84:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b084      	sub	sp, #16
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4603      	mov	r3, r0
 8001a9a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001aa0:	f000 fc44 	bl	800232c <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001aa4:	88fb      	ldrh	r3, [r7, #6]
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001aaa:	f107 030f 	add.w	r3, r7, #15
 8001aae:	2201      	movs	r2, #1
 8001ab0:	2120      	movs	r1, #32
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f000 fc86 	bl	80023c4 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8001ab8:	88fb      	ldrh	r3, [r7, #6]
 8001aba:	0a1b      	lsrs	r3, r3, #8
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8001ac2:	f107 030f 	add.w	r3, r7, #15
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	2123      	movs	r1, #35	; 0x23
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 fc7a 	bl	80023c4 <GYRO_IO_Write>
}
 8001ad0:	bf00      	nop
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001aec:	f000 fc1e 	bl	800232c <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8001af0:	1dfb      	adds	r3, r7, #7
 8001af2:	2201      	movs	r2, #1
 8001af4:	210f      	movs	r1, #15
 8001af6:	4618      	mov	r0, r3
 8001af8:	f000 fc96 	bl	8002428 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8001afc:	79fb      	ldrb	r3, [r7, #7]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001b0c:	1dfb      	adds	r3, r7, #7
 8001b0e:	2201      	movs	r2, #1
 8001b10:	2124      	movs	r1, #36	; 0x24
 8001b12:	4618      	mov	r0, r3
 8001b14:	f000 fc88 	bl	8002428 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001b22:	1dfb      	adds	r3, r7, #7
 8001b24:	2201      	movs	r2, #1
 8001b26:	2124      	movs	r1, #36	; 0x24
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f000 fc4b 	bl	80023c4 <GYRO_IO_Write>
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b084      	sub	sp, #16
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001b40:	2300      	movs	r3, #0
 8001b42:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001b44:	88fb      	ldrh	r3, [r7, #6]
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001b4a:	f107 030f 	add.w	r3, r7, #15
 8001b4e:	2201      	movs	r2, #1
 8001b50:	2120      	movs	r1, #32
 8001b52:	4618      	mov	r0, r3
 8001b54:	f000 fc36 	bl	80023c4 <GYRO_IO_Write>
}
 8001b58:	bf00      	nop
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	73fb      	strb	r3, [r7, #15]
 8001b6e:	2300      	movs	r3, #0
 8001b70:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001b72:	f107 030f 	add.w	r3, r7, #15
 8001b76:	2201      	movs	r2, #1
 8001b78:	2130      	movs	r1, #48	; 0x30
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 fc54 	bl	8002428 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001b80:	f107 030e 	add.w	r3, r7, #14
 8001b84:	2201      	movs	r2, #1
 8001b86:	2122      	movs	r1, #34	; 0x22
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f000 fc4d 	bl	8002428 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
 8001b90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8001b98:	88fb      	ldrh	r3, [r7, #6]
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	121b      	asrs	r3, r3, #8
 8001b9e:	b25a      	sxtb	r2, r3
 8001ba0:	7bfb      	ldrb	r3, [r7, #15]
 8001ba2:	b25b      	sxtb	r3, r3
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	b25b      	sxtb	r3, r3
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8001bac:	7bbb      	ldrb	r3, [r7, #14]
 8001bae:	f023 0320 	bic.w	r3, r3, #32
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	7bbb      	ldrb	r3, [r7, #14]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001bc2:	f107 030f 	add.w	r3, r7, #15
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	2130      	movs	r1, #48	; 0x30
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 fbfa 	bl	80023c4 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001bd0:	f107 030e 	add.w	r3, r7, #14
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	2122      	movs	r1, #34	; 0x22
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f000 fbf3 	bl	80023c4 <GYRO_IO_Write>
}
 8001bde:	bf00      	nop
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b084      	sub	sp, #16
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	4603      	mov	r3, r0
 8001bee:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001bf0:	f107 030f 	add.w	r3, r7, #15
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	2122      	movs	r1, #34	; 0x22
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f000 fc15 	bl	8002428 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d10a      	bne.n	8001c1a <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
 8001c06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
 8001c10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	73fb      	strb	r3, [r7, #15]
 8001c18:	e00c      	b.n	8001c34 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d109      	bne.n	8001c34 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
 8001c22:	f023 0308 	bic.w	r3, r3, #8
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8001c2a:	7bfb      	ldrb	r3, [r7, #15]
 8001c2c:	f043 0308 	orr.w	r3, r3, #8
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001c34:	f107 030f 	add.w	r3, r7, #15
 8001c38:	2201      	movs	r2, #1
 8001c3a:	2122      	movs	r1, #34	; 0x22
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f000 fbc1 	bl	80023c4 <GYRO_IO_Write>
}
 8001c42:	bf00      	nop
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b084      	sub	sp, #16
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	4603      	mov	r3, r0
 8001c52:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001c54:	f107 030f 	add.w	r3, r7, #15
 8001c58:	2201      	movs	r2, #1
 8001c5a:	2122      	movs	r1, #34	; 0x22
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f000 fbe3 	bl	8002428 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d107      	bne.n	8001c78 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
 8001c6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
 8001c74:	73fb      	strb	r3, [r7, #15]
 8001c76:	e009      	b.n	8001c8c <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d106      	bne.n	8001c8c <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
 8001c80:	f023 0308 	bic.w	r3, r3, #8
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
 8001c8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001c8c:	f107 030f 	add.w	r3, r7, #15
 8001c90:	2201      	movs	r2, #1
 8001c92:	2122      	movs	r1, #34	; 0x22
 8001c94:	4618      	mov	r0, r3
 8001c96:	f000 fb95 	bl	80023c4 <GYRO_IO_Write>
}
 8001c9a:	bf00      	nop
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b084      	sub	sp, #16
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	4603      	mov	r3, r0
 8001caa:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001cac:	f107 030f 	add.w	r3, r7, #15
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	2121      	movs	r1, #33	; 0x21
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f000 fbb7 	bl	8002428 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8001cba:	7bfb      	ldrb	r3, [r7, #15]
 8001cbc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8001cc4:	7bfa      	ldrb	r2, [r7, #15]
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001cce:	f107 030f 	add.w	r3, r7, #15
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	2121      	movs	r1, #33	; 0x21
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f000 fb74 	bl	80023c4 <GYRO_IO_Write>
}
 8001cdc:	bf00      	nop
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001cee:	f107 030f 	add.w	r3, r7, #15
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	2124      	movs	r1, #36	; 0x24
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 fb96 	bl	8002428 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
 8001cfe:	f023 0310 	bic.w	r3, r3, #16
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001d06:	7bfa      	ldrb	r2, [r7, #15]
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001d10:	f107 030f 	add.w	r3, r7, #15
 8001d14:	2201      	movs	r2, #1
 8001d16:	2124      	movs	r1, #36	; 0x24
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f000 fb53 	bl	80023c4 <GYRO_IO_Write>
}
 8001d1e:	bf00      	nop
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
	...

08001d28 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08c      	sub	sp, #48	; 0x30
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8001d30:	2300      	movs	r3, #0
 8001d32:	623b      	str	r3, [r7, #32]
 8001d34:	2300      	movs	r3, #0
 8001d36:	84bb      	strh	r3, [r7, #36]	; 0x24
  int16_t RawData[3] = {0};
 8001d38:	f107 0318 	add.w	r3, r7, #24
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8001d42:	2300      	movs	r3, #0
 8001d44:	75fb      	strb	r3, [r7, #23]
  float sensitivity = 0;
 8001d46:	f04f 0300 	mov.w	r3, #0
 8001d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  int i =0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	62bb      	str	r3, [r7, #40]	; 0x28
  float tem[3] = {0};
 8001d50:	f107 0308 	add.w	r3, r7, #8
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8001d5c:	f107 0317 	add.w	r3, r7, #23
 8001d60:	2201      	movs	r2, #1
 8001d62:	2123      	movs	r1, #35	; 0x23
 8001d64:	4618      	mov	r0, r3
 8001d66:	f000 fb5f 	bl	8002428 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8001d6a:	f107 0320 	add.w	r3, r7, #32
 8001d6e:	2206      	movs	r2, #6
 8001d70:	2128      	movs	r1, #40	; 0x28
 8001d72:	4618      	mov	r0, r3
 8001d74:	f000 fb58 	bl	8002428 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8001d78:	7dfb      	ldrb	r3, [r7, #23]
 8001d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d123      	bne.n	8001dca <L3GD20_ReadXYZAngRate+0xa2>
  {
    for(i=0; i<3; i++)
 8001d82:	2300      	movs	r3, #0
 8001d84:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d86:	e01c      	b.n	8001dc2 <L3GD20_ReadXYZAngRate+0x9a>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8001d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	3330      	adds	r3, #48	; 0x30
 8001d90:	443b      	add	r3, r7
 8001d92:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	021b      	lsls	r3, r3, #8
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	3330      	adds	r3, #48	; 0x30
 8001da2:	443b      	add	r3, r7
 8001da4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	4413      	add	r3, r2
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	b21a      	sxth	r2, r3
 8001db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	3330      	adds	r3, #48	; 0x30
 8001db6:	443b      	add	r3, r7
 8001db8:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	dddf      	ble.n	8001d88 <L3GD20_ReadXYZAngRate+0x60>
 8001dc8:	e022      	b.n	8001e10 <L3GD20_ReadXYZAngRate+0xe8>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8001dca:	2300      	movs	r3, #0
 8001dcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dce:	e01c      	b.n	8001e0a <L3GD20_ReadXYZAngRate+0xe2>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8001dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	3330      	adds	r3, #48	; 0x30
 8001dd6:	443b      	add	r3, r7
 8001dd8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	021b      	lsls	r3, r3, #8
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	3301      	adds	r3, #1
 8001de8:	3330      	adds	r3, #48	; 0x30
 8001dea:	443b      	add	r3, r7
 8001dec:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	4413      	add	r3, r2
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	b21a      	sxth	r2, r3
 8001df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	3330      	adds	r3, #48	; 0x30
 8001dfe:	443b      	add	r3, r7
 8001e00:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e06:	3301      	adds	r3, #1
 8001e08:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	dddf      	ble.n	8001dd0 <L3GD20_ReadXYZAngRate+0xa8>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8001e10:	7dfb      	ldrb	r3, [r7, #23]
 8001e12:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001e16:	2b20      	cmp	r3, #32
 8001e18:	d00c      	beq.n	8001e34 <L3GD20_ReadXYZAngRate+0x10c>
 8001e1a:	2b20      	cmp	r3, #32
 8001e1c:	dc0d      	bgt.n	8001e3a <L3GD20_ReadXYZAngRate+0x112>
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d002      	beq.n	8001e28 <L3GD20_ReadXYZAngRate+0x100>
 8001e22:	2b10      	cmp	r3, #16
 8001e24:	d003      	beq.n	8001e2e <L3GD20_ReadXYZAngRate+0x106>
 8001e26:	e008      	b.n	8001e3a <L3GD20_ReadXYZAngRate+0x112>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8001e28:	4b51      	ldr	r3, [pc, #324]	; (8001f70 <L3GD20_ReadXYZAngRate+0x248>)
 8001e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    break;
 8001e2c:	e005      	b.n	8001e3a <L3GD20_ReadXYZAngRate+0x112>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8001e2e:	4b51      	ldr	r3, [pc, #324]	; (8001f74 <L3GD20_ReadXYZAngRate+0x24c>)
 8001e30:	62fb      	str	r3, [r7, #44]	; 0x2c
    break;
 8001e32:	e002      	b.n	8001e3a <L3GD20_ReadXYZAngRate+0x112>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8001e34:	4b50      	ldr	r3, [pc, #320]	; (8001f78 <L3GD20_ReadXYZAngRate+0x250>)
 8001e36:	62fb      	str	r3, [r7, #44]	; 0x2c
    break;
 8001e38:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e3e:	e089      	b.n	8001f54 <L3GD20_ReadXYZAngRate+0x22c>
  {
    tem[i] = (float)(RawData[i] * sensitivity * 0.001);
 8001e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	3330      	adds	r3, #48	; 0x30
 8001e46:	443b      	add	r3, r7
 8001e48:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001e4c:	ee07 3a90 	vmov	s15, r3
 8001e50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e54:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e5c:	ee17 0a90 	vmov	r0, s15
 8001e60:	f7fe fb82 	bl	8000568 <__aeabi_f2d>
 8001e64:	a340      	add	r3, pc, #256	; (adr r3, 8001f68 <L3GD20_ReadXYZAngRate+0x240>)
 8001e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e6a:	f7fe fbd5 	bl	8000618 <__aeabi_dmul>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	4610      	mov	r0, r2
 8001e74:	4619      	mov	r1, r3
 8001e76:	f7fe fec7 	bl	8000c08 <__aeabi_d2f>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	3330      	adds	r3, #48	; 0x30
 8001e82:	443b      	add	r3, r7
 8001e84:	3b28      	subs	r3, #40	; 0x28
 8001e86:	601a      	str	r2, [r3, #0]
    if ((tem[i] < 1 && tem[i] > 0) || (tem[i] > -1 && tem[i] < 0)) {
 8001e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	3330      	adds	r3, #48	; 0x30
 8001e8e:	443b      	add	r3, r7
 8001e90:	3b28      	subs	r3, #40	; 0x28
 8001e92:	edd3 7a00 	vldr	s15, [r3]
 8001e96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea2:	d50b      	bpl.n	8001ebc <L3GD20_ReadXYZAngRate+0x194>
 8001ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	3330      	adds	r3, #48	; 0x30
 8001eaa:	443b      	add	r3, r7
 8001eac:	3b28      	subs	r3, #40	; 0x28
 8001eae:	edd3 7a00 	vldr	s15, [r3]
 8001eb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eba:	dc19      	bgt.n	8001ef0 <L3GD20_ReadXYZAngRate+0x1c8>
 8001ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	3330      	adds	r3, #48	; 0x30
 8001ec2:	443b      	add	r3, r7
 8001ec4:	3b28      	subs	r3, #40	; 0x28
 8001ec6:	edd3 7a00 	vldr	s15, [r3]
 8001eca:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001ece:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed6:	dd13      	ble.n	8001f00 <L3GD20_ReadXYZAngRate+0x1d8>
 8001ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	3330      	adds	r3, #48	; 0x30
 8001ede:	443b      	add	r3, r7
 8001ee0:	3b28      	subs	r3, #40	; 0x28
 8001ee2:	edd3 7a00 	vldr	s15, [r3]
 8001ee6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eee:	d507      	bpl.n	8001f00 <L3GD20_ReadXYZAngRate+0x1d8>
    	pfData[i] = 0;
 8001ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	f04f 0200 	mov.w	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	e026      	b.n	8001f4e <L3GD20_ReadXYZAngRate+0x226>
    }
    else {
    	if (tem[i] !=  0) {
 8001f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	3330      	adds	r3, #48	; 0x30
 8001f06:	443b      	add	r3, r7
 8001f08:	3b28      	subs	r3, #40	; 0x28
 8001f0a:	edd3 7a00 	vldr	s15, [r3]
 8001f0e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f16:	d00f      	beq.n	8001f38 <L3GD20_ReadXYZAngRate+0x210>
    		pfData[i] = tem[i] + tem[i];
 8001f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	3330      	adds	r3, #48	; 0x30
 8001f1e:	443b      	add	r3, r7
 8001f20:	3b28      	subs	r3, #40	; 0x28
 8001f22:	edd3 7a00 	vldr	s15, [r3]
 8001f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f32:	edc3 7a00 	vstr	s15, [r3]
 8001f36:	e00a      	b.n	8001f4e <L3GD20_ReadXYZAngRate+0x226>
    	}
    	else pfData[i] = tem[i];
 8001f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	4413      	add	r3, r2
 8001f40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f42:	0092      	lsls	r2, r2, #2
 8001f44:	3230      	adds	r2, #48	; 0x30
 8001f46:	443a      	add	r2, r7
 8001f48:	3a28      	subs	r2, #40	; 0x28
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	601a      	str	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f50:	3301      	adds	r3, #1
 8001f52:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	f77f af72 	ble.w	8001e40 <L3GD20_ReadXYZAngRate+0x118>
    }
  }
}
 8001f5c:	bf00      	nop
 8001f5e:	bf00      	nop
 8001f60:	3730      	adds	r7, #48	; 0x30
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	d2f1a9fc 	.word	0xd2f1a9fc
 8001f6c:	3f50624d 	.word	0x3f50624d
 8001f70:	410c0000 	.word	0x410c0000
 8001f74:	418c0000 	.word	0x418c0000
 8001f78:	428c0000 	.word	0x428c0000

08001f7c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001f80:	4819      	ldr	r0, [pc, #100]	; (8001fe8 <SPIx_Init+0x6c>)
 8001f82:	f005 fd60 	bl	8007a46 <HAL_SPI_GetState>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d12b      	bne.n	8001fe4 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001f8c:	4b16      	ldr	r3, [pc, #88]	; (8001fe8 <SPIx_Init+0x6c>)
 8001f8e:	4a17      	ldr	r2, [pc, #92]	; (8001fec <SPIx_Init+0x70>)
 8001f90:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001f92:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <SPIx_Init+0x6c>)
 8001f94:	2218      	movs	r2, #24
 8001f96:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001f98:	4b13      	ldr	r3, [pc, #76]	; (8001fe8 <SPIx_Init+0x6c>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001f9e:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <SPIx_Init+0x6c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001fa4:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <SPIx_Init+0x6c>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001faa:	4b0f      	ldr	r3, [pc, #60]	; (8001fe8 <SPIx_Init+0x6c>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001fb0:	4b0d      	ldr	r3, [pc, #52]	; (8001fe8 <SPIx_Init+0x6c>)
 8001fb2:	2207      	movs	r2, #7
 8001fb4:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001fb6:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <SPIx_Init+0x6c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001fbc:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <SPIx_Init+0x6c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001fc2:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <SPIx_Init+0x6c>)
 8001fc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fc8:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001fca:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <SPIx_Init+0x6c>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001fd0:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <SPIx_Init+0x6c>)
 8001fd2:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fd6:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8001fd8:	4803      	ldr	r0, [pc, #12]	; (8001fe8 <SPIx_Init+0x6c>)
 8001fda:	f000 f873 	bl	80020c4 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001fde:	4802      	ldr	r0, [pc, #8]	; (8001fe8 <SPIx_Init+0x6c>)
 8001fe0:	f005 f891 	bl	8007106 <HAL_SPI_Init>
  } 
}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	200003cc 	.word	0x200003cc
 8001fec:	40015000 	.word	0x40015000

08001ff0 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	b29a      	uxth	r2, r3
 8002002:	4b09      	ldr	r3, [pc, #36]	; (8002028 <SPIx_Read+0x38>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f107 0108 	add.w	r1, r7, #8
 800200a:	4808      	ldr	r0, [pc, #32]	; (800202c <SPIx_Read+0x3c>)
 800200c:	f005 fa68 	bl	80074e0 <HAL_SPI_Receive>
 8002010:	4603      	mov	r3, r0
 8002012:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002014:	7bfb      	ldrb	r3, [r7, #15]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800201a:	f000 f847 	bl	80020ac <SPIx_Error>
  }
  
  return readvalue;
 800201e:	68bb      	ldr	r3, [r7, #8]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20000070 	.word	0x20000070
 800202c:	200003cc 	.word	0x200003cc

08002030 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800203a:	2300      	movs	r3, #0
 800203c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 800203e:	4b09      	ldr	r3, [pc, #36]	; (8002064 <SPIx_Write+0x34>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	1db9      	adds	r1, r7, #6
 8002044:	2201      	movs	r2, #1
 8002046:	4808      	ldr	r0, [pc, #32]	; (8002068 <SPIx_Write+0x38>)
 8002048:	f005 f90e 	bl	8007268 <HAL_SPI_Transmit>
 800204c:	4603      	mov	r3, r0
 800204e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002050:	7bfb      	ldrb	r3, [r7, #15]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002056:	f000 f829 	bl	80020ac <SPIx_Error>
  }
}
 800205a:	bf00      	nop
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000070 	.word	0x20000070
 8002068:	200003cc 	.word	0x200003cc

0800206c <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af02      	add	r7, sp, #8
 8002072:	4603      	mov	r3, r0
 8002074:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8002076:	2300      	movs	r3, #0
 8002078:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 800207a:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <SPIx_WriteRead+0x38>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f107 020f 	add.w	r2, r7, #15
 8002082:	1df9      	adds	r1, r7, #7
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	2301      	movs	r3, #1
 8002088:	4807      	ldr	r0, [pc, #28]	; (80020a8 <SPIx_WriteRead+0x3c>)
 800208a:	f005 fb3a 	bl	8007702 <HAL_SPI_TransmitReceive>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8002094:	f000 f80a 	bl	80020ac <SPIx_Error>
  }
  
  return receivedbyte;
 8002098:	7bfb      	ldrb	r3, [r7, #15]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000070 	.word	0x20000070
 80020a8:	200003cc 	.word	0x200003cc

080020ac <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80020b0:	4803      	ldr	r0, [pc, #12]	; (80020c0 <SPIx_Error+0x14>)
 80020b2:	f005 f8b1 	bl	8007218 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80020b6:	f7ff ff61 	bl	8001f7c <SPIx_Init>
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	200003cc 	.word	0x200003cc

080020c4 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08a      	sub	sp, #40	; 0x28
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80020cc:	2300      	movs	r3, #0
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	4b17      	ldr	r3, [pc, #92]	; (8002130 <SPIx_MspInit+0x6c>)
 80020d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d4:	4a16      	ldr	r2, [pc, #88]	; (8002130 <SPIx_MspInit+0x6c>)
 80020d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020da:	6453      	str	r3, [r2, #68]	; 0x44
 80020dc:	4b14      	ldr	r3, [pc, #80]	; (8002130 <SPIx_MspInit+0x6c>)
 80020de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020e4:	613b      	str	r3, [r7, #16]
 80020e6:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80020e8:	2300      	movs	r3, #0
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	4b10      	ldr	r3, [pc, #64]	; (8002130 <SPIx_MspInit+0x6c>)
 80020ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f0:	4a0f      	ldr	r2, [pc, #60]	; (8002130 <SPIx_MspInit+0x6c>)
 80020f2:	f043 0320 	orr.w	r3, r3, #32
 80020f6:	6313      	str	r3, [r2, #48]	; 0x30
 80020f8:	4b0d      	ldr	r3, [pc, #52]	; (8002130 <SPIx_MspInit+0x6c>)
 80020fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fc:	f003 0320 	and.w	r3, r3, #32
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002104:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002108:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800210a:	2302      	movs	r3, #2
 800210c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800210e:	2302      	movs	r3, #2
 8002110:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002112:	2301      	movs	r3, #1
 8002114:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002116:	2305      	movs	r3, #5
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800211a:	f107 0314 	add.w	r3, r7, #20
 800211e:	4619      	mov	r1, r3
 8002120:	4804      	ldr	r0, [pc, #16]	; (8002134 <SPIx_MspInit+0x70>)
 8002122:	f002 f8fd 	bl	8004320 <HAL_GPIO_Init>
}
 8002126:	bf00      	nop
 8002128:	3728      	adds	r7, #40	; 0x28
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40023800 	.word	0x40023800
 8002134:	40021400 	.word	0x40021400

08002138 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b088      	sub	sp, #32
 800213c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 800213e:	4b36      	ldr	r3, [pc, #216]	; (8002218 <LCD_IO_Init+0xe0>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d164      	bne.n	8002210 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8002146:	4b34      	ldr	r3, [pc, #208]	; (8002218 <LCD_IO_Init+0xe0>)
 8002148:	2201      	movs	r2, #1
 800214a:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 800214c:	2300      	movs	r3, #0
 800214e:	60bb      	str	r3, [r7, #8]
 8002150:	4b32      	ldr	r3, [pc, #200]	; (800221c <LCD_IO_Init+0xe4>)
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	4a31      	ldr	r2, [pc, #196]	; (800221c <LCD_IO_Init+0xe4>)
 8002156:	f043 0308 	orr.w	r3, r3, #8
 800215a:	6313      	str	r3, [r2, #48]	; 0x30
 800215c:	4b2f      	ldr	r3, [pc, #188]	; (800221c <LCD_IO_Init+0xe4>)
 800215e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002160:	f003 0308 	and.w	r3, r3, #8
 8002164:	60bb      	str	r3, [r7, #8]
 8002166:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002168:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800216c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800216e:	2301      	movs	r3, #1
 8002170:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002176:	2302      	movs	r3, #2
 8002178:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800217a:	f107 030c 	add.w	r3, r7, #12
 800217e:	4619      	mov	r1, r3
 8002180:	4827      	ldr	r0, [pc, #156]	; (8002220 <LCD_IO_Init+0xe8>)
 8002182:	f002 f8cd 	bl	8004320 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	607b      	str	r3, [r7, #4]
 800218a:	4b24      	ldr	r3, [pc, #144]	; (800221c <LCD_IO_Init+0xe4>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	4a23      	ldr	r2, [pc, #140]	; (800221c <LCD_IO_Init+0xe4>)
 8002190:	f043 0308 	orr.w	r3, r3, #8
 8002194:	6313      	str	r3, [r2, #48]	; 0x30
 8002196:	4b21      	ldr	r3, [pc, #132]	; (800221c <LCD_IO_Init+0xe4>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	607b      	str	r3, [r7, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80021a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80021a8:	2301      	movs	r3, #1
 80021aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80021b0:	2302      	movs	r3, #2
 80021b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80021b4:	f107 030c 	add.w	r3, r7, #12
 80021b8:	4619      	mov	r1, r3
 80021ba:	4819      	ldr	r0, [pc, #100]	; (8002220 <LCD_IO_Init+0xe8>)
 80021bc:	f002 f8b0 	bl	8004320 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80021c0:	2300      	movs	r3, #0
 80021c2:	603b      	str	r3, [r7, #0]
 80021c4:	4b15      	ldr	r3, [pc, #84]	; (800221c <LCD_IO_Init+0xe4>)
 80021c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c8:	4a14      	ldr	r2, [pc, #80]	; (800221c <LCD_IO_Init+0xe4>)
 80021ca:	f043 0304 	orr.w	r3, r3, #4
 80021ce:	6313      	str	r3, [r2, #48]	; 0x30
 80021d0:	4b12      	ldr	r3, [pc, #72]	; (800221c <LCD_IO_Init+0xe4>)
 80021d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	603b      	str	r3, [r7, #0]
 80021da:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80021dc:	2304      	movs	r3, #4
 80021de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80021e0:	2301      	movs	r3, #1
 80021e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80021e8:	2302      	movs	r3, #2
 80021ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80021ec:	f107 030c 	add.w	r3, r7, #12
 80021f0:	4619      	mov	r1, r3
 80021f2:	480c      	ldr	r0, [pc, #48]	; (8002224 <LCD_IO_Init+0xec>)
 80021f4:	f002 f894 	bl	8004320 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80021f8:	2200      	movs	r2, #0
 80021fa:	2104      	movs	r1, #4
 80021fc:	4809      	ldr	r0, [pc, #36]	; (8002224 <LCD_IO_Init+0xec>)
 80021fe:	f002 fb47 	bl	8004890 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002202:	2201      	movs	r2, #1
 8002204:	2104      	movs	r1, #4
 8002206:	4807      	ldr	r0, [pc, #28]	; (8002224 <LCD_IO_Init+0xec>)
 8002208:	f002 fb42 	bl	8004890 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 800220c:	f7ff feb6 	bl	8001f7c <SPIx_Init>
  }
}
 8002210:	bf00      	nop
 8002212:	3720      	adds	r7, #32
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	20000424 	.word	0x20000424
 800221c:	40023800 	.word	0x40023800
 8002220:	40020c00 	.word	0x40020c00
 8002224:	40020800 	.word	0x40020800

08002228 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002232:	2201      	movs	r2, #1
 8002234:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002238:	480a      	ldr	r0, [pc, #40]	; (8002264 <LCD_IO_WriteData+0x3c>)
 800223a:	f002 fb29 	bl	8004890 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 800223e:	2200      	movs	r2, #0
 8002240:	2104      	movs	r1, #4
 8002242:	4809      	ldr	r0, [pc, #36]	; (8002268 <LCD_IO_WriteData+0x40>)
 8002244:	f002 fb24 	bl	8004890 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8002248:	88fb      	ldrh	r3, [r7, #6]
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff fef0 	bl	8002030 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002250:	2201      	movs	r2, #1
 8002252:	2104      	movs	r1, #4
 8002254:	4804      	ldr	r0, [pc, #16]	; (8002268 <LCD_IO_WriteData+0x40>)
 8002256:	f002 fb1b 	bl	8004890 <HAL_GPIO_WritePin>
}
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40020c00 	.word	0x40020c00
 8002268:	40020800 	.word	0x40020800

0800226c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002276:	2200      	movs	r2, #0
 8002278:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800227c:	480a      	ldr	r0, [pc, #40]	; (80022a8 <LCD_IO_WriteReg+0x3c>)
 800227e:	f002 fb07 	bl	8004890 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002282:	2200      	movs	r2, #0
 8002284:	2104      	movs	r1, #4
 8002286:	4809      	ldr	r0, [pc, #36]	; (80022ac <LCD_IO_WriteReg+0x40>)
 8002288:	f002 fb02 	bl	8004890 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 800228c:	79fb      	ldrb	r3, [r7, #7]
 800228e:	b29b      	uxth	r3, r3
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fecd 	bl	8002030 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002296:	2201      	movs	r2, #1
 8002298:	2104      	movs	r1, #4
 800229a:	4804      	ldr	r0, [pc, #16]	; (80022ac <LCD_IO_WriteReg+0x40>)
 800229c:	f002 faf8 	bl	8004890 <HAL_GPIO_WritePin>
}
 80022a0:	bf00      	nop
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40020c00 	.word	0x40020c00
 80022ac:	40020800 	.word	0x40020800

080022b0 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	460a      	mov	r2, r1
 80022ba:	80fb      	strh	r3, [r7, #6]
 80022bc:	4613      	mov	r3, r2
 80022be:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80022c0:	2300      	movs	r3, #0
 80022c2:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80022c4:	2200      	movs	r2, #0
 80022c6:	2104      	movs	r1, #4
 80022c8:	4810      	ldr	r0, [pc, #64]	; (800230c <LCD_IO_ReadData+0x5c>)
 80022ca:	f002 fae1 	bl	8004890 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80022ce:	2200      	movs	r2, #0
 80022d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022d4:	480e      	ldr	r0, [pc, #56]	; (8002310 <LCD_IO_ReadData+0x60>)
 80022d6:	f002 fadb 	bl	8004890 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80022da:	88fb      	ldrh	r3, [r7, #6]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff fea7 	bl	8002030 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 80022e2:	797b      	ldrb	r3, [r7, #5]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff fe83 	bl	8001ff0 <SPIx_Read>
 80022ea:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80022ec:	2201      	movs	r2, #1
 80022ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022f2:	4807      	ldr	r0, [pc, #28]	; (8002310 <LCD_IO_ReadData+0x60>)
 80022f4:	f002 facc 	bl	8004890 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80022f8:	2201      	movs	r2, #1
 80022fa:	2104      	movs	r1, #4
 80022fc:	4803      	ldr	r0, [pc, #12]	; (800230c <LCD_IO_ReadData+0x5c>)
 80022fe:	f002 fac7 	bl	8004890 <HAL_GPIO_WritePin>
  
  return readvalue;
 8002302:	68fb      	ldr	r3, [r7, #12]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40020800 	.word	0x40020800
 8002310:	40020c00 	.word	0x40020c00

08002314 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f001 fa75 	bl	800380c <HAL_Delay>
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
	...

0800232c <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b088      	sub	sp, #32
 8002330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8002332:	2300      	movs	r3, #0
 8002334:	60bb      	str	r3, [r7, #8]
 8002336:	4b20      	ldr	r3, [pc, #128]	; (80023b8 <GYRO_IO_Init+0x8c>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	4a1f      	ldr	r2, [pc, #124]	; (80023b8 <GYRO_IO_Init+0x8c>)
 800233c:	f043 0304 	orr.w	r3, r3, #4
 8002340:	6313      	str	r3, [r2, #48]	; 0x30
 8002342:	4b1d      	ldr	r3, [pc, #116]	; (80023b8 <GYRO_IO_Init+0x8c>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	f003 0304 	and.w	r3, r3, #4
 800234a:	60bb      	str	r3, [r7, #8]
 800234c:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 800234e:	2302      	movs	r3, #2
 8002350:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8002352:	2301      	movs	r3, #1
 8002354:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 800235a:	2301      	movs	r3, #1
 800235c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800235e:	f107 030c 	add.w	r3, r7, #12
 8002362:	4619      	mov	r1, r3
 8002364:	4815      	ldr	r0, [pc, #84]	; (80023bc <GYRO_IO_Init+0x90>)
 8002366:	f001 ffdb 	bl	8004320 <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 800236a:	2201      	movs	r2, #1
 800236c:	2102      	movs	r1, #2
 800236e:	4813      	ldr	r0, [pc, #76]	; (80023bc <GYRO_IO_Init+0x90>)
 8002370:	f002 fa8e 	bl	8004890 <HAL_GPIO_WritePin>
  
  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8002374:	2300      	movs	r3, #0
 8002376:	607b      	str	r3, [r7, #4]
 8002378:	4b0f      	ldr	r3, [pc, #60]	; (80023b8 <GYRO_IO_Init+0x8c>)
 800237a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237c:	4a0e      	ldr	r2, [pc, #56]	; (80023b8 <GYRO_IO_Init+0x8c>)
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	6313      	str	r3, [r2, #48]	; 0x30
 8002384:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <GYRO_IO_Init+0x8c>)
 8002386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	607b      	str	r3, [r7, #4]
 800238e:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8002390:	2306      	movs	r3, #6
 8002392:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8002394:	2300      	movs	r3, #0
 8002396:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002398:	2302      	movs	r3, #2
 800239a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 80023a0:	f107 030c 	add.w	r3, r7, #12
 80023a4:	4619      	mov	r1, r3
 80023a6:	4806      	ldr	r0, [pc, #24]	; (80023c0 <GYRO_IO_Init+0x94>)
 80023a8:	f001 ffba 	bl	8004320 <HAL_GPIO_Init>

  SPIx_Init();
 80023ac:	f7ff fde6 	bl	8001f7c <SPIx_Init>
}
 80023b0:	bf00      	nop
 80023b2:	3720      	adds	r7, #32
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40020800 	.word	0x40020800
 80023c0:	40020000 	.word	0x40020000

080023c4 <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	70fb      	strb	r3, [r7, #3]
 80023d0:	4613      	mov	r3, r2
 80023d2:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 80023d4:	883b      	ldrh	r3, [r7, #0]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d903      	bls.n	80023e2 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 80023da:	78fb      	ldrb	r3, [r7, #3]
 80023dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023e0:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80023e2:	2200      	movs	r2, #0
 80023e4:	2102      	movs	r1, #2
 80023e6:	480f      	ldr	r0, [pc, #60]	; (8002424 <GYRO_IO_Write+0x60>)
 80023e8:	f002 fa52 	bl	8004890 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 80023ec:	78fb      	ldrb	r3, [r7, #3]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff fe3c 	bl	800206c <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 80023f4:	e00a      	b.n	800240c <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff fe36 	bl	800206c <SPIx_WriteRead>
    NumByteToWrite--;
 8002400:	883b      	ldrh	r3, [r7, #0]
 8002402:	3b01      	subs	r3, #1
 8002404:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	3301      	adds	r3, #1
 800240a:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 800240c:	883b      	ldrh	r3, [r7, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f1      	bne.n	80023f6 <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8002412:	2201      	movs	r2, #1
 8002414:	2102      	movs	r1, #2
 8002416:	4803      	ldr	r0, [pc, #12]	; (8002424 <GYRO_IO_Write+0x60>)
 8002418:	f002 fa3a 	bl	8004890 <HAL_GPIO_WritePin>
}
 800241c:	bf00      	nop
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40020800 	.word	0x40020800

08002428 <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	460b      	mov	r3, r1
 8002432:	70fb      	strb	r3, [r7, #3]
 8002434:	4613      	mov	r3, r2
 8002436:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8002438:	883b      	ldrh	r3, [r7, #0]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d904      	bls.n	8002448 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 800243e:	78fb      	ldrb	r3, [r7, #3]
 8002440:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002444:	70fb      	strb	r3, [r7, #3]
 8002446:	e003      	b.n	8002450 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8002448:	78fb      	ldrb	r3, [r7, #3]
 800244a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800244e:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8002450:	2200      	movs	r2, #0
 8002452:	2102      	movs	r1, #2
 8002454:	4810      	ldr	r0, [pc, #64]	; (8002498 <GYRO_IO_Read+0x70>)
 8002456:	f002 fa1b 	bl	8004890 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 800245a:	78fb      	ldrb	r3, [r7, #3]
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff fe05 	bl	800206c <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8002462:	e00c      	b.n	800247e <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8002464:	2000      	movs	r0, #0
 8002466:	f7ff fe01 	bl	800206c <SPIx_WriteRead>
 800246a:	4603      	mov	r3, r0
 800246c:	461a      	mov	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8002472:	883b      	ldrh	r3, [r7, #0]
 8002474:	3b01      	subs	r3, #1
 8002476:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3301      	adds	r3, #1
 800247c:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 800247e:	883b      	ldrh	r3, [r7, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1ef      	bne.n	8002464 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8002484:	2201      	movs	r2, #1
 8002486:	2102      	movs	r1, #2
 8002488:	4803      	ldr	r0, [pc, #12]	; (8002498 <GYRO_IO_Read+0x70>)
 800248a:	f002 fa01 	bl	8004890 <HAL_GPIO_WritePin>
}  
 800248e:	bf00      	nop
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40020800 	.word	0x40020800

0800249c <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80024a6:	2300      	movs	r3, #0
 80024a8:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 80024aa:	2300      	movs	r3, #0
 80024ac:	703b      	strb	r3, [r7, #0]
 80024ae:	2300      	movs	r3, #0
 80024b0:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 80024b2:	4b2b      	ldr	r3, [pc, #172]	; (8002560 <BSP_GYRO_Init+0xc4>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	4798      	blx	r3
 80024b8:	4603      	mov	r3, r0
 80024ba:	2bd4      	cmp	r3, #212	; 0xd4
 80024bc:	d005      	beq.n	80024ca <BSP_GYRO_Init+0x2e>
 80024be:	4b28      	ldr	r3, [pc, #160]	; (8002560 <BSP_GYRO_Init+0xc4>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	4798      	blx	r3
 80024c4:	4603      	mov	r3, r0
 80024c6:	2bd5      	cmp	r3, #213	; 0xd5
 80024c8:	d145      	bne.n	8002556 <BSP_GYRO_Init+0xba>
  {	
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 80024ca:	4b26      	ldr	r3, [pc, #152]	; (8002564 <BSP_GYRO_Init+0xc8>)
 80024cc:	4a24      	ldr	r2, [pc, #144]	; (8002560 <BSP_GYRO_Init+0xc4>)
 80024ce:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 80024d0:	2308      	movs	r3, #8
 80024d2:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 80024d4:	2300      	movs	r3, #0
 80024d6:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 80024d8:	2307      	movs	r3, #7
 80024da:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 80024dc:	2330      	movs	r3, #48	; 0x30
 80024de:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 80024e0:	2300      	movs	r3, #0
 80024e2:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 80024e4:	2300      	movs	r3, #0
 80024e6:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 80024e8:	2310      	movs	r3, #16
 80024ea:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80024ec:	793a      	ldrb	r2, [r7, #4]
 80024ee:	797b      	ldrb	r3, [r7, #5]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80024f4:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80024f6:	4313      	orrs	r3, r2
 80024f8:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80024fa:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80024fc:	4313      	orrs	r3, r2
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8002502:	7a3a      	ldrb	r2, [r7, #8]
 8002504:	7a7b      	ldrb	r3, [r7, #9]
 8002506:	4313      	orrs	r3, r2
 8002508:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 800250a:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 800250c:	4313      	orrs	r3, r2
 800250e:	b2db      	uxtb	r3, r3
 8002510:	b29b      	uxth	r3, r3
 8002512:	021b      	lsls	r3, r3, #8
 8002514:	b29a      	uxth	r2, r3
 8002516:	89bb      	ldrh	r3, [r7, #12]
 8002518:	4313      	orrs	r3, r2
 800251a:	81bb      	strh	r3, [r7, #12]
    
    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 800251c:	4b11      	ldr	r3, [pc, #68]	; (8002564 <BSP_GYRO_Init+0xc8>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	89ba      	ldrh	r2, [r7, #12]
 8002524:	4610      	mov	r0, r2
 8002526:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 8002528:	2300      	movs	r3, #0
 800252a:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 800252c:	2300      	movs	r3, #0
 800252e:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8002530:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8002532:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8002534:	4313      	orrs	r3, r2
 8002536:	b2db      	uxtb	r3, r3
 8002538:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 800253a:	4b0a      	ldr	r3, [pc, #40]	; (8002564 <BSP_GYRO_Init+0xc8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002540:	89ba      	ldrh	r2, [r7, #12]
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	4610      	mov	r0, r2
 8002546:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8002548:	4b06      	ldr	r3, [pc, #24]	; (8002564 <BSP_GYRO_Init+0xc8>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254e:	2010      	movs	r0, #16
 8002550:	4798      	blx	r3

    ret = GYRO_OK;
 8002552:	2300      	movs	r3, #0
 8002554:	73fb      	strb	r3, [r7, #15]
    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);

    ret = GYRO_OK;
  }
#endif /* USE_STM32F429I_DISCOVERY_REVD */
  return ret;
 8002556:	7bfb      	ldrb	r3, [r7, #15]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	2000003c 	.word	0x2000003c
 8002564:	20000428 	.word	0x20000428

08002568 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 8002570:	4b06      	ldr	r3, [pc, #24]	; (800258c <BSP_GYRO_GetXYZ+0x24>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	2b00      	cmp	r3, #0
 8002578:	d004      	beq.n	8002584 <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 800257a:	4b04      	ldr	r3, [pc, #16]	; (800258c <BSP_GYRO_GetXYZ+0x24>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	4798      	blx	r3
  }
}
 8002584:	bf00      	nop
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	20000428 	.word	0x20000428

08002590 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002594:	4b2d      	ldr	r3, [pc, #180]	; (800264c <BSP_LCD_Init+0xbc>)
 8002596:	4a2e      	ldr	r2, [pc, #184]	; (8002650 <BSP_LCD_Init+0xc0>)
 8002598:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 800259a:	4b2c      	ldr	r3, [pc, #176]	; (800264c <BSP_LCD_Init+0xbc>)
 800259c:	2209      	movs	r2, #9
 800259e:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80025a0:	4b2a      	ldr	r3, [pc, #168]	; (800264c <BSP_LCD_Init+0xbc>)
 80025a2:	2201      	movs	r2, #1
 80025a4:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80025a6:	4b29      	ldr	r3, [pc, #164]	; (800264c <BSP_LCD_Init+0xbc>)
 80025a8:	221d      	movs	r2, #29
 80025aa:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80025ac:	4b27      	ldr	r3, [pc, #156]	; (800264c <BSP_LCD_Init+0xbc>)
 80025ae:	2203      	movs	r2, #3
 80025b0:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 80025b2:	4b26      	ldr	r3, [pc, #152]	; (800264c <BSP_LCD_Init+0xbc>)
 80025b4:	f240 120d 	movw	r2, #269	; 0x10d
 80025b8:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80025ba:	4b24      	ldr	r3, [pc, #144]	; (800264c <BSP_LCD_Init+0xbc>)
 80025bc:	f240 1243 	movw	r2, #323	; 0x143
 80025c0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80025c2:	4b22      	ldr	r3, [pc, #136]	; (800264c <BSP_LCD_Init+0xbc>)
 80025c4:	f240 1217 	movw	r2, #279	; 0x117
 80025c8:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80025ca:	4b20      	ldr	r3, [pc, #128]	; (800264c <BSP_LCD_Init+0xbc>)
 80025cc:	f240 1247 	movw	r2, #327	; 0x147
 80025d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 80025d2:	4b1e      	ldr	r3, [pc, #120]	; (800264c <BSP_LCD_Init+0xbc>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80025da:	4b1c      	ldr	r3, [pc, #112]	; (800264c <BSP_LCD_Init+0xbc>)
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80025e2:	4b1a      	ldr	r3, [pc, #104]	; (800264c <BSP_LCD_Init+0xbc>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80025ea:	4b1a      	ldr	r3, [pc, #104]	; (8002654 <BSP_LCD_Init+0xc4>)
 80025ec:	2208      	movs	r2, #8
 80025ee:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80025f0:	4b18      	ldr	r3, [pc, #96]	; (8002654 <BSP_LCD_Init+0xc4>)
 80025f2:	22c0      	movs	r2, #192	; 0xc0
 80025f4:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80025f6:	4b17      	ldr	r3, [pc, #92]	; (8002654 <BSP_LCD_Init+0xc4>)
 80025f8:	2204      	movs	r2, #4
 80025fa:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80025fc:	4b15      	ldr	r3, [pc, #84]	; (8002654 <BSP_LCD_Init+0xc4>)
 80025fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002602:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002604:	4813      	ldr	r0, [pc, #76]	; (8002654 <BSP_LCD_Init+0xc4>)
 8002606:	f004 fb23 	bl	8006c50 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800260a:	4b10      	ldr	r3, [pc, #64]	; (800264c <BSP_LCD_Init+0xbc>)
 800260c:	2200      	movs	r2, #0
 800260e:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002610:	4b0e      	ldr	r3, [pc, #56]	; (800264c <BSP_LCD_Init+0xbc>)
 8002612:	2200      	movs	r2, #0
 8002614:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002616:	4b0d      	ldr	r3, [pc, #52]	; (800264c <BSP_LCD_Init+0xbc>)
 8002618:	2200      	movs	r2, #0
 800261a:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800261c:	4b0b      	ldr	r3, [pc, #44]	; (800264c <BSP_LCD_Init+0xbc>)
 800261e:	2200      	movs	r2, #0
 8002620:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8002622:	f000 fcc9 	bl	8002fb8 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002626:	4809      	ldr	r0, [pc, #36]	; (800264c <BSP_LCD_Init+0xbc>)
 8002628:	f002 f94c 	bl	80048c4 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 800262c:	4b0a      	ldr	r3, [pc, #40]	; (8002658 <BSP_LCD_Init+0xc8>)
 800262e:	4a0b      	ldr	r2, [pc, #44]	; (800265c <BSP_LCD_Init+0xcc>)
 8002630:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002632:	4b09      	ldr	r3, [pc, #36]	; (8002658 <BSP_LCD_Init+0xc8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 800263a:	f000 feab 	bl	8003394 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800263e:	4808      	ldr	r0, [pc, #32]	; (8002660 <BSP_LCD_Init+0xd0>)
 8002640:	f000 f8ce 	bl	80027e0 <BSP_LCD_SetFont>

  return LCD_OK;
 8002644:	2300      	movs	r3, #0
}  
 8002646:	4618      	mov	r0, r3
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	2000042c 	.word	0x2000042c
 8002650:	40016800 	.word	0x40016800
 8002654:	20000514 	.word	0x20000514
 8002658:	20000560 	.word	0x20000560
 800265c:	20000004 	.word	0x20000004
 8002660:	20000074 	.word	0x20000074

08002664 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002668:	4b03      	ldr	r3, [pc, #12]	; (8002678 <BSP_LCD_GetXSize+0x14>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266e:	4798      	blx	r3
 8002670:	4603      	mov	r3, r0
}
 8002672:	4618      	mov	r0, r3
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20000560 	.word	0x20000560

0800267c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002680:	4b03      	ldr	r3, [pc, #12]	; (8002690 <BSP_LCD_GetYSize+0x14>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002686:	4798      	blx	r3
 8002688:	4603      	mov	r3, r0
}
 800268a:	4618      	mov	r0, r3
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20000560 	.word	0x20000560

08002694 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002694:	b580      	push	{r7, lr}
 8002696:	b090      	sub	sp, #64	; 0x40
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	6039      	str	r1, [r7, #0]
 800269e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80026a4:	f7ff ffde 	bl	8002664 <BSP_LCD_GetXSize>
 80026a8:	4603      	mov	r3, r0
 80026aa:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80026b0:	f7ff ffe4 	bl	800267c <BSP_LCD_GetYSize>
 80026b4:	4603      	mov	r3, r0
 80026b6:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80026b8:	2300      	movs	r3, #0
 80026ba:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80026c0:	23ff      	movs	r3, #255	; 0xff
 80026c2:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80026c8:	2300      	movs	r3, #0
 80026ca:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80026ce:	2300      	movs	r3, #0
 80026d0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80026d4:	2300      	movs	r3, #0
 80026d6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80026da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80026de:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80026e0:	2307      	movs	r3, #7
 80026e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80026e4:	f7ff ffbe 	bl	8002664 <BSP_LCD_GetXSize>
 80026e8:	4603      	mov	r3, r0
 80026ea:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80026ec:	f7ff ffc6 	bl	800267c <BSP_LCD_GetYSize>
 80026f0:	4603      	mov	r3, r0
 80026f2:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80026f4:	88fa      	ldrh	r2, [r7, #6]
 80026f6:	f107 030c 	add.w	r3, r7, #12
 80026fa:	4619      	mov	r1, r3
 80026fc:	4814      	ldr	r0, [pc, #80]	; (8002750 <BSP_LCD_LayerDefaultInit+0xbc>)
 80026fe:	f002 f9bb 	bl	8004a78 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002702:	88fa      	ldrh	r2, [r7, #6]
 8002704:	4913      	ldr	r1, [pc, #76]	; (8002754 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002706:	4613      	mov	r3, r2
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	4413      	add	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	440b      	add	r3, r1
 8002710:	3304      	adds	r3, #4
 8002712:	f04f 32ff 	mov.w	r2, #4294967295
 8002716:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002718:	88fa      	ldrh	r2, [r7, #6]
 800271a:	490e      	ldr	r1, [pc, #56]	; (8002754 <BSP_LCD_LayerDefaultInit+0xc0>)
 800271c:	4613      	mov	r3, r2
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	4413      	add	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	3308      	adds	r3, #8
 8002728:	4a0b      	ldr	r2, [pc, #44]	; (8002758 <BSP_LCD_LayerDefaultInit+0xc4>)
 800272a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800272c:	88fa      	ldrh	r2, [r7, #6]
 800272e:	4909      	ldr	r1, [pc, #36]	; (8002754 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002730:	4613      	mov	r3, r2
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	4413      	add	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800273e:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002740:	4803      	ldr	r0, [pc, #12]	; (8002750 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002742:	f002 f9d7 	bl	8004af4 <HAL_LTDC_EnableDither>
}
 8002746:	bf00      	nop
 8002748:	3740      	adds	r7, #64	; 0x40
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	2000042c 	.word	0x2000042c
 8002754:	20000548 	.word	0x20000548
 8002758:	20000074 	.word	0x20000074

0800275c <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002764:	4a04      	ldr	r2, [pc, #16]	; (8002778 <BSP_LCD_SelectLayer+0x1c>)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6013      	str	r3, [r2, #0]
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	20000544 	.word	0x20000544

0800277c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002784:	4b07      	ldr	r3, [pc, #28]	; (80027a4 <BSP_LCD_SetTextColor+0x28>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4907      	ldr	r1, [pc, #28]	; (80027a8 <BSP_LCD_SetTextColor+0x2c>)
 800278a:	4613      	mov	r3, r2
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	4413      	add	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	440b      	add	r3, r1
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	601a      	str	r2, [r3, #0]
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	20000544 	.word	0x20000544
 80027a8:	20000548 	.word	0x20000548

080027ac <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80027b4:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <BSP_LCD_SetBackColor+0x2c>)
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	4908      	ldr	r1, [pc, #32]	; (80027dc <BSP_LCD_SetBackColor+0x30>)
 80027ba:	4613      	mov	r3, r2
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	4413      	add	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	440b      	add	r3, r1
 80027c4:	3304      	adds	r3, #4
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	601a      	str	r2, [r3, #0]
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	20000544 	.word	0x20000544
 80027dc:	20000548 	.word	0x20000548

080027e0 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80027e8:	4b08      	ldr	r3, [pc, #32]	; (800280c <BSP_LCD_SetFont+0x2c>)
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	4908      	ldr	r1, [pc, #32]	; (8002810 <BSP_LCD_SetFont+0x30>)
 80027ee:	4613      	mov	r3, r2
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	4413      	add	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	440b      	add	r3, r1
 80027f8:	3308      	adds	r3, #8
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	601a      	str	r2, [r3, #0]
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	20000544 	.word	0x20000544
 8002810:	20000548 	.word	0x20000548

08002814 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002818:	4b07      	ldr	r3, [pc, #28]	; (8002838 <BSP_LCD_GetFont+0x24>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	4907      	ldr	r1, [pc, #28]	; (800283c <BSP_LCD_GetFont+0x28>)
 800281e:	4613      	mov	r3, r2
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	4413      	add	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	440b      	add	r3, r1
 8002828:	3308      	adds	r3, #8
 800282a:	681b      	ldr	r3, [r3, #0]
}
 800282c:	4618      	mov	r0, r3
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	20000544 	.word	0x20000544
 800283c:	20000548 	.word	0x20000548

08002840 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002842:	b085      	sub	sp, #20
 8002844:	af02      	add	r7, sp, #8
 8002846:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002848:	4b0f      	ldr	r3, [pc, #60]	; (8002888 <BSP_LCD_Clear+0x48>)
 800284a:	681c      	ldr	r4, [r3, #0]
 800284c:	4b0e      	ldr	r3, [pc, #56]	; (8002888 <BSP_LCD_Clear+0x48>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a0e      	ldr	r2, [pc, #56]	; (800288c <BSP_LCD_Clear+0x4c>)
 8002852:	2134      	movs	r1, #52	; 0x34
 8002854:	fb01 f303 	mul.w	r3, r1, r3
 8002858:	4413      	add	r3, r2
 800285a:	335c      	adds	r3, #92	; 0x5c
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	461e      	mov	r6, r3
 8002860:	f7ff ff00 	bl	8002664 <BSP_LCD_GetXSize>
 8002864:	4605      	mov	r5, r0
 8002866:	f7ff ff09 	bl	800267c <BSP_LCD_GetYSize>
 800286a:	4602      	mov	r2, r0
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	9301      	str	r3, [sp, #4]
 8002870:	2300      	movs	r3, #0
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	4613      	mov	r3, r2
 8002876:	462a      	mov	r2, r5
 8002878:	4631      	mov	r1, r6
 800287a:	4620      	mov	r0, r4
 800287c:	f000 fd52 	bl	8003324 <FillBuffer>
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002888:	20000544 	.word	0x20000544
 800288c:	2000042c 	.word	0x2000042c

08002890 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002890:	b590      	push	{r4, r7, lr}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	4603      	mov	r3, r0
 8002898:	80fb      	strh	r3, [r7, #6]
 800289a:	460b      	mov	r3, r1
 800289c:	80bb      	strh	r3, [r7, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80028a2:	4b1b      	ldr	r3, [pc, #108]	; (8002910 <BSP_LCD_DisplayChar+0x80>)
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	491b      	ldr	r1, [pc, #108]	; (8002914 <BSP_LCD_DisplayChar+0x84>)
 80028a8:	4613      	mov	r3, r2
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	4413      	add	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	3308      	adds	r3, #8
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6819      	ldr	r1, [r3, #0]
 80028b8:	78fb      	ldrb	r3, [r7, #3]
 80028ba:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80028be:	4b14      	ldr	r3, [pc, #80]	; (8002910 <BSP_LCD_DisplayChar+0x80>)
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	4c14      	ldr	r4, [pc, #80]	; (8002914 <BSP_LCD_DisplayChar+0x84>)
 80028c4:	4613      	mov	r3, r2
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	4413      	add	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4423      	add	r3, r4
 80028ce:	3308      	adds	r3, #8
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80028d4:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80028d8:	4b0d      	ldr	r3, [pc, #52]	; (8002910 <BSP_LCD_DisplayChar+0x80>)
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	4c0d      	ldr	r4, [pc, #52]	; (8002914 <BSP_LCD_DisplayChar+0x84>)
 80028de:	4613      	mov	r3, r2
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	4413      	add	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4423      	add	r3, r4
 80028e8:	3308      	adds	r3, #8
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	889b      	ldrh	r3, [r3, #4]
 80028ee:	3307      	adds	r3, #7
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	da00      	bge.n	80028f6 <BSP_LCD_DisplayChar+0x66>
 80028f4:	3307      	adds	r3, #7
 80028f6:	10db      	asrs	r3, r3, #3
 80028f8:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80028fc:	18ca      	adds	r2, r1, r3
 80028fe:	88b9      	ldrh	r1, [r7, #4]
 8002900:	88fb      	ldrh	r3, [r7, #6]
 8002902:	4618      	mov	r0, r3
 8002904:	f000 fc54 	bl	80031b0 <DrawChar>
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	bd90      	pop	{r4, r7, pc}
 8002910:	20000544 	.word	0x20000544
 8002914:	20000548 	.word	0x20000548

08002918 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8002918:	b5b0      	push	{r4, r5, r7, lr}
 800291a:	b088      	sub	sp, #32
 800291c:	af00      	add	r7, sp, #0
 800291e:	60ba      	str	r2, [r7, #8]
 8002920:	461a      	mov	r2, r3
 8002922:	4603      	mov	r3, r0
 8002924:	81fb      	strh	r3, [r7, #14]
 8002926:	460b      	mov	r3, r1
 8002928:	81bb      	strh	r3, [r7, #12]
 800292a:	4613      	mov	r3, r2
 800292c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800292e:	2301      	movs	r3, #1
 8002930:	83fb      	strh	r3, [r7, #30]
 8002932:	2300      	movs	r3, #0
 8002934:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002936:	2300      	movs	r3, #0
 8002938:	61bb      	str	r3, [r7, #24]
 800293a:	2300      	movs	r3, #0
 800293c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002942:	e002      	b.n	800294a <BSP_LCD_DisplayStringAt+0x32>
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	3301      	adds	r3, #1
 8002948:	61bb      	str	r3, [r7, #24]
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	1c5a      	adds	r2, r3, #1
 800294e:	617a      	str	r2, [r7, #20]
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1f6      	bne.n	8002944 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002956:	f7ff fe85 	bl	8002664 <BSP_LCD_GetXSize>
 800295a:	4601      	mov	r1, r0
 800295c:	4b4b      	ldr	r3, [pc, #300]	; (8002a8c <BSP_LCD_DisplayStringAt+0x174>)
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	484b      	ldr	r0, [pc, #300]	; (8002a90 <BSP_LCD_DisplayStringAt+0x178>)
 8002962:	4613      	mov	r3, r2
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	4413      	add	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4403      	add	r3, r0
 800296c:	3308      	adds	r3, #8
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	889b      	ldrh	r3, [r3, #4]
 8002972:	fbb1 f3f3 	udiv	r3, r1, r3
 8002976:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	2b03      	cmp	r3, #3
 800297c:	d01c      	beq.n	80029b8 <BSP_LCD_DisplayStringAt+0xa0>
 800297e:	2b03      	cmp	r3, #3
 8002980:	dc33      	bgt.n	80029ea <BSP_LCD_DisplayStringAt+0xd2>
 8002982:	2b01      	cmp	r3, #1
 8002984:	d002      	beq.n	800298c <BSP_LCD_DisplayStringAt+0x74>
 8002986:	2b02      	cmp	r3, #2
 8002988:	d019      	beq.n	80029be <BSP_LCD_DisplayStringAt+0xa6>
 800298a:	e02e      	b.n	80029ea <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	1ad1      	subs	r1, r2, r3
 8002992:	4b3e      	ldr	r3, [pc, #248]	; (8002a8c <BSP_LCD_DisplayStringAt+0x174>)
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	483e      	ldr	r0, [pc, #248]	; (8002a90 <BSP_LCD_DisplayStringAt+0x178>)
 8002998:	4613      	mov	r3, r2
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	4413      	add	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4403      	add	r3, r0
 80029a2:	3308      	adds	r3, #8
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	889b      	ldrh	r3, [r3, #4]
 80029a8:	fb01 f303 	mul.w	r3, r1, r3
 80029ac:	085b      	lsrs	r3, r3, #1
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	89fb      	ldrh	r3, [r7, #14]
 80029b2:	4413      	add	r3, r2
 80029b4:	83fb      	strh	r3, [r7, #30]
      break;
 80029b6:	e01b      	b.n	80029f0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 80029b8:	89fb      	ldrh	r3, [r7, #14]
 80029ba:	83fb      	strh	r3, [r7, #30]
      break;
 80029bc:	e018      	b.n	80029f0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	b299      	uxth	r1, r3
 80029c6:	4b31      	ldr	r3, [pc, #196]	; (8002a8c <BSP_LCD_DisplayStringAt+0x174>)
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	4831      	ldr	r0, [pc, #196]	; (8002a90 <BSP_LCD_DisplayStringAt+0x178>)
 80029cc:	4613      	mov	r3, r2
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	4413      	add	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4403      	add	r3, r0
 80029d6:	3308      	adds	r3, #8
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	889b      	ldrh	r3, [r3, #4]
 80029dc:	fb11 f303 	smulbb	r3, r1, r3
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	89fb      	ldrh	r3, [r7, #14]
 80029e4:	4413      	add	r3, r2
 80029e6:	83fb      	strh	r3, [r7, #30]
      break;
 80029e8:	e002      	b.n	80029f0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 80029ea:	89fb      	ldrh	r3, [r7, #14]
 80029ec:	83fb      	strh	r3, [r7, #30]
      break;
 80029ee:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80029f0:	e01a      	b.n	8002a28 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	781a      	ldrb	r2, [r3, #0]
 80029f6:	89b9      	ldrh	r1, [r7, #12]
 80029f8:	8bfb      	ldrh	r3, [r7, #30]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff ff48 	bl	8002890 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002a00:	4b22      	ldr	r3, [pc, #136]	; (8002a8c <BSP_LCD_DisplayStringAt+0x174>)
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	4922      	ldr	r1, [pc, #136]	; (8002a90 <BSP_LCD_DisplayStringAt+0x178>)
 8002a06:	4613      	mov	r3, r2
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	4413      	add	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	440b      	add	r3, r1
 8002a10:	3308      	adds	r3, #8
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	889a      	ldrh	r2, [r3, #4]
 8002a16:	8bfb      	ldrh	r3, [r7, #30]
 8002a18:	4413      	add	r3, r2
 8002a1a:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	60bb      	str	r3, [r7, #8]
    i++;
 8002a22:	8bbb      	ldrh	r3, [r7, #28]
 8002a24:	3301      	adds	r3, #1
 8002a26:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	bf14      	ite	ne
 8002a30:	2301      	movne	r3, #1
 8002a32:	2300      	moveq	r3, #0
 8002a34:	b2dc      	uxtb	r4, r3
 8002a36:	f7ff fe15 	bl	8002664 <BSP_LCD_GetXSize>
 8002a3a:	8bb9      	ldrh	r1, [r7, #28]
 8002a3c:	4b13      	ldr	r3, [pc, #76]	; (8002a8c <BSP_LCD_DisplayStringAt+0x174>)
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	4d13      	ldr	r5, [pc, #76]	; (8002a90 <BSP_LCD_DisplayStringAt+0x178>)
 8002a42:	4613      	mov	r3, r2
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	4413      	add	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	442b      	add	r3, r5
 8002a4c:	3308      	adds	r3, #8
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	889b      	ldrh	r3, [r3, #4]
 8002a52:	fb01 f303 	mul.w	r3, r1, r3
 8002a56:	1ac3      	subs	r3, r0, r3
 8002a58:	b299      	uxth	r1, r3
 8002a5a:	4b0c      	ldr	r3, [pc, #48]	; (8002a8c <BSP_LCD_DisplayStringAt+0x174>)
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	480c      	ldr	r0, [pc, #48]	; (8002a90 <BSP_LCD_DisplayStringAt+0x178>)
 8002a60:	4613      	mov	r3, r2
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	4413      	add	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4403      	add	r3, r0
 8002a6a:	3308      	adds	r3, #8
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	889b      	ldrh	r3, [r3, #4]
 8002a70:	4299      	cmp	r1, r3
 8002a72:	bf2c      	ite	cs
 8002a74:	2301      	movcs	r3, #1
 8002a76:	2300      	movcc	r3, #0
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	4023      	ands	r3, r4
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1b7      	bne.n	80029f2 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8002a82:	bf00      	nop
 8002a84:	bf00      	nop
 8002a86:	3720      	adds	r7, #32
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bdb0      	pop	{r4, r5, r7, pc}
 8002a8c:	20000544 	.word	0x20000544
 8002a90:	20000548 	.word	0x20000548

08002a94 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	6039      	str	r1, [r7, #0]
 8002a9e:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002aa0:	f7ff feb8 	bl	8002814 <BSP_LCD_GetFont>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	88db      	ldrh	r3, [r3, #6]
 8002aa8:	88fa      	ldrh	r2, [r7, #6]
 8002aaa:	fb12 f303 	smulbb	r3, r2, r3
 8002aae:	b299      	uxth	r1, r3
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	f7ff ff2f 	bl	8002918 <BSP_LCD_DisplayStringAt>
}
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
	...

08002ac4 <BSP_LCD_DrawLine>:
  * @param  Y1: the point 1 Y position
  * @param  X2: the point 2 X position
  * @param  Y2: the point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8002ac4:	b590      	push	{r4, r7, lr}
 8002ac6:	b08b      	sub	sp, #44	; 0x2c
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	4604      	mov	r4, r0
 8002acc:	4608      	mov	r0, r1
 8002ace:	4611      	mov	r1, r2
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	4623      	mov	r3, r4
 8002ad4:	80fb      	strh	r3, [r7, #6]
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	80bb      	strh	r3, [r7, #4]
 8002ada:	460b      	mov	r3, r1
 8002adc:	807b      	strh	r3, [r7, #2]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	823b      	strh	r3, [r7, #16]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	81fb      	strh	r3, [r7, #14]
 8002aea:	2300      	movs	r3, #0
 8002aec:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002aee:	2300      	movs	r3, #0
 8002af0:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002af2:	2300      	movs	r3, #0
 8002af4:	847b      	strh	r3, [r7, #34]	; 0x22
 8002af6:	2300      	movs	r3, #0
 8002af8:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8002afa:	2300      	movs	r3, #0
 8002afc:	83fb      	strh	r3, [r7, #30]
 8002afe:	2300      	movs	r3, #0
 8002b00:	83bb      	strh	r3, [r7, #28]
 8002b02:	2300      	movs	r3, #0
 8002b04:	837b      	strh	r3, [r7, #26]
 8002b06:	2300      	movs	r3, #0
 8002b08:	833b      	strh	r3, [r7, #24]
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	82fb      	strh	r3, [r7, #22]
 8002b0e:	2300      	movs	r3, #0
 8002b10:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8002b12:	2300      	movs	r3, #0
 8002b14:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 8002b16:	887a      	ldrh	r2, [r7, #2]
 8002b18:	88fb      	ldrh	r3, [r7, #6]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	bfb8      	it	lt
 8002b20:	425b      	neglt	r3, r3
 8002b22:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8002b24:	883a      	ldrh	r2, [r7, #0]
 8002b26:	88bb      	ldrh	r3, [r7, #4]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	bfb8      	it	lt
 8002b2e:	425b      	neglt	r3, r3
 8002b30:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 8002b32:	88fb      	ldrh	r3, [r7, #6]
 8002b34:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = Y1;                       /* Start y off at the first pixel */
 8002b36:	88bb      	ldrh	r3, [r7, #4]
 8002b38:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 8002b3a:	887a      	ldrh	r2, [r7, #2]
 8002b3c:	88fb      	ldrh	r3, [r7, #6]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d304      	bcc.n	8002b4c <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8002b42:	2301      	movs	r3, #1
 8002b44:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8002b46:	2301      	movs	r3, #1
 8002b48:	843b      	strh	r3, [r7, #32]
 8002b4a:	e005      	b.n	8002b58 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8002b4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b50:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8002b52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b56:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 8002b58:	883a      	ldrh	r2, [r7, #0]
 8002b5a:	88bb      	ldrh	r3, [r7, #4]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d304      	bcc.n	8002b6a <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8002b60:	2301      	movs	r3, #1
 8002b62:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8002b64:	2301      	movs	r3, #1
 8002b66:	83bb      	strh	r3, [r7, #28]
 8002b68:	e005      	b.n	8002b76 <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8002b6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b6e:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8002b70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b74:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8002b76:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002b7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	db10      	blt.n	8002ba4 <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8002b82:	2300      	movs	r3, #0
 8002b84:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8002b86:	2300      	movs	r3, #0
 8002b88:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8002b8a:	8a3b      	ldrh	r3, [r7, #16]
 8002b8c:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8002b8e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002b92:	0fda      	lsrs	r2, r3, #31
 8002b94:	4413      	add	r3, r2
 8002b96:	105b      	asrs	r3, r3, #1
 8002b98:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8002b9a:	89fb      	ldrh	r3, [r7, #14]
 8002b9c:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8002b9e:	8a3b      	ldrh	r3, [r7, #16]
 8002ba0:	82bb      	strh	r3, [r7, #20]
 8002ba2:	e00f      	b.n	8002bc4 <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8002ba8:	2300      	movs	r3, #0
 8002baa:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8002bac:	89fb      	ldrh	r3, [r7, #14]
 8002bae:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8002bb0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002bb4:	0fda      	lsrs	r2, r3, #31
 8002bb6:	4413      	add	r3, r2
 8002bb8:	105b      	asrs	r3, r3, #1
 8002bba:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8002bbc:	8a3b      	ldrh	r3, [r7, #16]
 8002bbe:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8002bc0:	89fb      	ldrh	r3, [r7, #14]
 8002bc2:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	827b      	strh	r3, [r7, #18]
 8002bc8:	e037      	b.n	8002c3a <BSP_LCD_DrawLine+0x176>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8002bca:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8002bcc:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8002bce:	4b20      	ldr	r3, [pc, #128]	; (8002c50 <BSP_LCD_DrawLine+0x18c>)
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	4c20      	ldr	r4, [pc, #128]	; (8002c54 <BSP_LCD_DrawLine+0x190>)
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	4413      	add	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4423      	add	r3, r4
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	461a      	mov	r2, r3
 8002be2:	f000 fabf 	bl	8003164 <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8002be6:	8b3a      	ldrh	r2, [r7, #24]
 8002be8:	8afb      	ldrh	r3, [r7, #22]
 8002bea:	4413      	add	r3, r2
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8002bf0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002bf4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	db0e      	blt.n	8002c1a <BSP_LCD_DrawLine+0x156>
    {
      num -= den;                             /* Calculate the new numerator value */
 8002bfc:	8b3a      	ldrh	r2, [r7, #24]
 8002bfe:	8b7b      	ldrh	r3, [r7, #26]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8002c06:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002c08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002c0a:	4413      	add	r3, r2
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8002c10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c12:	8bfb      	ldrh	r3, [r7, #30]
 8002c14:	4413      	add	r3, r2
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8002c1a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002c1c:	8c3b      	ldrh	r3, [r7, #32]
 8002c1e:	4413      	add	r3, r2
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8002c24:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c26:	8bbb      	ldrh	r3, [r7, #28]
 8002c28:	4413      	add	r3, r2
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002c2e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	3301      	adds	r3, #1
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	827b      	strh	r3, [r7, #18]
 8002c3a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002c3e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	ddc1      	ble.n	8002bca <BSP_LCD_DrawLine+0x106>
  }
}
 8002c46:	bf00      	nop
 8002c48:	bf00      	nop
 8002c4a:	372c      	adds	r7, #44	; 0x2c
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd90      	pop	{r4, r7, pc}
 8002c50:	20000544 	.word	0x20000544
 8002c54:	20000548 	.word	0x20000548

08002c58 <BSP_LCD_FillTriangle>:
  * @param  Y2: the point 2 y position
  * @param  X3: the point 3 x position
  * @param  Y3: the point 3 y position
  */
void BSP_LCD_FillTriangle(uint16_t X1, uint16_t X2, uint16_t X3, uint16_t Y1, uint16_t Y2, uint16_t Y3)
{ 
 8002c58:	b590      	push	{r4, r7, lr}
 8002c5a:	b08b      	sub	sp, #44	; 0x2c
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4604      	mov	r4, r0
 8002c60:	4608      	mov	r0, r1
 8002c62:	4611      	mov	r1, r2
 8002c64:	461a      	mov	r2, r3
 8002c66:	4623      	mov	r3, r4
 8002c68:	80fb      	strh	r3, [r7, #6]
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	80bb      	strh	r3, [r7, #4]
 8002c6e:	460b      	mov	r3, r1
 8002c70:	807b      	strh	r3, [r7, #2]
 8002c72:	4613      	mov	r3, r2
 8002c74:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8002c76:	2300      	movs	r3, #0
 8002c78:	823b      	strh	r3, [r7, #16]
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	81fb      	strh	r3, [r7, #14]
 8002c7e:	2300      	movs	r3, #0
 8002c80:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002c82:	2300      	movs	r3, #0
 8002c84:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002c86:	2300      	movs	r3, #0
 8002c88:	847b      	strh	r3, [r7, #34]	; 0x22
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8002c8e:	2300      	movs	r3, #0
 8002c90:	83fb      	strh	r3, [r7, #30]
 8002c92:	2300      	movs	r3, #0
 8002c94:	83bb      	strh	r3, [r7, #28]
 8002c96:	2300      	movs	r3, #0
 8002c98:	837b      	strh	r3, [r7, #26]
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	833b      	strh	r3, [r7, #24]
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	82fb      	strh	r3, [r7, #22]
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 8002caa:	88ba      	ldrh	r2, [r7, #4]
 8002cac:	88fb      	ldrh	r3, [r7, #6]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	bfb8      	it	lt
 8002cb4:	425b      	neglt	r3, r3
 8002cb6:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8002cb8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002cba:	883b      	ldrh	r3, [r7, #0]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	bfb8      	it	lt
 8002cc2:	425b      	neglt	r3, r3
 8002cc4:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 8002cc6:	88fb      	ldrh	r3, [r7, #6]
 8002cc8:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = Y1;                       /* Start y off at the first pixel */
 8002cca:	883b      	ldrh	r3, [r7, #0]
 8002ccc:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 8002cce:	88ba      	ldrh	r2, [r7, #4]
 8002cd0:	88fb      	ldrh	r3, [r7, #6]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d304      	bcc.n	8002ce0 <BSP_LCD_FillTriangle+0x88>
  {
    xinc1 = 1;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	843b      	strh	r3, [r7, #32]
 8002cde:	e005      	b.n	8002cec <BSP_LCD_FillTriangle+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8002ce0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ce4:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8002ce6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cea:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 8002cec:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002cee:	883b      	ldrh	r3, [r7, #0]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d304      	bcc.n	8002cfe <BSP_LCD_FillTriangle+0xa6>
  {
    yinc1 = 1;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	83bb      	strh	r3, [r7, #28]
 8002cfc:	e005      	b.n	8002d0a <BSP_LCD_FillTriangle+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8002cfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d02:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8002d04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d08:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8002d0a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002d0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	db10      	blt.n	8002d38 <BSP_LCD_FillTriangle+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8002d16:	2300      	movs	r3, #0
 8002d18:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8002d1e:	8a3b      	ldrh	r3, [r7, #16]
 8002d20:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8002d22:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002d26:	0fda      	lsrs	r2, r3, #31
 8002d28:	4413      	add	r3, r2
 8002d2a:	105b      	asrs	r3, r3, #1
 8002d2c:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8002d2e:	89fb      	ldrh	r3, [r7, #14]
 8002d30:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8002d32:	8a3b      	ldrh	r3, [r7, #16]
 8002d34:	82bb      	strh	r3, [r7, #20]
 8002d36:	e00f      	b.n	8002d58 <BSP_LCD_FillTriangle+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8002d38:	2300      	movs	r3, #0
 8002d3a:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8002d40:	89fb      	ldrh	r3, [r7, #14]
 8002d42:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8002d44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d48:	0fda      	lsrs	r2, r3, #31
 8002d4a:	4413      	add	r3, r2
 8002d4c:	105b      	asrs	r3, r3, #1
 8002d4e:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8002d50:	8a3b      	ldrh	r3, [r7, #16]
 8002d52:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8002d54:	89fb      	ldrh	r3, [r7, #14]
 8002d56:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002d58:	2300      	movs	r3, #0
 8002d5a:	827b      	strh	r3, [r7, #18]
 8002d5c:	e02f      	b.n	8002dbe <BSP_LCD_FillTriangle+0x166>
  {
    BSP_LCD_DrawLine(x, y, X3, Y3);
 8002d5e:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8002d60:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8002d62:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002d64:	887a      	ldrh	r2, [r7, #2]
 8002d66:	f7ff fead 	bl	8002ac4 <BSP_LCD_DrawLine>
    
    num += numadd;              /* Increase the numerator by the top of the fraction */
 8002d6a:	8b3a      	ldrh	r2, [r7, #24]
 8002d6c:	8afb      	ldrh	r3, [r7, #22]
 8002d6e:	4413      	add	r3, r2
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 8002d74:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002d78:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	db0e      	blt.n	8002d9e <BSP_LCD_FillTriangle+0x146>
    {
      num -= den;               /* Calculate the new numerator value */
 8002d80:	8b3a      	ldrh	r2, [r7, #24]
 8002d82:	8b7b      	ldrh	r3, [r7, #26]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 8002d8a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002d8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002d8e:	4413      	add	r3, r2
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;               /* Change the y as appropriate */
 8002d94:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d96:	8bfb      	ldrh	r3, [r7, #30]
 8002d98:	4413      	add	r3, r2
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 8002d9e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002da0:	8c3b      	ldrh	r3, [r7, #32]
 8002da2:	4413      	add	r3, r2
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                 /* Change the y as appropriate */
 8002da8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002daa:	8bbb      	ldrh	r3, [r7, #28]
 8002dac:	4413      	add	r3, r2
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002db2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	3301      	adds	r3, #1
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	827b      	strh	r3, [r7, #18]
 8002dbe:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002dc2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	ddc9      	ble.n	8002d5e <BSP_LCD_FillTriangle+0x106>
  } 
}
 8002dca:	bf00      	nop
 8002dcc:	bf00      	nop
 8002dce:	372c      	adds	r7, #44	; 0x2c
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd90      	pop	{r4, r7, pc}

08002dd4 <BSP_LCD_FillPolygon>:
  * @brief  Displays a full poly-line (between many points).
  * @param  Points: pointer to the points array
  * @param  PointCount: Number of points
  */
void BSP_LCD_FillPolygon(pPoint Points, uint16_t PointCount)
{
 8002dd4:	b5b0      	push	{r4, r5, r7, lr}
 8002dd6:	b08c      	sub	sp, #48	; 0x30
 8002dd8:	af02      	add	r7, sp, #8
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	807b      	strh	r3, [r7, #2]
  
  int16_t x = 0, y = 0, x2 = 0, y2 = 0, xcenter = 0, ycenter = 0, xfirst = 0, yfirst = 0, pixelx = 0, pixely = 0, counter = 0;
 8002de0:	2300      	movs	r3, #0
 8002de2:	833b      	strh	r3, [r7, #24]
 8002de4:	2300      	movs	r3, #0
 8002de6:	82fb      	strh	r3, [r7, #22]
 8002de8:	2300      	movs	r3, #0
 8002dea:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002dec:	2300      	movs	r3, #0
 8002dee:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002df0:	2300      	movs	r3, #0
 8002df2:	82bb      	strh	r3, [r7, #20]
 8002df4:	2300      	movs	r3, #0
 8002df6:	827b      	strh	r3, [r7, #18]
 8002df8:	2300      	movs	r3, #0
 8002dfa:	823b      	strh	r3, [r7, #16]
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	81fb      	strh	r3, [r7, #14]
 8002e00:	2300      	movs	r3, #0
 8002e02:	81bb      	strh	r3, [r7, #12]
 8002e04:	2300      	movs	r3, #0
 8002e06:	817b      	strh	r3, [r7, #10]
 8002e08:	2300      	movs	r3, #0
 8002e0a:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  imageleft = 0, imageright = 0, imagetop = 0, imagebottom = 0;  
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	843b      	strh	r3, [r7, #32]
 8002e10:	2300      	movs	r3, #0
 8002e12:	83fb      	strh	r3, [r7, #30]
 8002e14:	2300      	movs	r3, #0
 8002e16:	83bb      	strh	r3, [r7, #28]
 8002e18:	2300      	movs	r3, #0
 8002e1a:	837b      	strh	r3, [r7, #26]

  imageleft = imageright = Points->X;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e22:	83fb      	strh	r3, [r7, #30]
 8002e24:	8bfb      	ldrh	r3, [r7, #30]
 8002e26:	843b      	strh	r3, [r7, #32]
  imagetop= imagebottom = Points->Y;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002e2e:	837b      	strh	r3, [r7, #26]
 8002e30:	8b7b      	ldrh	r3, [r7, #26]
 8002e32:	83bb      	strh	r3, [r7, #28]

  for(counter = 1; counter < PointCount; counter++)
 8002e34:	2301      	movs	r3, #1
 8002e36:	847b      	strh	r3, [r7, #34]	; 0x22
 8002e38:	e02f      	b.n	8002e9a <BSP_LCD_FillPolygon+0xc6>
  {
    pixelx = POLY_X(counter);
 8002e3a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	4413      	add	r3, r2
 8002e44:	881b      	ldrh	r3, [r3, #0]
 8002e46:	81bb      	strh	r3, [r7, #12]
    if(pixelx < imageleft)
 8002e48:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002e4c:	8c3b      	ldrh	r3, [r7, #32]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	da01      	bge.n	8002e56 <BSP_LCD_FillPolygon+0x82>
    {
      imageleft = pixelx;
 8002e52:	89bb      	ldrh	r3, [r7, #12]
 8002e54:	843b      	strh	r3, [r7, #32]
    }
    if(pixelx > imageright)
 8002e56:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002e5a:	8bfb      	ldrh	r3, [r7, #30]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	dd01      	ble.n	8002e64 <BSP_LCD_FillPolygon+0x90>
    {
      imageright = pixelx;
 8002e60:	89bb      	ldrh	r3, [r7, #12]
 8002e62:	83fb      	strh	r3, [r7, #30]
    }

    pixely = POLY_Y(counter);
 8002e64:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	885b      	ldrh	r3, [r3, #2]
 8002e70:	817b      	strh	r3, [r7, #10]
    if(pixely < imagetop)
 8002e72:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002e76:	8bbb      	ldrh	r3, [r7, #28]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	da01      	bge.n	8002e80 <BSP_LCD_FillPolygon+0xac>
    { 
      imagetop = pixely;
 8002e7c:	897b      	ldrh	r3, [r7, #10]
 8002e7e:	83bb      	strh	r3, [r7, #28]
    }
    if(pixely > imagebottom)
 8002e80:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002e84:	8b7b      	ldrh	r3, [r7, #26]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	dd01      	ble.n	8002e8e <BSP_LCD_FillPolygon+0xba>
    {
      imagebottom = pixely;
 8002e8a:	897b      	ldrh	r3, [r7, #10]
 8002e8c:	837b      	strh	r3, [r7, #26]
  for(counter = 1; counter < PointCount; counter++)
 8002e8e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	3301      	adds	r3, #1
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	847b      	strh	r3, [r7, #34]	; 0x22
 8002e9a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8002e9e:	887b      	ldrh	r3, [r7, #2]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	dbca      	blt.n	8002e3a <BSP_LCD_FillPolygon+0x66>
    }
  }  

  if(PointCount < 2)
 8002ea4:	887b      	ldrh	r3, [r7, #2]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d972      	bls.n	8002f90 <BSP_LCD_FillPolygon+0x1bc>
  {
    return;
  }

  xcenter = (imageleft + imageright)/2;
 8002eaa:	8c3a      	ldrh	r2, [r7, #32]
 8002eac:	8bfb      	ldrh	r3, [r7, #30]
 8002eae:	4413      	add	r3, r2
 8002eb0:	0fda      	lsrs	r2, r3, #31
 8002eb2:	4413      	add	r3, r2
 8002eb4:	105b      	asrs	r3, r3, #1
 8002eb6:	82bb      	strh	r3, [r7, #20]
  ycenter = (imagebottom + imagetop)/2;
 8002eb8:	8b7a      	ldrh	r2, [r7, #26]
 8002eba:	8bbb      	ldrh	r3, [r7, #28]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	0fda      	lsrs	r2, r3, #31
 8002ec0:	4413      	add	r3, r2
 8002ec2:	105b      	asrs	r3, r3, #1
 8002ec4:	827b      	strh	r3, [r7, #18]
 
  xfirst = Points->X;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	881b      	ldrh	r3, [r3, #0]
 8002eca:	823b      	strh	r3, [r7, #16]
  yfirst = Points->Y;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	885b      	ldrh	r3, [r3, #2]
 8002ed0:	81fb      	strh	r3, [r7, #14]

  while(--PointCount)
 8002ed2:	e032      	b.n	8002f3a <BSP_LCD_FillPolygon+0x166>
  {
    x = Points->X;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	833b      	strh	r3, [r7, #24]
    y = Points->Y;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	885b      	ldrh	r3, [r3, #2]
 8002ede:	82fb      	strh	r3, [r7, #22]
    Points++;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	607b      	str	r3, [r7, #4]
    x2 = Points->X;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	881b      	ldrh	r3, [r3, #0]
 8002eea:	84fb      	strh	r3, [r7, #38]	; 0x26
    y2 = Points->Y;    
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	885b      	ldrh	r3, [r3, #2]
 8002ef0:	84bb      	strh	r3, [r7, #36]	; 0x24
  
    BSP_LCD_FillTriangle(x, x2, xcenter, y, y2, ycenter);
 8002ef2:	8b38      	ldrh	r0, [r7, #24]
 8002ef4:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8002ef6:	8abc      	ldrh	r4, [r7, #20]
 8002ef8:	8afd      	ldrh	r5, [r7, #22]
 8002efa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002efc:	8a7a      	ldrh	r2, [r7, #18]
 8002efe:	9201      	str	r2, [sp, #4]
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	462b      	mov	r3, r5
 8002f04:	4622      	mov	r2, r4
 8002f06:	f7ff fea7 	bl	8002c58 <BSP_LCD_FillTriangle>
    BSP_LCD_FillTriangle(x, xcenter, x2, y, ycenter, y2);
 8002f0a:	8b38      	ldrh	r0, [r7, #24]
 8002f0c:	8ab9      	ldrh	r1, [r7, #20]
 8002f0e:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8002f10:	8afd      	ldrh	r5, [r7, #22]
 8002f12:	8a7b      	ldrh	r3, [r7, #18]
 8002f14:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f16:	9201      	str	r2, [sp, #4]
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	462b      	mov	r3, r5
 8002f1c:	4622      	mov	r2, r4
 8002f1e:	f7ff fe9b 	bl	8002c58 <BSP_LCD_FillTriangle>
    BSP_LCD_FillTriangle(xcenter, x2, x, ycenter, y2, y);   
 8002f22:	8ab8      	ldrh	r0, [r7, #20]
 8002f24:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8002f26:	8b3c      	ldrh	r4, [r7, #24]
 8002f28:	8a7d      	ldrh	r5, [r7, #18]
 8002f2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f2c:	8afa      	ldrh	r2, [r7, #22]
 8002f2e:	9201      	str	r2, [sp, #4]
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	462b      	mov	r3, r5
 8002f34:	4622      	mov	r2, r4
 8002f36:	f7ff fe8f 	bl	8002c58 <BSP_LCD_FillTriangle>
  while(--PointCount)
 8002f3a:	887b      	ldrh	r3, [r7, #2]
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	807b      	strh	r3, [r7, #2]
 8002f40:	887b      	ldrh	r3, [r7, #2]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1c6      	bne.n	8002ed4 <BSP_LCD_FillPolygon+0x100>
  }
  
  BSP_LCD_FillTriangle(xfirst, x2, xcenter, yfirst, y2, ycenter);
 8002f46:	8a38      	ldrh	r0, [r7, #16]
 8002f48:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8002f4a:	8abc      	ldrh	r4, [r7, #20]
 8002f4c:	89fd      	ldrh	r5, [r7, #14]
 8002f4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f50:	8a7a      	ldrh	r2, [r7, #18]
 8002f52:	9201      	str	r2, [sp, #4]
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	462b      	mov	r3, r5
 8002f58:	4622      	mov	r2, r4
 8002f5a:	f7ff fe7d 	bl	8002c58 <BSP_LCD_FillTriangle>
  BSP_LCD_FillTriangle(xfirst, xcenter, x2, yfirst, ycenter, y2);
 8002f5e:	8a38      	ldrh	r0, [r7, #16]
 8002f60:	8ab9      	ldrh	r1, [r7, #20]
 8002f62:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8002f64:	89fd      	ldrh	r5, [r7, #14]
 8002f66:	8a7b      	ldrh	r3, [r7, #18]
 8002f68:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f6a:	9201      	str	r2, [sp, #4]
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	462b      	mov	r3, r5
 8002f70:	4622      	mov	r2, r4
 8002f72:	f7ff fe71 	bl	8002c58 <BSP_LCD_FillTriangle>
  BSP_LCD_FillTriangle(xcenter, x2, xfirst, ycenter, y2, yfirst);   
 8002f76:	8ab8      	ldrh	r0, [r7, #20]
 8002f78:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8002f7a:	8a3c      	ldrh	r4, [r7, #16]
 8002f7c:	8a7d      	ldrh	r5, [r7, #18]
 8002f7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f80:	89fa      	ldrh	r2, [r7, #14]
 8002f82:	9201      	str	r2, [sp, #4]
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	462b      	mov	r3, r5
 8002f88:	4622      	mov	r2, r4
 8002f8a:	f7ff fe65 	bl	8002c58 <BSP_LCD_FillTriangle>
 8002f8e:	e000      	b.n	8002f92 <BSP_LCD_FillPolygon+0x1be>
    return;
 8002f90:	bf00      	nop
}
 8002f92:	3728      	adds	r7, #40	; 0x28
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bdb0      	pop	{r4, r5, r7, pc}

08002f98 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8002f9c:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <BSP_LCD_DisplayOn+0x1c>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8002fa6:	4b03      	ldr	r3, [pc, #12]	; (8002fb4 <BSP_LCD_DisplayOn+0x1c>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	4798      	blx	r3
  }
}
 8002fae:	bf00      	nop
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	20000560 	.word	0x20000560

08002fb8 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08e      	sub	sp, #56	; 0x38
 8002fbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	623b      	str	r3, [r7, #32]
 8002fc2:	4b61      	ldr	r3, [pc, #388]	; (8003148 <BSP_LCD_MspInit+0x190>)
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc6:	4a60      	ldr	r2, [pc, #384]	; (8003148 <BSP_LCD_MspInit+0x190>)
 8002fc8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8002fce:	4b5e      	ldr	r3, [pc, #376]	; (8003148 <BSP_LCD_MspInit+0x190>)
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fd6:	623b      	str	r3, [r7, #32]
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61fb      	str	r3, [r7, #28]
 8002fde:	4b5a      	ldr	r3, [pc, #360]	; (8003148 <BSP_LCD_MspInit+0x190>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	4a59      	ldr	r2, [pc, #356]	; (8003148 <BSP_LCD_MspInit+0x190>)
 8002fe4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fea:	4b57      	ldr	r3, [pc, #348]	; (8003148 <BSP_LCD_MspInit+0x190>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ff2:	61fb      	str	r3, [r7, #28]
 8002ff4:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61bb      	str	r3, [r7, #24]
 8002ffa:	4b53      	ldr	r3, [pc, #332]	; (8003148 <BSP_LCD_MspInit+0x190>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	4a52      	ldr	r2, [pc, #328]	; (8003148 <BSP_LCD_MspInit+0x190>)
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	6313      	str	r3, [r2, #48]	; 0x30
 8003006:	4b50      	ldr	r3, [pc, #320]	; (8003148 <BSP_LCD_MspInit+0x190>)
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	61bb      	str	r3, [r7, #24]
 8003010:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003012:	2300      	movs	r3, #0
 8003014:	617b      	str	r3, [r7, #20]
 8003016:	4b4c      	ldr	r3, [pc, #304]	; (8003148 <BSP_LCD_MspInit+0x190>)
 8003018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301a:	4a4b      	ldr	r2, [pc, #300]	; (8003148 <BSP_LCD_MspInit+0x190>)
 800301c:	f043 0302 	orr.w	r3, r3, #2
 8003020:	6313      	str	r3, [r2, #48]	; 0x30
 8003022:	4b49      	ldr	r3, [pc, #292]	; (8003148 <BSP_LCD_MspInit+0x190>)
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800302e:	2300      	movs	r3, #0
 8003030:	613b      	str	r3, [r7, #16]
 8003032:	4b45      	ldr	r3, [pc, #276]	; (8003148 <BSP_LCD_MspInit+0x190>)
 8003034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003036:	4a44      	ldr	r2, [pc, #272]	; (8003148 <BSP_LCD_MspInit+0x190>)
 8003038:	f043 0304 	orr.w	r3, r3, #4
 800303c:	6313      	str	r3, [r2, #48]	; 0x30
 800303e:	4b42      	ldr	r3, [pc, #264]	; (8003148 <BSP_LCD_MspInit+0x190>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	f003 0304 	and.w	r3, r3, #4
 8003046:	613b      	str	r3, [r7, #16]
 8003048:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800304a:	2300      	movs	r3, #0
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	4b3e      	ldr	r3, [pc, #248]	; (8003148 <BSP_LCD_MspInit+0x190>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003052:	4a3d      	ldr	r2, [pc, #244]	; (8003148 <BSP_LCD_MspInit+0x190>)
 8003054:	f043 0308 	orr.w	r3, r3, #8
 8003058:	6313      	str	r3, [r2, #48]	; 0x30
 800305a:	4b3b      	ldr	r3, [pc, #236]	; (8003148 <BSP_LCD_MspInit+0x190>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003066:	2300      	movs	r3, #0
 8003068:	60bb      	str	r3, [r7, #8]
 800306a:	4b37      	ldr	r3, [pc, #220]	; (8003148 <BSP_LCD_MspInit+0x190>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	4a36      	ldr	r2, [pc, #216]	; (8003148 <BSP_LCD_MspInit+0x190>)
 8003070:	f043 0320 	orr.w	r3, r3, #32
 8003074:	6313      	str	r3, [r2, #48]	; 0x30
 8003076:	4b34      	ldr	r3, [pc, #208]	; (8003148 <BSP_LCD_MspInit+0x190>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	f003 0320 	and.w	r3, r3, #32
 800307e:	60bb      	str	r3, [r7, #8]
 8003080:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003082:	2300      	movs	r3, #0
 8003084:	607b      	str	r3, [r7, #4]
 8003086:	4b30      	ldr	r3, [pc, #192]	; (8003148 <BSP_LCD_MspInit+0x190>)
 8003088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308a:	4a2f      	ldr	r2, [pc, #188]	; (8003148 <BSP_LCD_MspInit+0x190>)
 800308c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003090:	6313      	str	r3, [r2, #48]	; 0x30
 8003092:	4b2d      	ldr	r3, [pc, #180]	; (8003148 <BSP_LCD_MspInit+0x190>)
 8003094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309a:	607b      	str	r3, [r7, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800309e:	f641 0358 	movw	r3, #6232	; 0x1858
 80030a2:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80030a4:	2302      	movs	r3, #2
 80030a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80030a8:	2300      	movs	r3, #0
 80030aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80030ac:	2302      	movs	r3, #2
 80030ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80030b0:	230e      	movs	r3, #14
 80030b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80030b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030b8:	4619      	mov	r1, r3
 80030ba:	4824      	ldr	r0, [pc, #144]	; (800314c <BSP_LCD_MspInit+0x194>)
 80030bc:	f001 f930 	bl	8004320 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80030c0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80030c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030ca:	4619      	mov	r1, r3
 80030cc:	4820      	ldr	r0, [pc, #128]	; (8003150 <BSP_LCD_MspInit+0x198>)
 80030ce:	f001 f927 	bl	8004320 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80030d2:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80030d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80030d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030dc:	4619      	mov	r1, r3
 80030de:	481d      	ldr	r0, [pc, #116]	; (8003154 <BSP_LCD_MspInit+0x19c>)
 80030e0:	f001 f91e 	bl	8004320 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80030e4:	2348      	movs	r3, #72	; 0x48
 80030e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80030e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030ec:	4619      	mov	r1, r3
 80030ee:	481a      	ldr	r0, [pc, #104]	; (8003158 <BSP_LCD_MspInit+0x1a0>)
 80030f0:	f001 f916 	bl	8004320 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80030f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 80030fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030fe:	4619      	mov	r1, r3
 8003100:	4816      	ldr	r0, [pc, #88]	; (800315c <BSP_LCD_MspInit+0x1a4>)
 8003102:	f001 f90d 	bl	8004320 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8003106:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800310c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003110:	4619      	mov	r1, r3
 8003112:	4813      	ldr	r0, [pc, #76]	; (8003160 <BSP_LCD_MspInit+0x1a8>)
 8003114:	f001 f904 	bl	8004320 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003118:	2303      	movs	r3, #3
 800311a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 800311c:	2309      	movs	r3, #9
 800311e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003120:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003124:	4619      	mov	r1, r3
 8003126:	480a      	ldr	r0, [pc, #40]	; (8003150 <BSP_LCD_MspInit+0x198>)
 8003128:	f001 f8fa 	bl	8004320 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 800312c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003130:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003136:	4619      	mov	r1, r3
 8003138:	4809      	ldr	r0, [pc, #36]	; (8003160 <BSP_LCD_MspInit+0x1a8>)
 800313a:	f001 f8f1 	bl	8004320 <HAL_GPIO_Init>
}
 800313e:	bf00      	nop
 8003140:	3738      	adds	r7, #56	; 0x38
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40023800 	.word	0x40023800
 800314c:	40020000 	.word	0x40020000
 8003150:	40020400 	.word	0x40020400
 8003154:	40020800 	.word	0x40020800
 8003158:	40020c00 	.word	0x40020c00
 800315c:	40021400 	.word	0x40021400
 8003160:	40021800 	.word	0x40021800

08003164 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003164:	b5b0      	push	{r4, r5, r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	4603      	mov	r3, r0
 800316c:	603a      	str	r2, [r7, #0]
 800316e:	80fb      	strh	r3, [r7, #6]
 8003170:	460b      	mov	r3, r1
 8003172:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003174:	4b0c      	ldr	r3, [pc, #48]	; (80031a8 <BSP_LCD_DrawPixel+0x44>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a0c      	ldr	r2, [pc, #48]	; (80031ac <BSP_LCD_DrawPixel+0x48>)
 800317a:	2134      	movs	r1, #52	; 0x34
 800317c:	fb01 f303 	mul.w	r3, r1, r3
 8003180:	4413      	add	r3, r2
 8003182:	335c      	adds	r3, #92	; 0x5c
 8003184:	681c      	ldr	r4, [r3, #0]
 8003186:	88bd      	ldrh	r5, [r7, #4]
 8003188:	f7ff fa6c 	bl	8002664 <BSP_LCD_GetXSize>
 800318c:	4603      	mov	r3, r0
 800318e:	fb03 f205 	mul.w	r2, r3, r5
 8003192:	88fb      	ldrh	r3, [r7, #6]
 8003194:	4413      	add	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4423      	add	r3, r4
 800319a:	461a      	mov	r2, r3
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	6013      	str	r3, [r2, #0]
}
 80031a0:	bf00      	nop
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bdb0      	pop	{r4, r5, r7, pc}
 80031a8:	20000544 	.word	0x20000544
 80031ac:	2000042c 	.word	0x2000042c

080031b0 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b088      	sub	sp, #32
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	603a      	str	r2, [r7, #0]
 80031ba:	80fb      	strh	r3, [r7, #6]
 80031bc:	460b      	mov	r3, r1
 80031be:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80031c0:	2300      	movs	r3, #0
 80031c2:	61fb      	str	r3, [r7, #28]
 80031c4:	2300      	movs	r3, #0
 80031c6:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 80031c8:	2300      	movs	r3, #0
 80031ca:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80031cc:	4b53      	ldr	r3, [pc, #332]	; (800331c <DrawChar+0x16c>)
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	4953      	ldr	r1, [pc, #332]	; (8003320 <DrawChar+0x170>)
 80031d2:	4613      	mov	r3, r2
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	4413      	add	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	3308      	adds	r3, #8
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	88db      	ldrh	r3, [r3, #6]
 80031e2:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80031e4:	4b4d      	ldr	r3, [pc, #308]	; (800331c <DrawChar+0x16c>)
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	494d      	ldr	r1, [pc, #308]	; (8003320 <DrawChar+0x170>)
 80031ea:	4613      	mov	r3, r2
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	4413      	add	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	440b      	add	r3, r1
 80031f4:	3308      	adds	r3, #8
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	889b      	ldrh	r3, [r3, #4]
 80031fa:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 80031fc:	8a3b      	ldrh	r3, [r7, #16]
 80031fe:	3307      	adds	r3, #7
 8003200:	2b00      	cmp	r3, #0
 8003202:	da00      	bge.n	8003206 <DrawChar+0x56>
 8003204:	3307      	adds	r3, #7
 8003206:	10db      	asrs	r3, r3, #3
 8003208:	b2db      	uxtb	r3, r3
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	b2da      	uxtb	r2, r3
 800320e:	8a3b      	ldrh	r3, [r7, #16]
 8003210:	b2db      	uxtb	r3, r3
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8003216:	2300      	movs	r3, #0
 8003218:	61fb      	str	r3, [r7, #28]
 800321a:	e076      	b.n	800330a <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800321c:	8a3b      	ldrh	r3, [r7, #16]
 800321e:	3307      	adds	r3, #7
 8003220:	2b00      	cmp	r3, #0
 8003222:	da00      	bge.n	8003226 <DrawChar+0x76>
 8003224:	3307      	adds	r3, #7
 8003226:	10db      	asrs	r3, r3, #3
 8003228:	461a      	mov	r2, r3
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	fb02 f303 	mul.w	r3, r2, r3
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	4413      	add	r3, r2
 8003234:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8003236:	8a3b      	ldrh	r3, [r7, #16]
 8003238:	3307      	adds	r3, #7
 800323a:	2b00      	cmp	r3, #0
 800323c:	da00      	bge.n	8003240 <DrawChar+0x90>
 800323e:	3307      	adds	r3, #7
 8003240:	10db      	asrs	r3, r3, #3
 8003242:	2b01      	cmp	r3, #1
 8003244:	d002      	beq.n	800324c <DrawChar+0x9c>
 8003246:	2b02      	cmp	r3, #2
 8003248:	d004      	beq.n	8003254 <DrawChar+0xa4>
 800324a:	e00c      	b.n	8003266 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	617b      	str	r3, [r7, #20]
      break;
 8003252:	e016      	b.n	8003282 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	021b      	lsls	r3, r3, #8
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	3201      	adds	r2, #1
 800325e:	7812      	ldrb	r2, [r2, #0]
 8003260:	4313      	orrs	r3, r2
 8003262:	617b      	str	r3, [r7, #20]
      break;
 8003264:	e00d      	b.n	8003282 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	041a      	lsls	r2, r3, #16
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	3301      	adds	r3, #1
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	021b      	lsls	r3, r3, #8
 8003274:	4313      	orrs	r3, r2
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	3202      	adds	r2, #2
 800327a:	7812      	ldrb	r2, [r2, #0]
 800327c:	4313      	orrs	r3, r2
 800327e:	617b      	str	r3, [r7, #20]
      break;
 8003280:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8003282:	2300      	movs	r3, #0
 8003284:	61bb      	str	r3, [r7, #24]
 8003286:	e036      	b.n	80032f6 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003288:	8a3a      	ldrh	r2, [r7, #16]
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	1ad2      	subs	r2, r2, r3
 800328e:	7bfb      	ldrb	r3, [r7, #15]
 8003290:	4413      	add	r3, r2
 8003292:	3b01      	subs	r3, #1
 8003294:	2201      	movs	r2, #1
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	461a      	mov	r2, r3
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	4013      	ands	r3, r2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d012      	beq.n	80032ca <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	88fb      	ldrh	r3, [r7, #6]
 80032aa:	4413      	add	r3, r2
 80032ac:	b298      	uxth	r0, r3
 80032ae:	4b1b      	ldr	r3, [pc, #108]	; (800331c <DrawChar+0x16c>)
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	491b      	ldr	r1, [pc, #108]	; (8003320 <DrawChar+0x170>)
 80032b4:	4613      	mov	r3, r2
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	4413      	add	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	88bb      	ldrh	r3, [r7, #4]
 80032c2:	4619      	mov	r1, r3
 80032c4:	f7ff ff4e 	bl	8003164 <BSP_LCD_DrawPixel>
 80032c8:	e012      	b.n	80032f0 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	88fb      	ldrh	r3, [r7, #6]
 80032d0:	4413      	add	r3, r2
 80032d2:	b298      	uxth	r0, r3
 80032d4:	4b11      	ldr	r3, [pc, #68]	; (800331c <DrawChar+0x16c>)
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	4911      	ldr	r1, [pc, #68]	; (8003320 <DrawChar+0x170>)
 80032da:	4613      	mov	r3, r2
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	4413      	add	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	440b      	add	r3, r1
 80032e4:	3304      	adds	r3, #4
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	88bb      	ldrh	r3, [r7, #4]
 80032ea:	4619      	mov	r1, r3
 80032ec:	f7ff ff3a 	bl	8003164 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	3301      	adds	r3, #1
 80032f4:	61bb      	str	r3, [r7, #24]
 80032f6:	8a3b      	ldrh	r3, [r7, #16]
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d3c4      	bcc.n	8003288 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 80032fe:	88bb      	ldrh	r3, [r7, #4]
 8003300:	3301      	adds	r3, #1
 8003302:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	3301      	adds	r3, #1
 8003308:	61fb      	str	r3, [r7, #28]
 800330a:	8a7b      	ldrh	r3, [r7, #18]
 800330c:	69fa      	ldr	r2, [r7, #28]
 800330e:	429a      	cmp	r2, r3
 8003310:	d384      	bcc.n	800321c <DrawChar+0x6c>
  }
}
 8003312:	bf00      	nop
 8003314:	bf00      	nop
 8003316:	3720      	adds	r7, #32
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	20000544 	.word	0x20000544
 8003320:	20000548 	.word	0x20000548

08003324 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af02      	add	r7, sp, #8
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
 8003330:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8003332:	4b16      	ldr	r3, [pc, #88]	; (800338c <FillBuffer+0x68>)
 8003334:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003338:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800333a:	4b14      	ldr	r3, [pc, #80]	; (800338c <FillBuffer+0x68>)
 800333c:	2200      	movs	r2, #0
 800333e:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8003340:	4a12      	ldr	r2, [pc, #72]	; (800338c <FillBuffer+0x68>)
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8003346:	4b11      	ldr	r3, [pc, #68]	; (800338c <FillBuffer+0x68>)
 8003348:	4a11      	ldr	r2, [pc, #68]	; (8003390 <FillBuffer+0x6c>)
 800334a:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 800334c:	480f      	ldr	r0, [pc, #60]	; (800338c <FillBuffer+0x68>)
 800334e:	f000 fd51 	bl	8003df4 <HAL_DMA2D_Init>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d115      	bne.n	8003384 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8003358:	68f9      	ldr	r1, [r7, #12]
 800335a:	480c      	ldr	r0, [pc, #48]	; (800338c <FillBuffer+0x68>)
 800335c:	f000 feb2 	bl	80040c4 <HAL_DMA2D_ConfigLayer>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10e      	bne.n	8003384 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	69f9      	ldr	r1, [r7, #28]
 8003370:	4806      	ldr	r0, [pc, #24]	; (800338c <FillBuffer+0x68>)
 8003372:	f000 fd92 	bl	8003e9a <HAL_DMA2D_Start>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d103      	bne.n	8003384 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 800337c:	210a      	movs	r1, #10
 800337e:	4803      	ldr	r0, [pc, #12]	; (800338c <FillBuffer+0x68>)
 8003380:	f000 fdb6 	bl	8003ef0 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003384:	bf00      	nop
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	200004d4 	.word	0x200004d4
 8003390:	4002b000 	.word	0x4002b000

08003394 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003398:	4b29      	ldr	r3, [pc, #164]	; (8003440 <BSP_SDRAM_Init+0xac>)
 800339a:	4a2a      	ldr	r2, [pc, #168]	; (8003444 <BSP_SDRAM_Init+0xb0>)
 800339c:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800339e:	4b2a      	ldr	r3, [pc, #168]	; (8003448 <BSP_SDRAM_Init+0xb4>)
 80033a0:	2202      	movs	r2, #2
 80033a2:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80033a4:	4b28      	ldr	r3, [pc, #160]	; (8003448 <BSP_SDRAM_Init+0xb4>)
 80033a6:	2207      	movs	r2, #7
 80033a8:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80033aa:	4b27      	ldr	r3, [pc, #156]	; (8003448 <BSP_SDRAM_Init+0xb4>)
 80033ac:	2204      	movs	r2, #4
 80033ae:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80033b0:	4b25      	ldr	r3, [pc, #148]	; (8003448 <BSP_SDRAM_Init+0xb4>)
 80033b2:	2207      	movs	r2, #7
 80033b4:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80033b6:	4b24      	ldr	r3, [pc, #144]	; (8003448 <BSP_SDRAM_Init+0xb4>)
 80033b8:	2202      	movs	r2, #2
 80033ba:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80033bc:	4b22      	ldr	r3, [pc, #136]	; (8003448 <BSP_SDRAM_Init+0xb4>)
 80033be:	2202      	movs	r2, #2
 80033c0:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80033c2:	4b21      	ldr	r3, [pc, #132]	; (8003448 <BSP_SDRAM_Init+0xb4>)
 80033c4:	2202      	movs	r2, #2
 80033c6:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80033c8:	4b1d      	ldr	r3, [pc, #116]	; (8003440 <BSP_SDRAM_Init+0xac>)
 80033ca:	2201      	movs	r2, #1
 80033cc:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80033ce:	4b1c      	ldr	r3, [pc, #112]	; (8003440 <BSP_SDRAM_Init+0xac>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80033d4:	4b1a      	ldr	r3, [pc, #104]	; (8003440 <BSP_SDRAM_Init+0xac>)
 80033d6:	2204      	movs	r2, #4
 80033d8:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80033da:	4b19      	ldr	r3, [pc, #100]	; (8003440 <BSP_SDRAM_Init+0xac>)
 80033dc:	2210      	movs	r2, #16
 80033de:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80033e0:	4b17      	ldr	r3, [pc, #92]	; (8003440 <BSP_SDRAM_Init+0xac>)
 80033e2:	2240      	movs	r2, #64	; 0x40
 80033e4:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80033e6:	4b16      	ldr	r3, [pc, #88]	; (8003440 <BSP_SDRAM_Init+0xac>)
 80033e8:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80033ec:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80033ee:	4b14      	ldr	r3, [pc, #80]	; (8003440 <BSP_SDRAM_Init+0xac>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80033f4:	4b12      	ldr	r3, [pc, #72]	; (8003440 <BSP_SDRAM_Init+0xac>)
 80033f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033fa:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80033fc:	4b10      	ldr	r3, [pc, #64]	; (8003440 <BSP_SDRAM_Init+0xac>)
 80033fe:	2200      	movs	r2, #0
 8003400:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8003402:	4b0f      	ldr	r3, [pc, #60]	; (8003440 <BSP_SDRAM_Init+0xac>)
 8003404:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003408:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800340a:	2100      	movs	r1, #0
 800340c:	480c      	ldr	r0, [pc, #48]	; (8003440 <BSP_SDRAM_Init+0xac>)
 800340e:	f000 f87f 	bl	8003510 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8003412:	490d      	ldr	r1, [pc, #52]	; (8003448 <BSP_SDRAM_Init+0xb4>)
 8003414:	480a      	ldr	r0, [pc, #40]	; (8003440 <BSP_SDRAM_Init+0xac>)
 8003416:	f003 fddb 	bl	8006fd0 <HAL_SDRAM_Init>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d003      	beq.n	8003428 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003420:	4b0a      	ldr	r3, [pc, #40]	; (800344c <BSP_SDRAM_Init+0xb8>)
 8003422:	2201      	movs	r2, #1
 8003424:	701a      	strb	r2, [r3, #0]
 8003426:	e002      	b.n	800342e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003428:	4b08      	ldr	r3, [pc, #32]	; (800344c <BSP_SDRAM_Init+0xb8>)
 800342a:	2200      	movs	r2, #0
 800342c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800342e:	f240 506a 	movw	r0, #1386	; 0x56a
 8003432:	f000 f80d 	bl	8003450 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003436:	4b05      	ldr	r3, [pc, #20]	; (800344c <BSP_SDRAM_Init+0xb8>)
 8003438:	781b      	ldrb	r3, [r3, #0]
}
 800343a:	4618      	mov	r0, r3
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	20000564 	.word	0x20000564
 8003444:	a0000140 	.word	0xa0000140
 8003448:	20000598 	.word	0x20000598
 800344c:	2000007c 	.word	0x2000007c

08003450 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8003458:	2300      	movs	r3, #0
 800345a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 800345c:	4b2a      	ldr	r3, [pc, #168]	; (8003508 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800345e:	2201      	movs	r2, #1
 8003460:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003462:	4b29      	ldr	r3, [pc, #164]	; (8003508 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003464:	2208      	movs	r2, #8
 8003466:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003468:	4b27      	ldr	r3, [pc, #156]	; (8003508 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800346a:	2201      	movs	r2, #1
 800346c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800346e:	4b26      	ldr	r3, [pc, #152]	; (8003508 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003470:	2200      	movs	r2, #0
 8003472:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003474:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003478:	4923      	ldr	r1, [pc, #140]	; (8003508 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800347a:	4824      	ldr	r0, [pc, #144]	; (800350c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800347c:	f003 fde6 	bl	800704c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003480:	2001      	movs	r0, #1
 8003482:	f000 f9c3 	bl	800380c <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8003486:	4b20      	ldr	r3, [pc, #128]	; (8003508 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003488:	2202      	movs	r2, #2
 800348a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800348c:	4b1e      	ldr	r3, [pc, #120]	; (8003508 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800348e:	2208      	movs	r2, #8
 8003490:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003492:	4b1d      	ldr	r3, [pc, #116]	; (8003508 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003494:	2201      	movs	r2, #1
 8003496:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003498:	4b1b      	ldr	r3, [pc, #108]	; (8003508 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800349a:	2200      	movs	r2, #0
 800349c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800349e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034a2:	4919      	ldr	r1, [pc, #100]	; (8003508 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034a4:	4819      	ldr	r0, [pc, #100]	; (800350c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80034a6:	f003 fdd1 	bl	800704c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80034aa:	4b17      	ldr	r3, [pc, #92]	; (8003508 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034ac:	2203      	movs	r2, #3
 80034ae:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80034b0:	4b15      	ldr	r3, [pc, #84]	; (8003508 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034b2:	2208      	movs	r2, #8
 80034b4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80034b6:	4b14      	ldr	r3, [pc, #80]	; (8003508 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034b8:	2204      	movs	r2, #4
 80034ba:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80034bc:	4b12      	ldr	r3, [pc, #72]	; (8003508 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034be:	2200      	movs	r2, #0
 80034c0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80034c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034c6:	4910      	ldr	r1, [pc, #64]	; (8003508 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034c8:	4810      	ldr	r0, [pc, #64]	; (800350c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80034ca:	f003 fdbf 	bl	800704c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80034ce:	f44f 730c 	mov.w	r3, #560	; 0x230
 80034d2:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80034d4:	4b0c      	ldr	r3, [pc, #48]	; (8003508 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034d6:	2204      	movs	r2, #4
 80034d8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80034da:	4b0b      	ldr	r3, [pc, #44]	; (8003508 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034dc:	2208      	movs	r2, #8
 80034de:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80034e0:	4b09      	ldr	r3, [pc, #36]	; (8003508 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034e2:	2201      	movs	r2, #1
 80034e4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	4a07      	ldr	r2, [pc, #28]	; (8003508 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034ea:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80034ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034f0:	4905      	ldr	r1, [pc, #20]	; (8003508 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034f2:	4806      	ldr	r0, [pc, #24]	; (800350c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80034f4:	f003 fdaa 	bl	800704c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 80034f8:	6879      	ldr	r1, [r7, #4]
 80034fa:	4804      	ldr	r0, [pc, #16]	; (800350c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80034fc:	f003 fddb 	bl	80070b6 <HAL_SDRAM_ProgramRefreshRate>
}
 8003500:	bf00      	nop
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	200005b4 	.word	0x200005b4
 800350c:	20000564 	.word	0x20000564

08003510 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b090      	sub	sp, #64	; 0x40
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 80ec 	beq.w	80036fa <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003522:	2300      	movs	r3, #0
 8003524:	62bb      	str	r3, [r7, #40]	; 0x28
 8003526:	4b77      	ldr	r3, [pc, #476]	; (8003704 <BSP_SDRAM_MspInit+0x1f4>)
 8003528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352a:	4a76      	ldr	r2, [pc, #472]	; (8003704 <BSP_SDRAM_MspInit+0x1f4>)
 800352c:	f043 0301 	orr.w	r3, r3, #1
 8003530:	6393      	str	r3, [r2, #56]	; 0x38
 8003532:	4b74      	ldr	r3, [pc, #464]	; (8003704 <BSP_SDRAM_MspInit+0x1f4>)
 8003534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	62bb      	str	r3, [r7, #40]	; 0x28
 800353c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800353e:	2300      	movs	r3, #0
 8003540:	627b      	str	r3, [r7, #36]	; 0x24
 8003542:	4b70      	ldr	r3, [pc, #448]	; (8003704 <BSP_SDRAM_MspInit+0x1f4>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003546:	4a6f      	ldr	r2, [pc, #444]	; (8003704 <BSP_SDRAM_MspInit+0x1f4>)
 8003548:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800354c:	6313      	str	r3, [r2, #48]	; 0x30
 800354e:	4b6d      	ldr	r3, [pc, #436]	; (8003704 <BSP_SDRAM_MspInit+0x1f4>)
 8003550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003556:	627b      	str	r3, [r7, #36]	; 0x24
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	623b      	str	r3, [r7, #32]
 800355e:	4b69      	ldr	r3, [pc, #420]	; (8003704 <BSP_SDRAM_MspInit+0x1f4>)
 8003560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003562:	4a68      	ldr	r2, [pc, #416]	; (8003704 <BSP_SDRAM_MspInit+0x1f4>)
 8003564:	f043 0302 	orr.w	r3, r3, #2
 8003568:	6313      	str	r3, [r2, #48]	; 0x30
 800356a:	4b66      	ldr	r3, [pc, #408]	; (8003704 <BSP_SDRAM_MspInit+0x1f4>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	623b      	str	r3, [r7, #32]
 8003574:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003576:	2300      	movs	r3, #0
 8003578:	61fb      	str	r3, [r7, #28]
 800357a:	4b62      	ldr	r3, [pc, #392]	; (8003704 <BSP_SDRAM_MspInit+0x1f4>)
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	4a61      	ldr	r2, [pc, #388]	; (8003704 <BSP_SDRAM_MspInit+0x1f4>)
 8003580:	f043 0304 	orr.w	r3, r3, #4
 8003584:	6313      	str	r3, [r2, #48]	; 0x30
 8003586:	4b5f      	ldr	r3, [pc, #380]	; (8003704 <BSP_SDRAM_MspInit+0x1f4>)
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	f003 0304 	and.w	r3, r3, #4
 800358e:	61fb      	str	r3, [r7, #28]
 8003590:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003592:	2300      	movs	r3, #0
 8003594:	61bb      	str	r3, [r7, #24]
 8003596:	4b5b      	ldr	r3, [pc, #364]	; (8003704 <BSP_SDRAM_MspInit+0x1f4>)
 8003598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359a:	4a5a      	ldr	r2, [pc, #360]	; (8003704 <BSP_SDRAM_MspInit+0x1f4>)
 800359c:	f043 0308 	orr.w	r3, r3, #8
 80035a0:	6313      	str	r3, [r2, #48]	; 0x30
 80035a2:	4b58      	ldr	r3, [pc, #352]	; (8003704 <BSP_SDRAM_MspInit+0x1f4>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	61bb      	str	r3, [r7, #24]
 80035ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	617b      	str	r3, [r7, #20]
 80035b2:	4b54      	ldr	r3, [pc, #336]	; (8003704 <BSP_SDRAM_MspInit+0x1f4>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	4a53      	ldr	r2, [pc, #332]	; (8003704 <BSP_SDRAM_MspInit+0x1f4>)
 80035b8:	f043 0310 	orr.w	r3, r3, #16
 80035bc:	6313      	str	r3, [r2, #48]	; 0x30
 80035be:	4b51      	ldr	r3, [pc, #324]	; (8003704 <BSP_SDRAM_MspInit+0x1f4>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	f003 0310 	and.w	r3, r3, #16
 80035c6:	617b      	str	r3, [r7, #20]
 80035c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80035ca:	2300      	movs	r3, #0
 80035cc:	613b      	str	r3, [r7, #16]
 80035ce:	4b4d      	ldr	r3, [pc, #308]	; (8003704 <BSP_SDRAM_MspInit+0x1f4>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	4a4c      	ldr	r2, [pc, #304]	; (8003704 <BSP_SDRAM_MspInit+0x1f4>)
 80035d4:	f043 0320 	orr.w	r3, r3, #32
 80035d8:	6313      	str	r3, [r2, #48]	; 0x30
 80035da:	4b4a      	ldr	r3, [pc, #296]	; (8003704 <BSP_SDRAM_MspInit+0x1f4>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	f003 0320 	and.w	r3, r3, #32
 80035e2:	613b      	str	r3, [r7, #16]
 80035e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80035e6:	2300      	movs	r3, #0
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	4b46      	ldr	r3, [pc, #280]	; (8003704 <BSP_SDRAM_MspInit+0x1f4>)
 80035ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ee:	4a45      	ldr	r2, [pc, #276]	; (8003704 <BSP_SDRAM_MspInit+0x1f4>)
 80035f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035f4:	6313      	str	r3, [r2, #48]	; 0x30
 80035f6:	4b43      	ldr	r3, [pc, #268]	; (8003704 <BSP_SDRAM_MspInit+0x1f4>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8003602:	2302      	movs	r3, #2
 8003604:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003606:	2302      	movs	r3, #2
 8003608:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800360a:	2300      	movs	r3, #0
 800360c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 800360e:	230c      	movs	r3, #12
 8003610:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8003612:	2360      	movs	r3, #96	; 0x60
 8003614:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8003616:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800361a:	4619      	mov	r1, r3
 800361c:	483a      	ldr	r0, [pc, #232]	; (8003708 <BSP_SDRAM_MspInit+0x1f8>)
 800361e:	f000 fe7f 	bl	8004320 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8003622:	2301      	movs	r3, #1
 8003624:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8003626:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800362a:	4619      	mov	r1, r3
 800362c:	4837      	ldr	r0, [pc, #220]	; (800370c <BSP_SDRAM_MspInit+0x1fc>)
 800362e:	f000 fe77 	bl	8004320 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8003632:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003636:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003638:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800363c:	4619      	mov	r1, r3
 800363e:	4834      	ldr	r0, [pc, #208]	; (8003710 <BSP_SDRAM_MspInit+0x200>)
 8003640:	f000 fe6e 	bl	8004320 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8003644:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003648:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800364a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800364e:	4619      	mov	r1, r3
 8003650:	4830      	ldr	r0, [pc, #192]	; (8003714 <BSP_SDRAM_MspInit+0x204>)
 8003652:	f000 fe65 	bl	8004320 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8003656:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800365a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800365c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003660:	4619      	mov	r1, r3
 8003662:	482d      	ldr	r0, [pc, #180]	; (8003718 <BSP_SDRAM_MspInit+0x208>)
 8003664:	f000 fe5c 	bl	8004320 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003668:	f248 1333 	movw	r3, #33075	; 0x8133
 800366c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800366e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003672:	4619      	mov	r1, r3
 8003674:	4829      	ldr	r0, [pc, #164]	; (800371c <BSP_SDRAM_MspInit+0x20c>)
 8003676:	f000 fe53 	bl	8004320 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800367a:	4b29      	ldr	r3, [pc, #164]	; (8003720 <BSP_SDRAM_MspInit+0x210>)
 800367c:	2200      	movs	r2, #0
 800367e:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003680:	4b27      	ldr	r3, [pc, #156]	; (8003720 <BSP_SDRAM_MspInit+0x210>)
 8003682:	2280      	movs	r2, #128	; 0x80
 8003684:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003686:	4b26      	ldr	r3, [pc, #152]	; (8003720 <BSP_SDRAM_MspInit+0x210>)
 8003688:	f44f 7200 	mov.w	r2, #512	; 0x200
 800368c:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800368e:	4b24      	ldr	r3, [pc, #144]	; (8003720 <BSP_SDRAM_MspInit+0x210>)
 8003690:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003694:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003696:	4b22      	ldr	r3, [pc, #136]	; (8003720 <BSP_SDRAM_MspInit+0x210>)
 8003698:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800369c:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800369e:	4b20      	ldr	r3, [pc, #128]	; (8003720 <BSP_SDRAM_MspInit+0x210>)
 80036a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036a4:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 80036a6:	4b1e      	ldr	r3, [pc, #120]	; (8003720 <BSP_SDRAM_MspInit+0x210>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80036ac:	4b1c      	ldr	r3, [pc, #112]	; (8003720 <BSP_SDRAM_MspInit+0x210>)
 80036ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036b2:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80036b4:	4b1a      	ldr	r3, [pc, #104]	; (8003720 <BSP_SDRAM_MspInit+0x210>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80036ba:	4b19      	ldr	r3, [pc, #100]	; (8003720 <BSP_SDRAM_MspInit+0x210>)
 80036bc:	2203      	movs	r2, #3
 80036be:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80036c0:	4b17      	ldr	r3, [pc, #92]	; (8003720 <BSP_SDRAM_MspInit+0x210>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80036c6:	4b16      	ldr	r3, [pc, #88]	; (8003720 <BSP_SDRAM_MspInit+0x210>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80036cc:	4b14      	ldr	r3, [pc, #80]	; (8003720 <BSP_SDRAM_MspInit+0x210>)
 80036ce:	4a15      	ldr	r2, [pc, #84]	; (8003724 <BSP_SDRAM_MspInit+0x214>)
 80036d0:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a12      	ldr	r2, [pc, #72]	; (8003720 <BSP_SDRAM_MspInit+0x210>)
 80036d6:	631a      	str	r2, [r3, #48]	; 0x30
 80036d8:	4a11      	ldr	r2, [pc, #68]	; (8003720 <BSP_SDRAM_MspInit+0x210>)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 80036de:	4810      	ldr	r0, [pc, #64]	; (8003720 <BSP_SDRAM_MspInit+0x210>)
 80036e0:	f000 fa78 	bl	8003bd4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 80036e4:	480e      	ldr	r0, [pc, #56]	; (8003720 <BSP_SDRAM_MspInit+0x210>)
 80036e6:	f000 f9c7 	bl	8003a78 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80036ea:	2200      	movs	r2, #0
 80036ec:	210f      	movs	r1, #15
 80036ee:	2038      	movs	r0, #56	; 0x38
 80036f0:	f000 f98b 	bl	8003a0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80036f4:	2038      	movs	r0, #56	; 0x38
 80036f6:	f000 f9a4 	bl	8003a42 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80036fa:	bf00      	nop
 80036fc:	3740      	adds	r7, #64	; 0x40
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40023800 	.word	0x40023800
 8003708:	40020400 	.word	0x40020400
 800370c:	40020800 	.word	0x40020800
 8003710:	40020c00 	.word	0x40020c00
 8003714:	40021000 	.word	0x40021000
 8003718:	40021400 	.word	0x40021400
 800371c:	40021800 	.word	0x40021800
 8003720:	200005c4 	.word	0x200005c4
 8003724:	40026410 	.word	0x40026410

08003728 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800372c:	4b0e      	ldr	r3, [pc, #56]	; (8003768 <HAL_Init+0x40>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a0d      	ldr	r2, [pc, #52]	; (8003768 <HAL_Init+0x40>)
 8003732:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003736:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003738:	4b0b      	ldr	r3, [pc, #44]	; (8003768 <HAL_Init+0x40>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a0a      	ldr	r2, [pc, #40]	; (8003768 <HAL_Init+0x40>)
 800373e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003742:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003744:	4b08      	ldr	r3, [pc, #32]	; (8003768 <HAL_Init+0x40>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a07      	ldr	r2, [pc, #28]	; (8003768 <HAL_Init+0x40>)
 800374a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800374e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003750:	2003      	movs	r0, #3
 8003752:	f000 f94f 	bl	80039f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003756:	200f      	movs	r0, #15
 8003758:	f000 f808 	bl	800376c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800375c:	f7fd fe34 	bl	80013c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	40023c00 	.word	0x40023c00

0800376c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003774:	4b12      	ldr	r3, [pc, #72]	; (80037c0 <HAL_InitTick+0x54>)
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	4b12      	ldr	r3, [pc, #72]	; (80037c4 <HAL_InitTick+0x58>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	4619      	mov	r1, r3
 800377e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003782:	fbb3 f3f1 	udiv	r3, r3, r1
 8003786:	fbb2 f3f3 	udiv	r3, r2, r3
 800378a:	4618      	mov	r0, r3
 800378c:	f000 f967 	bl	8003a5e <HAL_SYSTICK_Config>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e00e      	b.n	80037b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b0f      	cmp	r3, #15
 800379e:	d80a      	bhi.n	80037b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037a0:	2200      	movs	r2, #0
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	f04f 30ff 	mov.w	r0, #4294967295
 80037a8:	f000 f92f 	bl	8003a0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037ac:	4a06      	ldr	r2, [pc, #24]	; (80037c8 <HAL_InitTick+0x5c>)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
 80037b4:	e000      	b.n	80037b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	20000000 	.word	0x20000000
 80037c4:	20000084 	.word	0x20000084
 80037c8:	20000080 	.word	0x20000080

080037cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037d0:	4b06      	ldr	r3, [pc, #24]	; (80037ec <HAL_IncTick+0x20>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	461a      	mov	r2, r3
 80037d6:	4b06      	ldr	r3, [pc, #24]	; (80037f0 <HAL_IncTick+0x24>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4413      	add	r3, r2
 80037dc:	4a04      	ldr	r2, [pc, #16]	; (80037f0 <HAL_IncTick+0x24>)
 80037de:	6013      	str	r3, [r2, #0]
}
 80037e0:	bf00      	nop
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	20000084 	.word	0x20000084
 80037f0:	20000624 	.word	0x20000624

080037f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  return uwTick;
 80037f8:	4b03      	ldr	r3, [pc, #12]	; (8003808 <HAL_GetTick+0x14>)
 80037fa:	681b      	ldr	r3, [r3, #0]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	20000624 	.word	0x20000624

0800380c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003814:	f7ff ffee 	bl	80037f4 <HAL_GetTick>
 8003818:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003824:	d005      	beq.n	8003832 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003826:	4b0a      	ldr	r3, [pc, #40]	; (8003850 <HAL_Delay+0x44>)
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	461a      	mov	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4413      	add	r3, r2
 8003830:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003832:	bf00      	nop
 8003834:	f7ff ffde 	bl	80037f4 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	429a      	cmp	r2, r3
 8003842:	d8f7      	bhi.n	8003834 <HAL_Delay+0x28>
  {
  }
}
 8003844:	bf00      	nop
 8003846:	bf00      	nop
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	20000084 	.word	0x20000084

08003854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003864:	4b0c      	ldr	r3, [pc, #48]	; (8003898 <__NVIC_SetPriorityGrouping+0x44>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003870:	4013      	ands	r3, r2
 8003872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800387c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003886:	4a04      	ldr	r2, [pc, #16]	; (8003898 <__NVIC_SetPriorityGrouping+0x44>)
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	60d3      	str	r3, [r2, #12]
}
 800388c:	bf00      	nop
 800388e:	3714      	adds	r7, #20
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	e000ed00 	.word	0xe000ed00

0800389c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038a0:	4b04      	ldr	r3, [pc, #16]	; (80038b4 <__NVIC_GetPriorityGrouping+0x18>)
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	0a1b      	lsrs	r3, r3, #8
 80038a6:	f003 0307 	and.w	r3, r3, #7
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	e000ed00 	.word	0xe000ed00

080038b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	4603      	mov	r3, r0
 80038c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	db0b      	blt.n	80038e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ca:	79fb      	ldrb	r3, [r7, #7]
 80038cc:	f003 021f 	and.w	r2, r3, #31
 80038d0:	4907      	ldr	r1, [pc, #28]	; (80038f0 <__NVIC_EnableIRQ+0x38>)
 80038d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d6:	095b      	lsrs	r3, r3, #5
 80038d8:	2001      	movs	r0, #1
 80038da:	fa00 f202 	lsl.w	r2, r0, r2
 80038de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038e2:	bf00      	nop
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	e000e100 	.word	0xe000e100

080038f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	4603      	mov	r3, r0
 80038fc:	6039      	str	r1, [r7, #0]
 80038fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003904:	2b00      	cmp	r3, #0
 8003906:	db0a      	blt.n	800391e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	b2da      	uxtb	r2, r3
 800390c:	490c      	ldr	r1, [pc, #48]	; (8003940 <__NVIC_SetPriority+0x4c>)
 800390e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003912:	0112      	lsls	r2, r2, #4
 8003914:	b2d2      	uxtb	r2, r2
 8003916:	440b      	add	r3, r1
 8003918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800391c:	e00a      	b.n	8003934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	b2da      	uxtb	r2, r3
 8003922:	4908      	ldr	r1, [pc, #32]	; (8003944 <__NVIC_SetPriority+0x50>)
 8003924:	79fb      	ldrb	r3, [r7, #7]
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	3b04      	subs	r3, #4
 800392c:	0112      	lsls	r2, r2, #4
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	440b      	add	r3, r1
 8003932:	761a      	strb	r2, [r3, #24]
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	e000e100 	.word	0xe000e100
 8003944:	e000ed00 	.word	0xe000ed00

08003948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003948:	b480      	push	{r7}
 800394a:	b089      	sub	sp, #36	; 0x24
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f1c3 0307 	rsb	r3, r3, #7
 8003962:	2b04      	cmp	r3, #4
 8003964:	bf28      	it	cs
 8003966:	2304      	movcs	r3, #4
 8003968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	3304      	adds	r3, #4
 800396e:	2b06      	cmp	r3, #6
 8003970:	d902      	bls.n	8003978 <NVIC_EncodePriority+0x30>
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	3b03      	subs	r3, #3
 8003976:	e000      	b.n	800397a <NVIC_EncodePriority+0x32>
 8003978:	2300      	movs	r3, #0
 800397a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800397c:	f04f 32ff 	mov.w	r2, #4294967295
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	fa02 f303 	lsl.w	r3, r2, r3
 8003986:	43da      	mvns	r2, r3
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	401a      	ands	r2, r3
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003990:	f04f 31ff 	mov.w	r1, #4294967295
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	fa01 f303 	lsl.w	r3, r1, r3
 800399a:	43d9      	mvns	r1, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039a0:	4313      	orrs	r3, r2
         );
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3724      	adds	r7, #36	; 0x24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
	...

080039b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3b01      	subs	r3, #1
 80039bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039c0:	d301      	bcc.n	80039c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039c2:	2301      	movs	r3, #1
 80039c4:	e00f      	b.n	80039e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039c6:	4a0a      	ldr	r2, [pc, #40]	; (80039f0 <SysTick_Config+0x40>)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3b01      	subs	r3, #1
 80039cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039ce:	210f      	movs	r1, #15
 80039d0:	f04f 30ff 	mov.w	r0, #4294967295
 80039d4:	f7ff ff8e 	bl	80038f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039d8:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <SysTick_Config+0x40>)
 80039da:	2200      	movs	r2, #0
 80039dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039de:	4b04      	ldr	r3, [pc, #16]	; (80039f0 <SysTick_Config+0x40>)
 80039e0:	2207      	movs	r2, #7
 80039e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	e000e010 	.word	0xe000e010

080039f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f7ff ff29 	bl	8003854 <__NVIC_SetPriorityGrouping>
}
 8003a02:	bf00      	nop
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b086      	sub	sp, #24
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	4603      	mov	r3, r0
 8003a12:	60b9      	str	r1, [r7, #8]
 8003a14:	607a      	str	r2, [r7, #4]
 8003a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a1c:	f7ff ff3e 	bl	800389c <__NVIC_GetPriorityGrouping>
 8003a20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	68b9      	ldr	r1, [r7, #8]
 8003a26:	6978      	ldr	r0, [r7, #20]
 8003a28:	f7ff ff8e 	bl	8003948 <NVIC_EncodePriority>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a32:	4611      	mov	r1, r2
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7ff ff5d 	bl	80038f4 <__NVIC_SetPriority>
}
 8003a3a:	bf00      	nop
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b082      	sub	sp, #8
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	4603      	mov	r3, r0
 8003a4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff ff31 	bl	80038b8 <__NVIC_EnableIRQ>
}
 8003a56:	bf00      	nop
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b082      	sub	sp, #8
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7ff ffa2 	bl	80039b0 <SysTick_Config>
 8003a6c:	4603      	mov	r3, r0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
	...

08003a78 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a80:	2300      	movs	r3, #0
 8003a82:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a84:	f7ff feb6 	bl	80037f4 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e099      	b.n	8003bc8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0201 	bic.w	r2, r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ab4:	e00f      	b.n	8003ad6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ab6:	f7ff fe9d 	bl	80037f4 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b05      	cmp	r3, #5
 8003ac2:	d908      	bls.n	8003ad6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2203      	movs	r2, #3
 8003ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e078      	b.n	8003bc8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1e8      	bne.n	8003ab6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	4b38      	ldr	r3, [pc, #224]	; (8003bd0 <HAL_DMA_Init+0x158>)
 8003af0:	4013      	ands	r3, r2
 8003af2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	2b04      	cmp	r3, #4
 8003b2e:	d107      	bne.n	8003b40 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f023 0307 	bic.w	r3, r3, #7
 8003b56:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	d117      	bne.n	8003b9a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00e      	beq.n	8003b9a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 f8bd 	bl	8003cfc <DMA_CheckFifoParam>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d008      	beq.n	8003b9a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2240      	movs	r2, #64	; 0x40
 8003b8c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003b96:	2301      	movs	r3, #1
 8003b98:	e016      	b.n	8003bc8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f874 	bl	8003c90 <DMA_CalcBaseAndBitshift>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb0:	223f      	movs	r2, #63	; 0x3f
 8003bb2:	409a      	lsls	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3718      	adds	r7, #24
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	f010803f 	.word	0xf010803f

08003bd4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e050      	b.n	8003c88 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d101      	bne.n	8003bf6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	e048      	b.n	8003c88 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 0201 	bic.w	r2, r2, #1
 8003c04:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2200      	movs	r2, #0
 8003c14:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2200      	movs	r2, #0
 8003c24:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2221      	movs	r2, #33	; 0x21
 8003c34:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f82a 	bl	8003c90 <DMA_CalcBaseAndBitshift>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c68:	223f      	movs	r2, #63	; 0x3f
 8003c6a:	409a      	lsls	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	3b10      	subs	r3, #16
 8003ca0:	4a14      	ldr	r2, [pc, #80]	; (8003cf4 <DMA_CalcBaseAndBitshift+0x64>)
 8003ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca6:	091b      	lsrs	r3, r3, #4
 8003ca8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003caa:	4a13      	ldr	r2, [pc, #76]	; (8003cf8 <DMA_CalcBaseAndBitshift+0x68>)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4413      	add	r3, r2
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2b03      	cmp	r3, #3
 8003cbc:	d909      	bls.n	8003cd2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cc6:	f023 0303 	bic.w	r3, r3, #3
 8003cca:	1d1a      	adds	r2, r3, #4
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	659a      	str	r2, [r3, #88]	; 0x58
 8003cd0:	e007      	b.n	8003ce2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cda:	f023 0303 	bic.w	r3, r3, #3
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3714      	adds	r7, #20
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	aaaaaaab 	.word	0xaaaaaaab
 8003cf8:	08012658 	.word	0x08012658

08003cfc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d04:	2300      	movs	r3, #0
 8003d06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d11f      	bne.n	8003d56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	2b03      	cmp	r3, #3
 8003d1a:	d856      	bhi.n	8003dca <DMA_CheckFifoParam+0xce>
 8003d1c:	a201      	add	r2, pc, #4	; (adr r2, 8003d24 <DMA_CheckFifoParam+0x28>)
 8003d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d22:	bf00      	nop
 8003d24:	08003d35 	.word	0x08003d35
 8003d28:	08003d47 	.word	0x08003d47
 8003d2c:	08003d35 	.word	0x08003d35
 8003d30:	08003dcb 	.word	0x08003dcb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d046      	beq.n	8003dce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d44:	e043      	b.n	8003dce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d4e:	d140      	bne.n	8003dd2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d54:	e03d      	b.n	8003dd2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d5e:	d121      	bne.n	8003da4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2b03      	cmp	r3, #3
 8003d64:	d837      	bhi.n	8003dd6 <DMA_CheckFifoParam+0xda>
 8003d66:	a201      	add	r2, pc, #4	; (adr r2, 8003d6c <DMA_CheckFifoParam+0x70>)
 8003d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6c:	08003d7d 	.word	0x08003d7d
 8003d70:	08003d83 	.word	0x08003d83
 8003d74:	08003d7d 	.word	0x08003d7d
 8003d78:	08003d95 	.word	0x08003d95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d80:	e030      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d025      	beq.n	8003dda <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d92:	e022      	b.n	8003dda <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d9c:	d11f      	bne.n	8003dde <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003da2:	e01c      	b.n	8003dde <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d903      	bls.n	8003db2 <DMA_CheckFifoParam+0xb6>
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	2b03      	cmp	r3, #3
 8003dae:	d003      	beq.n	8003db8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003db0:	e018      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	73fb      	strb	r3, [r7, #15]
      break;
 8003db6:	e015      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00e      	beq.n	8003de2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8003dc8:	e00b      	b.n	8003de2 <DMA_CheckFifoParam+0xe6>
      break;
 8003dca:	bf00      	nop
 8003dcc:	e00a      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
      break;
 8003dce:	bf00      	nop
 8003dd0:	e008      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
      break;
 8003dd2:	bf00      	nop
 8003dd4:	e006      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
      break;
 8003dd6:	bf00      	nop
 8003dd8:	e004      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
      break;
 8003dda:	bf00      	nop
 8003ddc:	e002      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003dde:	bf00      	nop
 8003de0:	e000      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
      break;
 8003de2:	bf00      	nop
    }
  } 
  
  return status; 
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop

08003df4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e03b      	b.n	8003e7e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d106      	bne.n	8003e20 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f833 	bl	8003e86 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685a      	ldr	r2, [r3, #4]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e44:	f023 0107 	bic.w	r1, r3, #7
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	430a      	orrs	r2, r1
 8003e52:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003e5e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	68d1      	ldr	r1, [r2, #12]
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	6812      	ldr	r2, [r2, #0]
 8003e6a:	430b      	orrs	r3, r1
 8003e6c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8003e8e:	bf00      	nop
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b086      	sub	sp, #24
 8003e9e:	af02      	add	r7, sp, #8
 8003ea0:	60f8      	str	r0, [r7, #12]
 8003ea2:	60b9      	str	r1, [r7, #8]
 8003ea4:	607a      	str	r2, [r7, #4]
 8003ea6:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d101      	bne.n	8003eb6 <HAL_DMA2D_Start+0x1c>
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	e018      	b.n	8003ee8 <HAL_DMA2D_Start+0x4e>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	68b9      	ldr	r1, [r7, #8]
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f000 f989 	bl	80041e8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f042 0201 	orr.w	r2, r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d056      	beq.n	8003fba <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f0c:	f7ff fc72 	bl	80037f4 <HAL_GetTick>
 8003f10:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003f12:	e04b      	b.n	8003fac <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d023      	beq.n	8003f6e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f003 0320 	and.w	r3, r3, #32
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d005      	beq.n	8003f3c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f34:	f043 0202 	orr.w	r2, r3, #2
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d005      	beq.n	8003f52 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4a:	f043 0201 	orr.w	r2, r3, #1
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2221      	movs	r2, #33	; 0x21
 8003f58:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2204      	movs	r2, #4
 8003f5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e0a5      	b.n	80040ba <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f74:	d01a      	beq.n	8003fac <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f76:	f7ff fc3d 	bl	80037f4 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d302      	bcc.n	8003f8c <HAL_DMA2D_PollForTransfer+0x9c>
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10f      	bne.n	8003fac <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f90:	f043 0220 	orr.w	r2, r3, #32
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2203      	movs	r2, #3
 8003f9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e086      	b.n	80040ba <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d0ac      	beq.n	8003f14 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	f003 0320 	and.w	r3, r3, #32
 8003fc4:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	f003 0320 	and.w	r3, r3, #32
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d061      	beq.n	80040a0 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003fdc:	f7ff fc0a 	bl	80037f4 <HAL_GetTick>
 8003fe0:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003fe2:	e056      	b.n	8004092 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d02e      	beq.n	8004054 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f003 0308 	and.w	r3, r3, #8
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d005      	beq.n	800400c <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004004:	f043 0204 	orr.w	r2, r3, #4
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f003 0320 	and.w	r3, r3, #32
 8004012:	2b00      	cmp	r3, #0
 8004014:	d005      	beq.n	8004022 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800401a:	f043 0202 	orr.w	r2, r3, #2
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	d005      	beq.n	8004038 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004030:	f043 0201 	orr.w	r2, r3, #1
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2229      	movs	r2, #41	; 0x29
 800403e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2204      	movs	r2, #4
 8004044:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e032      	b.n	80040ba <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800405a:	d01a      	beq.n	8004092 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800405c:	f7ff fbca 	bl	80037f4 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	429a      	cmp	r2, r3
 800406a:	d302      	bcc.n	8004072 <HAL_DMA2D_PollForTransfer+0x182>
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10f      	bne.n	8004092 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004076:	f043 0220 	orr.w	r2, r3, #32
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2203      	movs	r2, #3
 8004082:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e013      	b.n	80040ba <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f003 0310 	and.w	r3, r3, #16
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0a1      	beq.n	8003fe4 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2212      	movs	r2, #18
 80040a6:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3718      	adds	r7, #24
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
	...

080040c4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b087      	sub	sp, #28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d101      	bne.n	80040e4 <HAL_DMA2D_ConfigLayer+0x20>
 80040e0:	2302      	movs	r3, #2
 80040e2:	e079      	b.n	80041d8 <HAL_DMA2D_ConfigLayer+0x114>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	3318      	adds	r3, #24
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	4413      	add	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	041b      	lsls	r3, r3, #16
 800410a:	4313      	orrs	r3, r2
 800410c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800410e:	4b35      	ldr	r3, [pc, #212]	; (80041e4 <HAL_DMA2D_ConfigLayer+0x120>)
 8004110:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2b0a      	cmp	r3, #10
 8004118:	d003      	beq.n	8004122 <HAL_DMA2D_ConfigLayer+0x5e>
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b09      	cmp	r3, #9
 8004120:	d107      	bne.n	8004132 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	4313      	orrs	r3, r2
 800412e:	617b      	str	r3, [r7, #20]
 8004130:	e005      	b.n	800413e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	061b      	lsls	r3, r3, #24
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	4313      	orrs	r3, r2
 800413c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d120      	bne.n	8004186 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	43db      	mvns	r3, r3
 800414e:	ea02 0103 	and.w	r1, r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	430a      	orrs	r2, r1
 800415a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	6812      	ldr	r2, [r2, #0]
 8004164:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2b0a      	cmp	r3, #10
 800416c:	d003      	beq.n	8004176 <HAL_DMA2D_ConfigLayer+0xb2>
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2b09      	cmp	r3, #9
 8004174:	d127      	bne.n	80041c6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	68da      	ldr	r2, [r3, #12]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004182:	629a      	str	r2, [r3, #40]	; 0x28
 8004184:	e01f      	b.n	80041c6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	69da      	ldr	r2, [r3, #28]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	43db      	mvns	r3, r3
 8004190:	ea02 0103 	and.w	r1, r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	430a      	orrs	r2, r1
 800419c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	6812      	ldr	r2, [r2, #0]
 80041a6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	2b0a      	cmp	r3, #10
 80041ae:	d003      	beq.n	80041b8 <HAL_DMA2D_ConfigLayer+0xf4>
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	2b09      	cmp	r3, #9
 80041b6:	d106      	bne.n	80041c6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	68da      	ldr	r2, [r3, #12]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80041c4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	371c      	adds	r7, #28
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	ff03000f 	.word	0xff03000f

080041e8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b08b      	sub	sp, #44	; 0x2c
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
 80041f4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fc:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	041a      	lsls	r2, r3, #16
 8004204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004206:	431a      	orrs	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	430a      	orrs	r2, r1
 800420e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004220:	d174      	bne.n	800430c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004228:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004230:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004238:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	b2db      	uxtb	r3, r3
 800423e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d108      	bne.n	800425a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	431a      	orrs	r2, r3
 800424e:	6a3b      	ldr	r3, [r7, #32]
 8004250:	4313      	orrs	r3, r2
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	4313      	orrs	r3, r2
 8004256:	627b      	str	r3, [r7, #36]	; 0x24
 8004258:	e053      	b.n	8004302 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d106      	bne.n	8004270 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	4313      	orrs	r3, r2
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	4313      	orrs	r3, r2
 800426c:	627b      	str	r3, [r7, #36]	; 0x24
 800426e:	e048      	b.n	8004302 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	2b02      	cmp	r3, #2
 8004276:	d111      	bne.n	800429c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	0cdb      	lsrs	r3, r3, #19
 800427c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	0a9b      	lsrs	r3, r3, #10
 8004282:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	08db      	lsrs	r3, r3, #3
 8004288:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	015a      	lsls	r2, r3, #5
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	02db      	lsls	r3, r3, #11
 8004292:	4313      	orrs	r3, r2
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	4313      	orrs	r3, r2
 8004298:	627b      	str	r3, [r7, #36]	; 0x24
 800429a:	e032      	b.n	8004302 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	2b03      	cmp	r3, #3
 80042a2:	d117      	bne.n	80042d4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80042a4:	6a3b      	ldr	r3, [r7, #32]
 80042a6:	0fdb      	lsrs	r3, r3, #31
 80042a8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	0cdb      	lsrs	r3, r3, #19
 80042ae:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	0adb      	lsrs	r3, r3, #11
 80042b4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	08db      	lsrs	r3, r3, #3
 80042ba:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	015a      	lsls	r2, r3, #5
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	029b      	lsls	r3, r3, #10
 80042c4:	431a      	orrs	r2, r3
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	03db      	lsls	r3, r3, #15
 80042ca:	4313      	orrs	r3, r2
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	627b      	str	r3, [r7, #36]	; 0x24
 80042d2:	e016      	b.n	8004302 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80042d4:	6a3b      	ldr	r3, [r7, #32]
 80042d6:	0f1b      	lsrs	r3, r3, #28
 80042d8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	0d1b      	lsrs	r3, r3, #20
 80042de:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	0b1b      	lsrs	r3, r3, #12
 80042e4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	091b      	lsrs	r3, r3, #4
 80042ea:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	011a      	lsls	r2, r3, #4
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	021b      	lsls	r3, r3, #8
 80042f4:	431a      	orrs	r2, r3
 80042f6:	6a3b      	ldr	r3, [r7, #32]
 80042f8:	031b      	lsls	r3, r3, #12
 80042fa:	4313      	orrs	r3, r2
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	4313      	orrs	r3, r2
 8004300:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004308:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800430a:	e003      	b.n	8004314 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68ba      	ldr	r2, [r7, #8]
 8004312:	60da      	str	r2, [r3, #12]
}
 8004314:	bf00      	nop
 8004316:	372c      	adds	r7, #44	; 0x2c
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004320:	b480      	push	{r7}
 8004322:	b089      	sub	sp, #36	; 0x24
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800432a:	2300      	movs	r3, #0
 800432c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800432e:	2300      	movs	r3, #0
 8004330:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004332:	2300      	movs	r3, #0
 8004334:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004336:	2300      	movs	r3, #0
 8004338:	61fb      	str	r3, [r7, #28]
 800433a:	e177      	b.n	800462c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800433c:	2201      	movs	r2, #1
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	fa02 f303 	lsl.w	r3, r2, r3
 8004344:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	4013      	ands	r3, r2
 800434e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	429a      	cmp	r2, r3
 8004356:	f040 8166 	bne.w	8004626 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	2b01      	cmp	r3, #1
 8004364:	d005      	beq.n	8004372 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800436e:	2b02      	cmp	r3, #2
 8004370:	d130      	bne.n	80043d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	2203      	movs	r2, #3
 800437e:	fa02 f303 	lsl.w	r3, r2, r3
 8004382:	43db      	mvns	r3, r3
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	4013      	ands	r3, r2
 8004388:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	68da      	ldr	r2, [r3, #12]
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	4313      	orrs	r3, r2
 800439a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043a8:	2201      	movs	r2, #1
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	fa02 f303 	lsl.w	r3, r2, r3
 80043b0:	43db      	mvns	r3, r3
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	4013      	ands	r3, r2
 80043b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	091b      	lsrs	r3, r3, #4
 80043be:	f003 0201 	and.w	r2, r3, #1
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f003 0303 	and.w	r3, r3, #3
 80043dc:	2b03      	cmp	r3, #3
 80043de:	d017      	beq.n	8004410 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	2203      	movs	r2, #3
 80043ec:	fa02 f303 	lsl.w	r3, r2, r3
 80043f0:	43db      	mvns	r3, r3
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	4013      	ands	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	4313      	orrs	r3, r2
 8004408:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f003 0303 	and.w	r3, r3, #3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d123      	bne.n	8004464 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	08da      	lsrs	r2, r3, #3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3208      	adds	r2, #8
 8004424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004428:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	220f      	movs	r2, #15
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	43db      	mvns	r3, r3
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	4013      	ands	r3, r2
 800443e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	691a      	ldr	r2, [r3, #16]
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	f003 0307 	and.w	r3, r3, #7
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	fa02 f303 	lsl.w	r3, r2, r3
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	4313      	orrs	r3, r2
 8004454:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	08da      	lsrs	r2, r3, #3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	3208      	adds	r2, #8
 800445e:	69b9      	ldr	r1, [r7, #24]
 8004460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	2203      	movs	r2, #3
 8004470:	fa02 f303 	lsl.w	r3, r2, r3
 8004474:	43db      	mvns	r3, r3
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	4013      	ands	r3, r2
 800447a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f003 0203 	and.w	r2, r3, #3
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	4313      	orrs	r3, r2
 8004490:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 80c0 	beq.w	8004626 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044a6:	2300      	movs	r3, #0
 80044a8:	60fb      	str	r3, [r7, #12]
 80044aa:	4b66      	ldr	r3, [pc, #408]	; (8004644 <HAL_GPIO_Init+0x324>)
 80044ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ae:	4a65      	ldr	r2, [pc, #404]	; (8004644 <HAL_GPIO_Init+0x324>)
 80044b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044b4:	6453      	str	r3, [r2, #68]	; 0x44
 80044b6:	4b63      	ldr	r3, [pc, #396]	; (8004644 <HAL_GPIO_Init+0x324>)
 80044b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044be:	60fb      	str	r3, [r7, #12]
 80044c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044c2:	4a61      	ldr	r2, [pc, #388]	; (8004648 <HAL_GPIO_Init+0x328>)
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	089b      	lsrs	r3, r3, #2
 80044c8:	3302      	adds	r3, #2
 80044ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	f003 0303 	and.w	r3, r3, #3
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	220f      	movs	r2, #15
 80044da:	fa02 f303 	lsl.w	r3, r2, r3
 80044de:	43db      	mvns	r3, r3
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	4013      	ands	r3, r2
 80044e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a58      	ldr	r2, [pc, #352]	; (800464c <HAL_GPIO_Init+0x32c>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d037      	beq.n	800455e <HAL_GPIO_Init+0x23e>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a57      	ldr	r2, [pc, #348]	; (8004650 <HAL_GPIO_Init+0x330>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d031      	beq.n	800455a <HAL_GPIO_Init+0x23a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a56      	ldr	r2, [pc, #344]	; (8004654 <HAL_GPIO_Init+0x334>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d02b      	beq.n	8004556 <HAL_GPIO_Init+0x236>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a55      	ldr	r2, [pc, #340]	; (8004658 <HAL_GPIO_Init+0x338>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d025      	beq.n	8004552 <HAL_GPIO_Init+0x232>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a54      	ldr	r2, [pc, #336]	; (800465c <HAL_GPIO_Init+0x33c>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d01f      	beq.n	800454e <HAL_GPIO_Init+0x22e>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a53      	ldr	r2, [pc, #332]	; (8004660 <HAL_GPIO_Init+0x340>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d019      	beq.n	800454a <HAL_GPIO_Init+0x22a>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a52      	ldr	r2, [pc, #328]	; (8004664 <HAL_GPIO_Init+0x344>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d013      	beq.n	8004546 <HAL_GPIO_Init+0x226>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a51      	ldr	r2, [pc, #324]	; (8004668 <HAL_GPIO_Init+0x348>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d00d      	beq.n	8004542 <HAL_GPIO_Init+0x222>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a50      	ldr	r2, [pc, #320]	; (800466c <HAL_GPIO_Init+0x34c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d007      	beq.n	800453e <HAL_GPIO_Init+0x21e>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a4f      	ldr	r2, [pc, #316]	; (8004670 <HAL_GPIO_Init+0x350>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d101      	bne.n	800453a <HAL_GPIO_Init+0x21a>
 8004536:	2309      	movs	r3, #9
 8004538:	e012      	b.n	8004560 <HAL_GPIO_Init+0x240>
 800453a:	230a      	movs	r3, #10
 800453c:	e010      	b.n	8004560 <HAL_GPIO_Init+0x240>
 800453e:	2308      	movs	r3, #8
 8004540:	e00e      	b.n	8004560 <HAL_GPIO_Init+0x240>
 8004542:	2307      	movs	r3, #7
 8004544:	e00c      	b.n	8004560 <HAL_GPIO_Init+0x240>
 8004546:	2306      	movs	r3, #6
 8004548:	e00a      	b.n	8004560 <HAL_GPIO_Init+0x240>
 800454a:	2305      	movs	r3, #5
 800454c:	e008      	b.n	8004560 <HAL_GPIO_Init+0x240>
 800454e:	2304      	movs	r3, #4
 8004550:	e006      	b.n	8004560 <HAL_GPIO_Init+0x240>
 8004552:	2303      	movs	r3, #3
 8004554:	e004      	b.n	8004560 <HAL_GPIO_Init+0x240>
 8004556:	2302      	movs	r3, #2
 8004558:	e002      	b.n	8004560 <HAL_GPIO_Init+0x240>
 800455a:	2301      	movs	r3, #1
 800455c:	e000      	b.n	8004560 <HAL_GPIO_Init+0x240>
 800455e:	2300      	movs	r3, #0
 8004560:	69fa      	ldr	r2, [r7, #28]
 8004562:	f002 0203 	and.w	r2, r2, #3
 8004566:	0092      	lsls	r2, r2, #2
 8004568:	4093      	lsls	r3, r2
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	4313      	orrs	r3, r2
 800456e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004570:	4935      	ldr	r1, [pc, #212]	; (8004648 <HAL_GPIO_Init+0x328>)
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	089b      	lsrs	r3, r3, #2
 8004576:	3302      	adds	r3, #2
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800457e:	4b3d      	ldr	r3, [pc, #244]	; (8004674 <HAL_GPIO_Init+0x354>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	43db      	mvns	r3, r3
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	4013      	ands	r3, r2
 800458c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	4313      	orrs	r3, r2
 80045a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045a2:	4a34      	ldr	r2, [pc, #208]	; (8004674 <HAL_GPIO_Init+0x354>)
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045a8:	4b32      	ldr	r3, [pc, #200]	; (8004674 <HAL_GPIO_Init+0x354>)
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	43db      	mvns	r3, r3
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	4013      	ands	r3, r2
 80045b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d003      	beq.n	80045cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045cc:	4a29      	ldr	r2, [pc, #164]	; (8004674 <HAL_GPIO_Init+0x354>)
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80045d2:	4b28      	ldr	r3, [pc, #160]	; (8004674 <HAL_GPIO_Init+0x354>)
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	43db      	mvns	r3, r3
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	4013      	ands	r3, r2
 80045e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045f6:	4a1f      	ldr	r2, [pc, #124]	; (8004674 <HAL_GPIO_Init+0x354>)
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045fc:	4b1d      	ldr	r3, [pc, #116]	; (8004674 <HAL_GPIO_Init+0x354>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	43db      	mvns	r3, r3
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	4013      	ands	r3, r2
 800460a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d003      	beq.n	8004620 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	4313      	orrs	r3, r2
 800461e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004620:	4a14      	ldr	r2, [pc, #80]	; (8004674 <HAL_GPIO_Init+0x354>)
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	3301      	adds	r3, #1
 800462a:	61fb      	str	r3, [r7, #28]
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	2b0f      	cmp	r3, #15
 8004630:	f67f ae84 	bls.w	800433c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004634:	bf00      	nop
 8004636:	bf00      	nop
 8004638:	3724      	adds	r7, #36	; 0x24
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	40023800 	.word	0x40023800
 8004648:	40013800 	.word	0x40013800
 800464c:	40020000 	.word	0x40020000
 8004650:	40020400 	.word	0x40020400
 8004654:	40020800 	.word	0x40020800
 8004658:	40020c00 	.word	0x40020c00
 800465c:	40021000 	.word	0x40021000
 8004660:	40021400 	.word	0x40021400
 8004664:	40021800 	.word	0x40021800
 8004668:	40021c00 	.word	0x40021c00
 800466c:	40022000 	.word	0x40022000
 8004670:	40022400 	.word	0x40022400
 8004674:	40013c00 	.word	0x40013c00

08004678 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004678:	b480      	push	{r7}
 800467a:	b087      	sub	sp, #28
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004682:	2300      	movs	r3, #0
 8004684:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004686:	2300      	movs	r3, #0
 8004688:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800468a:	2300      	movs	r3, #0
 800468c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800468e:	2300      	movs	r3, #0
 8004690:	617b      	str	r3, [r7, #20]
 8004692:	e0d9      	b.n	8004848 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004694:	2201      	movs	r2, #1
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	fa02 f303 	lsl.w	r3, r2, r3
 800469c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800469e:	683a      	ldr	r2, [r7, #0]
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	4013      	ands	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	f040 80c9 	bne.w	8004842 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80046b0:	4a6b      	ldr	r2, [pc, #428]	; (8004860 <HAL_GPIO_DeInit+0x1e8>)
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	089b      	lsrs	r3, r3, #2
 80046b6:	3302      	adds	r3, #2
 80046b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046bc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f003 0303 	and.w	r3, r3, #3
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	220f      	movs	r2, #15
 80046c8:	fa02 f303 	lsl.w	r3, r2, r3
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	4013      	ands	r3, r2
 80046d0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a63      	ldr	r2, [pc, #396]	; (8004864 <HAL_GPIO_DeInit+0x1ec>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d037      	beq.n	800474a <HAL_GPIO_DeInit+0xd2>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a62      	ldr	r2, [pc, #392]	; (8004868 <HAL_GPIO_DeInit+0x1f0>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d031      	beq.n	8004746 <HAL_GPIO_DeInit+0xce>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a61      	ldr	r2, [pc, #388]	; (800486c <HAL_GPIO_DeInit+0x1f4>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d02b      	beq.n	8004742 <HAL_GPIO_DeInit+0xca>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a60      	ldr	r2, [pc, #384]	; (8004870 <HAL_GPIO_DeInit+0x1f8>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d025      	beq.n	800473e <HAL_GPIO_DeInit+0xc6>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a5f      	ldr	r2, [pc, #380]	; (8004874 <HAL_GPIO_DeInit+0x1fc>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d01f      	beq.n	800473a <HAL_GPIO_DeInit+0xc2>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a5e      	ldr	r2, [pc, #376]	; (8004878 <HAL_GPIO_DeInit+0x200>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d019      	beq.n	8004736 <HAL_GPIO_DeInit+0xbe>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a5d      	ldr	r2, [pc, #372]	; (800487c <HAL_GPIO_DeInit+0x204>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d013      	beq.n	8004732 <HAL_GPIO_DeInit+0xba>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a5c      	ldr	r2, [pc, #368]	; (8004880 <HAL_GPIO_DeInit+0x208>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d00d      	beq.n	800472e <HAL_GPIO_DeInit+0xb6>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a5b      	ldr	r2, [pc, #364]	; (8004884 <HAL_GPIO_DeInit+0x20c>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d007      	beq.n	800472a <HAL_GPIO_DeInit+0xb2>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a5a      	ldr	r2, [pc, #360]	; (8004888 <HAL_GPIO_DeInit+0x210>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d101      	bne.n	8004726 <HAL_GPIO_DeInit+0xae>
 8004722:	2309      	movs	r3, #9
 8004724:	e012      	b.n	800474c <HAL_GPIO_DeInit+0xd4>
 8004726:	230a      	movs	r3, #10
 8004728:	e010      	b.n	800474c <HAL_GPIO_DeInit+0xd4>
 800472a:	2308      	movs	r3, #8
 800472c:	e00e      	b.n	800474c <HAL_GPIO_DeInit+0xd4>
 800472e:	2307      	movs	r3, #7
 8004730:	e00c      	b.n	800474c <HAL_GPIO_DeInit+0xd4>
 8004732:	2306      	movs	r3, #6
 8004734:	e00a      	b.n	800474c <HAL_GPIO_DeInit+0xd4>
 8004736:	2305      	movs	r3, #5
 8004738:	e008      	b.n	800474c <HAL_GPIO_DeInit+0xd4>
 800473a:	2304      	movs	r3, #4
 800473c:	e006      	b.n	800474c <HAL_GPIO_DeInit+0xd4>
 800473e:	2303      	movs	r3, #3
 8004740:	e004      	b.n	800474c <HAL_GPIO_DeInit+0xd4>
 8004742:	2302      	movs	r3, #2
 8004744:	e002      	b.n	800474c <HAL_GPIO_DeInit+0xd4>
 8004746:	2301      	movs	r3, #1
 8004748:	e000      	b.n	800474c <HAL_GPIO_DeInit+0xd4>
 800474a:	2300      	movs	r3, #0
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	f002 0203 	and.w	r2, r2, #3
 8004752:	0092      	lsls	r2, r2, #2
 8004754:	4093      	lsls	r3, r2
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	429a      	cmp	r2, r3
 800475a:	d132      	bne.n	80047c2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800475c:	4b4b      	ldr	r3, [pc, #300]	; (800488c <HAL_GPIO_DeInit+0x214>)
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	43db      	mvns	r3, r3
 8004764:	4949      	ldr	r1, [pc, #292]	; (800488c <HAL_GPIO_DeInit+0x214>)
 8004766:	4013      	ands	r3, r2
 8004768:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800476a:	4b48      	ldr	r3, [pc, #288]	; (800488c <HAL_GPIO_DeInit+0x214>)
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	43db      	mvns	r3, r3
 8004772:	4946      	ldr	r1, [pc, #280]	; (800488c <HAL_GPIO_DeInit+0x214>)
 8004774:	4013      	ands	r3, r2
 8004776:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004778:	4b44      	ldr	r3, [pc, #272]	; (800488c <HAL_GPIO_DeInit+0x214>)
 800477a:	68da      	ldr	r2, [r3, #12]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	43db      	mvns	r3, r3
 8004780:	4942      	ldr	r1, [pc, #264]	; (800488c <HAL_GPIO_DeInit+0x214>)
 8004782:	4013      	ands	r3, r2
 8004784:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004786:	4b41      	ldr	r3, [pc, #260]	; (800488c <HAL_GPIO_DeInit+0x214>)
 8004788:	689a      	ldr	r2, [r3, #8]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	43db      	mvns	r3, r3
 800478e:	493f      	ldr	r1, [pc, #252]	; (800488c <HAL_GPIO_DeInit+0x214>)
 8004790:	4013      	ands	r3, r2
 8004792:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f003 0303 	and.w	r3, r3, #3
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	220f      	movs	r2, #15
 800479e:	fa02 f303 	lsl.w	r3, r2, r3
 80047a2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80047a4:	4a2e      	ldr	r2, [pc, #184]	; (8004860 <HAL_GPIO_DeInit+0x1e8>)
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	089b      	lsrs	r3, r3, #2
 80047aa:	3302      	adds	r3, #2
 80047ac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	43da      	mvns	r2, r3
 80047b4:	482a      	ldr	r0, [pc, #168]	; (8004860 <HAL_GPIO_DeInit+0x1e8>)
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	089b      	lsrs	r3, r3, #2
 80047ba:	400a      	ands	r2, r1
 80047bc:	3302      	adds	r3, #2
 80047be:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	2103      	movs	r1, #3
 80047cc:	fa01 f303 	lsl.w	r3, r1, r3
 80047d0:	43db      	mvns	r3, r3
 80047d2:	401a      	ands	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	08da      	lsrs	r2, r3, #3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	3208      	adds	r2, #8
 80047e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	f003 0307 	and.w	r3, r3, #7
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	220f      	movs	r2, #15
 80047ee:	fa02 f303 	lsl.w	r3, r2, r3
 80047f2:	43db      	mvns	r3, r3
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	08d2      	lsrs	r2, r2, #3
 80047f8:	4019      	ands	r1, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	3208      	adds	r2, #8
 80047fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68da      	ldr	r2, [r3, #12]
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	2103      	movs	r1, #3
 800480c:	fa01 f303 	lsl.w	r3, r1, r3
 8004810:	43db      	mvns	r3, r3
 8004812:	401a      	ands	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	2101      	movs	r1, #1
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	fa01 f303 	lsl.w	r3, r1, r3
 8004824:	43db      	mvns	r3, r3
 8004826:	401a      	ands	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	2103      	movs	r1, #3
 8004836:	fa01 f303 	lsl.w	r3, r1, r3
 800483a:	43db      	mvns	r3, r3
 800483c:	401a      	ands	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	3301      	adds	r3, #1
 8004846:	617b      	str	r3, [r7, #20]
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	2b0f      	cmp	r3, #15
 800484c:	f67f af22 	bls.w	8004694 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004850:	bf00      	nop
 8004852:	bf00      	nop
 8004854:	371c      	adds	r7, #28
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	40013800 	.word	0x40013800
 8004864:	40020000 	.word	0x40020000
 8004868:	40020400 	.word	0x40020400
 800486c:	40020800 	.word	0x40020800
 8004870:	40020c00 	.word	0x40020c00
 8004874:	40021000 	.word	0x40021000
 8004878:	40021400 	.word	0x40021400
 800487c:	40021800 	.word	0x40021800
 8004880:	40021c00 	.word	0x40021c00
 8004884:	40022000 	.word	0x40022000
 8004888:	40022400 	.word	0x40022400
 800488c:	40013c00 	.word	0x40013c00

08004890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	460b      	mov	r3, r1
 800489a:	807b      	strh	r3, [r7, #2]
 800489c:	4613      	mov	r3, r2
 800489e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048a0:	787b      	ldrb	r3, [r7, #1]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048a6:	887a      	ldrh	r2, [r7, #2]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80048ac:	e003      	b.n	80048b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80048ae:	887b      	ldrh	r3, [r7, #2]
 80048b0:	041a      	lsls	r2, r3, #16
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	619a      	str	r2, [r3, #24]
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
	...

080048c4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e0bf      	b.n	8004a56 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d106      	bne.n	80048f0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 f8ba 	bl	8004a64 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	699a      	ldr	r2, [r3, #24]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004906:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6999      	ldr	r1, [r3, #24]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800491c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	430a      	orrs	r2, r1
 800492a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6899      	ldr	r1, [r3, #8]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	4b4a      	ldr	r3, [pc, #296]	; (8004a60 <HAL_LTDC_Init+0x19c>)
 8004938:	400b      	ands	r3, r1
 800493a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	041b      	lsls	r3, r3, #16
 8004942:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6899      	ldr	r1, [r3, #8]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	699a      	ldr	r2, [r3, #24]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	431a      	orrs	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68d9      	ldr	r1, [r3, #12]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	4b3e      	ldr	r3, [pc, #248]	; (8004a60 <HAL_LTDC_Init+0x19c>)
 8004966:	400b      	ands	r3, r1
 8004968:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	041b      	lsls	r3, r3, #16
 8004970:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68d9      	ldr	r1, [r3, #12]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a1a      	ldr	r2, [r3, #32]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	431a      	orrs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6919      	ldr	r1, [r3, #16]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	4b33      	ldr	r3, [pc, #204]	; (8004a60 <HAL_LTDC_Init+0x19c>)
 8004994:	400b      	ands	r3, r1
 8004996:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	041b      	lsls	r3, r3, #16
 800499e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6919      	ldr	r1, [r3, #16]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	431a      	orrs	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6959      	ldr	r1, [r3, #20]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	4b27      	ldr	r3, [pc, #156]	; (8004a60 <HAL_LTDC_Init+0x19c>)
 80049c2:	400b      	ands	r3, r1
 80049c4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ca:	041b      	lsls	r3, r3, #16
 80049cc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6959      	ldr	r1, [r3, #20]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	431a      	orrs	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	430a      	orrs	r2, r1
 80049e2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049ea:	021b      	lsls	r3, r3, #8
 80049ec:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80049f4:	041b      	lsls	r3, r3, #16
 80049f6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004a06:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	430a      	orrs	r2, r1
 8004a22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f042 0206 	orr.w	r2, r2, #6
 8004a32:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	699a      	ldr	r2, [r3, #24]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f042 0201 	orr.w	r2, r2, #1
 8004a42:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	f000f800 	.word	0xf000f800

08004a64 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004a78:	b5b0      	push	{r4, r5, r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d101      	bne.n	8004a92 <HAL_LTDC_ConfigLayer+0x1a>
 8004a8e:	2302      	movs	r3, #2
 8004a90:	e02c      	b.n	8004aec <HAL_LTDC_ConfigLayer+0x74>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2134      	movs	r1, #52	; 0x34
 8004aa8:	fb01 f303 	mul.w	r3, r1, r3
 8004aac:	4413      	add	r3, r2
 8004aae:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	4614      	mov	r4, r2
 8004ab6:	461d      	mov	r5, r3
 8004ab8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004aba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004abc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004abe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ac0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ac2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ac4:	682b      	ldr	r3, [r5, #0]
 8004ac6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	68b9      	ldr	r1, [r7, #8]
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f000 f83b 	bl	8004b48 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bdb0      	pop	{r4, r5, r7, pc}

08004af4 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d101      	bne.n	8004b0a <HAL_LTDC_EnableDither+0x16>
 8004b06:	2302      	movs	r3, #2
 8004b08:	e016      	b.n	8004b38 <HAL_LTDC_EnableDither+0x44>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2202      	movs	r2, #2
 8004b16:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8004b1a:	4b0a      	ldr	r3, [pc, #40]	; (8004b44 <HAL_LTDC_EnableDither+0x50>)
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	4a09      	ldr	r2, [pc, #36]	; (8004b44 <HAL_LTDC_EnableDither+0x50>)
 8004b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b24:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	40016800 	.word	0x40016800

08004b48 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b089      	sub	sp, #36	; 0x24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	685a      	ldr	r2, [r3, #4]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	0c1b      	lsrs	r3, r3, #16
 8004b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b64:	4413      	add	r3, r2
 8004b66:	041b      	lsls	r3, r3, #16
 8004b68:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	461a      	mov	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	01db      	lsls	r3, r3, #7
 8004b74:	4413      	add	r3, r2
 8004b76:	3384      	adds	r3, #132	; 0x84
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	6812      	ldr	r2, [r2, #0]
 8004b7e:	4611      	mov	r1, r2
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	01d2      	lsls	r2, r2, #7
 8004b84:	440a      	add	r2, r1
 8004b86:	3284      	adds	r2, #132	; 0x84
 8004b88:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004b8c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	0c1b      	lsrs	r3, r3, #16
 8004b9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004b9e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004ba0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	01db      	lsls	r3, r3, #7
 8004bac:	440b      	add	r3, r1
 8004bae:	3384      	adds	r3, #132	; 0x84
 8004bb0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004bb6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	68da      	ldr	r2, [r3, #12]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004bc6:	4413      	add	r3, r2
 8004bc8:	041b      	lsls	r3, r3, #16
 8004bca:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	01db      	lsls	r3, r3, #7
 8004bd6:	4413      	add	r3, r2
 8004bd8:	3384      	adds	r3, #132	; 0x84
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	6812      	ldr	r2, [r2, #0]
 8004be0:	4611      	mov	r1, r2
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	01d2      	lsls	r2, r2, #7
 8004be6:	440a      	add	r2, r1
 8004be8:	3284      	adds	r2, #132	; 0x84
 8004bea:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004bee:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004bfe:	4413      	add	r3, r2
 8004c00:	1c5a      	adds	r2, r3, #1
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4619      	mov	r1, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	01db      	lsls	r3, r3, #7
 8004c0c:	440b      	add	r3, r1
 8004c0e:	3384      	adds	r3, #132	; 0x84
 8004c10:	4619      	mov	r1, r3
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	01db      	lsls	r3, r3, #7
 8004c22:	4413      	add	r3, r2
 8004c24:	3384      	adds	r3, #132	; 0x84
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	6812      	ldr	r2, [r2, #0]
 8004c2c:	4611      	mov	r1, r2
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	01d2      	lsls	r2, r2, #7
 8004c32:	440a      	add	r2, r1
 8004c34:	3284      	adds	r2, #132	; 0x84
 8004c36:	f023 0307 	bic.w	r3, r3, #7
 8004c3a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	461a      	mov	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	01db      	lsls	r3, r3, #7
 8004c46:	4413      	add	r3, r2
 8004c48:	3384      	adds	r3, #132	; 0x84
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004c58:	021b      	lsls	r3, r3, #8
 8004c5a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004c62:	041b      	lsls	r3, r3, #16
 8004c64:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	061b      	lsls	r3, r3, #24
 8004c6c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	461a      	mov	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	01db      	lsls	r3, r3, #7
 8004c78:	4413      	add	r3, r2
 8004c7a:	3384      	adds	r3, #132	; 0x84
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	461a      	mov	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	01db      	lsls	r3, r3, #7
 8004c88:	4413      	add	r3, r2
 8004c8a:	3384      	adds	r3, #132	; 0x84
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	2300      	movs	r3, #0
 8004c90:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004c98:	461a      	mov	r2, r3
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	01db      	lsls	r3, r3, #7
 8004cac:	440b      	add	r3, r1
 8004cae:	3384      	adds	r3, #132	; 0x84
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	01db      	lsls	r3, r3, #7
 8004cc2:	4413      	add	r3, r2
 8004cc4:	3384      	adds	r3, #132	; 0x84
 8004cc6:	695b      	ldr	r3, [r3, #20]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	6812      	ldr	r2, [r2, #0]
 8004ccc:	4611      	mov	r1, r2
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	01d2      	lsls	r2, r2, #7
 8004cd2:	440a      	add	r2, r1
 8004cd4:	3284      	adds	r2, #132	; 0x84
 8004cd6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004cda:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	01db      	lsls	r3, r3, #7
 8004ce6:	4413      	add	r3, r2
 8004ce8:	3384      	adds	r3, #132	; 0x84
 8004cea:	461a      	mov	r2, r3
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	695b      	ldr	r3, [r3, #20]
 8004cf0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	01db      	lsls	r3, r3, #7
 8004cfc:	4413      	add	r3, r2
 8004cfe:	3384      	adds	r3, #132	; 0x84
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	6812      	ldr	r2, [r2, #0]
 8004d06:	4611      	mov	r1, r2
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	01d2      	lsls	r2, r2, #7
 8004d0c:	440a      	add	r2, r1
 8004d0e:	3284      	adds	r2, #132	; 0x84
 8004d10:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004d14:	f023 0307 	bic.w	r3, r3, #7
 8004d18:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	69da      	ldr	r2, [r3, #28]
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	68f9      	ldr	r1, [r7, #12]
 8004d24:	6809      	ldr	r1, [r1, #0]
 8004d26:	4608      	mov	r0, r1
 8004d28:	6879      	ldr	r1, [r7, #4]
 8004d2a:	01c9      	lsls	r1, r1, #7
 8004d2c:	4401      	add	r1, r0
 8004d2e:	3184      	adds	r1, #132	; 0x84
 8004d30:	4313      	orrs	r3, r2
 8004d32:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	461a      	mov	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	01db      	lsls	r3, r3, #7
 8004d3e:	4413      	add	r3, r2
 8004d40:	3384      	adds	r3, #132	; 0x84
 8004d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	461a      	mov	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	01db      	lsls	r3, r3, #7
 8004d4e:	4413      	add	r3, r2
 8004d50:	3384      	adds	r3, #132	; 0x84
 8004d52:	461a      	mov	r2, r3
 8004d54:	2300      	movs	r3, #0
 8004d56:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	01db      	lsls	r3, r3, #7
 8004d62:	4413      	add	r3, r2
 8004d64:	3384      	adds	r3, #132	; 0x84
 8004d66:	461a      	mov	r2, r3
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d102      	bne.n	8004d7c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004d76:	2304      	movs	r3, #4
 8004d78:	61fb      	str	r3, [r7, #28]
 8004d7a:	e01b      	b.n	8004db4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d102      	bne.n	8004d8a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004d84:	2303      	movs	r3, #3
 8004d86:	61fb      	str	r3, [r7, #28]
 8004d88:	e014      	b.n	8004db4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	2b04      	cmp	r3, #4
 8004d90:	d00b      	beq.n	8004daa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d007      	beq.n	8004daa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004d9e:	2b03      	cmp	r3, #3
 8004da0:	d003      	beq.n	8004daa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004da6:	2b07      	cmp	r3, #7
 8004da8:	d102      	bne.n	8004db0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004daa:	2302      	movs	r3, #2
 8004dac:	61fb      	str	r3, [r7, #28]
 8004dae:	e001      	b.n	8004db4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004db0:	2301      	movs	r3, #1
 8004db2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	461a      	mov	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	01db      	lsls	r3, r3, #7
 8004dbe:	4413      	add	r3, r2
 8004dc0:	3384      	adds	r3, #132	; 0x84
 8004dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	6812      	ldr	r2, [r2, #0]
 8004dc8:	4611      	mov	r1, r2
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	01d2      	lsls	r2, r2, #7
 8004dce:	440a      	add	r2, r1
 8004dd0:	3284      	adds	r2, #132	; 0x84
 8004dd2:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004dd6:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ddc:	69fa      	ldr	r2, [r7, #28]
 8004dde:	fb02 f303 	mul.w	r3, r2, r3
 8004de2:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	6859      	ldr	r1, [r3, #4]
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	1acb      	subs	r3, r1, r3
 8004dee:	69f9      	ldr	r1, [r7, #28]
 8004df0:	fb01 f303 	mul.w	r3, r1, r3
 8004df4:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004df6:	68f9      	ldr	r1, [r7, #12]
 8004df8:	6809      	ldr	r1, [r1, #0]
 8004dfa:	4608      	mov	r0, r1
 8004dfc:	6879      	ldr	r1, [r7, #4]
 8004dfe:	01c9      	lsls	r1, r1, #7
 8004e00:	4401      	add	r1, r0
 8004e02:	3184      	adds	r1, #132	; 0x84
 8004e04:	4313      	orrs	r3, r2
 8004e06:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	01db      	lsls	r3, r3, #7
 8004e12:	4413      	add	r3, r2
 8004e14:	3384      	adds	r3, #132	; 0x84
 8004e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	6812      	ldr	r2, [r2, #0]
 8004e1c:	4611      	mov	r1, r2
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	01d2      	lsls	r2, r2, #7
 8004e22:	440a      	add	r2, r1
 8004e24:	3284      	adds	r2, #132	; 0x84
 8004e26:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004e2a:	f023 0307 	bic.w	r3, r3, #7
 8004e2e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	461a      	mov	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	01db      	lsls	r3, r3, #7
 8004e3a:	4413      	add	r3, r2
 8004e3c:	3384      	adds	r3, #132	; 0x84
 8004e3e:	461a      	mov	r2, r3
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e44:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	01db      	lsls	r3, r3, #7
 8004e50:	4413      	add	r3, r2
 8004e52:	3384      	adds	r3, #132	; 0x84
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	6812      	ldr	r2, [r2, #0]
 8004e5a:	4611      	mov	r1, r2
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	01d2      	lsls	r2, r2, #7
 8004e60:	440a      	add	r2, r1
 8004e62:	3284      	adds	r2, #132	; 0x84
 8004e64:	f043 0301 	orr.w	r3, r3, #1
 8004e68:	6013      	str	r3, [r2, #0]
}
 8004e6a:	bf00      	nop
 8004e6c:	3724      	adds	r7, #36	; 0x24
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr

08004e76 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004e76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e78:	b08f      	sub	sp, #60	; 0x3c
 8004e7a:	af0a      	add	r7, sp, #40	; 0x28
 8004e7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d101      	bne.n	8004e88 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e10f      	b.n	80050a8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d106      	bne.n	8004ea8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f006 fe5a 	bl	800bb5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2203      	movs	r2, #3
 8004eac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d102      	bne.n	8004ec2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f003 f92b 	bl	8008122 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	603b      	str	r3, [r7, #0]
 8004ed2:	687e      	ldr	r6, [r7, #4]
 8004ed4:	466d      	mov	r5, sp
 8004ed6:	f106 0410 	add.w	r4, r6, #16
 8004eda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004edc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ede:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ee0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ee2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ee6:	e885 0003 	stmia.w	r5, {r0, r1}
 8004eea:	1d33      	adds	r3, r6, #4
 8004eec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004eee:	6838      	ldr	r0, [r7, #0]
 8004ef0:	f003 f802 	bl	8007ef8 <USB_CoreInit>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d005      	beq.n	8004f06 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2202      	movs	r2, #2
 8004efe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e0d0      	b.n	80050a8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f003 f919 	bl	8008144 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f12:	2300      	movs	r3, #0
 8004f14:	73fb      	strb	r3, [r7, #15]
 8004f16:	e04a      	b.n	8004fae <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004f18:	7bfa      	ldrb	r2, [r7, #15]
 8004f1a:	6879      	ldr	r1, [r7, #4]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	4413      	add	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	440b      	add	r3, r1
 8004f26:	333d      	adds	r3, #61	; 0x3d
 8004f28:	2201      	movs	r2, #1
 8004f2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004f2c:	7bfa      	ldrb	r2, [r7, #15]
 8004f2e:	6879      	ldr	r1, [r7, #4]
 8004f30:	4613      	mov	r3, r2
 8004f32:	00db      	lsls	r3, r3, #3
 8004f34:	4413      	add	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	440b      	add	r3, r1
 8004f3a:	333c      	adds	r3, #60	; 0x3c
 8004f3c:	7bfa      	ldrb	r2, [r7, #15]
 8004f3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004f40:	7bfa      	ldrb	r2, [r7, #15]
 8004f42:	7bfb      	ldrb	r3, [r7, #15]
 8004f44:	b298      	uxth	r0, r3
 8004f46:	6879      	ldr	r1, [r7, #4]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	4413      	add	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	440b      	add	r3, r1
 8004f52:	3344      	adds	r3, #68	; 0x44
 8004f54:	4602      	mov	r2, r0
 8004f56:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004f58:	7bfa      	ldrb	r2, [r7, #15]
 8004f5a:	6879      	ldr	r1, [r7, #4]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	00db      	lsls	r3, r3, #3
 8004f60:	4413      	add	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	440b      	add	r3, r1
 8004f66:	3340      	adds	r3, #64	; 0x40
 8004f68:	2200      	movs	r2, #0
 8004f6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004f6c:	7bfa      	ldrb	r2, [r7, #15]
 8004f6e:	6879      	ldr	r1, [r7, #4]
 8004f70:	4613      	mov	r3, r2
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	4413      	add	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	440b      	add	r3, r1
 8004f7a:	3348      	adds	r3, #72	; 0x48
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004f80:	7bfa      	ldrb	r2, [r7, #15]
 8004f82:	6879      	ldr	r1, [r7, #4]
 8004f84:	4613      	mov	r3, r2
 8004f86:	00db      	lsls	r3, r3, #3
 8004f88:	4413      	add	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	440b      	add	r3, r1
 8004f8e:	334c      	adds	r3, #76	; 0x4c
 8004f90:	2200      	movs	r2, #0
 8004f92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004f94:	7bfa      	ldrb	r2, [r7, #15]
 8004f96:	6879      	ldr	r1, [r7, #4]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	4413      	add	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	440b      	add	r3, r1
 8004fa2:	3354      	adds	r3, #84	; 0x54
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fa8:	7bfb      	ldrb	r3, [r7, #15]
 8004faa:	3301      	adds	r3, #1
 8004fac:	73fb      	strb	r3, [r7, #15]
 8004fae:	7bfa      	ldrb	r2, [r7, #15]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d3af      	bcc.n	8004f18 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fb8:	2300      	movs	r3, #0
 8004fba:	73fb      	strb	r3, [r7, #15]
 8004fbc:	e044      	b.n	8005048 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004fbe:	7bfa      	ldrb	r2, [r7, #15]
 8004fc0:	6879      	ldr	r1, [r7, #4]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	00db      	lsls	r3, r3, #3
 8004fc6:	4413      	add	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	440b      	add	r3, r1
 8004fcc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004fd4:	7bfa      	ldrb	r2, [r7, #15]
 8004fd6:	6879      	ldr	r1, [r7, #4]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	00db      	lsls	r3, r3, #3
 8004fdc:	4413      	add	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	440b      	add	r3, r1
 8004fe2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004fe6:	7bfa      	ldrb	r2, [r7, #15]
 8004fe8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004fea:	7bfa      	ldrb	r2, [r7, #15]
 8004fec:	6879      	ldr	r1, [r7, #4]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	00db      	lsls	r3, r3, #3
 8004ff2:	4413      	add	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	440b      	add	r3, r1
 8004ff8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005000:	7bfa      	ldrb	r2, [r7, #15]
 8005002:	6879      	ldr	r1, [r7, #4]
 8005004:	4613      	mov	r3, r2
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	4413      	add	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	440b      	add	r3, r1
 800500e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005012:	2200      	movs	r2, #0
 8005014:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005016:	7bfa      	ldrb	r2, [r7, #15]
 8005018:	6879      	ldr	r1, [r7, #4]
 800501a:	4613      	mov	r3, r2
 800501c:	00db      	lsls	r3, r3, #3
 800501e:	4413      	add	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	440b      	add	r3, r1
 8005024:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005028:	2200      	movs	r2, #0
 800502a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800502c:	7bfa      	ldrb	r2, [r7, #15]
 800502e:	6879      	ldr	r1, [r7, #4]
 8005030:	4613      	mov	r3, r2
 8005032:	00db      	lsls	r3, r3, #3
 8005034:	4413      	add	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	440b      	add	r3, r1
 800503a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800503e:	2200      	movs	r2, #0
 8005040:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005042:	7bfb      	ldrb	r3, [r7, #15]
 8005044:	3301      	adds	r3, #1
 8005046:	73fb      	strb	r3, [r7, #15]
 8005048:	7bfa      	ldrb	r2, [r7, #15]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	429a      	cmp	r2, r3
 8005050:	d3b5      	bcc.n	8004fbe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	603b      	str	r3, [r7, #0]
 8005058:	687e      	ldr	r6, [r7, #4]
 800505a:	466d      	mov	r5, sp
 800505c:	f106 0410 	add.w	r4, r6, #16
 8005060:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005062:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005064:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005066:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005068:	e894 0003 	ldmia.w	r4, {r0, r1}
 800506c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005070:	1d33      	adds	r3, r6, #4
 8005072:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005074:	6838      	ldr	r0, [r7, #0]
 8005076:	f003 f8b1 	bl	80081dc <USB_DevInit>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d005      	beq.n	800508c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2202      	movs	r2, #2
 8005084:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e00d      	b.n	80050a8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4618      	mov	r0, r3
 80050a2:	f004 fa00 	bl	80094a6 <USB_DevDisconnect>

  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3714      	adds	r7, #20
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080050b0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d101      	bne.n	80050cc <HAL_PCD_Start+0x1c>
 80050c8:	2302      	movs	r3, #2
 80050ca:	e020      	b.n	800510e <HAL_PCD_Start+0x5e>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d109      	bne.n	80050f0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d005      	beq.n	80050f0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4618      	mov	r0, r3
 80050f6:	f003 f803 	bl	8008100 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4618      	mov	r0, r3
 8005100:	f004 f9b0 	bl	8009464 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005116:	b590      	push	{r4, r7, lr}
 8005118:	b08d      	sub	sp, #52	; 0x34
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005124:	6a3b      	ldr	r3, [r7, #32]
 8005126:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4618      	mov	r0, r3
 800512e:	f004 fa6e 	bl	800960e <USB_GetMode>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	f040 848a 	bne.w	8005a4e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4618      	mov	r0, r3
 8005140:	f004 f9d2 	bl	80094e8 <USB_ReadInterrupts>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	f000 8480 	beq.w	8005a4c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	0a1b      	lsrs	r3, r3, #8
 8005156:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4618      	mov	r0, r3
 8005166:	f004 f9bf 	bl	80094e8 <USB_ReadInterrupts>
 800516a:	4603      	mov	r3, r0
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b02      	cmp	r3, #2
 8005172:	d107      	bne.n	8005184 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	695a      	ldr	r2, [r3, #20]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f002 0202 	and.w	r2, r2, #2
 8005182:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4618      	mov	r0, r3
 800518a:	f004 f9ad 	bl	80094e8 <USB_ReadInterrupts>
 800518e:	4603      	mov	r3, r0
 8005190:	f003 0310 	and.w	r3, r3, #16
 8005194:	2b10      	cmp	r3, #16
 8005196:	d161      	bne.n	800525c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	699a      	ldr	r2, [r3, #24]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 0210 	bic.w	r2, r2, #16
 80051a6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80051a8:	6a3b      	ldr	r3, [r7, #32]
 80051aa:	6a1b      	ldr	r3, [r3, #32]
 80051ac:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	f003 020f 	and.w	r2, r3, #15
 80051b4:	4613      	mov	r3, r2
 80051b6:	00db      	lsls	r3, r3, #3
 80051b8:	4413      	add	r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	4413      	add	r3, r2
 80051c4:	3304      	adds	r3, #4
 80051c6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	0c5b      	lsrs	r3, r3, #17
 80051cc:	f003 030f 	and.w	r3, r3, #15
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d124      	bne.n	800521e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80051da:	4013      	ands	r3, r2
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d035      	beq.n	800524c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	091b      	lsrs	r3, r3, #4
 80051e8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80051ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	461a      	mov	r2, r3
 80051f2:	6a38      	ldr	r0, [r7, #32]
 80051f4:	f003 ffe4 	bl	80091c0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	691a      	ldr	r2, [r3, #16]
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	091b      	lsrs	r3, r3, #4
 8005200:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005204:	441a      	add	r2, r3
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	6a1a      	ldr	r2, [r3, #32]
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	091b      	lsrs	r3, r3, #4
 8005212:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005216:	441a      	add	r2, r3
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	621a      	str	r2, [r3, #32]
 800521c:	e016      	b.n	800524c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	0c5b      	lsrs	r3, r3, #17
 8005222:	f003 030f 	and.w	r3, r3, #15
 8005226:	2b06      	cmp	r3, #6
 8005228:	d110      	bne.n	800524c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005230:	2208      	movs	r2, #8
 8005232:	4619      	mov	r1, r3
 8005234:	6a38      	ldr	r0, [r7, #32]
 8005236:	f003 ffc3 	bl	80091c0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	6a1a      	ldr	r2, [r3, #32]
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	091b      	lsrs	r3, r3, #4
 8005242:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005246:	441a      	add	r2, r3
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699a      	ldr	r2, [r3, #24]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f042 0210 	orr.w	r2, r2, #16
 800525a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4618      	mov	r0, r3
 8005262:	f004 f941 	bl	80094e8 <USB_ReadInterrupts>
 8005266:	4603      	mov	r3, r0
 8005268:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800526c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005270:	f040 80a7 	bne.w	80053c2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005274:	2300      	movs	r3, #0
 8005276:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4618      	mov	r0, r3
 800527e:	f004 f946 	bl	800950e <USB_ReadDevAllOutEpInterrupt>
 8005282:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005284:	e099      	b.n	80053ba <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	2b00      	cmp	r3, #0
 800528e:	f000 808e 	beq.w	80053ae <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005298:	b2d2      	uxtb	r2, r2
 800529a:	4611      	mov	r1, r2
 800529c:	4618      	mov	r0, r3
 800529e:	f004 f96a 	bl	8009576 <USB_ReadDevOutEPInterrupt>
 80052a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00c      	beq.n	80052c8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80052ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ba:	461a      	mov	r2, r3
 80052bc:	2301      	movs	r3, #1
 80052be:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80052c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 fec2 	bl	800604c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	f003 0308 	and.w	r3, r3, #8
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00c      	beq.n	80052ec <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80052d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d4:	015a      	lsls	r2, r3, #5
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	4413      	add	r3, r2
 80052da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052de:	461a      	mov	r2, r3
 80052e0:	2308      	movs	r3, #8
 80052e2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80052e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 ff98 	bl	800621c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	f003 0310 	and.w	r3, r3, #16
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d008      	beq.n	8005308 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	015a      	lsls	r2, r3, #5
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005302:	461a      	mov	r2, r3
 8005304:	2310      	movs	r3, #16
 8005306:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d030      	beq.n	8005374 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005312:	6a3b      	ldr	r3, [r7, #32]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800531a:	2b80      	cmp	r3, #128	; 0x80
 800531c:	d109      	bne.n	8005332 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	69fa      	ldr	r2, [r7, #28]
 8005328:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800532c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005330:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005334:	4613      	mov	r3, r2
 8005336:	00db      	lsls	r3, r3, #3
 8005338:	4413      	add	r3, r2
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	4413      	add	r3, r2
 8005344:	3304      	adds	r3, #4
 8005346:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	78db      	ldrb	r3, [r3, #3]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d108      	bne.n	8005362 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	2200      	movs	r2, #0
 8005354:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005358:	b2db      	uxtb	r3, r3
 800535a:	4619      	mov	r1, r3
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f006 fcff 	bl	800bd60 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	015a      	lsls	r2, r3, #5
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	4413      	add	r3, r2
 800536a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800536e:	461a      	mov	r2, r3
 8005370:	2302      	movs	r3, #2
 8005372:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	f003 0320 	and.w	r3, r3, #32
 800537a:	2b00      	cmp	r3, #0
 800537c:	d008      	beq.n	8005390 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800537e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005380:	015a      	lsls	r2, r3, #5
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	4413      	add	r3, r2
 8005386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800538a:	461a      	mov	r2, r3
 800538c:	2320      	movs	r3, #32
 800538e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d009      	beq.n	80053ae <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	015a      	lsls	r2, r3, #5
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	4413      	add	r3, r2
 80053a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a6:	461a      	mov	r2, r3
 80053a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80053ac:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	3301      	adds	r3, #1
 80053b2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80053b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b6:	085b      	lsrs	r3, r3, #1
 80053b8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80053ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f47f af62 	bne.w	8005286 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f004 f88e 	bl	80094e8 <USB_ReadInterrupts>
 80053cc:	4603      	mov	r3, r0
 80053ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053d6:	f040 80db 	bne.w	8005590 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4618      	mov	r0, r3
 80053e0:	f004 f8af 	bl	8009542 <USB_ReadDevAllInEpInterrupt>
 80053e4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80053e6:	2300      	movs	r3, #0
 80053e8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80053ea:	e0cd      	b.n	8005588 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80053ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f000 80c2 	beq.w	800557c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053fe:	b2d2      	uxtb	r2, r2
 8005400:	4611      	mov	r1, r2
 8005402:	4618      	mov	r0, r3
 8005404:	f004 f8d5 	bl	80095b2 <USB_ReadDevInEPInterrupt>
 8005408:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	2b00      	cmp	r3, #0
 8005412:	d057      	beq.n	80054c4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005416:	f003 030f 	and.w	r3, r3, #15
 800541a:	2201      	movs	r2, #1
 800541c:	fa02 f303 	lsl.w	r3, r2, r3
 8005420:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005428:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	43db      	mvns	r3, r3
 800542e:	69f9      	ldr	r1, [r7, #28]
 8005430:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005434:	4013      	ands	r3, r2
 8005436:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	4413      	add	r3, r2
 8005440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005444:	461a      	mov	r2, r3
 8005446:	2301      	movs	r3, #1
 8005448:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	2b01      	cmp	r3, #1
 8005450:	d132      	bne.n	80054b8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005452:	6879      	ldr	r1, [r7, #4]
 8005454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005456:	4613      	mov	r3, r2
 8005458:	00db      	lsls	r3, r3, #3
 800545a:	4413      	add	r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	440b      	add	r3, r1
 8005460:	334c      	adds	r3, #76	; 0x4c
 8005462:	6819      	ldr	r1, [r3, #0]
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005468:	4613      	mov	r3, r2
 800546a:	00db      	lsls	r3, r3, #3
 800546c:	4413      	add	r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4403      	add	r3, r0
 8005472:	3348      	adds	r3, #72	; 0x48
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4419      	add	r1, r3
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800547c:	4613      	mov	r3, r2
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	4413      	add	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4403      	add	r3, r0
 8005486:	334c      	adds	r3, #76	; 0x4c
 8005488:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548c:	2b00      	cmp	r3, #0
 800548e:	d113      	bne.n	80054b8 <HAL_PCD_IRQHandler+0x3a2>
 8005490:	6879      	ldr	r1, [r7, #4]
 8005492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005494:	4613      	mov	r3, r2
 8005496:	00db      	lsls	r3, r3, #3
 8005498:	4413      	add	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	440b      	add	r3, r1
 800549e:	3354      	adds	r3, #84	; 0x54
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d108      	bne.n	80054b8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6818      	ldr	r0, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80054b0:	461a      	mov	r2, r3
 80054b2:	2101      	movs	r1, #1
 80054b4:	f004 f8dc 	bl	8009670 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80054b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	4619      	mov	r1, r3
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f006 fbc9 	bl	800bc56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	f003 0308 	and.w	r3, r3, #8
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d008      	beq.n	80054e0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80054ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d0:	015a      	lsls	r2, r3, #5
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	4413      	add	r3, r2
 80054d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054da:	461a      	mov	r2, r3
 80054dc:	2308      	movs	r3, #8
 80054de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	f003 0310 	and.w	r3, r3, #16
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d008      	beq.n	80054fc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80054ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ec:	015a      	lsls	r2, r3, #5
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	4413      	add	r3, r2
 80054f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f6:	461a      	mov	r2, r3
 80054f8:	2310      	movs	r3, #16
 80054fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005502:	2b00      	cmp	r3, #0
 8005504:	d008      	beq.n	8005518 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	015a      	lsls	r2, r3, #5
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	4413      	add	r3, r2
 800550e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005512:	461a      	mov	r2, r3
 8005514:	2340      	movs	r3, #64	; 0x40
 8005516:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	2b00      	cmp	r3, #0
 8005520:	d023      	beq.n	800556a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005522:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005524:	6a38      	ldr	r0, [r7, #32]
 8005526:	f002 ffbd 	bl	80084a4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800552a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800552c:	4613      	mov	r3, r2
 800552e:	00db      	lsls	r3, r3, #3
 8005530:	4413      	add	r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	3338      	adds	r3, #56	; 0x38
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	4413      	add	r3, r2
 800553a:	3304      	adds	r3, #4
 800553c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	78db      	ldrb	r3, [r3, #3]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d108      	bne.n	8005558 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	2200      	movs	r2, #0
 800554a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554e:	b2db      	uxtb	r3, r3
 8005550:	4619      	mov	r1, r3
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f006 fc16 	bl	800bd84 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555a:	015a      	lsls	r2, r3, #5
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	4413      	add	r3, r2
 8005560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005564:	461a      	mov	r2, r3
 8005566:	2302      	movs	r3, #2
 8005568:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005570:	2b00      	cmp	r3, #0
 8005572:	d003      	beq.n	800557c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005574:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 fcdb 	bl	8005f32 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800557c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557e:	3301      	adds	r3, #1
 8005580:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005584:	085b      	lsrs	r3, r3, #1
 8005586:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558a:	2b00      	cmp	r3, #0
 800558c:	f47f af2e 	bne.w	80053ec <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4618      	mov	r0, r3
 8005596:	f003 ffa7 	bl	80094e8 <USB_ReadInterrupts>
 800559a:	4603      	mov	r3, r0
 800559c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055a4:	d122      	bne.n	80055ec <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	69fa      	ldr	r2, [r7, #28]
 80055b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055b4:	f023 0301 	bic.w	r3, r3, #1
 80055b8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d108      	bne.n	80055d6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80055cc:	2100      	movs	r1, #0
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 fec2 	bl	8006358 <HAL_PCDEx_LPM_Callback>
 80055d4:	e002      	b.n	80055dc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f006 fbb4 	bl	800bd44 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	695a      	ldr	r2, [r3, #20]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80055ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4618      	mov	r0, r3
 80055f2:	f003 ff79 	bl	80094e8 <USB_ReadInterrupts>
 80055f6:	4603      	mov	r3, r0
 80055f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005600:	d112      	bne.n	8005628 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b01      	cmp	r3, #1
 8005610:	d102      	bne.n	8005618 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f006 fb70 	bl	800bcf8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	695a      	ldr	r2, [r3, #20]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005626:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4618      	mov	r0, r3
 800562e:	f003 ff5b 	bl	80094e8 <USB_ReadInterrupts>
 8005632:	4603      	mov	r3, r0
 8005634:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800563c:	f040 80b7 	bne.w	80057ae <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	69fa      	ldr	r2, [r7, #28]
 800564a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800564e:	f023 0301 	bic.w	r3, r3, #1
 8005652:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2110      	movs	r1, #16
 800565a:	4618      	mov	r0, r3
 800565c:	f002 ff22 	bl	80084a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005660:	2300      	movs	r3, #0
 8005662:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005664:	e046      	b.n	80056f4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005668:	015a      	lsls	r2, r3, #5
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	4413      	add	r3, r2
 800566e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005672:	461a      	mov	r2, r3
 8005674:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005678:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800567a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800567c:	015a      	lsls	r2, r3, #5
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	4413      	add	r3, r2
 8005682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800568a:	0151      	lsls	r1, r2, #5
 800568c:	69fa      	ldr	r2, [r7, #28]
 800568e:	440a      	add	r2, r1
 8005690:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005694:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005698:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800569a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800569c:	015a      	lsls	r2, r3, #5
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	4413      	add	r3, r2
 80056a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a6:	461a      	mov	r2, r3
 80056a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056ac:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80056ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056be:	0151      	lsls	r1, r2, #5
 80056c0:	69fa      	ldr	r2, [r7, #28]
 80056c2:	440a      	add	r2, r1
 80056c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80056cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80056ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d0:	015a      	lsls	r2, r3, #5
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	4413      	add	r3, r2
 80056d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056de:	0151      	lsls	r1, r2, #5
 80056e0:	69fa      	ldr	r2, [r7, #28]
 80056e2:	440a      	add	r2, r1
 80056e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80056ec:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f0:	3301      	adds	r3, #1
 80056f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d3b3      	bcc.n	8005666 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005704:	69db      	ldr	r3, [r3, #28]
 8005706:	69fa      	ldr	r2, [r7, #28]
 8005708:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800570c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005710:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005716:	2b00      	cmp	r3, #0
 8005718:	d016      	beq.n	8005748 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005720:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005724:	69fa      	ldr	r2, [r7, #28]
 8005726:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800572a:	f043 030b 	orr.w	r3, r3, #11
 800572e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800573a:	69fa      	ldr	r2, [r7, #28]
 800573c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005740:	f043 030b 	orr.w	r3, r3, #11
 8005744:	6453      	str	r3, [r2, #68]	; 0x44
 8005746:	e015      	b.n	8005774 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	69fa      	ldr	r2, [r7, #28]
 8005752:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005756:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800575a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800575e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	69fa      	ldr	r2, [r7, #28]
 800576a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800576e:	f043 030b 	orr.w	r3, r3, #11
 8005772:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	69fa      	ldr	r2, [r7, #28]
 800577e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005782:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005786:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6818      	ldr	r0, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005798:	461a      	mov	r2, r3
 800579a:	f003 ff69 	bl	8009670 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	695a      	ldr	r2, [r3, #20]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80057ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4618      	mov	r0, r3
 80057b4:	f003 fe98 	bl	80094e8 <USB_ReadInterrupts>
 80057b8:	4603      	mov	r3, r0
 80057ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057c2:	d124      	bne.n	800580e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4618      	mov	r0, r3
 80057ca:	f003 ff2e 	bl	800962a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4618      	mov	r0, r3
 80057d4:	f002 fee3 	bl	800859e <USB_GetDevSpeed>
 80057d8:	4603      	mov	r3, r0
 80057da:	461a      	mov	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681c      	ldr	r4, [r3, #0]
 80057e4:	f001 fa28 	bl	8006c38 <HAL_RCC_GetHCLKFreq>
 80057e8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	461a      	mov	r2, r3
 80057f2:	4620      	mov	r0, r4
 80057f4:	f002 fbe2 	bl	8007fbc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f006 fa54 	bl	800bca6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	695a      	ldr	r2, [r3, #20]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800580c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4618      	mov	r0, r3
 8005814:	f003 fe68 	bl	80094e8 <USB_ReadInterrupts>
 8005818:	4603      	mov	r3, r0
 800581a:	f003 0308 	and.w	r3, r3, #8
 800581e:	2b08      	cmp	r3, #8
 8005820:	d10a      	bne.n	8005838 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f006 fa31 	bl	800bc8a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	695a      	ldr	r2, [r3, #20]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f002 0208 	and.w	r2, r2, #8
 8005836:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4618      	mov	r0, r3
 800583e:	f003 fe53 	bl	80094e8 <USB_ReadInterrupts>
 8005842:	4603      	mov	r3, r0
 8005844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005848:	2b80      	cmp	r3, #128	; 0x80
 800584a:	d122      	bne.n	8005892 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005854:	6a3b      	ldr	r3, [r7, #32]
 8005856:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005858:	2301      	movs	r3, #1
 800585a:	627b      	str	r3, [r7, #36]	; 0x24
 800585c:	e014      	b.n	8005888 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800585e:	6879      	ldr	r1, [r7, #4]
 8005860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005862:	4613      	mov	r3, r2
 8005864:	00db      	lsls	r3, r3, #3
 8005866:	4413      	add	r3, r2
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	440b      	add	r3, r1
 800586c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	2b01      	cmp	r3, #1
 8005874:	d105      	bne.n	8005882 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	b2db      	uxtb	r3, r3
 800587a:	4619      	mov	r1, r3
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 fb27 	bl	8005ed0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	3301      	adds	r3, #1
 8005886:	627b      	str	r3, [r7, #36]	; 0x24
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800588e:	429a      	cmp	r2, r3
 8005890:	d3e5      	bcc.n	800585e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4618      	mov	r0, r3
 8005898:	f003 fe26 	bl	80094e8 <USB_ReadInterrupts>
 800589c:	4603      	mov	r3, r0
 800589e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058a6:	d13b      	bne.n	8005920 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80058a8:	2301      	movs	r3, #1
 80058aa:	627b      	str	r3, [r7, #36]	; 0x24
 80058ac:	e02b      	b.n	8005906 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	015a      	lsls	r2, r3, #5
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80058be:	6879      	ldr	r1, [r7, #4]
 80058c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058c2:	4613      	mov	r3, r2
 80058c4:	00db      	lsls	r3, r3, #3
 80058c6:	4413      	add	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	440b      	add	r3, r1
 80058cc:	3340      	adds	r3, #64	; 0x40
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d115      	bne.n	8005900 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80058d4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	da12      	bge.n	8005900 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80058da:	6879      	ldr	r1, [r7, #4]
 80058dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058de:	4613      	mov	r3, r2
 80058e0:	00db      	lsls	r3, r3, #3
 80058e2:	4413      	add	r3, r2
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	440b      	add	r3, r1
 80058e8:	333f      	adds	r3, #63	; 0x3f
 80058ea:	2201      	movs	r2, #1
 80058ec:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	4619      	mov	r1, r3
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 fae8 	bl	8005ed0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005902:	3301      	adds	r3, #1
 8005904:	627b      	str	r3, [r7, #36]	; 0x24
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800590c:	429a      	cmp	r2, r3
 800590e:	d3ce      	bcc.n	80058ae <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	695a      	ldr	r2, [r3, #20]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800591e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4618      	mov	r0, r3
 8005926:	f003 fddf 	bl	80094e8 <USB_ReadInterrupts>
 800592a:	4603      	mov	r3, r0
 800592c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005930:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005934:	d155      	bne.n	80059e2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005936:	2301      	movs	r3, #1
 8005938:	627b      	str	r3, [r7, #36]	; 0x24
 800593a:	e045      	b.n	80059c8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800593c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	4413      	add	r3, r2
 8005944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800594c:	6879      	ldr	r1, [r7, #4]
 800594e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005950:	4613      	mov	r3, r2
 8005952:	00db      	lsls	r3, r3, #3
 8005954:	4413      	add	r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	440b      	add	r3, r1
 800595a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d12e      	bne.n	80059c2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005964:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005966:	2b00      	cmp	r3, #0
 8005968:	da2b      	bge.n	80059c2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005976:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800597a:	429a      	cmp	r2, r3
 800597c:	d121      	bne.n	80059c2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800597e:	6879      	ldr	r1, [r7, #4]
 8005980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005982:	4613      	mov	r3, r2
 8005984:	00db      	lsls	r3, r3, #3
 8005986:	4413      	add	r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	440b      	add	r3, r1
 800598c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005990:	2201      	movs	r2, #1
 8005992:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	699b      	ldr	r3, [r3, #24]
 8005998:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800599c:	6a3b      	ldr	r3, [r7, #32]
 800599e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	695b      	ldr	r3, [r3, #20]
 80059a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10a      	bne.n	80059c2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	69fa      	ldr	r2, [r7, #28]
 80059b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80059be:	6053      	str	r3, [r2, #4]
            break;
 80059c0:	e007      	b.n	80059d2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80059c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c4:	3301      	adds	r3, #1
 80059c6:	627b      	str	r3, [r7, #36]	; 0x24
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d3b4      	bcc.n	800593c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	695a      	ldr	r2, [r3, #20]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80059e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f003 fd7e 	bl	80094e8 <USB_ReadInterrupts>
 80059ec:	4603      	mov	r3, r0
 80059ee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80059f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059f6:	d10a      	bne.n	8005a0e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f006 f9d5 	bl	800bda8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	695a      	ldr	r2, [r3, #20]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005a0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f003 fd68 	bl	80094e8 <USB_ReadInterrupts>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	f003 0304 	and.w	r3, r3, #4
 8005a1e:	2b04      	cmp	r3, #4
 8005a20:	d115      	bne.n	8005a4e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	f003 0304 	and.w	r3, r3, #4
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d002      	beq.n	8005a3a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f006 f9c5 	bl	800bdc4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	6859      	ldr	r1, [r3, #4]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	430a      	orrs	r2, r1
 8005a48:	605a      	str	r2, [r3, #4]
 8005a4a:	e000      	b.n	8005a4e <HAL_PCD_IRQHandler+0x938>
      return;
 8005a4c:	bf00      	nop
    }
  }
}
 8005a4e:	3734      	adds	r7, #52	; 0x34
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd90      	pop	{r4, r7, pc}

08005a54 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d101      	bne.n	8005a6e <HAL_PCD_SetAddress+0x1a>
 8005a6a:	2302      	movs	r3, #2
 8005a6c:	e013      	b.n	8005a96 <HAL_PCD_SetAddress+0x42>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	78fa      	ldrb	r2, [r7, #3]
 8005a7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	78fa      	ldrb	r2, [r7, #3]
 8005a84:	4611      	mov	r1, r2
 8005a86:	4618      	mov	r0, r3
 8005a88:	f003 fcc6 	bl	8009418 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3708      	adds	r7, #8
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b084      	sub	sp, #16
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
 8005aa6:	4608      	mov	r0, r1
 8005aa8:	4611      	mov	r1, r2
 8005aaa:	461a      	mov	r2, r3
 8005aac:	4603      	mov	r3, r0
 8005aae:	70fb      	strb	r3, [r7, #3]
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	803b      	strh	r3, [r7, #0]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005abc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	da0f      	bge.n	8005ae4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ac4:	78fb      	ldrb	r3, [r7, #3]
 8005ac6:	f003 020f 	and.w	r2, r3, #15
 8005aca:	4613      	mov	r3, r2
 8005acc:	00db      	lsls	r3, r3, #3
 8005ace:	4413      	add	r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	3338      	adds	r3, #56	; 0x38
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	3304      	adds	r3, #4
 8005ada:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	705a      	strb	r2, [r3, #1]
 8005ae2:	e00f      	b.n	8005b04 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ae4:	78fb      	ldrb	r3, [r7, #3]
 8005ae6:	f003 020f 	and.w	r2, r3, #15
 8005aea:	4613      	mov	r3, r2
 8005aec:	00db      	lsls	r3, r3, #3
 8005aee:	4413      	add	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	4413      	add	r3, r2
 8005afa:	3304      	adds	r3, #4
 8005afc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005b04:	78fb      	ldrb	r3, [r7, #3]
 8005b06:	f003 030f 	and.w	r3, r3, #15
 8005b0a:	b2da      	uxtb	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005b10:	883a      	ldrh	r2, [r7, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	78ba      	ldrb	r2, [r7, #2]
 8005b1a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	785b      	ldrb	r3, [r3, #1]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d004      	beq.n	8005b2e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005b2e:	78bb      	ldrb	r3, [r7, #2]
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d102      	bne.n	8005b3a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d101      	bne.n	8005b48 <HAL_PCD_EP_Open+0xaa>
 8005b44:	2302      	movs	r3, #2
 8005b46:	e00e      	b.n	8005b66 <HAL_PCD_EP_Open+0xc8>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68f9      	ldr	r1, [r7, #12]
 8005b56:	4618      	mov	r0, r3
 8005b58:	f002 fd46 	bl	80085e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005b64:	7afb      	ldrb	r3, [r7, #11]
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b084      	sub	sp, #16
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
 8005b76:	460b      	mov	r3, r1
 8005b78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005b7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	da0f      	bge.n	8005ba2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b82:	78fb      	ldrb	r3, [r7, #3]
 8005b84:	f003 020f 	and.w	r2, r3, #15
 8005b88:	4613      	mov	r3, r2
 8005b8a:	00db      	lsls	r3, r3, #3
 8005b8c:	4413      	add	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	3338      	adds	r3, #56	; 0x38
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	4413      	add	r3, r2
 8005b96:	3304      	adds	r3, #4
 8005b98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	705a      	strb	r2, [r3, #1]
 8005ba0:	e00f      	b.n	8005bc2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ba2:	78fb      	ldrb	r3, [r7, #3]
 8005ba4:	f003 020f 	and.w	r2, r3, #15
 8005ba8:	4613      	mov	r3, r2
 8005baa:	00db      	lsls	r3, r3, #3
 8005bac:	4413      	add	r3, r2
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	3304      	adds	r3, #4
 8005bba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005bc2:	78fb      	ldrb	r3, [r7, #3]
 8005bc4:	f003 030f 	and.w	r3, r3, #15
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d101      	bne.n	8005bdc <HAL_PCD_EP_Close+0x6e>
 8005bd8:	2302      	movs	r3, #2
 8005bda:	e00e      	b.n	8005bfa <HAL_PCD_EP_Close+0x8c>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68f9      	ldr	r1, [r7, #12]
 8005bea:	4618      	mov	r0, r3
 8005bec:	f002 fd84 	bl	80086f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b086      	sub	sp, #24
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	60f8      	str	r0, [r7, #12]
 8005c0a:	607a      	str	r2, [r7, #4]
 8005c0c:	603b      	str	r3, [r7, #0]
 8005c0e:	460b      	mov	r3, r1
 8005c10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c12:	7afb      	ldrb	r3, [r7, #11]
 8005c14:	f003 020f 	and.w	r2, r3, #15
 8005c18:	4613      	mov	r3, r2
 8005c1a:	00db      	lsls	r3, r3, #3
 8005c1c:	4413      	add	r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	4413      	add	r3, r2
 8005c28:	3304      	adds	r3, #4
 8005c2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	683a      	ldr	r2, [r7, #0]
 8005c36:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	2200      	movs	r2, #0
 8005c42:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c44:	7afb      	ldrb	r3, [r7, #11]
 8005c46:	f003 030f 	and.w	r3, r3, #15
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d102      	bne.n	8005c5e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c5e:	7afb      	ldrb	r3, [r7, #11]
 8005c60:	f003 030f 	and.w	r3, r3, #15
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d109      	bne.n	8005c7c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6818      	ldr	r0, [r3, #0]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	461a      	mov	r2, r3
 8005c74:	6979      	ldr	r1, [r7, #20]
 8005c76:	f003 f863 	bl	8008d40 <USB_EP0StartXfer>
 8005c7a:	e008      	b.n	8005c8e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6818      	ldr	r0, [r3, #0]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	461a      	mov	r2, r3
 8005c88:	6979      	ldr	r1, [r7, #20]
 8005c8a:	f002 fe11 	bl	80088b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3718      	adds	r7, #24
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005ca4:	78fb      	ldrb	r3, [r7, #3]
 8005ca6:	f003 020f 	and.w	r2, r3, #15
 8005caa:	6879      	ldr	r1, [r7, #4]
 8005cac:	4613      	mov	r3, r2
 8005cae:	00db      	lsls	r3, r3, #3
 8005cb0:	4413      	add	r3, r2
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	440b      	add	r3, r1
 8005cb6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005cba:	681b      	ldr	r3, [r3, #0]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	607a      	str	r2, [r7, #4]
 8005cd2:	603b      	str	r3, [r7, #0]
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cd8:	7afb      	ldrb	r3, [r7, #11]
 8005cda:	f003 020f 	and.w	r2, r3, #15
 8005cde:	4613      	mov	r3, r2
 8005ce0:	00db      	lsls	r3, r3, #3
 8005ce2:	4413      	add	r3, r2
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	3338      	adds	r3, #56	; 0x38
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	4413      	add	r3, r2
 8005cec:	3304      	adds	r3, #4
 8005cee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	2201      	movs	r2, #1
 8005d06:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d08:	7afb      	ldrb	r3, [r7, #11]
 8005d0a:	f003 030f 	and.w	r3, r3, #15
 8005d0e:	b2da      	uxtb	r2, r3
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d102      	bne.n	8005d22 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005d22:	7afb      	ldrb	r3, [r7, #11]
 8005d24:	f003 030f 	and.w	r3, r3, #15
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d109      	bne.n	8005d40 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6818      	ldr	r0, [r3, #0]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	461a      	mov	r2, r3
 8005d38:	6979      	ldr	r1, [r7, #20]
 8005d3a:	f003 f801 	bl	8008d40 <USB_EP0StartXfer>
 8005d3e:	e008      	b.n	8005d52 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6818      	ldr	r0, [r3, #0]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	6979      	ldr	r1, [r7, #20]
 8005d4e:	f002 fdaf 	bl	80088b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3718      	adds	r7, #24
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	460b      	mov	r3, r1
 8005d66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005d68:	78fb      	ldrb	r3, [r7, #3]
 8005d6a:	f003 020f 	and.w	r2, r3, #15
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d901      	bls.n	8005d7a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e050      	b.n	8005e1c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005d7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	da0f      	bge.n	8005da2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d82:	78fb      	ldrb	r3, [r7, #3]
 8005d84:	f003 020f 	and.w	r2, r3, #15
 8005d88:	4613      	mov	r3, r2
 8005d8a:	00db      	lsls	r3, r3, #3
 8005d8c:	4413      	add	r3, r2
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	3338      	adds	r3, #56	; 0x38
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	4413      	add	r3, r2
 8005d96:	3304      	adds	r3, #4
 8005d98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	705a      	strb	r2, [r3, #1]
 8005da0:	e00d      	b.n	8005dbe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005da2:	78fa      	ldrb	r2, [r7, #3]
 8005da4:	4613      	mov	r3, r2
 8005da6:	00db      	lsls	r3, r3, #3
 8005da8:	4413      	add	r3, r2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	4413      	add	r3, r2
 8005db4:	3304      	adds	r3, #4
 8005db6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005dc4:	78fb      	ldrb	r3, [r7, #3]
 8005dc6:	f003 030f 	and.w	r3, r3, #15
 8005dca:	b2da      	uxtb	r2, r3
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d101      	bne.n	8005dde <HAL_PCD_EP_SetStall+0x82>
 8005dda:	2302      	movs	r3, #2
 8005ddc:	e01e      	b.n	8005e1c <HAL_PCD_EP_SetStall+0xc0>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68f9      	ldr	r1, [r7, #12]
 8005dec:	4618      	mov	r0, r3
 8005dee:	f003 fa3f 	bl	8009270 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005df2:	78fb      	ldrb	r3, [r7, #3]
 8005df4:	f003 030f 	and.w	r3, r3, #15
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10a      	bne.n	8005e12 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6818      	ldr	r0, [r3, #0]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	b2d9      	uxtb	r1, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	f003 fc2f 	bl	8009670 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005e30:	78fb      	ldrb	r3, [r7, #3]
 8005e32:	f003 020f 	and.w	r2, r3, #15
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d901      	bls.n	8005e42 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e042      	b.n	8005ec8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005e42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	da0f      	bge.n	8005e6a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e4a:	78fb      	ldrb	r3, [r7, #3]
 8005e4c:	f003 020f 	and.w	r2, r3, #15
 8005e50:	4613      	mov	r3, r2
 8005e52:	00db      	lsls	r3, r3, #3
 8005e54:	4413      	add	r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	3338      	adds	r3, #56	; 0x38
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	3304      	adds	r3, #4
 8005e60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2201      	movs	r2, #1
 8005e66:	705a      	strb	r2, [r3, #1]
 8005e68:	e00f      	b.n	8005e8a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e6a:	78fb      	ldrb	r3, [r7, #3]
 8005e6c:	f003 020f 	and.w	r2, r3, #15
 8005e70:	4613      	mov	r3, r2
 8005e72:	00db      	lsls	r3, r3, #3
 8005e74:	4413      	add	r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	4413      	add	r3, r2
 8005e80:	3304      	adds	r3, #4
 8005e82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e90:	78fb      	ldrb	r3, [r7, #3]
 8005e92:	f003 030f 	and.w	r3, r3, #15
 8005e96:	b2da      	uxtb	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d101      	bne.n	8005eaa <HAL_PCD_EP_ClrStall+0x86>
 8005ea6:	2302      	movs	r3, #2
 8005ea8:	e00e      	b.n	8005ec8 <HAL_PCD_EP_ClrStall+0xa4>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68f9      	ldr	r1, [r7, #12]
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f003 fa47 	bl	800934c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3710      	adds	r7, #16
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	460b      	mov	r3, r1
 8005eda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005edc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	da0c      	bge.n	8005efe <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ee4:	78fb      	ldrb	r3, [r7, #3]
 8005ee6:	f003 020f 	and.w	r2, r3, #15
 8005eea:	4613      	mov	r3, r2
 8005eec:	00db      	lsls	r3, r3, #3
 8005eee:	4413      	add	r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	3338      	adds	r3, #56	; 0x38
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	3304      	adds	r3, #4
 8005efa:	60fb      	str	r3, [r7, #12]
 8005efc:	e00c      	b.n	8005f18 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005efe:	78fb      	ldrb	r3, [r7, #3]
 8005f00:	f003 020f 	and.w	r2, r3, #15
 8005f04:	4613      	mov	r3, r2
 8005f06:	00db      	lsls	r3, r3, #3
 8005f08:	4413      	add	r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	4413      	add	r3, r2
 8005f14:	3304      	adds	r3, #4
 8005f16:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68f9      	ldr	r1, [r7, #12]
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f003 f866 	bl	8008ff0 <USB_EPStopXfer>
 8005f24:	4603      	mov	r3, r0
 8005f26:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005f28:	7afb      	ldrb	r3, [r7, #11]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b08a      	sub	sp, #40	; 0x28
 8005f36:	af02      	add	r7, sp, #8
 8005f38:	6078      	str	r0, [r7, #4]
 8005f3a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005f46:	683a      	ldr	r2, [r7, #0]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	00db      	lsls	r3, r3, #3
 8005f4c:	4413      	add	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	3338      	adds	r3, #56	; 0x38
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	4413      	add	r3, r2
 8005f56:	3304      	adds	r3, #4
 8005f58:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6a1a      	ldr	r2, [r3, #32]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d901      	bls.n	8005f6a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e06c      	b.n	8006044 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	699a      	ldr	r2, [r3, #24]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	69fa      	ldr	r2, [r7, #28]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d902      	bls.n	8005f86 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	3303      	adds	r3, #3
 8005f8a:	089b      	lsrs	r3, r3, #2
 8005f8c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005f8e:	e02b      	b.n	8005fe8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	699a      	ldr	r2, [r3, #24]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6a1b      	ldr	r3, [r3, #32]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	69fa      	ldr	r2, [r7, #28]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d902      	bls.n	8005fac <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	3303      	adds	r3, #3
 8005fb0:	089b      	lsrs	r3, r3, #2
 8005fb2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6919      	ldr	r1, [r3, #16]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	9300      	str	r3, [sp, #0]
 8005fc8:	4603      	mov	r3, r0
 8005fca:	6978      	ldr	r0, [r7, #20]
 8005fcc:	f003 f8ba 	bl	8009144 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	691a      	ldr	r2, [r3, #16]
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	441a      	add	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6a1a      	ldr	r2, [r3, #32]
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	441a      	add	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	69ba      	ldr	r2, [r7, #24]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d809      	bhi.n	8006012 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6a1a      	ldr	r2, [r3, #32]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006006:	429a      	cmp	r2, r3
 8006008:	d203      	bcs.n	8006012 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1be      	bne.n	8005f90 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	699a      	ldr	r2, [r3, #24]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	429a      	cmp	r2, r3
 800601c:	d811      	bhi.n	8006042 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	f003 030f 	and.w	r3, r3, #15
 8006024:	2201      	movs	r2, #1
 8006026:	fa02 f303 	lsl.w	r3, r2, r3
 800602a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006032:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	43db      	mvns	r3, r3
 8006038:	6939      	ldr	r1, [r7, #16]
 800603a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800603e:	4013      	ands	r3, r2
 8006040:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3720      	adds	r7, #32
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b088      	sub	sp, #32
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	333c      	adds	r3, #60	; 0x3c
 8006064:	3304      	adds	r3, #4
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	015a      	lsls	r2, r3, #5
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	4413      	add	r3, r2
 8006072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d17b      	bne.n	800617a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	f003 0308 	and.w	r3, r3, #8
 8006088:	2b00      	cmp	r3, #0
 800608a:	d015      	beq.n	80060b8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	4a61      	ldr	r2, [pc, #388]	; (8006214 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006090:	4293      	cmp	r3, r2
 8006092:	f240 80b9 	bls.w	8006208 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800609c:	2b00      	cmp	r3, #0
 800609e:	f000 80b3 	beq.w	8006208 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	015a      	lsls	r2, r3, #5
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ae:	461a      	mov	r2, r3
 80060b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060b4:	6093      	str	r3, [r2, #8]
 80060b6:	e0a7      	b.n	8006208 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	f003 0320 	and.w	r3, r3, #32
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d009      	beq.n	80060d6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	015a      	lsls	r2, r3, #5
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	4413      	add	r3, r2
 80060ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ce:	461a      	mov	r2, r3
 80060d0:	2320      	movs	r3, #32
 80060d2:	6093      	str	r3, [r2, #8]
 80060d4:	e098      	b.n	8006208 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f040 8093 	bne.w	8006208 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	4a4b      	ldr	r2, [pc, #300]	; (8006214 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d90f      	bls.n	800610a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00a      	beq.n	800610a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	015a      	lsls	r2, r3, #5
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	4413      	add	r3, r2
 80060fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006100:	461a      	mov	r2, r3
 8006102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006106:	6093      	str	r3, [r2, #8]
 8006108:	e07e      	b.n	8006208 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800610a:	683a      	ldr	r2, [r7, #0]
 800610c:	4613      	mov	r3, r2
 800610e:	00db      	lsls	r3, r3, #3
 8006110:	4413      	add	r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	4413      	add	r3, r2
 800611c:	3304      	adds	r3, #4
 800611e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	69da      	ldr	r2, [r3, #28]
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	0159      	lsls	r1, r3, #5
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	440b      	add	r3, r1
 800612c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006136:	1ad2      	subs	r2, r2, r3
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d114      	bne.n	800616c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d109      	bne.n	800615e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6818      	ldr	r0, [r3, #0]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006154:	461a      	mov	r2, r3
 8006156:	2101      	movs	r1, #1
 8006158:	f003 fa8a 	bl	8009670 <USB_EP0_OutStart>
 800615c:	e006      	b.n	800616c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	691a      	ldr	r2, [r3, #16]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6a1b      	ldr	r3, [r3, #32]
 8006166:	441a      	add	r2, r3
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	b2db      	uxtb	r3, r3
 8006170:	4619      	mov	r1, r3
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f005 fd54 	bl	800bc20 <HAL_PCD_DataOutStageCallback>
 8006178:	e046      	b.n	8006208 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	4a26      	ldr	r2, [pc, #152]	; (8006218 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d124      	bne.n	80061cc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00a      	beq.n	80061a2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	015a      	lsls	r2, r3, #5
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	4413      	add	r3, r2
 8006194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006198:	461a      	mov	r2, r3
 800619a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800619e:	6093      	str	r3, [r2, #8]
 80061a0:	e032      	b.n	8006208 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	f003 0320 	and.w	r3, r3, #32
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d008      	beq.n	80061be <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b8:	461a      	mov	r2, r3
 80061ba:	2320      	movs	r3, #32
 80061bc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	4619      	mov	r1, r3
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f005 fd2b 	bl	800bc20 <HAL_PCD_DataOutStageCallback>
 80061ca:	e01d      	b.n	8006208 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d114      	bne.n	80061fc <PCD_EP_OutXfrComplete_int+0x1b0>
 80061d2:	6879      	ldr	r1, [r7, #4]
 80061d4:	683a      	ldr	r2, [r7, #0]
 80061d6:	4613      	mov	r3, r2
 80061d8:	00db      	lsls	r3, r3, #3
 80061da:	4413      	add	r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	440b      	add	r3, r1
 80061e0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d108      	bne.n	80061fc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6818      	ldr	r0, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80061f4:	461a      	mov	r2, r3
 80061f6:	2100      	movs	r1, #0
 80061f8:	f003 fa3a 	bl	8009670 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	4619      	mov	r1, r3
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f005 fd0c 	bl	800bc20 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3720      	adds	r7, #32
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	4f54300a 	.word	0x4f54300a
 8006218:	4f54310a 	.word	0x4f54310a

0800621c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b086      	sub	sp, #24
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	333c      	adds	r3, #60	; 0x3c
 8006234:	3304      	adds	r3, #4
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	015a      	lsls	r2, r3, #5
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	4413      	add	r3, r2
 8006242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	4a15      	ldr	r2, [pc, #84]	; (80062a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d90e      	bls.n	8006270 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006258:	2b00      	cmp	r3, #0
 800625a:	d009      	beq.n	8006270 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	015a      	lsls	r2, r3, #5
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	4413      	add	r3, r2
 8006264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006268:	461a      	mov	r2, r3
 800626a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800626e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f005 fcc3 	bl	800bbfc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	4a0a      	ldr	r2, [pc, #40]	; (80062a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d90c      	bls.n	8006298 <PCD_EP_OutSetupPacket_int+0x7c>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d108      	bne.n	8006298 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6818      	ldr	r0, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006290:	461a      	mov	r2, r3
 8006292:	2101      	movs	r1, #1
 8006294:	f003 f9ec 	bl	8009670 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3718      	adds	r7, #24
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	4f54300a 	.word	0x4f54300a

080062a8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	460b      	mov	r3, r1
 80062b2:	70fb      	strb	r3, [r7, #3]
 80062b4:	4613      	mov	r3, r2
 80062b6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062be:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80062c0:	78fb      	ldrb	r3, [r7, #3]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d107      	bne.n	80062d6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80062c6:	883b      	ldrh	r3, [r7, #0]
 80062c8:	0419      	lsls	r1, r3, #16
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	430a      	orrs	r2, r1
 80062d2:	629a      	str	r2, [r3, #40]	; 0x28
 80062d4:	e028      	b.n	8006328 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062dc:	0c1b      	lsrs	r3, r3, #16
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	4413      	add	r3, r2
 80062e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80062e4:	2300      	movs	r3, #0
 80062e6:	73fb      	strb	r3, [r7, #15]
 80062e8:	e00d      	b.n	8006306 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	7bfb      	ldrb	r3, [r7, #15]
 80062f0:	3340      	adds	r3, #64	; 0x40
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	4413      	add	r3, r2
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	0c1b      	lsrs	r3, r3, #16
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	4413      	add	r3, r2
 80062fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006300:	7bfb      	ldrb	r3, [r7, #15]
 8006302:	3301      	adds	r3, #1
 8006304:	73fb      	strb	r3, [r7, #15]
 8006306:	7bfa      	ldrb	r2, [r7, #15]
 8006308:	78fb      	ldrb	r3, [r7, #3]
 800630a:	3b01      	subs	r3, #1
 800630c:	429a      	cmp	r2, r3
 800630e:	d3ec      	bcc.n	80062ea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006310:	883b      	ldrh	r3, [r7, #0]
 8006312:	0418      	lsls	r0, r3, #16
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6819      	ldr	r1, [r3, #0]
 8006318:	78fb      	ldrb	r3, [r7, #3]
 800631a:	3b01      	subs	r3, #1
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	4302      	orrs	r2, r0
 8006320:	3340      	adds	r3, #64	; 0x40
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	440b      	add	r3, r1
 8006326:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006336:	b480      	push	{r7}
 8006338:	b083      	sub	sp, #12
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
 800633e:	460b      	mov	r3, r1
 8006340:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	887a      	ldrh	r2, [r7, #2]
 8006348:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	460b      	mov	r3, r1
 8006362:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b086      	sub	sp, #24
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d101      	bne.n	8006382 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e267      	b.n	8006852 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0301 	and.w	r3, r3, #1
 800638a:	2b00      	cmp	r3, #0
 800638c:	d075      	beq.n	800647a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800638e:	4b88      	ldr	r3, [pc, #544]	; (80065b0 <HAL_RCC_OscConfig+0x240>)
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f003 030c 	and.w	r3, r3, #12
 8006396:	2b04      	cmp	r3, #4
 8006398:	d00c      	beq.n	80063b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800639a:	4b85      	ldr	r3, [pc, #532]	; (80065b0 <HAL_RCC_OscConfig+0x240>)
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80063a2:	2b08      	cmp	r3, #8
 80063a4:	d112      	bne.n	80063cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063a6:	4b82      	ldr	r3, [pc, #520]	; (80065b0 <HAL_RCC_OscConfig+0x240>)
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063b2:	d10b      	bne.n	80063cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063b4:	4b7e      	ldr	r3, [pc, #504]	; (80065b0 <HAL_RCC_OscConfig+0x240>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d05b      	beq.n	8006478 <HAL_RCC_OscConfig+0x108>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d157      	bne.n	8006478 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e242      	b.n	8006852 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063d4:	d106      	bne.n	80063e4 <HAL_RCC_OscConfig+0x74>
 80063d6:	4b76      	ldr	r3, [pc, #472]	; (80065b0 <HAL_RCC_OscConfig+0x240>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a75      	ldr	r2, [pc, #468]	; (80065b0 <HAL_RCC_OscConfig+0x240>)
 80063dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063e0:	6013      	str	r3, [r2, #0]
 80063e2:	e01d      	b.n	8006420 <HAL_RCC_OscConfig+0xb0>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063ec:	d10c      	bne.n	8006408 <HAL_RCC_OscConfig+0x98>
 80063ee:	4b70      	ldr	r3, [pc, #448]	; (80065b0 <HAL_RCC_OscConfig+0x240>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a6f      	ldr	r2, [pc, #444]	; (80065b0 <HAL_RCC_OscConfig+0x240>)
 80063f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063f8:	6013      	str	r3, [r2, #0]
 80063fa:	4b6d      	ldr	r3, [pc, #436]	; (80065b0 <HAL_RCC_OscConfig+0x240>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a6c      	ldr	r2, [pc, #432]	; (80065b0 <HAL_RCC_OscConfig+0x240>)
 8006400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006404:	6013      	str	r3, [r2, #0]
 8006406:	e00b      	b.n	8006420 <HAL_RCC_OscConfig+0xb0>
 8006408:	4b69      	ldr	r3, [pc, #420]	; (80065b0 <HAL_RCC_OscConfig+0x240>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a68      	ldr	r2, [pc, #416]	; (80065b0 <HAL_RCC_OscConfig+0x240>)
 800640e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006412:	6013      	str	r3, [r2, #0]
 8006414:	4b66      	ldr	r3, [pc, #408]	; (80065b0 <HAL_RCC_OscConfig+0x240>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a65      	ldr	r2, [pc, #404]	; (80065b0 <HAL_RCC_OscConfig+0x240>)
 800641a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800641e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d013      	beq.n	8006450 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006428:	f7fd f9e4 	bl	80037f4 <HAL_GetTick>
 800642c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800642e:	e008      	b.n	8006442 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006430:	f7fd f9e0 	bl	80037f4 <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	2b64      	cmp	r3, #100	; 0x64
 800643c:	d901      	bls.n	8006442 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e207      	b.n	8006852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006442:	4b5b      	ldr	r3, [pc, #364]	; (80065b0 <HAL_RCC_OscConfig+0x240>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d0f0      	beq.n	8006430 <HAL_RCC_OscConfig+0xc0>
 800644e:	e014      	b.n	800647a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006450:	f7fd f9d0 	bl	80037f4 <HAL_GetTick>
 8006454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006456:	e008      	b.n	800646a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006458:	f7fd f9cc 	bl	80037f4 <HAL_GetTick>
 800645c:	4602      	mov	r2, r0
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	2b64      	cmp	r3, #100	; 0x64
 8006464:	d901      	bls.n	800646a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e1f3      	b.n	8006852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800646a:	4b51      	ldr	r3, [pc, #324]	; (80065b0 <HAL_RCC_OscConfig+0x240>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1f0      	bne.n	8006458 <HAL_RCC_OscConfig+0xe8>
 8006476:	e000      	b.n	800647a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 0302 	and.w	r3, r3, #2
 8006482:	2b00      	cmp	r3, #0
 8006484:	d063      	beq.n	800654e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006486:	4b4a      	ldr	r3, [pc, #296]	; (80065b0 <HAL_RCC_OscConfig+0x240>)
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f003 030c 	and.w	r3, r3, #12
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00b      	beq.n	80064aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006492:	4b47      	ldr	r3, [pc, #284]	; (80065b0 <HAL_RCC_OscConfig+0x240>)
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800649a:	2b08      	cmp	r3, #8
 800649c:	d11c      	bne.n	80064d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800649e:	4b44      	ldr	r3, [pc, #272]	; (80065b0 <HAL_RCC_OscConfig+0x240>)
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d116      	bne.n	80064d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064aa:	4b41      	ldr	r3, [pc, #260]	; (80065b0 <HAL_RCC_OscConfig+0x240>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0302 	and.w	r3, r3, #2
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d005      	beq.n	80064c2 <HAL_RCC_OscConfig+0x152>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d001      	beq.n	80064c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e1c7      	b.n	8006852 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064c2:	4b3b      	ldr	r3, [pc, #236]	; (80065b0 <HAL_RCC_OscConfig+0x240>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	00db      	lsls	r3, r3, #3
 80064d0:	4937      	ldr	r1, [pc, #220]	; (80065b0 <HAL_RCC_OscConfig+0x240>)
 80064d2:	4313      	orrs	r3, r2
 80064d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064d6:	e03a      	b.n	800654e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d020      	beq.n	8006522 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064e0:	4b34      	ldr	r3, [pc, #208]	; (80065b4 <HAL_RCC_OscConfig+0x244>)
 80064e2:	2201      	movs	r2, #1
 80064e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e6:	f7fd f985 	bl	80037f4 <HAL_GetTick>
 80064ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064ec:	e008      	b.n	8006500 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064ee:	f7fd f981 	bl	80037f4 <HAL_GetTick>
 80064f2:	4602      	mov	r2, r0
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d901      	bls.n	8006500 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80064fc:	2303      	movs	r3, #3
 80064fe:	e1a8      	b.n	8006852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006500:	4b2b      	ldr	r3, [pc, #172]	; (80065b0 <HAL_RCC_OscConfig+0x240>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0302 	and.w	r3, r3, #2
 8006508:	2b00      	cmp	r3, #0
 800650a:	d0f0      	beq.n	80064ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800650c:	4b28      	ldr	r3, [pc, #160]	; (80065b0 <HAL_RCC_OscConfig+0x240>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	00db      	lsls	r3, r3, #3
 800651a:	4925      	ldr	r1, [pc, #148]	; (80065b0 <HAL_RCC_OscConfig+0x240>)
 800651c:	4313      	orrs	r3, r2
 800651e:	600b      	str	r3, [r1, #0]
 8006520:	e015      	b.n	800654e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006522:	4b24      	ldr	r3, [pc, #144]	; (80065b4 <HAL_RCC_OscConfig+0x244>)
 8006524:	2200      	movs	r2, #0
 8006526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006528:	f7fd f964 	bl	80037f4 <HAL_GetTick>
 800652c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800652e:	e008      	b.n	8006542 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006530:	f7fd f960 	bl	80037f4 <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	2b02      	cmp	r3, #2
 800653c:	d901      	bls.n	8006542 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e187      	b.n	8006852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006542:	4b1b      	ldr	r3, [pc, #108]	; (80065b0 <HAL_RCC_OscConfig+0x240>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0302 	and.w	r3, r3, #2
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1f0      	bne.n	8006530 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0308 	and.w	r3, r3, #8
 8006556:	2b00      	cmp	r3, #0
 8006558:	d036      	beq.n	80065c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	695b      	ldr	r3, [r3, #20]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d016      	beq.n	8006590 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006562:	4b15      	ldr	r3, [pc, #84]	; (80065b8 <HAL_RCC_OscConfig+0x248>)
 8006564:	2201      	movs	r2, #1
 8006566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006568:	f7fd f944 	bl	80037f4 <HAL_GetTick>
 800656c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800656e:	e008      	b.n	8006582 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006570:	f7fd f940 	bl	80037f4 <HAL_GetTick>
 8006574:	4602      	mov	r2, r0
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	2b02      	cmp	r3, #2
 800657c:	d901      	bls.n	8006582 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e167      	b.n	8006852 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006582:	4b0b      	ldr	r3, [pc, #44]	; (80065b0 <HAL_RCC_OscConfig+0x240>)
 8006584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006586:	f003 0302 	and.w	r3, r3, #2
 800658a:	2b00      	cmp	r3, #0
 800658c:	d0f0      	beq.n	8006570 <HAL_RCC_OscConfig+0x200>
 800658e:	e01b      	b.n	80065c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006590:	4b09      	ldr	r3, [pc, #36]	; (80065b8 <HAL_RCC_OscConfig+0x248>)
 8006592:	2200      	movs	r2, #0
 8006594:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006596:	f7fd f92d 	bl	80037f4 <HAL_GetTick>
 800659a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800659c:	e00e      	b.n	80065bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800659e:	f7fd f929 	bl	80037f4 <HAL_GetTick>
 80065a2:	4602      	mov	r2, r0
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d907      	bls.n	80065bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e150      	b.n	8006852 <HAL_RCC_OscConfig+0x4e2>
 80065b0:	40023800 	.word	0x40023800
 80065b4:	42470000 	.word	0x42470000
 80065b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065bc:	4b88      	ldr	r3, [pc, #544]	; (80067e0 <HAL_RCC_OscConfig+0x470>)
 80065be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065c0:	f003 0302 	and.w	r3, r3, #2
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d1ea      	bne.n	800659e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 0304 	and.w	r3, r3, #4
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f000 8097 	beq.w	8006704 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065d6:	2300      	movs	r3, #0
 80065d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065da:	4b81      	ldr	r3, [pc, #516]	; (80067e0 <HAL_RCC_OscConfig+0x470>)
 80065dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d10f      	bne.n	8006606 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065e6:	2300      	movs	r3, #0
 80065e8:	60bb      	str	r3, [r7, #8]
 80065ea:	4b7d      	ldr	r3, [pc, #500]	; (80067e0 <HAL_RCC_OscConfig+0x470>)
 80065ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ee:	4a7c      	ldr	r2, [pc, #496]	; (80067e0 <HAL_RCC_OscConfig+0x470>)
 80065f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065f4:	6413      	str	r3, [r2, #64]	; 0x40
 80065f6:	4b7a      	ldr	r3, [pc, #488]	; (80067e0 <HAL_RCC_OscConfig+0x470>)
 80065f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065fe:	60bb      	str	r3, [r7, #8]
 8006600:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006602:	2301      	movs	r3, #1
 8006604:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006606:	4b77      	ldr	r3, [pc, #476]	; (80067e4 <HAL_RCC_OscConfig+0x474>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800660e:	2b00      	cmp	r3, #0
 8006610:	d118      	bne.n	8006644 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006612:	4b74      	ldr	r3, [pc, #464]	; (80067e4 <HAL_RCC_OscConfig+0x474>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a73      	ldr	r2, [pc, #460]	; (80067e4 <HAL_RCC_OscConfig+0x474>)
 8006618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800661c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800661e:	f7fd f8e9 	bl	80037f4 <HAL_GetTick>
 8006622:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006624:	e008      	b.n	8006638 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006626:	f7fd f8e5 	bl	80037f4 <HAL_GetTick>
 800662a:	4602      	mov	r2, r0
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	2b02      	cmp	r3, #2
 8006632:	d901      	bls.n	8006638 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e10c      	b.n	8006852 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006638:	4b6a      	ldr	r3, [pc, #424]	; (80067e4 <HAL_RCC_OscConfig+0x474>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006640:	2b00      	cmp	r3, #0
 8006642:	d0f0      	beq.n	8006626 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d106      	bne.n	800665a <HAL_RCC_OscConfig+0x2ea>
 800664c:	4b64      	ldr	r3, [pc, #400]	; (80067e0 <HAL_RCC_OscConfig+0x470>)
 800664e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006650:	4a63      	ldr	r2, [pc, #396]	; (80067e0 <HAL_RCC_OscConfig+0x470>)
 8006652:	f043 0301 	orr.w	r3, r3, #1
 8006656:	6713      	str	r3, [r2, #112]	; 0x70
 8006658:	e01c      	b.n	8006694 <HAL_RCC_OscConfig+0x324>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	2b05      	cmp	r3, #5
 8006660:	d10c      	bne.n	800667c <HAL_RCC_OscConfig+0x30c>
 8006662:	4b5f      	ldr	r3, [pc, #380]	; (80067e0 <HAL_RCC_OscConfig+0x470>)
 8006664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006666:	4a5e      	ldr	r2, [pc, #376]	; (80067e0 <HAL_RCC_OscConfig+0x470>)
 8006668:	f043 0304 	orr.w	r3, r3, #4
 800666c:	6713      	str	r3, [r2, #112]	; 0x70
 800666e:	4b5c      	ldr	r3, [pc, #368]	; (80067e0 <HAL_RCC_OscConfig+0x470>)
 8006670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006672:	4a5b      	ldr	r2, [pc, #364]	; (80067e0 <HAL_RCC_OscConfig+0x470>)
 8006674:	f043 0301 	orr.w	r3, r3, #1
 8006678:	6713      	str	r3, [r2, #112]	; 0x70
 800667a:	e00b      	b.n	8006694 <HAL_RCC_OscConfig+0x324>
 800667c:	4b58      	ldr	r3, [pc, #352]	; (80067e0 <HAL_RCC_OscConfig+0x470>)
 800667e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006680:	4a57      	ldr	r2, [pc, #348]	; (80067e0 <HAL_RCC_OscConfig+0x470>)
 8006682:	f023 0301 	bic.w	r3, r3, #1
 8006686:	6713      	str	r3, [r2, #112]	; 0x70
 8006688:	4b55      	ldr	r3, [pc, #340]	; (80067e0 <HAL_RCC_OscConfig+0x470>)
 800668a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800668c:	4a54      	ldr	r2, [pc, #336]	; (80067e0 <HAL_RCC_OscConfig+0x470>)
 800668e:	f023 0304 	bic.w	r3, r3, #4
 8006692:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d015      	beq.n	80066c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800669c:	f7fd f8aa 	bl	80037f4 <HAL_GetTick>
 80066a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066a2:	e00a      	b.n	80066ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066a4:	f7fd f8a6 	bl	80037f4 <HAL_GetTick>
 80066a8:	4602      	mov	r2, r0
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d901      	bls.n	80066ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e0cb      	b.n	8006852 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066ba:	4b49      	ldr	r3, [pc, #292]	; (80067e0 <HAL_RCC_OscConfig+0x470>)
 80066bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066be:	f003 0302 	and.w	r3, r3, #2
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d0ee      	beq.n	80066a4 <HAL_RCC_OscConfig+0x334>
 80066c6:	e014      	b.n	80066f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066c8:	f7fd f894 	bl	80037f4 <HAL_GetTick>
 80066cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066ce:	e00a      	b.n	80066e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066d0:	f7fd f890 	bl	80037f4 <HAL_GetTick>
 80066d4:	4602      	mov	r2, r0
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	f241 3288 	movw	r2, #5000	; 0x1388
 80066de:	4293      	cmp	r3, r2
 80066e0:	d901      	bls.n	80066e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e0b5      	b.n	8006852 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066e6:	4b3e      	ldr	r3, [pc, #248]	; (80067e0 <HAL_RCC_OscConfig+0x470>)
 80066e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ea:	f003 0302 	and.w	r3, r3, #2
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1ee      	bne.n	80066d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066f2:	7dfb      	ldrb	r3, [r7, #23]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d105      	bne.n	8006704 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066f8:	4b39      	ldr	r3, [pc, #228]	; (80067e0 <HAL_RCC_OscConfig+0x470>)
 80066fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fc:	4a38      	ldr	r2, [pc, #224]	; (80067e0 <HAL_RCC_OscConfig+0x470>)
 80066fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006702:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	2b00      	cmp	r3, #0
 800670a:	f000 80a1 	beq.w	8006850 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800670e:	4b34      	ldr	r3, [pc, #208]	; (80067e0 <HAL_RCC_OscConfig+0x470>)
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f003 030c 	and.w	r3, r3, #12
 8006716:	2b08      	cmp	r3, #8
 8006718:	d05c      	beq.n	80067d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	2b02      	cmp	r3, #2
 8006720:	d141      	bne.n	80067a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006722:	4b31      	ldr	r3, [pc, #196]	; (80067e8 <HAL_RCC_OscConfig+0x478>)
 8006724:	2200      	movs	r2, #0
 8006726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006728:	f7fd f864 	bl	80037f4 <HAL_GetTick>
 800672c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800672e:	e008      	b.n	8006742 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006730:	f7fd f860 	bl	80037f4 <HAL_GetTick>
 8006734:	4602      	mov	r2, r0
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	2b02      	cmp	r3, #2
 800673c:	d901      	bls.n	8006742 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e087      	b.n	8006852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006742:	4b27      	ldr	r3, [pc, #156]	; (80067e0 <HAL_RCC_OscConfig+0x470>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1f0      	bne.n	8006730 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	69da      	ldr	r2, [r3, #28]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	431a      	orrs	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675c:	019b      	lsls	r3, r3, #6
 800675e:	431a      	orrs	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006764:	085b      	lsrs	r3, r3, #1
 8006766:	3b01      	subs	r3, #1
 8006768:	041b      	lsls	r3, r3, #16
 800676a:	431a      	orrs	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006770:	061b      	lsls	r3, r3, #24
 8006772:	491b      	ldr	r1, [pc, #108]	; (80067e0 <HAL_RCC_OscConfig+0x470>)
 8006774:	4313      	orrs	r3, r2
 8006776:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006778:	4b1b      	ldr	r3, [pc, #108]	; (80067e8 <HAL_RCC_OscConfig+0x478>)
 800677a:	2201      	movs	r2, #1
 800677c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800677e:	f7fd f839 	bl	80037f4 <HAL_GetTick>
 8006782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006784:	e008      	b.n	8006798 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006786:	f7fd f835 	bl	80037f4 <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	2b02      	cmp	r3, #2
 8006792:	d901      	bls.n	8006798 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e05c      	b.n	8006852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006798:	4b11      	ldr	r3, [pc, #68]	; (80067e0 <HAL_RCC_OscConfig+0x470>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d0f0      	beq.n	8006786 <HAL_RCC_OscConfig+0x416>
 80067a4:	e054      	b.n	8006850 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067a6:	4b10      	ldr	r3, [pc, #64]	; (80067e8 <HAL_RCC_OscConfig+0x478>)
 80067a8:	2200      	movs	r2, #0
 80067aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067ac:	f7fd f822 	bl	80037f4 <HAL_GetTick>
 80067b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067b2:	e008      	b.n	80067c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067b4:	f7fd f81e 	bl	80037f4 <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d901      	bls.n	80067c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e045      	b.n	8006852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067c6:	4b06      	ldr	r3, [pc, #24]	; (80067e0 <HAL_RCC_OscConfig+0x470>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1f0      	bne.n	80067b4 <HAL_RCC_OscConfig+0x444>
 80067d2:	e03d      	b.n	8006850 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	699b      	ldr	r3, [r3, #24]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d107      	bne.n	80067ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	e038      	b.n	8006852 <HAL_RCC_OscConfig+0x4e2>
 80067e0:	40023800 	.word	0x40023800
 80067e4:	40007000 	.word	0x40007000
 80067e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80067ec:	4b1b      	ldr	r3, [pc, #108]	; (800685c <HAL_RCC_OscConfig+0x4ec>)
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	699b      	ldr	r3, [r3, #24]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d028      	beq.n	800684c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006804:	429a      	cmp	r2, r3
 8006806:	d121      	bne.n	800684c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006812:	429a      	cmp	r2, r3
 8006814:	d11a      	bne.n	800684c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800681c:	4013      	ands	r3, r2
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006822:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006824:	4293      	cmp	r3, r2
 8006826:	d111      	bne.n	800684c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006832:	085b      	lsrs	r3, r3, #1
 8006834:	3b01      	subs	r3, #1
 8006836:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006838:	429a      	cmp	r2, r3
 800683a:	d107      	bne.n	800684c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006846:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006848:	429a      	cmp	r2, r3
 800684a:	d001      	beq.n	8006850 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e000      	b.n	8006852 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3718      	adds	r7, #24
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	40023800 	.word	0x40023800

08006860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d101      	bne.n	8006874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e0cc      	b.n	8006a0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006874:	4b68      	ldr	r3, [pc, #416]	; (8006a18 <HAL_RCC_ClockConfig+0x1b8>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 030f 	and.w	r3, r3, #15
 800687c:	683a      	ldr	r2, [r7, #0]
 800687e:	429a      	cmp	r2, r3
 8006880:	d90c      	bls.n	800689c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006882:	4b65      	ldr	r3, [pc, #404]	; (8006a18 <HAL_RCC_ClockConfig+0x1b8>)
 8006884:	683a      	ldr	r2, [r7, #0]
 8006886:	b2d2      	uxtb	r2, r2
 8006888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800688a:	4b63      	ldr	r3, [pc, #396]	; (8006a18 <HAL_RCC_ClockConfig+0x1b8>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 030f 	and.w	r3, r3, #15
 8006892:	683a      	ldr	r2, [r7, #0]
 8006894:	429a      	cmp	r2, r3
 8006896:	d001      	beq.n	800689c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	e0b8      	b.n	8006a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0302 	and.w	r3, r3, #2
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d020      	beq.n	80068ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0304 	and.w	r3, r3, #4
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d005      	beq.n	80068c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068b4:	4b59      	ldr	r3, [pc, #356]	; (8006a1c <HAL_RCC_ClockConfig+0x1bc>)
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	4a58      	ldr	r2, [pc, #352]	; (8006a1c <HAL_RCC_ClockConfig+0x1bc>)
 80068ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80068be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0308 	and.w	r3, r3, #8
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d005      	beq.n	80068d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068cc:	4b53      	ldr	r3, [pc, #332]	; (8006a1c <HAL_RCC_ClockConfig+0x1bc>)
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	4a52      	ldr	r2, [pc, #328]	; (8006a1c <HAL_RCC_ClockConfig+0x1bc>)
 80068d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80068d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068d8:	4b50      	ldr	r3, [pc, #320]	; (8006a1c <HAL_RCC_ClockConfig+0x1bc>)
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	494d      	ldr	r1, [pc, #308]	; (8006a1c <HAL_RCC_ClockConfig+0x1bc>)
 80068e6:	4313      	orrs	r3, r2
 80068e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d044      	beq.n	8006980 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d107      	bne.n	800690e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068fe:	4b47      	ldr	r3, [pc, #284]	; (8006a1c <HAL_RCC_ClockConfig+0x1bc>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d119      	bne.n	800693e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e07f      	b.n	8006a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	2b02      	cmp	r3, #2
 8006914:	d003      	beq.n	800691e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800691a:	2b03      	cmp	r3, #3
 800691c:	d107      	bne.n	800692e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800691e:	4b3f      	ldr	r3, [pc, #252]	; (8006a1c <HAL_RCC_ClockConfig+0x1bc>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006926:	2b00      	cmp	r3, #0
 8006928:	d109      	bne.n	800693e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e06f      	b.n	8006a0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800692e:	4b3b      	ldr	r3, [pc, #236]	; (8006a1c <HAL_RCC_ClockConfig+0x1bc>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0302 	and.w	r3, r3, #2
 8006936:	2b00      	cmp	r3, #0
 8006938:	d101      	bne.n	800693e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e067      	b.n	8006a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800693e:	4b37      	ldr	r3, [pc, #220]	; (8006a1c <HAL_RCC_ClockConfig+0x1bc>)
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	f023 0203 	bic.w	r2, r3, #3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	4934      	ldr	r1, [pc, #208]	; (8006a1c <HAL_RCC_ClockConfig+0x1bc>)
 800694c:	4313      	orrs	r3, r2
 800694e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006950:	f7fc ff50 	bl	80037f4 <HAL_GetTick>
 8006954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006956:	e00a      	b.n	800696e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006958:	f7fc ff4c 	bl	80037f4 <HAL_GetTick>
 800695c:	4602      	mov	r2, r0
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	f241 3288 	movw	r2, #5000	; 0x1388
 8006966:	4293      	cmp	r3, r2
 8006968:	d901      	bls.n	800696e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e04f      	b.n	8006a0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800696e:	4b2b      	ldr	r3, [pc, #172]	; (8006a1c <HAL_RCC_ClockConfig+0x1bc>)
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f003 020c 	and.w	r2, r3, #12
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	429a      	cmp	r2, r3
 800697e:	d1eb      	bne.n	8006958 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006980:	4b25      	ldr	r3, [pc, #148]	; (8006a18 <HAL_RCC_ClockConfig+0x1b8>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 030f 	and.w	r3, r3, #15
 8006988:	683a      	ldr	r2, [r7, #0]
 800698a:	429a      	cmp	r2, r3
 800698c:	d20c      	bcs.n	80069a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800698e:	4b22      	ldr	r3, [pc, #136]	; (8006a18 <HAL_RCC_ClockConfig+0x1b8>)
 8006990:	683a      	ldr	r2, [r7, #0]
 8006992:	b2d2      	uxtb	r2, r2
 8006994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006996:	4b20      	ldr	r3, [pc, #128]	; (8006a18 <HAL_RCC_ClockConfig+0x1b8>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 030f 	and.w	r3, r3, #15
 800699e:	683a      	ldr	r2, [r7, #0]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d001      	beq.n	80069a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e032      	b.n	8006a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0304 	and.w	r3, r3, #4
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d008      	beq.n	80069c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069b4:	4b19      	ldr	r3, [pc, #100]	; (8006a1c <HAL_RCC_ClockConfig+0x1bc>)
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	4916      	ldr	r1, [pc, #88]	; (8006a1c <HAL_RCC_ClockConfig+0x1bc>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 0308 	and.w	r3, r3, #8
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d009      	beq.n	80069e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069d2:	4b12      	ldr	r3, [pc, #72]	; (8006a1c <HAL_RCC_ClockConfig+0x1bc>)
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	00db      	lsls	r3, r3, #3
 80069e0:	490e      	ldr	r1, [pc, #56]	; (8006a1c <HAL_RCC_ClockConfig+0x1bc>)
 80069e2:	4313      	orrs	r3, r2
 80069e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80069e6:	f000 f821 	bl	8006a2c <HAL_RCC_GetSysClockFreq>
 80069ea:	4602      	mov	r2, r0
 80069ec:	4b0b      	ldr	r3, [pc, #44]	; (8006a1c <HAL_RCC_ClockConfig+0x1bc>)
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	091b      	lsrs	r3, r3, #4
 80069f2:	f003 030f 	and.w	r3, r3, #15
 80069f6:	490a      	ldr	r1, [pc, #40]	; (8006a20 <HAL_RCC_ClockConfig+0x1c0>)
 80069f8:	5ccb      	ldrb	r3, [r1, r3]
 80069fa:	fa22 f303 	lsr.w	r3, r2, r3
 80069fe:	4a09      	ldr	r2, [pc, #36]	; (8006a24 <HAL_RCC_ClockConfig+0x1c4>)
 8006a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006a02:	4b09      	ldr	r3, [pc, #36]	; (8006a28 <HAL_RCC_ClockConfig+0x1c8>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7fc feb0 	bl	800376c <HAL_InitTick>

  return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	40023c00 	.word	0x40023c00
 8006a1c:	40023800 	.word	0x40023800
 8006a20:	08010b90 	.word	0x08010b90
 8006a24:	20000000 	.word	0x20000000
 8006a28:	20000080 	.word	0x20000080

08006a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a30:	b094      	sub	sp, #80	; 0x50
 8006a32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006a34:	2300      	movs	r3, #0
 8006a36:	647b      	str	r3, [r7, #68]	; 0x44
 8006a38:	2300      	movs	r3, #0
 8006a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006a40:	2300      	movs	r3, #0
 8006a42:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a44:	4b79      	ldr	r3, [pc, #484]	; (8006c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	f003 030c 	and.w	r3, r3, #12
 8006a4c:	2b08      	cmp	r3, #8
 8006a4e:	d00d      	beq.n	8006a6c <HAL_RCC_GetSysClockFreq+0x40>
 8006a50:	2b08      	cmp	r3, #8
 8006a52:	f200 80e1 	bhi.w	8006c18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d002      	beq.n	8006a60 <HAL_RCC_GetSysClockFreq+0x34>
 8006a5a:	2b04      	cmp	r3, #4
 8006a5c:	d003      	beq.n	8006a66 <HAL_RCC_GetSysClockFreq+0x3a>
 8006a5e:	e0db      	b.n	8006c18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a60:	4b73      	ldr	r3, [pc, #460]	; (8006c30 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a62:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006a64:	e0db      	b.n	8006c1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a66:	4b73      	ldr	r3, [pc, #460]	; (8006c34 <HAL_RCC_GetSysClockFreq+0x208>)
 8006a68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a6a:	e0d8      	b.n	8006c1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a6c:	4b6f      	ldr	r3, [pc, #444]	; (8006c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a74:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a76:	4b6d      	ldr	r3, [pc, #436]	; (8006c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d063      	beq.n	8006b4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a82:	4b6a      	ldr	r3, [pc, #424]	; (8006c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	099b      	lsrs	r3, r3, #6
 8006a88:	2200      	movs	r2, #0
 8006a8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a94:	633b      	str	r3, [r7, #48]	; 0x30
 8006a96:	2300      	movs	r3, #0
 8006a98:	637b      	str	r3, [r7, #52]	; 0x34
 8006a9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006a9e:	4622      	mov	r2, r4
 8006aa0:	462b      	mov	r3, r5
 8006aa2:	f04f 0000 	mov.w	r0, #0
 8006aa6:	f04f 0100 	mov.w	r1, #0
 8006aaa:	0159      	lsls	r1, r3, #5
 8006aac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ab0:	0150      	lsls	r0, r2, #5
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	4621      	mov	r1, r4
 8006ab8:	1a51      	subs	r1, r2, r1
 8006aba:	6139      	str	r1, [r7, #16]
 8006abc:	4629      	mov	r1, r5
 8006abe:	eb63 0301 	sbc.w	r3, r3, r1
 8006ac2:	617b      	str	r3, [r7, #20]
 8006ac4:	f04f 0200 	mov.w	r2, #0
 8006ac8:	f04f 0300 	mov.w	r3, #0
 8006acc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ad0:	4659      	mov	r1, fp
 8006ad2:	018b      	lsls	r3, r1, #6
 8006ad4:	4651      	mov	r1, sl
 8006ad6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006ada:	4651      	mov	r1, sl
 8006adc:	018a      	lsls	r2, r1, #6
 8006ade:	4651      	mov	r1, sl
 8006ae0:	ebb2 0801 	subs.w	r8, r2, r1
 8006ae4:	4659      	mov	r1, fp
 8006ae6:	eb63 0901 	sbc.w	r9, r3, r1
 8006aea:	f04f 0200 	mov.w	r2, #0
 8006aee:	f04f 0300 	mov.w	r3, #0
 8006af2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006af6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006afa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006afe:	4690      	mov	r8, r2
 8006b00:	4699      	mov	r9, r3
 8006b02:	4623      	mov	r3, r4
 8006b04:	eb18 0303 	adds.w	r3, r8, r3
 8006b08:	60bb      	str	r3, [r7, #8]
 8006b0a:	462b      	mov	r3, r5
 8006b0c:	eb49 0303 	adc.w	r3, r9, r3
 8006b10:	60fb      	str	r3, [r7, #12]
 8006b12:	f04f 0200 	mov.w	r2, #0
 8006b16:	f04f 0300 	mov.w	r3, #0
 8006b1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006b1e:	4629      	mov	r1, r5
 8006b20:	024b      	lsls	r3, r1, #9
 8006b22:	4621      	mov	r1, r4
 8006b24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006b28:	4621      	mov	r1, r4
 8006b2a:	024a      	lsls	r2, r1, #9
 8006b2c:	4610      	mov	r0, r2
 8006b2e:	4619      	mov	r1, r3
 8006b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b32:	2200      	movs	r2, #0
 8006b34:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b3c:	f7fa f8b4 	bl	8000ca8 <__aeabi_uldivmod>
 8006b40:	4602      	mov	r2, r0
 8006b42:	460b      	mov	r3, r1
 8006b44:	4613      	mov	r3, r2
 8006b46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b48:	e058      	b.n	8006bfc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b4a:	4b38      	ldr	r3, [pc, #224]	; (8006c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	099b      	lsrs	r3, r3, #6
 8006b50:	2200      	movs	r2, #0
 8006b52:	4618      	mov	r0, r3
 8006b54:	4611      	mov	r1, r2
 8006b56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006b5a:	623b      	str	r3, [r7, #32]
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8006b60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006b64:	4642      	mov	r2, r8
 8006b66:	464b      	mov	r3, r9
 8006b68:	f04f 0000 	mov.w	r0, #0
 8006b6c:	f04f 0100 	mov.w	r1, #0
 8006b70:	0159      	lsls	r1, r3, #5
 8006b72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b76:	0150      	lsls	r0, r2, #5
 8006b78:	4602      	mov	r2, r0
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	4641      	mov	r1, r8
 8006b7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006b82:	4649      	mov	r1, r9
 8006b84:	eb63 0b01 	sbc.w	fp, r3, r1
 8006b88:	f04f 0200 	mov.w	r2, #0
 8006b8c:	f04f 0300 	mov.w	r3, #0
 8006b90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006b94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006b98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006b9c:	ebb2 040a 	subs.w	r4, r2, sl
 8006ba0:	eb63 050b 	sbc.w	r5, r3, fp
 8006ba4:	f04f 0200 	mov.w	r2, #0
 8006ba8:	f04f 0300 	mov.w	r3, #0
 8006bac:	00eb      	lsls	r3, r5, #3
 8006bae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006bb2:	00e2      	lsls	r2, r4, #3
 8006bb4:	4614      	mov	r4, r2
 8006bb6:	461d      	mov	r5, r3
 8006bb8:	4643      	mov	r3, r8
 8006bba:	18e3      	adds	r3, r4, r3
 8006bbc:	603b      	str	r3, [r7, #0]
 8006bbe:	464b      	mov	r3, r9
 8006bc0:	eb45 0303 	adc.w	r3, r5, r3
 8006bc4:	607b      	str	r3, [r7, #4]
 8006bc6:	f04f 0200 	mov.w	r2, #0
 8006bca:	f04f 0300 	mov.w	r3, #0
 8006bce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006bd2:	4629      	mov	r1, r5
 8006bd4:	028b      	lsls	r3, r1, #10
 8006bd6:	4621      	mov	r1, r4
 8006bd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006bdc:	4621      	mov	r1, r4
 8006bde:	028a      	lsls	r2, r1, #10
 8006be0:	4610      	mov	r0, r2
 8006be2:	4619      	mov	r1, r3
 8006be4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006be6:	2200      	movs	r2, #0
 8006be8:	61bb      	str	r3, [r7, #24]
 8006bea:	61fa      	str	r2, [r7, #28]
 8006bec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006bf0:	f7fa f85a 	bl	8000ca8 <__aeabi_uldivmod>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006bfc:	4b0b      	ldr	r3, [pc, #44]	; (8006c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	0c1b      	lsrs	r3, r3, #16
 8006c02:	f003 0303 	and.w	r3, r3, #3
 8006c06:	3301      	adds	r3, #1
 8006c08:	005b      	lsls	r3, r3, #1
 8006c0a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006c0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c16:	e002      	b.n	8006c1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c18:	4b05      	ldr	r3, [pc, #20]	; (8006c30 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3750      	adds	r7, #80	; 0x50
 8006c24:	46bd      	mov	sp, r7
 8006c26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c2a:	bf00      	nop
 8006c2c:	40023800 	.word	0x40023800
 8006c30:	00f42400 	.word	0x00f42400
 8006c34:	007a1200 	.word	0x007a1200

08006c38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c3c:	4b03      	ldr	r3, [pc, #12]	; (8006c4c <HAL_RCC_GetHCLKFreq+0x14>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	20000000 	.word	0x20000000

08006c50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b086      	sub	sp, #24
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0301 	and.w	r3, r3, #1
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d10b      	bne.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d105      	bne.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d075      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006c84:	4b91      	ldr	r3, [pc, #580]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006c86:	2200      	movs	r2, #0
 8006c88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c8a:	f7fc fdb3 	bl	80037f4 <HAL_GetTick>
 8006c8e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006c90:	e008      	b.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006c92:	f7fc fdaf 	bl	80037f4 <HAL_GetTick>
 8006c96:	4602      	mov	r2, r0
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d901      	bls.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e189      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ca4:	4b8a      	ldr	r3, [pc, #552]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1f0      	bne.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 0301 	and.w	r3, r3, #1
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d009      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	019a      	lsls	r2, r3, #6
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	071b      	lsls	r3, r3, #28
 8006cc8:	4981      	ldr	r1, [pc, #516]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0302 	and.w	r3, r3, #2
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d01f      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006cdc:	4b7c      	ldr	r3, [pc, #496]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006cde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ce2:	0f1b      	lsrs	r3, r3, #28
 8006ce4:	f003 0307 	and.w	r3, r3, #7
 8006ce8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	019a      	lsls	r2, r3, #6
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	061b      	lsls	r3, r3, #24
 8006cf6:	431a      	orrs	r2, r3
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	071b      	lsls	r3, r3, #28
 8006cfc:	4974      	ldr	r1, [pc, #464]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006d04:	4b72      	ldr	r3, [pc, #456]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d0a:	f023 021f 	bic.w	r2, r3, #31
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	69db      	ldr	r3, [r3, #28]
 8006d12:	3b01      	subs	r3, #1
 8006d14:	496e      	ldr	r1, [pc, #440]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d16:	4313      	orrs	r3, r2
 8006d18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00d      	beq.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	019a      	lsls	r2, r3, #6
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	061b      	lsls	r3, r3, #24
 8006d34:	431a      	orrs	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	071b      	lsls	r3, r3, #28
 8006d3c:	4964      	ldr	r1, [pc, #400]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006d44:	4b61      	ldr	r3, [pc, #388]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006d46:	2201      	movs	r2, #1
 8006d48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d4a:	f7fc fd53 	bl	80037f4 <HAL_GetTick>
 8006d4e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d50:	e008      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006d52:	f7fc fd4f 	bl	80037f4 <HAL_GetTick>
 8006d56:	4602      	mov	r2, r0
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d901      	bls.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e129      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d64:	4b5a      	ldr	r3, [pc, #360]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d0f0      	beq.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 0304 	and.w	r3, r3, #4
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d105      	bne.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d079      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006d88:	4b52      	ldr	r3, [pc, #328]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d8e:	f7fc fd31 	bl	80037f4 <HAL_GetTick>
 8006d92:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006d94:	e008      	b.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006d96:	f7fc fd2d 	bl	80037f4 <HAL_GetTick>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	1ad3      	subs	r3, r2, r3
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	d901      	bls.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006da4:	2303      	movs	r3, #3
 8006da6:	e107      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006da8:	4b49      	ldr	r3, [pc, #292]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006db0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006db4:	d0ef      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 0304 	and.w	r3, r3, #4
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d020      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006dc2:	4b43      	ldr	r3, [pc, #268]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dc8:	0f1b      	lsrs	r3, r3, #28
 8006dca:	f003 0307 	and.w	r3, r3, #7
 8006dce:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	019a      	lsls	r2, r3, #6
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	695b      	ldr	r3, [r3, #20]
 8006dda:	061b      	lsls	r3, r3, #24
 8006ddc:	431a      	orrs	r2, r3
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	071b      	lsls	r3, r3, #28
 8006de2:	493b      	ldr	r1, [pc, #236]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006de4:	4313      	orrs	r3, r2
 8006de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006dea:	4b39      	ldr	r3, [pc, #228]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006df0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a1b      	ldr	r3, [r3, #32]
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	021b      	lsls	r3, r3, #8
 8006dfc:	4934      	ldr	r1, [pc, #208]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 0308 	and.w	r3, r3, #8
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d01e      	beq.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006e10:	4b2f      	ldr	r3, [pc, #188]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e16:	0e1b      	lsrs	r3, r3, #24
 8006e18:	f003 030f 	and.w	r3, r3, #15
 8006e1c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	019a      	lsls	r2, r3, #6
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	061b      	lsls	r3, r3, #24
 8006e28:	431a      	orrs	r2, r3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	699b      	ldr	r3, [r3, #24]
 8006e2e:	071b      	lsls	r3, r3, #28
 8006e30:	4927      	ldr	r1, [pc, #156]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e32:	4313      	orrs	r3, r2
 8006e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006e38:	4b25      	ldr	r3, [pc, #148]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e46:	4922      	ldr	r1, [pc, #136]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006e4e:	4b21      	ldr	r3, [pc, #132]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006e50:	2201      	movs	r2, #1
 8006e52:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e54:	f7fc fcce 	bl	80037f4 <HAL_GetTick>
 8006e58:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006e5a:	e008      	b.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006e5c:	f7fc fcca 	bl	80037f4 <HAL_GetTick>
 8006e60:	4602      	mov	r2, r0
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d901      	bls.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e0a4      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006e6e:	4b18      	ldr	r3, [pc, #96]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e7a:	d1ef      	bne.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 0320 	and.w	r3, r3, #32
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	f000 808b 	beq.w	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	60fb      	str	r3, [r7, #12]
 8006e8e:	4b10      	ldr	r3, [pc, #64]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e92:	4a0f      	ldr	r2, [pc, #60]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e98:	6413      	str	r3, [r2, #64]	; 0x40
 8006e9a:	4b0d      	ldr	r3, [pc, #52]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ea2:	60fb      	str	r3, [r7, #12]
 8006ea4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006ea6:	4b0c      	ldr	r3, [pc, #48]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a0b      	ldr	r2, [pc, #44]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006eb0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006eb2:	f7fc fc9f 	bl	80037f4 <HAL_GetTick>
 8006eb6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006eb8:	e010      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006eba:	f7fc fc9b 	bl	80037f4 <HAL_GetTick>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d909      	bls.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	e075      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006ecc:	42470068 	.word	0x42470068
 8006ed0:	40023800 	.word	0x40023800
 8006ed4:	42470070 	.word	0x42470070
 8006ed8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006edc:	4b38      	ldr	r3, [pc, #224]	; (8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d0e8      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006ee8:	4b36      	ldr	r3, [pc, #216]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ef0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d02f      	beq.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006efc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d028      	beq.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006f06:	4b2f      	ldr	r3, [pc, #188]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f0e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006f10:	4b2d      	ldr	r3, [pc, #180]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006f12:	2201      	movs	r2, #1
 8006f14:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006f16:	4b2c      	ldr	r3, [pc, #176]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006f18:	2200      	movs	r2, #0
 8006f1a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006f1c:	4a29      	ldr	r2, [pc, #164]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006f22:	4b28      	ldr	r3, [pc, #160]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f26:	f003 0301 	and.w	r3, r3, #1
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d114      	bne.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006f2e:	f7fc fc61 	bl	80037f4 <HAL_GetTick>
 8006f32:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f34:	e00a      	b.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f36:	f7fc fc5d 	bl	80037f4 <HAL_GetTick>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d901      	bls.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e035      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f4c:	4b1d      	ldr	r3, [pc, #116]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f50:	f003 0302 	and.w	r3, r3, #2
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d0ee      	beq.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f64:	d10d      	bne.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006f66:	4b17      	ldr	r3, [pc, #92]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f72:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006f76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f7a:	4912      	ldr	r1, [pc, #72]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	608b      	str	r3, [r1, #8]
 8006f80:	e005      	b.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006f82:	4b10      	ldr	r3, [pc, #64]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	4a0f      	ldr	r2, [pc, #60]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f88:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006f8c:	6093      	str	r3, [r2, #8]
 8006f8e:	4b0d      	ldr	r3, [pc, #52]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f9a:	490a      	ldr	r1, [pc, #40]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 0310 	and.w	r3, r3, #16
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d004      	beq.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006fb2:	4b06      	ldr	r3, [pc, #24]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006fb4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006fb6:	2300      	movs	r3, #0
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3718      	adds	r7, #24
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	40007000 	.word	0x40007000
 8006fc4:	40023800 	.word	0x40023800
 8006fc8:	42470e40 	.word	0x42470e40
 8006fcc:	424711e0 	.word	0x424711e0

08006fd0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d101      	bne.n	8006fe4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e025      	b.n	8007030 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d106      	bne.n	8006ffe <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 f81d 	bl	8007038 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2202      	movs	r2, #2
 8007002:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	3304      	adds	r3, #4
 800700e:	4619      	mov	r1, r3
 8007010:	4610      	mov	r0, r2
 8007012:	f000 fe57 	bl	8007cc4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6818      	ldr	r0, [r3, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	461a      	mov	r2, r3
 8007020:	6839      	ldr	r1, [r7, #0]
 8007022:	f000 feac 	bl	8007d7e <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2201      	movs	r2, #1
 800702a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8007040:	bf00      	nop
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b086      	sub	sp, #24
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800705e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8007060:	7dfb      	ldrb	r3, [r7, #23]
 8007062:	2b02      	cmp	r3, #2
 8007064:	d101      	bne.n	800706a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8007066:	2302      	movs	r3, #2
 8007068:	e021      	b.n	80070ae <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800706a:	7dfb      	ldrb	r3, [r7, #23]
 800706c:	2b01      	cmp	r3, #1
 800706e:	d002      	beq.n	8007076 <HAL_SDRAM_SendCommand+0x2a>
 8007070:	7dfb      	ldrb	r3, [r7, #23]
 8007072:	2b05      	cmp	r3, #5
 8007074:	d118      	bne.n	80070a8 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2202      	movs	r2, #2
 800707a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	68b9      	ldr	r1, [r7, #8]
 8007086:	4618      	mov	r0, r3
 8007088:	f000 fee2 	bl	8007e50 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2b02      	cmp	r3, #2
 8007092:	d104      	bne.n	800709e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2205      	movs	r2, #5
 8007098:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800709c:	e006      	b.n	80070ac <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2201      	movs	r2, #1
 80070a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80070a6:	e001      	b.n	80070ac <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	e000      	b.n	80070ae <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3718      	adds	r7, #24
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b082      	sub	sp, #8
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
 80070be:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d101      	bne.n	80070d0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80070cc:	2302      	movs	r3, #2
 80070ce:	e016      	b.n	80070fe <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d10f      	bne.n	80070fc <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2202      	movs	r2, #2
 80070e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	6839      	ldr	r1, [r7, #0]
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 feed 	bl	8007eca <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
 80070fa:	e000      	b.n	80070fe <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3708      	adds	r7, #8
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}

08007106 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007106:	b580      	push	{r7, lr}
 8007108:	b082      	sub	sp, #8
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d101      	bne.n	8007118 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	e07b      	b.n	8007210 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711c:	2b00      	cmp	r3, #0
 800711e:	d108      	bne.n	8007132 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007128:	d009      	beq.n	800713e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	61da      	str	r2, [r3, #28]
 8007130:	e005      	b.n	800713e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800714a:	b2db      	uxtb	r3, r3
 800714c:	2b00      	cmp	r3, #0
 800714e:	d106      	bne.n	800715e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f7fa f95d 	bl	8001418 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2202      	movs	r2, #2
 8007162:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007174:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007186:	431a      	orrs	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007190:	431a      	orrs	r2, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	f003 0302 	and.w	r3, r3, #2
 800719a:	431a      	orrs	r2, r3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	695b      	ldr	r3, [r3, #20]
 80071a0:	f003 0301 	and.w	r3, r3, #1
 80071a4:	431a      	orrs	r2, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071ae:	431a      	orrs	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	69db      	ldr	r3, [r3, #28]
 80071b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80071b8:	431a      	orrs	r2, r3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a1b      	ldr	r3, [r3, #32]
 80071be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071c2:	ea42 0103 	orr.w	r1, r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	430a      	orrs	r2, r1
 80071d4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	0c1b      	lsrs	r3, r3, #16
 80071dc:	f003 0104 	and.w	r1, r3, #4
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e4:	f003 0210 	and.w	r2, r3, #16
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	430a      	orrs	r2, r1
 80071ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	69da      	ldr	r2, [r3, #28]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3708      	adds	r7, #8
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d101      	bne.n	800722a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e01a      	b.n	8007260 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2202      	movs	r2, #2
 800722e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007240:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f7fa f930 	bl	80014a8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	3708      	adds	r7, #8
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b088      	sub	sp, #32
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	603b      	str	r3, [r7, #0]
 8007274:	4613      	mov	r3, r2
 8007276:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007278:	2300      	movs	r3, #0
 800727a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007282:	2b01      	cmp	r3, #1
 8007284:	d101      	bne.n	800728a <HAL_SPI_Transmit+0x22>
 8007286:	2302      	movs	r3, #2
 8007288:	e126      	b.n	80074d8 <HAL_SPI_Transmit+0x270>
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2201      	movs	r2, #1
 800728e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007292:	f7fc faaf 	bl	80037f4 <HAL_GetTick>
 8007296:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007298:	88fb      	ldrh	r3, [r7, #6]
 800729a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d002      	beq.n	80072ae <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80072a8:	2302      	movs	r3, #2
 80072aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80072ac:	e10b      	b.n	80074c6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d002      	beq.n	80072ba <HAL_SPI_Transmit+0x52>
 80072b4:	88fb      	ldrh	r3, [r7, #6]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d102      	bne.n	80072c0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80072be:	e102      	b.n	80074c6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2203      	movs	r2, #3
 80072c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2200      	movs	r2, #0
 80072cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	88fa      	ldrh	r2, [r7, #6]
 80072d8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	88fa      	ldrh	r2, [r7, #6]
 80072de:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2200      	movs	r2, #0
 80072e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2200      	movs	r2, #0
 80072f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2200      	movs	r2, #0
 80072f6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2200      	movs	r2, #0
 80072fc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007306:	d10f      	bne.n	8007328 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007316:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007326:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007332:	2b40      	cmp	r3, #64	; 0x40
 8007334:	d007      	beq.n	8007346 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007344:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800734e:	d14b      	bne.n	80073e8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d002      	beq.n	800735e <HAL_SPI_Transmit+0xf6>
 8007358:	8afb      	ldrh	r3, [r7, #22]
 800735a:	2b01      	cmp	r3, #1
 800735c:	d13e      	bne.n	80073dc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007362:	881a      	ldrh	r2, [r3, #0]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800736e:	1c9a      	adds	r2, r3, #2
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007378:	b29b      	uxth	r3, r3
 800737a:	3b01      	subs	r3, #1
 800737c:	b29a      	uxth	r2, r3
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007382:	e02b      	b.n	80073dc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	f003 0302 	and.w	r3, r3, #2
 800738e:	2b02      	cmp	r3, #2
 8007390:	d112      	bne.n	80073b8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007396:	881a      	ldrh	r2, [r3, #0]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a2:	1c9a      	adds	r2, r3, #2
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	3b01      	subs	r3, #1
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	86da      	strh	r2, [r3, #54]	; 0x36
 80073b6:	e011      	b.n	80073dc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073b8:	f7fc fa1c 	bl	80037f4 <HAL_GetTick>
 80073bc:	4602      	mov	r2, r0
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	683a      	ldr	r2, [r7, #0]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d803      	bhi.n	80073d0 <HAL_SPI_Transmit+0x168>
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ce:	d102      	bne.n	80073d6 <HAL_SPI_Transmit+0x16e>
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d102      	bne.n	80073dc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80073d6:	2303      	movs	r3, #3
 80073d8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80073da:	e074      	b.n	80074c6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1ce      	bne.n	8007384 <HAL_SPI_Transmit+0x11c>
 80073e6:	e04c      	b.n	8007482 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d002      	beq.n	80073f6 <HAL_SPI_Transmit+0x18e>
 80073f0:	8afb      	ldrh	r3, [r7, #22]
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d140      	bne.n	8007478 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	330c      	adds	r3, #12
 8007400:	7812      	ldrb	r2, [r2, #0]
 8007402:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007408:	1c5a      	adds	r2, r3, #1
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007412:	b29b      	uxth	r3, r3
 8007414:	3b01      	subs	r3, #1
 8007416:	b29a      	uxth	r2, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800741c:	e02c      	b.n	8007478 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	f003 0302 	and.w	r3, r3, #2
 8007428:	2b02      	cmp	r3, #2
 800742a:	d113      	bne.n	8007454 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	330c      	adds	r3, #12
 8007436:	7812      	ldrb	r2, [r2, #0]
 8007438:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800743e:	1c5a      	adds	r2, r3, #1
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007448:	b29b      	uxth	r3, r3
 800744a:	3b01      	subs	r3, #1
 800744c:	b29a      	uxth	r2, r3
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	86da      	strh	r2, [r3, #54]	; 0x36
 8007452:	e011      	b.n	8007478 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007454:	f7fc f9ce 	bl	80037f4 <HAL_GetTick>
 8007458:	4602      	mov	r2, r0
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	1ad3      	subs	r3, r2, r3
 800745e:	683a      	ldr	r2, [r7, #0]
 8007460:	429a      	cmp	r2, r3
 8007462:	d803      	bhi.n	800746c <HAL_SPI_Transmit+0x204>
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800746a:	d102      	bne.n	8007472 <HAL_SPI_Transmit+0x20a>
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d102      	bne.n	8007478 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007472:	2303      	movs	r3, #3
 8007474:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007476:	e026      	b.n	80074c6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800747c:	b29b      	uxth	r3, r3
 800747e:	2b00      	cmp	r3, #0
 8007480:	d1cd      	bne.n	800741e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007482:	69ba      	ldr	r2, [r7, #24]
 8007484:	6839      	ldr	r1, [r7, #0]
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f000 fbda 	bl	8007c40 <SPI_EndRxTxTransaction>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d002      	beq.n	8007498 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2220      	movs	r2, #32
 8007496:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10a      	bne.n	80074b6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074a0:	2300      	movs	r3, #0
 80074a2:	613b      	str	r3, [r7, #16]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	613b      	str	r3, [r7, #16]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	613b      	str	r3, [r7, #16]
 80074b4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d002      	beq.n	80074c4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	77fb      	strb	r3, [r7, #31]
 80074c2:	e000      	b.n	80074c6 <HAL_SPI_Transmit+0x25e>
  }

error:
 80074c4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80074d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3720      	adds	r7, #32
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b088      	sub	sp, #32
 80074e4:	af02      	add	r7, sp, #8
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	603b      	str	r3, [r7, #0]
 80074ec:	4613      	mov	r3, r2
 80074ee:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80074f0:	2300      	movs	r3, #0
 80074f2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074fc:	d112      	bne.n	8007524 <HAL_SPI_Receive+0x44>
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d10e      	bne.n	8007524 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2204      	movs	r2, #4
 800750a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800750e:	88fa      	ldrh	r2, [r7, #6]
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	9300      	str	r3, [sp, #0]
 8007514:	4613      	mov	r3, r2
 8007516:	68ba      	ldr	r2, [r7, #8]
 8007518:	68b9      	ldr	r1, [r7, #8]
 800751a:	68f8      	ldr	r0, [r7, #12]
 800751c:	f000 f8f1 	bl	8007702 <HAL_SPI_TransmitReceive>
 8007520:	4603      	mov	r3, r0
 8007522:	e0ea      	b.n	80076fa <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800752a:	2b01      	cmp	r3, #1
 800752c:	d101      	bne.n	8007532 <HAL_SPI_Receive+0x52>
 800752e:	2302      	movs	r3, #2
 8007530:	e0e3      	b.n	80076fa <HAL_SPI_Receive+0x21a>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2201      	movs	r2, #1
 8007536:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800753a:	f7fc f95b 	bl	80037f4 <HAL_GetTick>
 800753e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007546:	b2db      	uxtb	r3, r3
 8007548:	2b01      	cmp	r3, #1
 800754a:	d002      	beq.n	8007552 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800754c:	2302      	movs	r3, #2
 800754e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007550:	e0ca      	b.n	80076e8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d002      	beq.n	800755e <HAL_SPI_Receive+0x7e>
 8007558:	88fb      	ldrh	r3, [r7, #6]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d102      	bne.n	8007564 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007562:	e0c1      	b.n	80076e8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2204      	movs	r2, #4
 8007568:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2200      	movs	r2, #0
 8007570:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	68ba      	ldr	r2, [r7, #8]
 8007576:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	88fa      	ldrh	r2, [r7, #6]
 800757c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	88fa      	ldrh	r2, [r7, #6]
 8007582:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2200      	movs	r2, #0
 8007594:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2200      	movs	r2, #0
 800759a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075aa:	d10f      	bne.n	80075cc <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80075ca:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d6:	2b40      	cmp	r3, #64	; 0x40
 80075d8:	d007      	beq.n	80075ea <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075e8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d162      	bne.n	80076b8 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80075f2:	e02e      	b.n	8007652 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	f003 0301 	and.w	r3, r3, #1
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d115      	bne.n	800762e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f103 020c 	add.w	r2, r3, #12
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800760e:	7812      	ldrb	r2, [r2, #0]
 8007610:	b2d2      	uxtb	r2, r2
 8007612:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007618:	1c5a      	adds	r2, r3, #1
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007622:	b29b      	uxth	r3, r3
 8007624:	3b01      	subs	r3, #1
 8007626:	b29a      	uxth	r2, r3
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800762c:	e011      	b.n	8007652 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800762e:	f7fc f8e1 	bl	80037f4 <HAL_GetTick>
 8007632:	4602      	mov	r2, r0
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	1ad3      	subs	r3, r2, r3
 8007638:	683a      	ldr	r2, [r7, #0]
 800763a:	429a      	cmp	r2, r3
 800763c:	d803      	bhi.n	8007646 <HAL_SPI_Receive+0x166>
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007644:	d102      	bne.n	800764c <HAL_SPI_Receive+0x16c>
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d102      	bne.n	8007652 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007650:	e04a      	b.n	80076e8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007656:	b29b      	uxth	r3, r3
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1cb      	bne.n	80075f4 <HAL_SPI_Receive+0x114>
 800765c:	e031      	b.n	80076c2 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	f003 0301 	and.w	r3, r3, #1
 8007668:	2b01      	cmp	r3, #1
 800766a:	d113      	bne.n	8007694 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68da      	ldr	r2, [r3, #12]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007676:	b292      	uxth	r2, r2
 8007678:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767e:	1c9a      	adds	r2, r3, #2
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007688:	b29b      	uxth	r3, r3
 800768a:	3b01      	subs	r3, #1
 800768c:	b29a      	uxth	r2, r3
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007692:	e011      	b.n	80076b8 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007694:	f7fc f8ae 	bl	80037f4 <HAL_GetTick>
 8007698:	4602      	mov	r2, r0
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	683a      	ldr	r2, [r7, #0]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d803      	bhi.n	80076ac <HAL_SPI_Receive+0x1cc>
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076aa:	d102      	bne.n	80076b2 <HAL_SPI_Receive+0x1d2>
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d102      	bne.n	80076b8 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80076b2:	2303      	movs	r3, #3
 80076b4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80076b6:	e017      	b.n	80076e8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076bc:	b29b      	uxth	r3, r3
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1cd      	bne.n	800765e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076c2:	693a      	ldr	r2, [r7, #16]
 80076c4:	6839      	ldr	r1, [r7, #0]
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	f000 fa54 	bl	8007b74 <SPI_EndRxTransaction>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d002      	beq.n	80076d8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2220      	movs	r2, #32
 80076d6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d002      	beq.n	80076e6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	75fb      	strb	r3, [r7, #23]
 80076e4:	e000      	b.n	80076e8 <HAL_SPI_Receive+0x208>
  }

error :
 80076e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80076f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3718      	adds	r7, #24
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007702:	b580      	push	{r7, lr}
 8007704:	b08c      	sub	sp, #48	; 0x30
 8007706:	af00      	add	r7, sp, #0
 8007708:	60f8      	str	r0, [r7, #12]
 800770a:	60b9      	str	r1, [r7, #8]
 800770c:	607a      	str	r2, [r7, #4]
 800770e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007710:	2301      	movs	r3, #1
 8007712:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007714:	2300      	movs	r3, #0
 8007716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007720:	2b01      	cmp	r3, #1
 8007722:	d101      	bne.n	8007728 <HAL_SPI_TransmitReceive+0x26>
 8007724:	2302      	movs	r3, #2
 8007726:	e18a      	b.n	8007a3e <HAL_SPI_TransmitReceive+0x33c>
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007730:	f7fc f860 	bl	80037f4 <HAL_GetTick>
 8007734:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800773c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007746:	887b      	ldrh	r3, [r7, #2]
 8007748:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800774a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800774e:	2b01      	cmp	r3, #1
 8007750:	d00f      	beq.n	8007772 <HAL_SPI_TransmitReceive+0x70>
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007758:	d107      	bne.n	800776a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d103      	bne.n	800776a <HAL_SPI_TransmitReceive+0x68>
 8007762:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007766:	2b04      	cmp	r3, #4
 8007768:	d003      	beq.n	8007772 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800776a:	2302      	movs	r3, #2
 800776c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007770:	e15b      	b.n	8007a2a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d005      	beq.n	8007784 <HAL_SPI_TransmitReceive+0x82>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d002      	beq.n	8007784 <HAL_SPI_TransmitReceive+0x82>
 800777e:	887b      	ldrh	r3, [r7, #2]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d103      	bne.n	800778c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800778a:	e14e      	b.n	8007a2a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007792:	b2db      	uxtb	r3, r3
 8007794:	2b04      	cmp	r3, #4
 8007796:	d003      	beq.n	80077a0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2205      	movs	r2, #5
 800779c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	887a      	ldrh	r2, [r7, #2]
 80077b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	887a      	ldrh	r2, [r7, #2]
 80077b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	68ba      	ldr	r2, [r7, #8]
 80077bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	887a      	ldrh	r2, [r7, #2]
 80077c2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	887a      	ldrh	r2, [r7, #2]
 80077c8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2200      	movs	r2, #0
 80077ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2200      	movs	r2, #0
 80077d4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e0:	2b40      	cmp	r3, #64	; 0x40
 80077e2:	d007      	beq.n	80077f4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077fc:	d178      	bne.n	80078f0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d002      	beq.n	800780c <HAL_SPI_TransmitReceive+0x10a>
 8007806:	8b7b      	ldrh	r3, [r7, #26]
 8007808:	2b01      	cmp	r3, #1
 800780a:	d166      	bne.n	80078da <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007810:	881a      	ldrh	r2, [r3, #0]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800781c:	1c9a      	adds	r2, r3, #2
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007826:	b29b      	uxth	r3, r3
 8007828:	3b01      	subs	r3, #1
 800782a:	b29a      	uxth	r2, r3
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007830:	e053      	b.n	80078da <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	f003 0302 	and.w	r3, r3, #2
 800783c:	2b02      	cmp	r3, #2
 800783e:	d11b      	bne.n	8007878 <HAL_SPI_TransmitReceive+0x176>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007844:	b29b      	uxth	r3, r3
 8007846:	2b00      	cmp	r3, #0
 8007848:	d016      	beq.n	8007878 <HAL_SPI_TransmitReceive+0x176>
 800784a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784c:	2b01      	cmp	r3, #1
 800784e:	d113      	bne.n	8007878 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007854:	881a      	ldrh	r2, [r3, #0]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007860:	1c9a      	adds	r2, r3, #2
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800786a:	b29b      	uxth	r3, r3
 800786c:	3b01      	subs	r3, #1
 800786e:	b29a      	uxth	r2, r3
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007874:	2300      	movs	r3, #0
 8007876:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f003 0301 	and.w	r3, r3, #1
 8007882:	2b01      	cmp	r3, #1
 8007884:	d119      	bne.n	80078ba <HAL_SPI_TransmitReceive+0x1b8>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800788a:	b29b      	uxth	r3, r3
 800788c:	2b00      	cmp	r3, #0
 800788e:	d014      	beq.n	80078ba <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	68da      	ldr	r2, [r3, #12]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789a:	b292      	uxth	r2, r2
 800789c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a2:	1c9a      	adds	r2, r3, #2
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	3b01      	subs	r3, #1
 80078b0:	b29a      	uxth	r2, r3
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80078b6:	2301      	movs	r3, #1
 80078b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80078ba:	f7fb ff9b 	bl	80037f4 <HAL_GetTick>
 80078be:	4602      	mov	r2, r0
 80078c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c2:	1ad3      	subs	r3, r2, r3
 80078c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d807      	bhi.n	80078da <HAL_SPI_TransmitReceive+0x1d8>
 80078ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d0:	d003      	beq.n	80078da <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80078d2:	2303      	movs	r3, #3
 80078d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80078d8:	e0a7      	b.n	8007a2a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078de:	b29b      	uxth	r3, r3
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d1a6      	bne.n	8007832 <HAL_SPI_TransmitReceive+0x130>
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d1a1      	bne.n	8007832 <HAL_SPI_TransmitReceive+0x130>
 80078ee:	e07c      	b.n	80079ea <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d002      	beq.n	80078fe <HAL_SPI_TransmitReceive+0x1fc>
 80078f8:	8b7b      	ldrh	r3, [r7, #26]
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d16b      	bne.n	80079d6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	330c      	adds	r3, #12
 8007908:	7812      	ldrb	r2, [r2, #0]
 800790a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007910:	1c5a      	adds	r2, r3, #1
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800791a:	b29b      	uxth	r3, r3
 800791c:	3b01      	subs	r3, #1
 800791e:	b29a      	uxth	r2, r3
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007924:	e057      	b.n	80079d6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	f003 0302 	and.w	r3, r3, #2
 8007930:	2b02      	cmp	r3, #2
 8007932:	d11c      	bne.n	800796e <HAL_SPI_TransmitReceive+0x26c>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007938:	b29b      	uxth	r3, r3
 800793a:	2b00      	cmp	r3, #0
 800793c:	d017      	beq.n	800796e <HAL_SPI_TransmitReceive+0x26c>
 800793e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007940:	2b01      	cmp	r3, #1
 8007942:	d114      	bne.n	800796e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	330c      	adds	r3, #12
 800794e:	7812      	ldrb	r2, [r2, #0]
 8007950:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007956:	1c5a      	adds	r2, r3, #1
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007960:	b29b      	uxth	r3, r3
 8007962:	3b01      	subs	r3, #1
 8007964:	b29a      	uxth	r2, r3
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800796a:	2300      	movs	r3, #0
 800796c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	f003 0301 	and.w	r3, r3, #1
 8007978:	2b01      	cmp	r3, #1
 800797a:	d119      	bne.n	80079b0 <HAL_SPI_TransmitReceive+0x2ae>
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007980:	b29b      	uxth	r3, r3
 8007982:	2b00      	cmp	r3, #0
 8007984:	d014      	beq.n	80079b0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68da      	ldr	r2, [r3, #12]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007990:	b2d2      	uxtb	r2, r2
 8007992:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007998:	1c5a      	adds	r2, r3, #1
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	3b01      	subs	r3, #1
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80079ac:	2301      	movs	r3, #1
 80079ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80079b0:	f7fb ff20 	bl	80037f4 <HAL_GetTick>
 80079b4:	4602      	mov	r2, r0
 80079b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b8:	1ad3      	subs	r3, r2, r3
 80079ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079bc:	429a      	cmp	r2, r3
 80079be:	d803      	bhi.n	80079c8 <HAL_SPI_TransmitReceive+0x2c6>
 80079c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c6:	d102      	bne.n	80079ce <HAL_SPI_TransmitReceive+0x2cc>
 80079c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d103      	bne.n	80079d6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80079ce:	2303      	movs	r3, #3
 80079d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80079d4:	e029      	b.n	8007a2a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079da:	b29b      	uxth	r3, r3
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d1a2      	bne.n	8007926 <HAL_SPI_TransmitReceive+0x224>
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d19d      	bne.n	8007926 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80079ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80079ee:	68f8      	ldr	r0, [r7, #12]
 80079f0:	f000 f926 	bl	8007c40 <SPI_EndRxTxTransaction>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d006      	beq.n	8007a08 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2220      	movs	r2, #32
 8007a04:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007a06:	e010      	b.n	8007a2a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d10b      	bne.n	8007a28 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a10:	2300      	movs	r3, #0
 8007a12:	617b      	str	r3, [r7, #20]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	617b      	str	r3, [r7, #20]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	617b      	str	r3, [r7, #20]
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	e000      	b.n	8007a2a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007a28:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007a3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3730      	adds	r7, #48	; 0x30
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007a46:	b480      	push	{r7}
 8007a48:	b083      	sub	sp, #12
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a54:	b2db      	uxtb	r3, r3
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	370c      	adds	r7, #12
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
	...

08007a64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b088      	sub	sp, #32
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	603b      	str	r3, [r7, #0]
 8007a70:	4613      	mov	r3, r2
 8007a72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007a74:	f7fb febe 	bl	80037f4 <HAL_GetTick>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a7c:	1a9b      	subs	r3, r3, r2
 8007a7e:	683a      	ldr	r2, [r7, #0]
 8007a80:	4413      	add	r3, r2
 8007a82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007a84:	f7fb feb6 	bl	80037f4 <HAL_GetTick>
 8007a88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007a8a:	4b39      	ldr	r3, [pc, #228]	; (8007b70 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	015b      	lsls	r3, r3, #5
 8007a90:	0d1b      	lsrs	r3, r3, #20
 8007a92:	69fa      	ldr	r2, [r7, #28]
 8007a94:	fb02 f303 	mul.w	r3, r2, r3
 8007a98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a9a:	e054      	b.n	8007b46 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa2:	d050      	beq.n	8007b46 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007aa4:	f7fb fea6 	bl	80037f4 <HAL_GetTick>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	69fa      	ldr	r2, [r7, #28]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d902      	bls.n	8007aba <SPI_WaitFlagStateUntilTimeout+0x56>
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d13d      	bne.n	8007b36 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	685a      	ldr	r2, [r3, #4]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007ac8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ad2:	d111      	bne.n	8007af8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007adc:	d004      	beq.n	8007ae8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ae6:	d107      	bne.n	8007af8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007af6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007afc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b00:	d10f      	bne.n	8007b22 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b10:	601a      	str	r2, [r3, #0]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2201      	movs	r2, #1
 8007b26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007b32:	2303      	movs	r3, #3
 8007b34:	e017      	b.n	8007b66 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d101      	bne.n	8007b40 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	3b01      	subs	r3, #1
 8007b44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	689a      	ldr	r2, [r3, #8]
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	4013      	ands	r3, r2
 8007b50:	68ba      	ldr	r2, [r7, #8]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	bf0c      	ite	eq
 8007b56:	2301      	moveq	r3, #1
 8007b58:	2300      	movne	r3, #0
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	79fb      	ldrb	r3, [r7, #7]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d19b      	bne.n	8007a9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3720      	adds	r7, #32
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	20000000 	.word	0x20000000

08007b74 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b086      	sub	sp, #24
 8007b78:	af02      	add	r7, sp, #8
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b88:	d111      	bne.n	8007bae <SPI_EndRxTransaction+0x3a>
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b92:	d004      	beq.n	8007b9e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b9c:	d107      	bne.n	8007bae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bac:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bb6:	d12a      	bne.n	8007c0e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bc0:	d012      	beq.n	8007be8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	9300      	str	r3, [sp, #0]
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	2180      	movs	r1, #128	; 0x80
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f7ff ff49 	bl	8007a64 <SPI_WaitFlagStateUntilTimeout>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d02d      	beq.n	8007c34 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bdc:	f043 0220 	orr.w	r2, r3, #32
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007be4:	2303      	movs	r3, #3
 8007be6:	e026      	b.n	8007c36 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	9300      	str	r3, [sp, #0]
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	2101      	movs	r1, #1
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f7ff ff36 	bl	8007a64 <SPI_WaitFlagStateUntilTimeout>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d01a      	beq.n	8007c34 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c02:	f043 0220 	orr.w	r2, r3, #32
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	e013      	b.n	8007c36 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	9300      	str	r3, [sp, #0]
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	2200      	movs	r2, #0
 8007c16:	2101      	movs	r1, #1
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	f7ff ff23 	bl	8007a64 <SPI_WaitFlagStateUntilTimeout>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d007      	beq.n	8007c34 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c28:	f043 0220 	orr.w	r2, r3, #32
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007c30:	2303      	movs	r3, #3
 8007c32:	e000      	b.n	8007c36 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3710      	adds	r7, #16
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
	...

08007c40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b088      	sub	sp, #32
 8007c44:	af02      	add	r7, sp, #8
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007c4c:	4b1b      	ldr	r3, [pc, #108]	; (8007cbc <SPI_EndRxTxTransaction+0x7c>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a1b      	ldr	r2, [pc, #108]	; (8007cc0 <SPI_EndRxTxTransaction+0x80>)
 8007c52:	fba2 2303 	umull	r2, r3, r2, r3
 8007c56:	0d5b      	lsrs	r3, r3, #21
 8007c58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c5c:	fb02 f303 	mul.w	r3, r2, r3
 8007c60:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c6a:	d112      	bne.n	8007c92 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	9300      	str	r3, [sp, #0]
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	2200      	movs	r2, #0
 8007c74:	2180      	movs	r1, #128	; 0x80
 8007c76:	68f8      	ldr	r0, [r7, #12]
 8007c78:	f7ff fef4 	bl	8007a64 <SPI_WaitFlagStateUntilTimeout>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d016      	beq.n	8007cb0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c86:	f043 0220 	orr.w	r2, r3, #32
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007c8e:	2303      	movs	r3, #3
 8007c90:	e00f      	b.n	8007cb2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00a      	beq.n	8007cae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ca8:	2b80      	cmp	r3, #128	; 0x80
 8007caa:	d0f2      	beq.n	8007c92 <SPI_EndRxTxTransaction+0x52>
 8007cac:	e000      	b.n	8007cb0 <SPI_EndRxTxTransaction+0x70>
        break;
 8007cae:	bf00      	nop
  }

  return HAL_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3718      	adds	r7, #24
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	20000000 	.word	0x20000000
 8007cc0:	165e9f81 	.word	0x165e9f81

08007cc4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d123      	bne.n	8007d1e <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007cde:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ce2:	683a      	ldr	r2, [r7, #0]
 8007ce4:	6851      	ldr	r1, [r2, #4]
 8007ce6:	683a      	ldr	r2, [r7, #0]
 8007ce8:	6892      	ldr	r2, [r2, #8]
 8007cea:	4311      	orrs	r1, r2
 8007cec:	683a      	ldr	r2, [r7, #0]
 8007cee:	68d2      	ldr	r2, [r2, #12]
 8007cf0:	4311      	orrs	r1, r2
 8007cf2:	683a      	ldr	r2, [r7, #0]
 8007cf4:	6912      	ldr	r2, [r2, #16]
 8007cf6:	4311      	orrs	r1, r2
 8007cf8:	683a      	ldr	r2, [r7, #0]
 8007cfa:	6952      	ldr	r2, [r2, #20]
 8007cfc:	4311      	orrs	r1, r2
 8007cfe:	683a      	ldr	r2, [r7, #0]
 8007d00:	6992      	ldr	r2, [r2, #24]
 8007d02:	4311      	orrs	r1, r2
 8007d04:	683a      	ldr	r2, [r7, #0]
 8007d06:	69d2      	ldr	r2, [r2, #28]
 8007d08:	4311      	orrs	r1, r2
 8007d0a:	683a      	ldr	r2, [r7, #0]
 8007d0c:	6a12      	ldr	r2, [r2, #32]
 8007d0e:	4311      	orrs	r1, r2
 8007d10:	683a      	ldr	r2, [r7, #0]
 8007d12:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007d14:	430a      	orrs	r2, r1
 8007d16:	431a      	orrs	r2, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	601a      	str	r2, [r3, #0]
 8007d1c:	e028      	b.n	8007d70 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	69d9      	ldr	r1, [r3, #28]
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	6a1b      	ldr	r3, [r3, #32]
 8007d2e:	4319      	orrs	r1, r3
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d34:	430b      	orrs	r3, r1
 8007d36:	431a      	orrs	r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007d44:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d48:	683a      	ldr	r2, [r7, #0]
 8007d4a:	6851      	ldr	r1, [r2, #4]
 8007d4c:	683a      	ldr	r2, [r7, #0]
 8007d4e:	6892      	ldr	r2, [r2, #8]
 8007d50:	4311      	orrs	r1, r2
 8007d52:	683a      	ldr	r2, [r7, #0]
 8007d54:	68d2      	ldr	r2, [r2, #12]
 8007d56:	4311      	orrs	r1, r2
 8007d58:	683a      	ldr	r2, [r7, #0]
 8007d5a:	6912      	ldr	r2, [r2, #16]
 8007d5c:	4311      	orrs	r1, r2
 8007d5e:	683a      	ldr	r2, [r7, #0]
 8007d60:	6952      	ldr	r2, [r2, #20]
 8007d62:	4311      	orrs	r1, r2
 8007d64:	683a      	ldr	r2, [r7, #0]
 8007d66:	6992      	ldr	r2, [r2, #24]
 8007d68:	430a      	orrs	r2, r1
 8007d6a:	431a      	orrs	r2, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	370c      	adds	r7, #12
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr

08007d7e <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007d7e:	b480      	push	{r7}
 8007d80:	b085      	sub	sp, #20
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	60f8      	str	r0, [r7, #12]
 8007d86:	60b9      	str	r1, [r7, #8]
 8007d88:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d128      	bne.n	8007de2 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	1e59      	subs	r1, r3, #1
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	3b01      	subs	r3, #1
 8007da4:	011b      	lsls	r3, r3, #4
 8007da6:	4319      	orrs	r1, r3
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	3b01      	subs	r3, #1
 8007dae:	021b      	lsls	r3, r3, #8
 8007db0:	4319      	orrs	r1, r3
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	3b01      	subs	r3, #1
 8007db8:	031b      	lsls	r3, r3, #12
 8007dba:	4319      	orrs	r1, r3
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	041b      	lsls	r3, r3, #16
 8007dc4:	4319      	orrs	r1, r3
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	695b      	ldr	r3, [r3, #20]
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	051b      	lsls	r3, r3, #20
 8007dce:	4319      	orrs	r1, r3
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	699b      	ldr	r3, [r3, #24]
 8007dd4:	3b01      	subs	r3, #1
 8007dd6:	061b      	lsls	r3, r3, #24
 8007dd8:	430b      	orrs	r3, r1
 8007dda:	431a      	orrs	r2, r3
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	609a      	str	r2, [r3, #8]
 8007de0:	e02f      	b.n	8007e42 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007dea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007dee:	68ba      	ldr	r2, [r7, #8]
 8007df0:	68d2      	ldr	r2, [r2, #12]
 8007df2:	3a01      	subs	r2, #1
 8007df4:	0311      	lsls	r1, r2, #12
 8007df6:	68ba      	ldr	r2, [r7, #8]
 8007df8:	6952      	ldr	r2, [r2, #20]
 8007dfa:	3a01      	subs	r2, #1
 8007dfc:	0512      	lsls	r2, r2, #20
 8007dfe:	430a      	orrs	r2, r1
 8007e00:	431a      	orrs	r2, r3
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	1e59      	subs	r1, r3, #1
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	011b      	lsls	r3, r3, #4
 8007e1c:	4319      	orrs	r1, r3
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	3b01      	subs	r3, #1
 8007e24:	021b      	lsls	r3, r3, #8
 8007e26:	4319      	orrs	r1, r3
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	691b      	ldr	r3, [r3, #16]
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	041b      	lsls	r3, r3, #16
 8007e30:	4319      	orrs	r1, r3
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	699b      	ldr	r3, [r3, #24]
 8007e36:	3b01      	subs	r3, #1
 8007e38:	061b      	lsls	r3, r3, #24
 8007e3a:	430b      	orrs	r3, r1
 8007e3c:	431a      	orrs	r2, r3
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3714      	adds	r7, #20
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b086      	sub	sp, #24
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	691b      	ldr	r3, [r3, #16]
 8007e64:	0d9b      	lsrs	r3, r3, #22
 8007e66:	059b      	lsls	r3, r3, #22
 8007e68:	68ba      	ldr	r2, [r7, #8]
 8007e6a:	6811      	ldr	r1, [r2, #0]
 8007e6c:	68ba      	ldr	r2, [r7, #8]
 8007e6e:	6852      	ldr	r2, [r2, #4]
 8007e70:	4311      	orrs	r1, r2
 8007e72:	68ba      	ldr	r2, [r7, #8]
 8007e74:	6892      	ldr	r2, [r2, #8]
 8007e76:	3a01      	subs	r2, #1
 8007e78:	0152      	lsls	r2, r2, #5
 8007e7a:	4311      	orrs	r1, r2
 8007e7c:	68ba      	ldr	r2, [r7, #8]
 8007e7e:	68d2      	ldr	r2, [r2, #12]
 8007e80:	0252      	lsls	r2, r2, #9
 8007e82:	430a      	orrs	r2, r1
 8007e84:	431a      	orrs	r2, r3
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8007e8a:	f7fb fcb3 	bl	80037f4 <HAL_GetTick>
 8007e8e:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8007e90:	e010      	b.n	8007eb4 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e98:	d00c      	beq.n	8007eb4 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d007      	beq.n	8007eb0 <FMC_SDRAM_SendCommand+0x60>
 8007ea0:	f7fb fca8 	bl	80037f4 <HAL_GetTick>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	1ad3      	subs	r3, r2, r3
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d201      	bcs.n	8007eb4 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8007eb0:	2303      	movs	r3, #3
 8007eb2:	e006      	b.n	8007ec2 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	699b      	ldr	r3, [r3, #24]
 8007eb8:	f003 0320 	and.w	r3, r3, #32
 8007ebc:	2b20      	cmp	r3, #32
 8007ebe:	d0e8      	beq.n	8007e92 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3718      	adds	r7, #24
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8007eca:	b480      	push	{r7}
 8007ecc:	b083      	sub	sp, #12
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
 8007ed2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	695b      	ldr	r3, [r3, #20]
 8007ed8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007edc:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8007ee0:	683a      	ldr	r2, [r7, #0]
 8007ee2:	0052      	lsls	r2, r2, #1
 8007ee4:	431a      	orrs	r2, r3
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8007eea:	2300      	movs	r3, #0
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ef8:	b084      	sub	sp, #16
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b084      	sub	sp, #16
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
 8007f02:	f107 001c 	add.w	r0, r7, #28
 8007f06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d122      	bne.n	8007f56 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007f24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d105      	bne.n	8007f4a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f001 fbee 	bl	800972c <USB_CoreReset>
 8007f50:	4603      	mov	r3, r0
 8007f52:	73fb      	strb	r3, [r7, #15]
 8007f54:	e01a      	b.n	8007f8c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f001 fbe2 	bl	800972c <USB_CoreReset>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d106      	bne.n	8007f80 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	639a      	str	r2, [r3, #56]	; 0x38
 8007f7e:	e005      	b.n	8007f8c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d10b      	bne.n	8007faa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	f043 0206 	orr.w	r2, r3, #6
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	f043 0220 	orr.w	r2, r3, #32
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3710      	adds	r7, #16
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007fb6:	b004      	add	sp, #16
 8007fb8:	4770      	bx	lr
	...

08007fbc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b087      	sub	sp, #28
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007fca:	79fb      	ldrb	r3, [r7, #7]
 8007fcc:	2b02      	cmp	r3, #2
 8007fce:	d165      	bne.n	800809c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	4a41      	ldr	r2, [pc, #260]	; (80080d8 <USB_SetTurnaroundTime+0x11c>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d906      	bls.n	8007fe6 <USB_SetTurnaroundTime+0x2a>
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	4a40      	ldr	r2, [pc, #256]	; (80080dc <USB_SetTurnaroundTime+0x120>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d202      	bcs.n	8007fe6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007fe0:	230f      	movs	r3, #15
 8007fe2:	617b      	str	r3, [r7, #20]
 8007fe4:	e062      	b.n	80080ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	4a3c      	ldr	r2, [pc, #240]	; (80080dc <USB_SetTurnaroundTime+0x120>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d306      	bcc.n	8007ffc <USB_SetTurnaroundTime+0x40>
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	4a3b      	ldr	r2, [pc, #236]	; (80080e0 <USB_SetTurnaroundTime+0x124>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d202      	bcs.n	8007ffc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007ff6:	230e      	movs	r3, #14
 8007ff8:	617b      	str	r3, [r7, #20]
 8007ffa:	e057      	b.n	80080ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	4a38      	ldr	r2, [pc, #224]	; (80080e0 <USB_SetTurnaroundTime+0x124>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d306      	bcc.n	8008012 <USB_SetTurnaroundTime+0x56>
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	4a37      	ldr	r2, [pc, #220]	; (80080e4 <USB_SetTurnaroundTime+0x128>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d202      	bcs.n	8008012 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800800c:	230d      	movs	r3, #13
 800800e:	617b      	str	r3, [r7, #20]
 8008010:	e04c      	b.n	80080ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	4a33      	ldr	r2, [pc, #204]	; (80080e4 <USB_SetTurnaroundTime+0x128>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d306      	bcc.n	8008028 <USB_SetTurnaroundTime+0x6c>
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	4a32      	ldr	r2, [pc, #200]	; (80080e8 <USB_SetTurnaroundTime+0x12c>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d802      	bhi.n	8008028 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008022:	230c      	movs	r3, #12
 8008024:	617b      	str	r3, [r7, #20]
 8008026:	e041      	b.n	80080ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	4a2f      	ldr	r2, [pc, #188]	; (80080e8 <USB_SetTurnaroundTime+0x12c>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d906      	bls.n	800803e <USB_SetTurnaroundTime+0x82>
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	4a2e      	ldr	r2, [pc, #184]	; (80080ec <USB_SetTurnaroundTime+0x130>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d802      	bhi.n	800803e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008038:	230b      	movs	r3, #11
 800803a:	617b      	str	r3, [r7, #20]
 800803c:	e036      	b.n	80080ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	4a2a      	ldr	r2, [pc, #168]	; (80080ec <USB_SetTurnaroundTime+0x130>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d906      	bls.n	8008054 <USB_SetTurnaroundTime+0x98>
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	4a29      	ldr	r2, [pc, #164]	; (80080f0 <USB_SetTurnaroundTime+0x134>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d802      	bhi.n	8008054 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800804e:	230a      	movs	r3, #10
 8008050:	617b      	str	r3, [r7, #20]
 8008052:	e02b      	b.n	80080ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	4a26      	ldr	r2, [pc, #152]	; (80080f0 <USB_SetTurnaroundTime+0x134>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d906      	bls.n	800806a <USB_SetTurnaroundTime+0xae>
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	4a25      	ldr	r2, [pc, #148]	; (80080f4 <USB_SetTurnaroundTime+0x138>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d202      	bcs.n	800806a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008064:	2309      	movs	r3, #9
 8008066:	617b      	str	r3, [r7, #20]
 8008068:	e020      	b.n	80080ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	4a21      	ldr	r2, [pc, #132]	; (80080f4 <USB_SetTurnaroundTime+0x138>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d306      	bcc.n	8008080 <USB_SetTurnaroundTime+0xc4>
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	4a20      	ldr	r2, [pc, #128]	; (80080f8 <USB_SetTurnaroundTime+0x13c>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d802      	bhi.n	8008080 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800807a:	2308      	movs	r3, #8
 800807c:	617b      	str	r3, [r7, #20]
 800807e:	e015      	b.n	80080ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	4a1d      	ldr	r2, [pc, #116]	; (80080f8 <USB_SetTurnaroundTime+0x13c>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d906      	bls.n	8008096 <USB_SetTurnaroundTime+0xda>
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	4a1c      	ldr	r2, [pc, #112]	; (80080fc <USB_SetTurnaroundTime+0x140>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d202      	bcs.n	8008096 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008090:	2307      	movs	r3, #7
 8008092:	617b      	str	r3, [r7, #20]
 8008094:	e00a      	b.n	80080ac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008096:	2306      	movs	r3, #6
 8008098:	617b      	str	r3, [r7, #20]
 800809a:	e007      	b.n	80080ac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800809c:	79fb      	ldrb	r3, [r7, #7]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d102      	bne.n	80080a8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80080a2:	2309      	movs	r3, #9
 80080a4:	617b      	str	r3, [r7, #20]
 80080a6:	e001      	b.n	80080ac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80080a8:	2309      	movs	r3, #9
 80080aa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	68da      	ldr	r2, [r3, #12]
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	029b      	lsls	r3, r3, #10
 80080c0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80080c4:	431a      	orrs	r2, r3
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80080ca:	2300      	movs	r3, #0
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	371c      	adds	r7, #28
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr
 80080d8:	00d8acbf 	.word	0x00d8acbf
 80080dc:	00e4e1c0 	.word	0x00e4e1c0
 80080e0:	00f42400 	.word	0x00f42400
 80080e4:	01067380 	.word	0x01067380
 80080e8:	011a499f 	.word	0x011a499f
 80080ec:	01312cff 	.word	0x01312cff
 80080f0:	014ca43f 	.word	0x014ca43f
 80080f4:	016e3600 	.word	0x016e3600
 80080f8:	01a6ab1f 	.word	0x01a6ab1f
 80080fc:	01e84800 	.word	0x01e84800

08008100 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	f043 0201 	orr.w	r2, r3, #1
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	370c      	adds	r7, #12
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr

08008122 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008122:	b480      	push	{r7}
 8008124:	b083      	sub	sp, #12
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	f023 0201 	bic.w	r2, r3, #1
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008136:	2300      	movs	r3, #0
}
 8008138:	4618      	mov	r0, r3
 800813a:	370c      	adds	r7, #12
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	460b      	mov	r3, r1
 800814e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008150:	2300      	movs	r3, #0
 8008152:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008160:	78fb      	ldrb	r3, [r7, #3]
 8008162:	2b01      	cmp	r3, #1
 8008164:	d115      	bne.n	8008192 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	68db      	ldr	r3, [r3, #12]
 800816a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008172:	2001      	movs	r0, #1
 8008174:	f7fb fb4a 	bl	800380c <HAL_Delay>
      ms++;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	3301      	adds	r3, #1
 800817c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f001 fa45 	bl	800960e <USB_GetMode>
 8008184:	4603      	mov	r3, r0
 8008186:	2b01      	cmp	r3, #1
 8008188:	d01e      	beq.n	80081c8 <USB_SetCurrentMode+0x84>
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2b31      	cmp	r3, #49	; 0x31
 800818e:	d9f0      	bls.n	8008172 <USB_SetCurrentMode+0x2e>
 8008190:	e01a      	b.n	80081c8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008192:	78fb      	ldrb	r3, [r7, #3]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d115      	bne.n	80081c4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80081a4:	2001      	movs	r0, #1
 80081a6:	f7fb fb31 	bl	800380c <HAL_Delay>
      ms++;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	3301      	adds	r3, #1
 80081ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f001 fa2c 	bl	800960e <USB_GetMode>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d005      	beq.n	80081c8 <USB_SetCurrentMode+0x84>
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2b31      	cmp	r3, #49	; 0x31
 80081c0:	d9f0      	bls.n	80081a4 <USB_SetCurrentMode+0x60>
 80081c2:	e001      	b.n	80081c8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	e005      	b.n	80081d4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2b32      	cmp	r3, #50	; 0x32
 80081cc:	d101      	bne.n	80081d2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	e000      	b.n	80081d4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3710      	adds	r7, #16
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80081dc:	b084      	sub	sp, #16
 80081de:	b580      	push	{r7, lr}
 80081e0:	b086      	sub	sp, #24
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
 80081e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80081ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80081ee:	2300      	movs	r3, #0
 80081f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80081f6:	2300      	movs	r3, #0
 80081f8:	613b      	str	r3, [r7, #16]
 80081fa:	e009      	b.n	8008210 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	3340      	adds	r3, #64	; 0x40
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	4413      	add	r3, r2
 8008206:	2200      	movs	r2, #0
 8008208:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	3301      	adds	r3, #1
 800820e:	613b      	str	r3, [r7, #16]
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	2b0e      	cmp	r3, #14
 8008214:	d9f2      	bls.n	80081fc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008218:	2b00      	cmp	r3, #0
 800821a:	d11c      	bne.n	8008256 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	68fa      	ldr	r2, [r7, #12]
 8008226:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800822a:	f043 0302 	orr.w	r3, r3, #2
 800822e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008234:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008240:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800824c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	639a      	str	r2, [r3, #56]	; 0x38
 8008254:	e00b      	b.n	800826e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800825a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008266:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008274:	461a      	mov	r2, r3
 8008276:	2300      	movs	r3, #0
 8008278:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008280:	4619      	mov	r1, r3
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008288:	461a      	mov	r2, r3
 800828a:	680b      	ldr	r3, [r1, #0]
 800828c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800828e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008290:	2b01      	cmp	r3, #1
 8008292:	d10c      	bne.n	80082ae <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008296:	2b00      	cmp	r3, #0
 8008298:	d104      	bne.n	80082a4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800829a:	2100      	movs	r1, #0
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 f965 	bl	800856c <USB_SetDevSpeed>
 80082a2:	e008      	b.n	80082b6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80082a4:	2101      	movs	r1, #1
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 f960 	bl	800856c <USB_SetDevSpeed>
 80082ac:	e003      	b.n	80082b6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80082ae:	2103      	movs	r1, #3
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 f95b 	bl	800856c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80082b6:	2110      	movs	r1, #16
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 f8f3 	bl	80084a4 <USB_FlushTxFifo>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d001      	beq.n	80082c8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80082c4:	2301      	movs	r3, #1
 80082c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 f91f 	bl	800850c <USB_FlushRxFifo>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d001      	beq.n	80082d8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082de:	461a      	mov	r2, r3
 80082e0:	2300      	movs	r3, #0
 80082e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082ea:	461a      	mov	r2, r3
 80082ec:	2300      	movs	r3, #0
 80082ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082f6:	461a      	mov	r2, r3
 80082f8:	2300      	movs	r3, #0
 80082fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80082fc:	2300      	movs	r3, #0
 80082fe:	613b      	str	r3, [r7, #16]
 8008300:	e043      	b.n	800838a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	015a      	lsls	r2, r3, #5
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	4413      	add	r3, r2
 800830a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008314:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008318:	d118      	bne.n	800834c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d10a      	bne.n	8008336 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	015a      	lsls	r2, r3, #5
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	4413      	add	r3, r2
 8008328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800832c:	461a      	mov	r2, r3
 800832e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008332:	6013      	str	r3, [r2, #0]
 8008334:	e013      	b.n	800835e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	015a      	lsls	r2, r3, #5
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	4413      	add	r3, r2
 800833e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008342:	461a      	mov	r2, r3
 8008344:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008348:	6013      	str	r3, [r2, #0]
 800834a:	e008      	b.n	800835e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	015a      	lsls	r2, r3, #5
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	4413      	add	r3, r2
 8008354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008358:	461a      	mov	r2, r3
 800835a:	2300      	movs	r3, #0
 800835c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	015a      	lsls	r2, r3, #5
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	4413      	add	r3, r2
 8008366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800836a:	461a      	mov	r2, r3
 800836c:	2300      	movs	r3, #0
 800836e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	015a      	lsls	r2, r3, #5
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	4413      	add	r3, r2
 8008378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800837c:	461a      	mov	r2, r3
 800837e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008382:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	3301      	adds	r3, #1
 8008388:	613b      	str	r3, [r7, #16]
 800838a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838c:	693a      	ldr	r2, [r7, #16]
 800838e:	429a      	cmp	r2, r3
 8008390:	d3b7      	bcc.n	8008302 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008392:	2300      	movs	r3, #0
 8008394:	613b      	str	r3, [r7, #16]
 8008396:	e043      	b.n	8008420 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	015a      	lsls	r2, r3, #5
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	4413      	add	r3, r2
 80083a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083ae:	d118      	bne.n	80083e2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d10a      	bne.n	80083cc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	015a      	lsls	r2, r3, #5
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	4413      	add	r3, r2
 80083be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083c2:	461a      	mov	r2, r3
 80083c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80083c8:	6013      	str	r3, [r2, #0]
 80083ca:	e013      	b.n	80083f4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	015a      	lsls	r2, r3, #5
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	4413      	add	r3, r2
 80083d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083d8:	461a      	mov	r2, r3
 80083da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80083de:	6013      	str	r3, [r2, #0]
 80083e0:	e008      	b.n	80083f4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	015a      	lsls	r2, r3, #5
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	4413      	add	r3, r2
 80083ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ee:	461a      	mov	r2, r3
 80083f0:	2300      	movs	r3, #0
 80083f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	015a      	lsls	r2, r3, #5
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	4413      	add	r3, r2
 80083fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008400:	461a      	mov	r2, r3
 8008402:	2300      	movs	r3, #0
 8008404:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	015a      	lsls	r2, r3, #5
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	4413      	add	r3, r2
 800840e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008412:	461a      	mov	r2, r3
 8008414:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008418:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	3301      	adds	r3, #1
 800841e:	613b      	str	r3, [r7, #16]
 8008420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008422:	693a      	ldr	r2, [r7, #16]
 8008424:	429a      	cmp	r2, r3
 8008426:	d3b7      	bcc.n	8008398 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800842e:	691b      	ldr	r3, [r3, #16]
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008436:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800843a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008448:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800844a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800844c:	2b00      	cmp	r3, #0
 800844e:	d105      	bne.n	800845c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	699b      	ldr	r3, [r3, #24]
 8008454:	f043 0210 	orr.w	r2, r3, #16
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	699a      	ldr	r2, [r3, #24]
 8008460:	4b0f      	ldr	r3, [pc, #60]	; (80084a0 <USB_DevInit+0x2c4>)
 8008462:	4313      	orrs	r3, r2
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800846a:	2b00      	cmp	r3, #0
 800846c:	d005      	beq.n	800847a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	699b      	ldr	r3, [r3, #24]
 8008472:	f043 0208 	orr.w	r2, r3, #8
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800847a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800847c:	2b01      	cmp	r3, #1
 800847e:	d107      	bne.n	8008490 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	699b      	ldr	r3, [r3, #24]
 8008484:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008488:	f043 0304 	orr.w	r3, r3, #4
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008490:	7dfb      	ldrb	r3, [r7, #23]
}
 8008492:	4618      	mov	r0, r3
 8008494:	3718      	adds	r7, #24
 8008496:	46bd      	mov	sp, r7
 8008498:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800849c:	b004      	add	sp, #16
 800849e:	4770      	bx	lr
 80084a0:	803c3800 	.word	0x803c3800

080084a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b085      	sub	sp, #20
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80084ae:	2300      	movs	r3, #0
 80084b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	3301      	adds	r3, #1
 80084b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	4a13      	ldr	r2, [pc, #76]	; (8008508 <USB_FlushTxFifo+0x64>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d901      	bls.n	80084c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80084c0:	2303      	movs	r3, #3
 80084c2:	e01b      	b.n	80084fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	daf2      	bge.n	80084b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80084cc:	2300      	movs	r3, #0
 80084ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	019b      	lsls	r3, r3, #6
 80084d4:	f043 0220 	orr.w	r2, r3, #32
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	3301      	adds	r3, #1
 80084e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	4a08      	ldr	r2, [pc, #32]	; (8008508 <USB_FlushTxFifo+0x64>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d901      	bls.n	80084ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80084ea:	2303      	movs	r3, #3
 80084ec:	e006      	b.n	80084fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	691b      	ldr	r3, [r3, #16]
 80084f2:	f003 0320 	and.w	r3, r3, #32
 80084f6:	2b20      	cmp	r3, #32
 80084f8:	d0f0      	beq.n	80084dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80084fa:	2300      	movs	r3, #0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3714      	adds	r7, #20
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr
 8008508:	00030d40 	.word	0x00030d40

0800850c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800850c:	b480      	push	{r7}
 800850e:	b085      	sub	sp, #20
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008514:	2300      	movs	r3, #0
 8008516:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	3301      	adds	r3, #1
 800851c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	4a11      	ldr	r2, [pc, #68]	; (8008568 <USB_FlushRxFifo+0x5c>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d901      	bls.n	800852a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008526:	2303      	movs	r3, #3
 8008528:	e018      	b.n	800855c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	691b      	ldr	r3, [r3, #16]
 800852e:	2b00      	cmp	r3, #0
 8008530:	daf2      	bge.n	8008518 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008532:	2300      	movs	r3, #0
 8008534:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2210      	movs	r2, #16
 800853a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	3301      	adds	r3, #1
 8008540:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	4a08      	ldr	r2, [pc, #32]	; (8008568 <USB_FlushRxFifo+0x5c>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d901      	bls.n	800854e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800854a:	2303      	movs	r3, #3
 800854c:	e006      	b.n	800855c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	691b      	ldr	r3, [r3, #16]
 8008552:	f003 0310 	and.w	r3, r3, #16
 8008556:	2b10      	cmp	r3, #16
 8008558:	d0f0      	beq.n	800853c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800855a:	2300      	movs	r3, #0
}
 800855c:	4618      	mov	r0, r3
 800855e:	3714      	adds	r7, #20
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr
 8008568:	00030d40 	.word	0x00030d40

0800856c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800856c:	b480      	push	{r7}
 800856e:	b085      	sub	sp, #20
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	460b      	mov	r3, r1
 8008576:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	78fb      	ldrb	r3, [r7, #3]
 8008586:	68f9      	ldr	r1, [r7, #12]
 8008588:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800858c:	4313      	orrs	r3, r2
 800858e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008590:	2300      	movs	r3, #0
}
 8008592:	4618      	mov	r0, r3
 8008594:	3714      	adds	r7, #20
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr

0800859e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800859e:	b480      	push	{r7}
 80085a0:	b087      	sub	sp, #28
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	f003 0306 	and.w	r3, r3, #6
 80085b6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d102      	bne.n	80085c4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80085be:	2300      	movs	r3, #0
 80085c0:	75fb      	strb	r3, [r7, #23]
 80085c2:	e00a      	b.n	80085da <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	d002      	beq.n	80085d0 <USB_GetDevSpeed+0x32>
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2b06      	cmp	r3, #6
 80085ce:	d102      	bne.n	80085d6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80085d0:	2302      	movs	r3, #2
 80085d2:	75fb      	strb	r3, [r7, #23]
 80085d4:	e001      	b.n	80085da <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80085d6:	230f      	movs	r3, #15
 80085d8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80085da:	7dfb      	ldrb	r3, [r7, #23]
}
 80085dc:	4618      	mov	r0, r3
 80085de:	371c      	adds	r7, #28
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b085      	sub	sp, #20
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	785b      	ldrb	r3, [r3, #1]
 8008600:	2b01      	cmp	r3, #1
 8008602:	d13a      	bne.n	800867a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800860a:	69da      	ldr	r2, [r3, #28]
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	f003 030f 	and.w	r3, r3, #15
 8008614:	2101      	movs	r1, #1
 8008616:	fa01 f303 	lsl.w	r3, r1, r3
 800861a:	b29b      	uxth	r3, r3
 800861c:	68f9      	ldr	r1, [r7, #12]
 800861e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008622:	4313      	orrs	r3, r2
 8008624:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	015a      	lsls	r2, r3, #5
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	4413      	add	r3, r2
 800862e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008638:	2b00      	cmp	r3, #0
 800863a:	d155      	bne.n	80086e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	015a      	lsls	r2, r3, #5
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	4413      	add	r3, r2
 8008644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	791b      	ldrb	r3, [r3, #4]
 8008656:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008658:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	059b      	lsls	r3, r3, #22
 800865e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008660:	4313      	orrs	r3, r2
 8008662:	68ba      	ldr	r2, [r7, #8]
 8008664:	0151      	lsls	r1, r2, #5
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	440a      	add	r2, r1
 800866a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800866e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008676:	6013      	str	r3, [r2, #0]
 8008678:	e036      	b.n	80086e8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008680:	69da      	ldr	r2, [r3, #28]
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	f003 030f 	and.w	r3, r3, #15
 800868a:	2101      	movs	r1, #1
 800868c:	fa01 f303 	lsl.w	r3, r1, r3
 8008690:	041b      	lsls	r3, r3, #16
 8008692:	68f9      	ldr	r1, [r7, #12]
 8008694:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008698:	4313      	orrs	r3, r2
 800869a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	015a      	lsls	r2, r3, #5
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	4413      	add	r3, r2
 80086a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d11a      	bne.n	80086e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	015a      	lsls	r2, r3, #5
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	4413      	add	r3, r2
 80086ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	791b      	ldrb	r3, [r3, #4]
 80086cc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80086ce:	430b      	orrs	r3, r1
 80086d0:	4313      	orrs	r3, r2
 80086d2:	68ba      	ldr	r2, [r7, #8]
 80086d4:	0151      	lsls	r1, r2, #5
 80086d6:	68fa      	ldr	r2, [r7, #12]
 80086d8:	440a      	add	r2, r1
 80086da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086e6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3714      	adds	r7, #20
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr
	...

080086f8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	785b      	ldrb	r3, [r3, #1]
 8008710:	2b01      	cmp	r3, #1
 8008712:	d161      	bne.n	80087d8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	015a      	lsls	r2, r3, #5
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	4413      	add	r3, r2
 800871c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008726:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800872a:	d11f      	bne.n	800876c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	015a      	lsls	r2, r3, #5
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	4413      	add	r3, r2
 8008734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	68ba      	ldr	r2, [r7, #8]
 800873c:	0151      	lsls	r1, r2, #5
 800873e:	68fa      	ldr	r2, [r7, #12]
 8008740:	440a      	add	r2, r1
 8008742:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008746:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800874a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	015a      	lsls	r2, r3, #5
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	4413      	add	r3, r2
 8008754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	68ba      	ldr	r2, [r7, #8]
 800875c:	0151      	lsls	r1, r2, #5
 800875e:	68fa      	ldr	r2, [r7, #12]
 8008760:	440a      	add	r2, r1
 8008762:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008766:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800876a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008772:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	f003 030f 	and.w	r3, r3, #15
 800877c:	2101      	movs	r1, #1
 800877e:	fa01 f303 	lsl.w	r3, r1, r3
 8008782:	b29b      	uxth	r3, r3
 8008784:	43db      	mvns	r3, r3
 8008786:	68f9      	ldr	r1, [r7, #12]
 8008788:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800878c:	4013      	ands	r3, r2
 800878e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008796:	69da      	ldr	r2, [r3, #28]
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	f003 030f 	and.w	r3, r3, #15
 80087a0:	2101      	movs	r1, #1
 80087a2:	fa01 f303 	lsl.w	r3, r1, r3
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	43db      	mvns	r3, r3
 80087aa:	68f9      	ldr	r1, [r7, #12]
 80087ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087b0:	4013      	ands	r3, r2
 80087b2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	015a      	lsls	r2, r3, #5
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	4413      	add	r3, r2
 80087bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	0159      	lsls	r1, r3, #5
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	440b      	add	r3, r1
 80087ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ce:	4619      	mov	r1, r3
 80087d0:	4b35      	ldr	r3, [pc, #212]	; (80088a8 <USB_DeactivateEndpoint+0x1b0>)
 80087d2:	4013      	ands	r3, r2
 80087d4:	600b      	str	r3, [r1, #0]
 80087d6:	e060      	b.n	800889a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	015a      	lsls	r2, r3, #5
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	4413      	add	r3, r2
 80087e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087ee:	d11f      	bne.n	8008830 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	015a      	lsls	r2, r3, #5
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	4413      	add	r3, r2
 80087f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	68ba      	ldr	r2, [r7, #8]
 8008800:	0151      	lsls	r1, r2, #5
 8008802:	68fa      	ldr	r2, [r7, #12]
 8008804:	440a      	add	r2, r1
 8008806:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800880a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800880e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	015a      	lsls	r2, r3, #5
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	4413      	add	r3, r2
 8008818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	68ba      	ldr	r2, [r7, #8]
 8008820:	0151      	lsls	r1, r2, #5
 8008822:	68fa      	ldr	r2, [r7, #12]
 8008824:	440a      	add	r2, r1
 8008826:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800882a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800882e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008836:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	f003 030f 	and.w	r3, r3, #15
 8008840:	2101      	movs	r1, #1
 8008842:	fa01 f303 	lsl.w	r3, r1, r3
 8008846:	041b      	lsls	r3, r3, #16
 8008848:	43db      	mvns	r3, r3
 800884a:	68f9      	ldr	r1, [r7, #12]
 800884c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008850:	4013      	ands	r3, r2
 8008852:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800885a:	69da      	ldr	r2, [r3, #28]
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	f003 030f 	and.w	r3, r3, #15
 8008864:	2101      	movs	r1, #1
 8008866:	fa01 f303 	lsl.w	r3, r1, r3
 800886a:	041b      	lsls	r3, r3, #16
 800886c:	43db      	mvns	r3, r3
 800886e:	68f9      	ldr	r1, [r7, #12]
 8008870:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008874:	4013      	ands	r3, r2
 8008876:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	015a      	lsls	r2, r3, #5
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	4413      	add	r3, r2
 8008880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	0159      	lsls	r1, r3, #5
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	440b      	add	r3, r1
 800888e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008892:	4619      	mov	r1, r3
 8008894:	4b05      	ldr	r3, [pc, #20]	; (80088ac <USB_DeactivateEndpoint+0x1b4>)
 8008896:	4013      	ands	r3, r2
 8008898:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800889a:	2300      	movs	r3, #0
}
 800889c:	4618      	mov	r0, r3
 800889e:	3714      	adds	r7, #20
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr
 80088a8:	ec337800 	.word	0xec337800
 80088ac:	eff37800 	.word	0xeff37800

080088b0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b08a      	sub	sp, #40	; 0x28
 80088b4:	af02      	add	r7, sp, #8
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	4613      	mov	r3, r2
 80088bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	785b      	ldrb	r3, [r3, #1]
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	f040 815c 	bne.w	8008b8a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	699b      	ldr	r3, [r3, #24]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d132      	bne.n	8008940 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	015a      	lsls	r2, r3, #5
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	4413      	add	r3, r2
 80088e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	69ba      	ldr	r2, [r7, #24]
 80088ea:	0151      	lsls	r1, r2, #5
 80088ec:	69fa      	ldr	r2, [r7, #28]
 80088ee:	440a      	add	r2, r1
 80088f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80088f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80088fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	015a      	lsls	r2, r3, #5
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	4413      	add	r3, r2
 8008906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	69ba      	ldr	r2, [r7, #24]
 800890e:	0151      	lsls	r1, r2, #5
 8008910:	69fa      	ldr	r2, [r7, #28]
 8008912:	440a      	add	r2, r1
 8008914:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008918:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800891c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	015a      	lsls	r2, r3, #5
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	4413      	add	r3, r2
 8008926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800892a:	691b      	ldr	r3, [r3, #16]
 800892c:	69ba      	ldr	r2, [r7, #24]
 800892e:	0151      	lsls	r1, r2, #5
 8008930:	69fa      	ldr	r2, [r7, #28]
 8008932:	440a      	add	r2, r1
 8008934:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008938:	0cdb      	lsrs	r3, r3, #19
 800893a:	04db      	lsls	r3, r3, #19
 800893c:	6113      	str	r3, [r2, #16]
 800893e:	e074      	b.n	8008a2a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008940:	69bb      	ldr	r3, [r7, #24]
 8008942:	015a      	lsls	r2, r3, #5
 8008944:	69fb      	ldr	r3, [r7, #28]
 8008946:	4413      	add	r3, r2
 8008948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800894c:	691b      	ldr	r3, [r3, #16]
 800894e:	69ba      	ldr	r2, [r7, #24]
 8008950:	0151      	lsls	r1, r2, #5
 8008952:	69fa      	ldr	r2, [r7, #28]
 8008954:	440a      	add	r2, r1
 8008956:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800895a:	0cdb      	lsrs	r3, r3, #19
 800895c:	04db      	lsls	r3, r3, #19
 800895e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008960:	69bb      	ldr	r3, [r7, #24]
 8008962:	015a      	lsls	r2, r3, #5
 8008964:	69fb      	ldr	r3, [r7, #28]
 8008966:	4413      	add	r3, r2
 8008968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800896c:	691b      	ldr	r3, [r3, #16]
 800896e:	69ba      	ldr	r2, [r7, #24]
 8008970:	0151      	lsls	r1, r2, #5
 8008972:	69fa      	ldr	r2, [r7, #28]
 8008974:	440a      	add	r2, r1
 8008976:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800897a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800897e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008982:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	015a      	lsls	r2, r3, #5
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	4413      	add	r3, r2
 800898c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008990:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	6999      	ldr	r1, [r3, #24]
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	440b      	add	r3, r1
 800899c:	1e59      	subs	r1, r3, #1
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	68db      	ldr	r3, [r3, #12]
 80089a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80089a6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80089a8:	4b9d      	ldr	r3, [pc, #628]	; (8008c20 <USB_EPStartXfer+0x370>)
 80089aa:	400b      	ands	r3, r1
 80089ac:	69b9      	ldr	r1, [r7, #24]
 80089ae:	0148      	lsls	r0, r1, #5
 80089b0:	69f9      	ldr	r1, [r7, #28]
 80089b2:	4401      	add	r1, r0
 80089b4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80089b8:	4313      	orrs	r3, r2
 80089ba:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80089bc:	69bb      	ldr	r3, [r7, #24]
 80089be:	015a      	lsls	r2, r3, #5
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	4413      	add	r3, r2
 80089c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089c8:	691a      	ldr	r2, [r3, #16]
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	699b      	ldr	r3, [r3, #24]
 80089ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089d2:	69b9      	ldr	r1, [r7, #24]
 80089d4:	0148      	lsls	r0, r1, #5
 80089d6:	69f9      	ldr	r1, [r7, #28]
 80089d8:	4401      	add	r1, r0
 80089da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80089de:	4313      	orrs	r3, r2
 80089e0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	791b      	ldrb	r3, [r3, #4]
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d11f      	bne.n	8008a2a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80089ea:	69bb      	ldr	r3, [r7, #24]
 80089ec:	015a      	lsls	r2, r3, #5
 80089ee:	69fb      	ldr	r3, [r7, #28]
 80089f0:	4413      	add	r3, r2
 80089f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089f6:	691b      	ldr	r3, [r3, #16]
 80089f8:	69ba      	ldr	r2, [r7, #24]
 80089fa:	0151      	lsls	r1, r2, #5
 80089fc:	69fa      	ldr	r2, [r7, #28]
 80089fe:	440a      	add	r2, r1
 8008a00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a04:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008a08:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008a0a:	69bb      	ldr	r3, [r7, #24]
 8008a0c:	015a      	lsls	r2, r3, #5
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	4413      	add	r3, r2
 8008a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	69ba      	ldr	r2, [r7, #24]
 8008a1a:	0151      	lsls	r1, r2, #5
 8008a1c:	69fa      	ldr	r2, [r7, #28]
 8008a1e:	440a      	add	r2, r1
 8008a20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008a28:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008a2a:	79fb      	ldrb	r3, [r7, #7]
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d14b      	bne.n	8008ac8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	695b      	ldr	r3, [r3, #20]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d009      	beq.n	8008a4c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	015a      	lsls	r2, r3, #5
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	4413      	add	r3, r2
 8008a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a44:	461a      	mov	r2, r3
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	695b      	ldr	r3, [r3, #20]
 8008a4a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	791b      	ldrb	r3, [r3, #4]
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d128      	bne.n	8008aa6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d110      	bne.n	8008a86 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008a64:	69bb      	ldr	r3, [r7, #24]
 8008a66:	015a      	lsls	r2, r3, #5
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	4413      	add	r3, r2
 8008a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	69ba      	ldr	r2, [r7, #24]
 8008a74:	0151      	lsls	r1, r2, #5
 8008a76:	69fa      	ldr	r2, [r7, #28]
 8008a78:	440a      	add	r2, r1
 8008a7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008a82:	6013      	str	r3, [r2, #0]
 8008a84:	e00f      	b.n	8008aa6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008a86:	69bb      	ldr	r3, [r7, #24]
 8008a88:	015a      	lsls	r2, r3, #5
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	4413      	add	r3, r2
 8008a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	69ba      	ldr	r2, [r7, #24]
 8008a96:	0151      	lsls	r1, r2, #5
 8008a98:	69fa      	ldr	r2, [r7, #28]
 8008a9a:	440a      	add	r2, r1
 8008a9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008aa4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	015a      	lsls	r2, r3, #5
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	4413      	add	r3, r2
 8008aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	69ba      	ldr	r2, [r7, #24]
 8008ab6:	0151      	lsls	r1, r2, #5
 8008ab8:	69fa      	ldr	r2, [r7, #28]
 8008aba:	440a      	add	r2, r1
 8008abc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ac0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ac4:	6013      	str	r3, [r2, #0]
 8008ac6:	e133      	b.n	8008d30 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ac8:	69bb      	ldr	r3, [r7, #24]
 8008aca:	015a      	lsls	r2, r3, #5
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	4413      	add	r3, r2
 8008ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	69ba      	ldr	r2, [r7, #24]
 8008ad8:	0151      	lsls	r1, r2, #5
 8008ada:	69fa      	ldr	r2, [r7, #28]
 8008adc:	440a      	add	r2, r1
 8008ade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ae2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ae6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	791b      	ldrb	r3, [r3, #4]
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d015      	beq.n	8008b1c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	699b      	ldr	r3, [r3, #24]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	f000 811b 	beq.w	8008d30 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	f003 030f 	and.w	r3, r3, #15
 8008b0a:	2101      	movs	r1, #1
 8008b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8008b10:	69f9      	ldr	r1, [r7, #28]
 8008b12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b16:	4313      	orrs	r3, r2
 8008b18:	634b      	str	r3, [r1, #52]	; 0x34
 8008b1a:	e109      	b.n	8008d30 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d110      	bne.n	8008b4e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008b2c:	69bb      	ldr	r3, [r7, #24]
 8008b2e:	015a      	lsls	r2, r3, #5
 8008b30:	69fb      	ldr	r3, [r7, #28]
 8008b32:	4413      	add	r3, r2
 8008b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	69ba      	ldr	r2, [r7, #24]
 8008b3c:	0151      	lsls	r1, r2, #5
 8008b3e:	69fa      	ldr	r2, [r7, #28]
 8008b40:	440a      	add	r2, r1
 8008b42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008b4a:	6013      	str	r3, [r2, #0]
 8008b4c:	e00f      	b.n	8008b6e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008b4e:	69bb      	ldr	r3, [r7, #24]
 8008b50:	015a      	lsls	r2, r3, #5
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	4413      	add	r3, r2
 8008b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	69ba      	ldr	r2, [r7, #24]
 8008b5e:	0151      	lsls	r1, r2, #5
 8008b60:	69fa      	ldr	r2, [r7, #28]
 8008b62:	440a      	add	r2, r1
 8008b64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b6c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	6919      	ldr	r1, [r3, #16]
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	781a      	ldrb	r2, [r3, #0]
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	699b      	ldr	r3, [r3, #24]
 8008b7a:	b298      	uxth	r0, r3
 8008b7c:	79fb      	ldrb	r3, [r7, #7]
 8008b7e:	9300      	str	r3, [sp, #0]
 8008b80:	4603      	mov	r3, r0
 8008b82:	68f8      	ldr	r0, [r7, #12]
 8008b84:	f000 fade 	bl	8009144 <USB_WritePacket>
 8008b88:	e0d2      	b.n	8008d30 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	015a      	lsls	r2, r3, #5
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	4413      	add	r3, r2
 8008b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b96:	691b      	ldr	r3, [r3, #16]
 8008b98:	69ba      	ldr	r2, [r7, #24]
 8008b9a:	0151      	lsls	r1, r2, #5
 8008b9c:	69fa      	ldr	r2, [r7, #28]
 8008b9e:	440a      	add	r2, r1
 8008ba0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ba4:	0cdb      	lsrs	r3, r3, #19
 8008ba6:	04db      	lsls	r3, r3, #19
 8008ba8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008baa:	69bb      	ldr	r3, [r7, #24]
 8008bac:	015a      	lsls	r2, r3, #5
 8008bae:	69fb      	ldr	r3, [r7, #28]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bb6:	691b      	ldr	r3, [r3, #16]
 8008bb8:	69ba      	ldr	r2, [r7, #24]
 8008bba:	0151      	lsls	r1, r2, #5
 8008bbc:	69fa      	ldr	r2, [r7, #28]
 8008bbe:	440a      	add	r2, r1
 8008bc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bc4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008bc8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008bcc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	699b      	ldr	r3, [r3, #24]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d126      	bne.n	8008c24 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	015a      	lsls	r2, r3, #5
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	4413      	add	r3, r2
 8008bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008be2:	691a      	ldr	r2, [r3, #16]
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	68db      	ldr	r3, [r3, #12]
 8008be8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bec:	69b9      	ldr	r1, [r7, #24]
 8008bee:	0148      	lsls	r0, r1, #5
 8008bf0:	69f9      	ldr	r1, [r7, #28]
 8008bf2:	4401      	add	r1, r0
 8008bf4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	015a      	lsls	r2, r3, #5
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	4413      	add	r3, r2
 8008c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c08:	691b      	ldr	r3, [r3, #16]
 8008c0a:	69ba      	ldr	r2, [r7, #24]
 8008c0c:	0151      	lsls	r1, r2, #5
 8008c0e:	69fa      	ldr	r2, [r7, #28]
 8008c10:	440a      	add	r2, r1
 8008c12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c1a:	6113      	str	r3, [r2, #16]
 8008c1c:	e03a      	b.n	8008c94 <USB_EPStartXfer+0x3e4>
 8008c1e:	bf00      	nop
 8008c20:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	699a      	ldr	r2, [r3, #24]
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	4413      	add	r3, r2
 8008c2e:	1e5a      	subs	r2, r3, #1
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c38:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	68db      	ldr	r3, [r3, #12]
 8008c3e:	8afa      	ldrh	r2, [r7, #22]
 8008c40:	fb03 f202 	mul.w	r2, r3, r2
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008c48:	69bb      	ldr	r3, [r7, #24]
 8008c4a:	015a      	lsls	r2, r3, #5
 8008c4c:	69fb      	ldr	r3, [r7, #28]
 8008c4e:	4413      	add	r3, r2
 8008c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c54:	691a      	ldr	r2, [r3, #16]
 8008c56:	8afb      	ldrh	r3, [r7, #22]
 8008c58:	04d9      	lsls	r1, r3, #19
 8008c5a:	4b38      	ldr	r3, [pc, #224]	; (8008d3c <USB_EPStartXfer+0x48c>)
 8008c5c:	400b      	ands	r3, r1
 8008c5e:	69b9      	ldr	r1, [r7, #24]
 8008c60:	0148      	lsls	r0, r1, #5
 8008c62:	69f9      	ldr	r1, [r7, #28]
 8008c64:	4401      	add	r1, r0
 8008c66:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008c6e:	69bb      	ldr	r3, [r7, #24]
 8008c70:	015a      	lsls	r2, r3, #5
 8008c72:	69fb      	ldr	r3, [r7, #28]
 8008c74:	4413      	add	r3, r2
 8008c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c7a:	691a      	ldr	r2, [r3, #16]
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	69db      	ldr	r3, [r3, #28]
 8008c80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c84:	69b9      	ldr	r1, [r7, #24]
 8008c86:	0148      	lsls	r0, r1, #5
 8008c88:	69f9      	ldr	r1, [r7, #28]
 8008c8a:	4401      	add	r1, r0
 8008c8c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008c90:	4313      	orrs	r3, r2
 8008c92:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008c94:	79fb      	ldrb	r3, [r7, #7]
 8008c96:	2b01      	cmp	r3, #1
 8008c98:	d10d      	bne.n	8008cb6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	691b      	ldr	r3, [r3, #16]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d009      	beq.n	8008cb6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	6919      	ldr	r1, [r3, #16]
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	015a      	lsls	r2, r3, #5
 8008caa:	69fb      	ldr	r3, [r7, #28]
 8008cac:	4413      	add	r3, r2
 8008cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cb2:	460a      	mov	r2, r1
 8008cb4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	791b      	ldrb	r3, [r3, #4]
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d128      	bne.n	8008d10 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d110      	bne.n	8008cf0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	015a      	lsls	r2, r3, #5
 8008cd2:	69fb      	ldr	r3, [r7, #28]
 8008cd4:	4413      	add	r3, r2
 8008cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	69ba      	ldr	r2, [r7, #24]
 8008cde:	0151      	lsls	r1, r2, #5
 8008ce0:	69fa      	ldr	r2, [r7, #28]
 8008ce2:	440a      	add	r2, r1
 8008ce4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ce8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008cec:	6013      	str	r3, [r2, #0]
 8008cee:	e00f      	b.n	8008d10 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	015a      	lsls	r2, r3, #5
 8008cf4:	69fb      	ldr	r3, [r7, #28]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	69ba      	ldr	r2, [r7, #24]
 8008d00:	0151      	lsls	r1, r2, #5
 8008d02:	69fa      	ldr	r2, [r7, #28]
 8008d04:	440a      	add	r2, r1
 8008d06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d0e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008d10:	69bb      	ldr	r3, [r7, #24]
 8008d12:	015a      	lsls	r2, r3, #5
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	4413      	add	r3, r2
 8008d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	69ba      	ldr	r2, [r7, #24]
 8008d20:	0151      	lsls	r1, r2, #5
 8008d22:	69fa      	ldr	r2, [r7, #28]
 8008d24:	440a      	add	r2, r1
 8008d26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3720      	adds	r7, #32
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	1ff80000 	.word	0x1ff80000

08008d40 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b087      	sub	sp, #28
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	785b      	ldrb	r3, [r3, #1]
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	f040 80ce 	bne.w	8008efe <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	699b      	ldr	r3, [r3, #24]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d132      	bne.n	8008dd0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	015a      	lsls	r2, r3, #5
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	4413      	add	r3, r2
 8008d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	693a      	ldr	r2, [r7, #16]
 8008d7a:	0151      	lsls	r1, r2, #5
 8008d7c:	697a      	ldr	r2, [r7, #20]
 8008d7e:	440a      	add	r2, r1
 8008d80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d84:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008d88:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008d8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	015a      	lsls	r2, r3, #5
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	4413      	add	r3, r2
 8008d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d9a:	691b      	ldr	r3, [r3, #16]
 8008d9c:	693a      	ldr	r2, [r7, #16]
 8008d9e:	0151      	lsls	r1, r2, #5
 8008da0:	697a      	ldr	r2, [r7, #20]
 8008da2:	440a      	add	r2, r1
 8008da4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008da8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008dac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	015a      	lsls	r2, r3, #5
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	4413      	add	r3, r2
 8008db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dba:	691b      	ldr	r3, [r3, #16]
 8008dbc:	693a      	ldr	r2, [r7, #16]
 8008dbe:	0151      	lsls	r1, r2, #5
 8008dc0:	697a      	ldr	r2, [r7, #20]
 8008dc2:	440a      	add	r2, r1
 8008dc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dc8:	0cdb      	lsrs	r3, r3, #19
 8008dca:	04db      	lsls	r3, r3, #19
 8008dcc:	6113      	str	r3, [r2, #16]
 8008dce:	e04e      	b.n	8008e6e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	015a      	lsls	r2, r3, #5
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	4413      	add	r3, r2
 8008dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ddc:	691b      	ldr	r3, [r3, #16]
 8008dde:	693a      	ldr	r2, [r7, #16]
 8008de0:	0151      	lsls	r1, r2, #5
 8008de2:	697a      	ldr	r2, [r7, #20]
 8008de4:	440a      	add	r2, r1
 8008de6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dea:	0cdb      	lsrs	r3, r3, #19
 8008dec:	04db      	lsls	r3, r3, #19
 8008dee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	015a      	lsls	r2, r3, #5
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	4413      	add	r3, r2
 8008df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dfc:	691b      	ldr	r3, [r3, #16]
 8008dfe:	693a      	ldr	r2, [r7, #16]
 8008e00:	0151      	lsls	r1, r2, #5
 8008e02:	697a      	ldr	r2, [r7, #20]
 8008e04:	440a      	add	r2, r1
 8008e06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e0a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008e0e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008e12:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	699a      	ldr	r2, [r3, #24]
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d903      	bls.n	8008e28 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	68da      	ldr	r2, [r3, #12]
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	015a      	lsls	r2, r3, #5
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	4413      	add	r3, r2
 8008e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e34:	691b      	ldr	r3, [r3, #16]
 8008e36:	693a      	ldr	r2, [r7, #16]
 8008e38:	0151      	lsls	r1, r2, #5
 8008e3a:	697a      	ldr	r2, [r7, #20]
 8008e3c:	440a      	add	r2, r1
 8008e3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	015a      	lsls	r2, r3, #5
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	4413      	add	r3, r2
 8008e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e54:	691a      	ldr	r2, [r3, #16]
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	699b      	ldr	r3, [r3, #24]
 8008e5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e5e:	6939      	ldr	r1, [r7, #16]
 8008e60:	0148      	lsls	r0, r1, #5
 8008e62:	6979      	ldr	r1, [r7, #20]
 8008e64:	4401      	add	r1, r0
 8008e66:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008e6e:	79fb      	ldrb	r3, [r7, #7]
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d11e      	bne.n	8008eb2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	695b      	ldr	r3, [r3, #20]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d009      	beq.n	8008e90 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	015a      	lsls	r2, r3, #5
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	4413      	add	r3, r2
 8008e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e88:	461a      	mov	r2, r3
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	695b      	ldr	r3, [r3, #20]
 8008e8e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	015a      	lsls	r2, r3, #5
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	4413      	add	r3, r2
 8008e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	693a      	ldr	r2, [r7, #16]
 8008ea0:	0151      	lsls	r1, r2, #5
 8008ea2:	697a      	ldr	r2, [r7, #20]
 8008ea4:	440a      	add	r2, r1
 8008ea6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eaa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008eae:	6013      	str	r3, [r2, #0]
 8008eb0:	e097      	b.n	8008fe2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	015a      	lsls	r2, r3, #5
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	4413      	add	r3, r2
 8008eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	693a      	ldr	r2, [r7, #16]
 8008ec2:	0151      	lsls	r1, r2, #5
 8008ec4:	697a      	ldr	r2, [r7, #20]
 8008ec6:	440a      	add	r2, r1
 8008ec8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ecc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ed0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	699b      	ldr	r3, [r3, #24]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f000 8083 	beq.w	8008fe2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ee2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	f003 030f 	and.w	r3, r3, #15
 8008eec:	2101      	movs	r1, #1
 8008eee:	fa01 f303 	lsl.w	r3, r1, r3
 8008ef2:	6979      	ldr	r1, [r7, #20]
 8008ef4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	634b      	str	r3, [r1, #52]	; 0x34
 8008efc:	e071      	b.n	8008fe2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	015a      	lsls	r2, r3, #5
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	4413      	add	r3, r2
 8008f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f0a:	691b      	ldr	r3, [r3, #16]
 8008f0c:	693a      	ldr	r2, [r7, #16]
 8008f0e:	0151      	lsls	r1, r2, #5
 8008f10:	697a      	ldr	r2, [r7, #20]
 8008f12:	440a      	add	r2, r1
 8008f14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f18:	0cdb      	lsrs	r3, r3, #19
 8008f1a:	04db      	lsls	r3, r3, #19
 8008f1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	015a      	lsls	r2, r3, #5
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	4413      	add	r3, r2
 8008f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f2a:	691b      	ldr	r3, [r3, #16]
 8008f2c:	693a      	ldr	r2, [r7, #16]
 8008f2e:	0151      	lsls	r1, r2, #5
 8008f30:	697a      	ldr	r2, [r7, #20]
 8008f32:	440a      	add	r2, r1
 8008f34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f38:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008f3c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008f40:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	699b      	ldr	r3, [r3, #24]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d003      	beq.n	8008f52 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	68da      	ldr	r2, [r3, #12]
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	68da      	ldr	r2, [r3, #12]
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	015a      	lsls	r2, r3, #5
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	4413      	add	r3, r2
 8008f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f66:	691b      	ldr	r3, [r3, #16]
 8008f68:	693a      	ldr	r2, [r7, #16]
 8008f6a:	0151      	lsls	r1, r2, #5
 8008f6c:	697a      	ldr	r2, [r7, #20]
 8008f6e:	440a      	add	r2, r1
 8008f70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	015a      	lsls	r2, r3, #5
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	4413      	add	r3, r2
 8008f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f86:	691a      	ldr	r2, [r3, #16]
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	69db      	ldr	r3, [r3, #28]
 8008f8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f90:	6939      	ldr	r1, [r7, #16]
 8008f92:	0148      	lsls	r0, r1, #5
 8008f94:	6979      	ldr	r1, [r7, #20]
 8008f96:	4401      	add	r1, r0
 8008f98:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008fa0:	79fb      	ldrb	r3, [r7, #7]
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d10d      	bne.n	8008fc2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	691b      	ldr	r3, [r3, #16]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d009      	beq.n	8008fc2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	6919      	ldr	r1, [r3, #16]
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	015a      	lsls	r2, r3, #5
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	4413      	add	r3, r2
 8008fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fbe:	460a      	mov	r2, r1
 8008fc0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	015a      	lsls	r2, r3, #5
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	4413      	add	r3, r2
 8008fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	693a      	ldr	r2, [r7, #16]
 8008fd2:	0151      	lsls	r1, r2, #5
 8008fd4:	697a      	ldr	r2, [r7, #20]
 8008fd6:	440a      	add	r2, r1
 8008fd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fdc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008fe0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008fe2:	2300      	movs	r3, #0
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	371c      	adds	r7, #28
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr

08008ff0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b087      	sub	sp, #28
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008ffe:	2300      	movs	r3, #0
 8009000:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	785b      	ldrb	r3, [r3, #1]
 800900a:	2b01      	cmp	r3, #1
 800900c:	d14a      	bne.n	80090a4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	015a      	lsls	r2, r3, #5
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	4413      	add	r3, r2
 8009018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009022:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009026:	f040 8086 	bne.w	8009136 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	015a      	lsls	r2, r3, #5
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	4413      	add	r3, r2
 8009034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	683a      	ldr	r2, [r7, #0]
 800903c:	7812      	ldrb	r2, [r2, #0]
 800903e:	0151      	lsls	r1, r2, #5
 8009040:	693a      	ldr	r2, [r7, #16]
 8009042:	440a      	add	r2, r1
 8009044:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009048:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800904c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	015a      	lsls	r2, r3, #5
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	4413      	add	r3, r2
 8009058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	683a      	ldr	r2, [r7, #0]
 8009060:	7812      	ldrb	r2, [r2, #0]
 8009062:	0151      	lsls	r1, r2, #5
 8009064:	693a      	ldr	r2, [r7, #16]
 8009066:	440a      	add	r2, r1
 8009068:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800906c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009070:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	3301      	adds	r3, #1
 8009076:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f242 7210 	movw	r2, #10000	; 0x2710
 800907e:	4293      	cmp	r3, r2
 8009080:	d902      	bls.n	8009088 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009082:	2301      	movs	r3, #1
 8009084:	75fb      	strb	r3, [r7, #23]
          break;
 8009086:	e056      	b.n	8009136 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	015a      	lsls	r2, r3, #5
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	4413      	add	r3, r2
 8009092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800909c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090a0:	d0e7      	beq.n	8009072 <USB_EPStopXfer+0x82>
 80090a2:	e048      	b.n	8009136 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	015a      	lsls	r2, r3, #5
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	4413      	add	r3, r2
 80090ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090bc:	d13b      	bne.n	8009136 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	781b      	ldrb	r3, [r3, #0]
 80090c2:	015a      	lsls	r2, r3, #5
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	4413      	add	r3, r2
 80090c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	683a      	ldr	r2, [r7, #0]
 80090d0:	7812      	ldrb	r2, [r2, #0]
 80090d2:	0151      	lsls	r1, r2, #5
 80090d4:	693a      	ldr	r2, [r7, #16]
 80090d6:	440a      	add	r2, r1
 80090d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80090e0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	015a      	lsls	r2, r3, #5
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	4413      	add	r3, r2
 80090ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	683a      	ldr	r2, [r7, #0]
 80090f4:	7812      	ldrb	r2, [r2, #0]
 80090f6:	0151      	lsls	r1, r2, #5
 80090f8:	693a      	ldr	r2, [r7, #16]
 80090fa:	440a      	add	r2, r1
 80090fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009100:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009104:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	3301      	adds	r3, #1
 800910a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f242 7210 	movw	r2, #10000	; 0x2710
 8009112:	4293      	cmp	r3, r2
 8009114:	d902      	bls.n	800911c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009116:	2301      	movs	r3, #1
 8009118:	75fb      	strb	r3, [r7, #23]
          break;
 800911a:	e00c      	b.n	8009136 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	015a      	lsls	r2, r3, #5
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	4413      	add	r3, r2
 8009126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009130:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009134:	d0e7      	beq.n	8009106 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009136:	7dfb      	ldrb	r3, [r7, #23]
}
 8009138:	4618      	mov	r0, r3
 800913a:	371c      	adds	r7, #28
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr

08009144 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009144:	b480      	push	{r7}
 8009146:	b089      	sub	sp, #36	; 0x24
 8009148:	af00      	add	r7, sp, #0
 800914a:	60f8      	str	r0, [r7, #12]
 800914c:	60b9      	str	r1, [r7, #8]
 800914e:	4611      	mov	r1, r2
 8009150:	461a      	mov	r2, r3
 8009152:	460b      	mov	r3, r1
 8009154:	71fb      	strb	r3, [r7, #7]
 8009156:	4613      	mov	r3, r2
 8009158:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009162:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009166:	2b00      	cmp	r3, #0
 8009168:	d123      	bne.n	80091b2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800916a:	88bb      	ldrh	r3, [r7, #4]
 800916c:	3303      	adds	r3, #3
 800916e:	089b      	lsrs	r3, r3, #2
 8009170:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009172:	2300      	movs	r3, #0
 8009174:	61bb      	str	r3, [r7, #24]
 8009176:	e018      	b.n	80091aa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009178:	79fb      	ldrb	r3, [r7, #7]
 800917a:	031a      	lsls	r2, r3, #12
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	4413      	add	r3, r2
 8009180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009184:	461a      	mov	r2, r3
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800918c:	69fb      	ldr	r3, [r7, #28]
 800918e:	3301      	adds	r3, #1
 8009190:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009192:	69fb      	ldr	r3, [r7, #28]
 8009194:	3301      	adds	r3, #1
 8009196:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009198:	69fb      	ldr	r3, [r7, #28]
 800919a:	3301      	adds	r3, #1
 800919c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800919e:	69fb      	ldr	r3, [r7, #28]
 80091a0:	3301      	adds	r3, #1
 80091a2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	3301      	adds	r3, #1
 80091a8:	61bb      	str	r3, [r7, #24]
 80091aa:	69ba      	ldr	r2, [r7, #24]
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d3e2      	bcc.n	8009178 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80091b2:	2300      	movs	r3, #0
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3724      	adds	r7, #36	; 0x24
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr

080091c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b08b      	sub	sp, #44	; 0x2c
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	4613      	mov	r3, r2
 80091cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80091d6:	88fb      	ldrh	r3, [r7, #6]
 80091d8:	089b      	lsrs	r3, r3, #2
 80091da:	b29b      	uxth	r3, r3
 80091dc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80091de:	88fb      	ldrh	r3, [r7, #6]
 80091e0:	f003 0303 	and.w	r3, r3, #3
 80091e4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80091e6:	2300      	movs	r3, #0
 80091e8:	623b      	str	r3, [r7, #32]
 80091ea:	e014      	b.n	8009216 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80091ec:	69bb      	ldr	r3, [r7, #24]
 80091ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f6:	601a      	str	r2, [r3, #0]
    pDest++;
 80091f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fa:	3301      	adds	r3, #1
 80091fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80091fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009200:	3301      	adds	r3, #1
 8009202:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009206:	3301      	adds	r3, #1
 8009208:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800920a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920c:	3301      	adds	r3, #1
 800920e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009210:	6a3b      	ldr	r3, [r7, #32]
 8009212:	3301      	adds	r3, #1
 8009214:	623b      	str	r3, [r7, #32]
 8009216:	6a3a      	ldr	r2, [r7, #32]
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	429a      	cmp	r2, r3
 800921c:	d3e6      	bcc.n	80091ec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800921e:	8bfb      	ldrh	r3, [r7, #30]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d01e      	beq.n	8009262 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009224:	2300      	movs	r3, #0
 8009226:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009228:	69bb      	ldr	r3, [r7, #24]
 800922a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800922e:	461a      	mov	r2, r3
 8009230:	f107 0310 	add.w	r3, r7, #16
 8009234:	6812      	ldr	r2, [r2, #0]
 8009236:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009238:	693a      	ldr	r2, [r7, #16]
 800923a:	6a3b      	ldr	r3, [r7, #32]
 800923c:	b2db      	uxtb	r3, r3
 800923e:	00db      	lsls	r3, r3, #3
 8009240:	fa22 f303 	lsr.w	r3, r2, r3
 8009244:	b2da      	uxtb	r2, r3
 8009246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009248:	701a      	strb	r2, [r3, #0]
      i++;
 800924a:	6a3b      	ldr	r3, [r7, #32]
 800924c:	3301      	adds	r3, #1
 800924e:	623b      	str	r3, [r7, #32]
      pDest++;
 8009250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009252:	3301      	adds	r3, #1
 8009254:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009256:	8bfb      	ldrh	r3, [r7, #30]
 8009258:	3b01      	subs	r3, #1
 800925a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800925c:	8bfb      	ldrh	r3, [r7, #30]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d1ea      	bne.n	8009238 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009264:	4618      	mov	r0, r3
 8009266:	372c      	adds	r7, #44	; 0x2c
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr

08009270 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009270:	b480      	push	{r7}
 8009272:	b085      	sub	sp, #20
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	785b      	ldrb	r3, [r3, #1]
 8009288:	2b01      	cmp	r3, #1
 800928a:	d12c      	bne.n	80092e6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	015a      	lsls	r2, r3, #5
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	4413      	add	r3, r2
 8009294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	2b00      	cmp	r3, #0
 800929c:	db12      	blt.n	80092c4 <USB_EPSetStall+0x54>
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d00f      	beq.n	80092c4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	015a      	lsls	r2, r3, #5
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	4413      	add	r3, r2
 80092ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	68ba      	ldr	r2, [r7, #8]
 80092b4:	0151      	lsls	r1, r2, #5
 80092b6:	68fa      	ldr	r2, [r7, #12]
 80092b8:	440a      	add	r2, r1
 80092ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80092c2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	015a      	lsls	r2, r3, #5
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	4413      	add	r3, r2
 80092cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	68ba      	ldr	r2, [r7, #8]
 80092d4:	0151      	lsls	r1, r2, #5
 80092d6:	68fa      	ldr	r2, [r7, #12]
 80092d8:	440a      	add	r2, r1
 80092da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80092e2:	6013      	str	r3, [r2, #0]
 80092e4:	e02b      	b.n	800933e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	015a      	lsls	r2, r3, #5
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	4413      	add	r3, r2
 80092ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	db12      	blt.n	800931e <USB_EPSetStall+0xae>
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d00f      	beq.n	800931e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	015a      	lsls	r2, r3, #5
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	4413      	add	r3, r2
 8009306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	68ba      	ldr	r2, [r7, #8]
 800930e:	0151      	lsls	r1, r2, #5
 8009310:	68fa      	ldr	r2, [r7, #12]
 8009312:	440a      	add	r2, r1
 8009314:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009318:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800931c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	015a      	lsls	r2, r3, #5
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	4413      	add	r3, r2
 8009326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	68ba      	ldr	r2, [r7, #8]
 800932e:	0151      	lsls	r1, r2, #5
 8009330:	68fa      	ldr	r2, [r7, #12]
 8009332:	440a      	add	r2, r1
 8009334:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009338:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800933c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800933e:	2300      	movs	r3, #0
}
 8009340:	4618      	mov	r0, r3
 8009342:	3714      	adds	r7, #20
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr

0800934c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800934c:	b480      	push	{r7}
 800934e:	b085      	sub	sp, #20
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	785b      	ldrb	r3, [r3, #1]
 8009364:	2b01      	cmp	r3, #1
 8009366:	d128      	bne.n	80093ba <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	015a      	lsls	r2, r3, #5
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	4413      	add	r3, r2
 8009370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	68ba      	ldr	r2, [r7, #8]
 8009378:	0151      	lsls	r1, r2, #5
 800937a:	68fa      	ldr	r2, [r7, #12]
 800937c:	440a      	add	r2, r1
 800937e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009382:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009386:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	791b      	ldrb	r3, [r3, #4]
 800938c:	2b03      	cmp	r3, #3
 800938e:	d003      	beq.n	8009398 <USB_EPClearStall+0x4c>
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	791b      	ldrb	r3, [r3, #4]
 8009394:	2b02      	cmp	r3, #2
 8009396:	d138      	bne.n	800940a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	015a      	lsls	r2, r3, #5
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	4413      	add	r3, r2
 80093a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	68ba      	ldr	r2, [r7, #8]
 80093a8:	0151      	lsls	r1, r2, #5
 80093aa:	68fa      	ldr	r2, [r7, #12]
 80093ac:	440a      	add	r2, r1
 80093ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093b6:	6013      	str	r3, [r2, #0]
 80093b8:	e027      	b.n	800940a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	015a      	lsls	r2, r3, #5
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	4413      	add	r3, r2
 80093c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	68ba      	ldr	r2, [r7, #8]
 80093ca:	0151      	lsls	r1, r2, #5
 80093cc:	68fa      	ldr	r2, [r7, #12]
 80093ce:	440a      	add	r2, r1
 80093d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80093d8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	791b      	ldrb	r3, [r3, #4]
 80093de:	2b03      	cmp	r3, #3
 80093e0:	d003      	beq.n	80093ea <USB_EPClearStall+0x9e>
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	791b      	ldrb	r3, [r3, #4]
 80093e6:	2b02      	cmp	r3, #2
 80093e8:	d10f      	bne.n	800940a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	015a      	lsls	r2, r3, #5
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	4413      	add	r3, r2
 80093f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	68ba      	ldr	r2, [r7, #8]
 80093fa:	0151      	lsls	r1, r2, #5
 80093fc:	68fa      	ldr	r2, [r7, #12]
 80093fe:	440a      	add	r2, r1
 8009400:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009408:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	3714      	adds	r7, #20
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr

08009418 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009418:	b480      	push	{r7}
 800941a:	b085      	sub	sp, #20
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	460b      	mov	r3, r1
 8009422:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	68fa      	ldr	r2, [r7, #12]
 8009432:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009436:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800943a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009442:	681a      	ldr	r2, [r3, #0]
 8009444:	78fb      	ldrb	r3, [r7, #3]
 8009446:	011b      	lsls	r3, r3, #4
 8009448:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800944c:	68f9      	ldr	r1, [r7, #12]
 800944e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009452:	4313      	orrs	r3, r2
 8009454:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009456:	2300      	movs	r3, #0
}
 8009458:	4618      	mov	r0, r3
 800945a:	3714      	adds	r7, #20
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009464:	b480      	push	{r7}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	68fa      	ldr	r2, [r7, #12]
 800947a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800947e:	f023 0303 	bic.w	r3, r3, #3
 8009482:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009492:	f023 0302 	bic.w	r3, r3, #2
 8009496:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3714      	adds	r7, #20
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr

080094a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80094a6:	b480      	push	{r7}
 80094a8:	b085      	sub	sp, #20
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	68fa      	ldr	r2, [r7, #12]
 80094bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80094c0:	f023 0303 	bic.w	r3, r3, #3
 80094c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	68fa      	ldr	r2, [r7, #12]
 80094d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094d4:	f043 0302 	orr.w	r3, r3, #2
 80094d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80094da:	2300      	movs	r3, #0
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3714      	adds	r7, #20
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr

080094e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b085      	sub	sp, #20
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	695b      	ldr	r3, [r3, #20]
 80094f4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	699b      	ldr	r3, [r3, #24]
 80094fa:	68fa      	ldr	r2, [r7, #12]
 80094fc:	4013      	ands	r3, r2
 80094fe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009500:	68fb      	ldr	r3, [r7, #12]
}
 8009502:	4618      	mov	r0, r3
 8009504:	3714      	adds	r7, #20
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr

0800950e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800950e:	b480      	push	{r7}
 8009510:	b085      	sub	sp, #20
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009520:	699b      	ldr	r3, [r3, #24]
 8009522:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800952a:	69db      	ldr	r3, [r3, #28]
 800952c:	68ba      	ldr	r2, [r7, #8]
 800952e:	4013      	ands	r3, r2
 8009530:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	0c1b      	lsrs	r3, r3, #16
}
 8009536:	4618      	mov	r0, r3
 8009538:	3714      	adds	r7, #20
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr

08009542 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009542:	b480      	push	{r7}
 8009544:	b085      	sub	sp, #20
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009554:	699b      	ldr	r3, [r3, #24]
 8009556:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800955e:	69db      	ldr	r3, [r3, #28]
 8009560:	68ba      	ldr	r2, [r7, #8]
 8009562:	4013      	ands	r3, r2
 8009564:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	b29b      	uxth	r3, r3
}
 800956a:	4618      	mov	r0, r3
 800956c:	3714      	adds	r7, #20
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr

08009576 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009576:	b480      	push	{r7}
 8009578:	b085      	sub	sp, #20
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
 800957e:	460b      	mov	r3, r1
 8009580:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009586:	78fb      	ldrb	r3, [r7, #3]
 8009588:	015a      	lsls	r2, r3, #5
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	4413      	add	r3, r2
 800958e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800959c:	695b      	ldr	r3, [r3, #20]
 800959e:	68ba      	ldr	r2, [r7, #8]
 80095a0:	4013      	ands	r3, r2
 80095a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80095a4:	68bb      	ldr	r3, [r7, #8]
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3714      	adds	r7, #20
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr

080095b2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80095b2:	b480      	push	{r7}
 80095b4:	b087      	sub	sp, #28
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
 80095ba:	460b      	mov	r3, r1
 80095bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095d4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80095d6:	78fb      	ldrb	r3, [r7, #3]
 80095d8:	f003 030f 	and.w	r3, r3, #15
 80095dc:	68fa      	ldr	r2, [r7, #12]
 80095de:	fa22 f303 	lsr.w	r3, r2, r3
 80095e2:	01db      	lsls	r3, r3, #7
 80095e4:	b2db      	uxtb	r3, r3
 80095e6:	693a      	ldr	r2, [r7, #16]
 80095e8:	4313      	orrs	r3, r2
 80095ea:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80095ec:	78fb      	ldrb	r3, [r7, #3]
 80095ee:	015a      	lsls	r2, r3, #5
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	4413      	add	r3, r2
 80095f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	693a      	ldr	r2, [r7, #16]
 80095fc:	4013      	ands	r3, r2
 80095fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009600:	68bb      	ldr	r3, [r7, #8]
}
 8009602:	4618      	mov	r0, r3
 8009604:	371c      	adds	r7, #28
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr

0800960e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800960e:	b480      	push	{r7}
 8009610:	b083      	sub	sp, #12
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	695b      	ldr	r3, [r3, #20]
 800961a:	f003 0301 	and.w	r3, r3, #1
}
 800961e:	4618      	mov	r0, r3
 8009620:	370c      	adds	r7, #12
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr

0800962a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800962a:	b480      	push	{r7}
 800962c:	b085      	sub	sp, #20
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	68fa      	ldr	r2, [r7, #12]
 8009640:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009644:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009648:	f023 0307 	bic.w	r3, r3, #7
 800964c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	68fa      	ldr	r2, [r7, #12]
 8009658:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800965c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009660:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009662:	2300      	movs	r3, #0
}
 8009664:	4618      	mov	r0, r3
 8009666:	3714      	adds	r7, #20
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr

08009670 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009670:	b480      	push	{r7}
 8009672:	b087      	sub	sp, #28
 8009674:	af00      	add	r7, sp, #0
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	460b      	mov	r3, r1
 800967a:	607a      	str	r2, [r7, #4]
 800967c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	333c      	adds	r3, #60	; 0x3c
 8009686:	3304      	adds	r3, #4
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	4a26      	ldr	r2, [pc, #152]	; (8009728 <USB_EP0_OutStart+0xb8>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d90a      	bls.n	80096aa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096a4:	d101      	bne.n	80096aa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80096a6:	2300      	movs	r3, #0
 80096a8:	e037      	b.n	800971a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096b0:	461a      	mov	r2, r3
 80096b2:	2300      	movs	r3, #0
 80096b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096bc:	691b      	ldr	r3, [r3, #16]
 80096be:	697a      	ldr	r2, [r7, #20]
 80096c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80096c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096d0:	691b      	ldr	r3, [r3, #16]
 80096d2:	697a      	ldr	r2, [r7, #20]
 80096d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096d8:	f043 0318 	orr.w	r3, r3, #24
 80096dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096e4:	691b      	ldr	r3, [r3, #16]
 80096e6:	697a      	ldr	r2, [r7, #20]
 80096e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096ec:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80096f0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80096f2:	7afb      	ldrb	r3, [r7, #11]
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d10f      	bne.n	8009718 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096fe:	461a      	mov	r2, r3
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	697a      	ldr	r2, [r7, #20]
 800970e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009712:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009716:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009718:	2300      	movs	r3, #0
}
 800971a:	4618      	mov	r0, r3
 800971c:	371c      	adds	r7, #28
 800971e:	46bd      	mov	sp, r7
 8009720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009724:	4770      	bx	lr
 8009726:	bf00      	nop
 8009728:	4f54300a 	.word	0x4f54300a

0800972c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800972c:	b480      	push	{r7}
 800972e:	b085      	sub	sp, #20
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009734:	2300      	movs	r3, #0
 8009736:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	3301      	adds	r3, #1
 800973c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	4a13      	ldr	r2, [pc, #76]	; (8009790 <USB_CoreReset+0x64>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d901      	bls.n	800974a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009746:	2303      	movs	r3, #3
 8009748:	e01b      	b.n	8009782 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	691b      	ldr	r3, [r3, #16]
 800974e:	2b00      	cmp	r3, #0
 8009750:	daf2      	bge.n	8009738 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009752:	2300      	movs	r3, #0
 8009754:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	691b      	ldr	r3, [r3, #16]
 800975a:	f043 0201 	orr.w	r2, r3, #1
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	3301      	adds	r3, #1
 8009766:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	4a09      	ldr	r2, [pc, #36]	; (8009790 <USB_CoreReset+0x64>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d901      	bls.n	8009774 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009770:	2303      	movs	r3, #3
 8009772:	e006      	b.n	8009782 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	691b      	ldr	r3, [r3, #16]
 8009778:	f003 0301 	and.w	r3, r3, #1
 800977c:	2b01      	cmp	r3, #1
 800977e:	d0f0      	beq.n	8009762 <USB_CoreReset+0x36>

  return HAL_OK;
 8009780:	2300      	movs	r3, #0
}
 8009782:	4618      	mov	r0, r3
 8009784:	3714      	adds	r7, #20
 8009786:	46bd      	mov	sp, r7
 8009788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978c:	4770      	bx	lr
 800978e:	bf00      	nop
 8009790:	00030d40 	.word	0x00030d40

08009794 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	460b      	mov	r3, r1
 800979e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80097a0:	205c      	movs	r0, #92	; 0x5c
 80097a2:	f002 fcad 	bl	800c100 <USBD_static_malloc>
 80097a6:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d109      	bne.n	80097c2 <USBD_CDC_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	32b0      	adds	r2, #176	; 0xb0
 80097b8:	2100      	movs	r1, #0
 80097ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80097be:	2302      	movs	r3, #2
 80097c0:	e0ca      	b.n	8009958 <USBD_CDC_Init+0x1c4>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80097c2:	225c      	movs	r2, #92	; 0x5c
 80097c4:	2100      	movs	r1, #0
 80097c6:	68f8      	ldr	r0, [r7, #12]
 80097c8:	f002 fd08 	bl	800c1dc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	32b0      	adds	r2, #176	; 0xb0
 80097d6:	68f9      	ldr	r1, [r7, #12]
 80097d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	32b0      	adds	r2, #176	; 0xb0
 80097e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	7c1b      	ldrb	r3, [r3, #16]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d136      	bne.n	8009866 <USBD_CDC_Init+0xd2>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80097f8:	4b59      	ldr	r3, [pc, #356]	; (8009960 <USBD_CDC_Init+0x1cc>)
 80097fa:	7819      	ldrb	r1, [r3, #0]
 80097fc:	2340      	movs	r3, #64	; 0x40
 80097fe:	2202      	movs	r2, #2
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f002 fb5a 	bl	800beba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009806:	4b56      	ldr	r3, [pc, #344]	; (8009960 <USBD_CDC_Init+0x1cc>)
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	f003 020f 	and.w	r2, r3, #15
 800980e:	6879      	ldr	r1, [r7, #4]
 8009810:	4613      	mov	r3, r2
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	4413      	add	r3, r2
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	440b      	add	r3, r1
 800981a:	3324      	adds	r3, #36	; 0x24
 800981c:	2201      	movs	r2, #1
 800981e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009820:	4b50      	ldr	r3, [pc, #320]	; (8009964 <USBD_CDC_Init+0x1d0>)
 8009822:	7819      	ldrb	r1, [r3, #0]
 8009824:	2340      	movs	r3, #64	; 0x40
 8009826:	2202      	movs	r2, #2
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f002 fb46 	bl	800beba <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800982e:	4b4d      	ldr	r3, [pc, #308]	; (8009964 <USBD_CDC_Init+0x1d0>)
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	f003 020f 	and.w	r2, r3, #15
 8009836:	6879      	ldr	r1, [r7, #4]
 8009838:	4613      	mov	r3, r2
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	4413      	add	r3, r2
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	440b      	add	r3, r1
 8009842:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009846:	2201      	movs	r2, #1
 8009848:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800984a:	4b47      	ldr	r3, [pc, #284]	; (8009968 <USBD_CDC_Init+0x1d4>)
 800984c:	781b      	ldrb	r3, [r3, #0]
 800984e:	f003 020f 	and.w	r2, r3, #15
 8009852:	6879      	ldr	r1, [r7, #4]
 8009854:	4613      	mov	r3, r2
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	4413      	add	r3, r2
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	440b      	add	r3, r1
 800985e:	3326      	adds	r3, #38	; 0x26
 8009860:	2210      	movs	r2, #16
 8009862:	801a      	strh	r2, [r3, #0]
 8009864:	e035      	b.n	80098d2 <USBD_CDC_Init+0x13e>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009866:	4b3e      	ldr	r3, [pc, #248]	; (8009960 <USBD_CDC_Init+0x1cc>)
 8009868:	7819      	ldrb	r1, [r3, #0]
 800986a:	2340      	movs	r3, #64	; 0x40
 800986c:	2202      	movs	r2, #2
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f002 fb23 	bl	800beba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009874:	4b3a      	ldr	r3, [pc, #232]	; (8009960 <USBD_CDC_Init+0x1cc>)
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	f003 020f 	and.w	r2, r3, #15
 800987c:	6879      	ldr	r1, [r7, #4]
 800987e:	4613      	mov	r3, r2
 8009880:	009b      	lsls	r3, r3, #2
 8009882:	4413      	add	r3, r2
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	440b      	add	r3, r1
 8009888:	3324      	adds	r3, #36	; 0x24
 800988a:	2201      	movs	r2, #1
 800988c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800988e:	4b35      	ldr	r3, [pc, #212]	; (8009964 <USBD_CDC_Init+0x1d0>)
 8009890:	7819      	ldrb	r1, [r3, #0]
 8009892:	2340      	movs	r3, #64	; 0x40
 8009894:	2202      	movs	r2, #2
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f002 fb0f 	bl	800beba <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800989c:	4b31      	ldr	r3, [pc, #196]	; (8009964 <USBD_CDC_Init+0x1d0>)
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	f003 020f 	and.w	r2, r3, #15
 80098a4:	6879      	ldr	r1, [r7, #4]
 80098a6:	4613      	mov	r3, r2
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	4413      	add	r3, r2
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	440b      	add	r3, r1
 80098b0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80098b4:	2201      	movs	r2, #1
 80098b6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80098b8:	4b2b      	ldr	r3, [pc, #172]	; (8009968 <USBD_CDC_Init+0x1d4>)
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	f003 020f 	and.w	r2, r3, #15
 80098c0:	6879      	ldr	r1, [r7, #4]
 80098c2:	4613      	mov	r3, r2
 80098c4:	009b      	lsls	r3, r3, #2
 80098c6:	4413      	add	r3, r2
 80098c8:	009b      	lsls	r3, r3, #2
 80098ca:	440b      	add	r3, r1
 80098cc:	3326      	adds	r3, #38	; 0x26
 80098ce:	2210      	movs	r2, #16
 80098d0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80098d2:	4b25      	ldr	r3, [pc, #148]	; (8009968 <USBD_CDC_Init+0x1d4>)
 80098d4:	7819      	ldrb	r1, [r3, #0]
 80098d6:	2308      	movs	r3, #8
 80098d8:	2203      	movs	r2, #3
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f002 faed 	bl	800beba <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80098e0:	4b21      	ldr	r3, [pc, #132]	; (8009968 <USBD_CDC_Init+0x1d4>)
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	f003 020f 	and.w	r2, r3, #15
 80098e8:	6879      	ldr	r1, [r7, #4]
 80098ea:	4613      	mov	r3, r2
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	4413      	add	r3, r2
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	440b      	add	r3, r1
 80098f4:	3324      	adds	r3, #36	; 0x24
 80098f6:	2201      	movs	r2, #1
 80098f8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2200      	movs	r2, #0
 80098fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	33b0      	adds	r3, #176	; 0xb0
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	4413      	add	r3, r2
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2200      	movs	r2, #0
 8009918:	655a      	str	r2, [r3, #84]	; 0x54
  hcdc->RxState = 0U;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2200      	movs	r2, #0
 800991e:	659a      	str	r2, [r3, #88]	; 0x58

  if (hcdc->RxBuffer == NULL)
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009924:	2b00      	cmp	r3, #0
 8009926:	d101      	bne.n	800992c <USBD_CDC_Init+0x198>
  {
    return (uint8_t)USBD_EMEM;
 8009928:	2302      	movs	r3, #2
 800992a:	e015      	b.n	8009958 <USBD_CDC_Init+0x1c4>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	7c1b      	ldrb	r3, [r3, #16]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d108      	bne.n	8009946 <USBD_CDC_Init+0x1b2>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009934:	4b0b      	ldr	r3, [pc, #44]	; (8009964 <USBD_CDC_Init+0x1d0>)
 8009936:	7819      	ldrb	r1, [r3, #0]
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800993c:	2340      	movs	r3, #64	; 0x40
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f002 fbaa 	bl	800c098 <USBD_LL_PrepareReceive>
 8009944:	e007      	b.n	8009956 <USBD_CDC_Init+0x1c2>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009946:	4b07      	ldr	r3, [pc, #28]	; (8009964 <USBD_CDC_Init+0x1d0>)
 8009948:	7819      	ldrb	r1, [r3, #0]
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800994e:	2340      	movs	r3, #64	; 0x40
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f002 fba1 	bl	800c098 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009956:	2300      	movs	r3, #0
}
 8009958:	4618      	mov	r0, r3
 800995a:	3710      	adds	r7, #16
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}
 8009960:	2000010f 	.word	0x2000010f
 8009964:	20000110 	.word	0x20000110
 8009968:	20000111 	.word	0x20000111

0800996c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b082      	sub	sp, #8
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	460b      	mov	r3, r1
 8009976:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009978:	4b3a      	ldr	r3, [pc, #232]	; (8009a64 <USBD_CDC_DeInit+0xf8>)
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	4619      	mov	r1, r3
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f002 fac1 	bl	800bf06 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009984:	4b37      	ldr	r3, [pc, #220]	; (8009a64 <USBD_CDC_DeInit+0xf8>)
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	f003 020f 	and.w	r2, r3, #15
 800998c:	6879      	ldr	r1, [r7, #4]
 800998e:	4613      	mov	r3, r2
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	4413      	add	r3, r2
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	440b      	add	r3, r1
 8009998:	3324      	adds	r3, #36	; 0x24
 800999a:	2200      	movs	r2, #0
 800999c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800999e:	4b32      	ldr	r3, [pc, #200]	; (8009a68 <USBD_CDC_DeInit+0xfc>)
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	4619      	mov	r1, r3
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f002 faae 	bl	800bf06 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80099aa:	4b2f      	ldr	r3, [pc, #188]	; (8009a68 <USBD_CDC_DeInit+0xfc>)
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	f003 020f 	and.w	r2, r3, #15
 80099b2:	6879      	ldr	r1, [r7, #4]
 80099b4:	4613      	mov	r3, r2
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	4413      	add	r3, r2
 80099ba:	009b      	lsls	r3, r3, #2
 80099bc:	440b      	add	r3, r1
 80099be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80099c2:	2200      	movs	r2, #0
 80099c4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80099c6:	4b29      	ldr	r3, [pc, #164]	; (8009a6c <USBD_CDC_DeInit+0x100>)
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	4619      	mov	r1, r3
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f002 fa9a 	bl	800bf06 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80099d2:	4b26      	ldr	r3, [pc, #152]	; (8009a6c <USBD_CDC_DeInit+0x100>)
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	f003 020f 	and.w	r2, r3, #15
 80099da:	6879      	ldr	r1, [r7, #4]
 80099dc:	4613      	mov	r3, r2
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	4413      	add	r3, r2
 80099e2:	009b      	lsls	r3, r3, #2
 80099e4:	440b      	add	r3, r1
 80099e6:	3324      	adds	r3, #36	; 0x24
 80099e8:	2200      	movs	r2, #0
 80099ea:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80099ec:	4b1f      	ldr	r3, [pc, #124]	; (8009a6c <USBD_CDC_DeInit+0x100>)
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	f003 020f 	and.w	r2, r3, #15
 80099f4:	6879      	ldr	r1, [r7, #4]
 80099f6:	4613      	mov	r3, r2
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	4413      	add	r3, r2
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	440b      	add	r3, r1
 8009a00:	3326      	adds	r3, #38	; 0x26
 8009a02:	2200      	movs	r2, #0
 8009a04:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	32b0      	adds	r2, #176	; 0xb0
 8009a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d01f      	beq.n	8009a58 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	33b0      	adds	r3, #176	; 0xb0
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	4413      	add	r3, r2
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	32b0      	adds	r2, #176	; 0xb0
 8009a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f002 fb6e 	bl	800c11c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	32b0      	adds	r2, #176	; 0xb0
 8009a4a:	2100      	movs	r1, #0
 8009a4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009a58:	2300      	movs	r3, #0
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3708      	adds	r7, #8
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	bf00      	nop
 8009a64:	2000010f 	.word	0x2000010f
 8009a68:	20000110 	.word	0x20000110
 8009a6c:	20000111 	.word	0x20000111

08009a70 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b086      	sub	sp, #24
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	32b0      	adds	r2, #176	; 0xb0
 8009a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a88:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a92:	2300      	movs	r3, #0
 8009a94:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d101      	bne.n	8009aa0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009a9c:	2303      	movs	r3, #3
 8009a9e:	e0bf      	b.n	8009c20 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d050      	beq.n	8009b4e <USBD_CDC_Setup+0xde>
 8009aac:	2b20      	cmp	r3, #32
 8009aae:	f040 80af 	bne.w	8009c10 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	88db      	ldrh	r3, [r3, #6]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d03a      	beq.n	8009b30 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	b25b      	sxtb	r3, r3
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	da1b      	bge.n	8009afc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	33b0      	adds	r3, #176	; 0xb0
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	4413      	add	r3, r2
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	689b      	ldr	r3, [r3, #8]
 8009ad6:	683a      	ldr	r2, [r7, #0]
 8009ad8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009ada:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009adc:	683a      	ldr	r2, [r7, #0]
 8009ade:	88d2      	ldrh	r2, [r2, #6]
 8009ae0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	88db      	ldrh	r3, [r3, #6]
 8009ae6:	2b07      	cmp	r3, #7
 8009ae8:	bf28      	it	cs
 8009aea:	2307      	movcs	r3, #7
 8009aec:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	89fa      	ldrh	r2, [r7, #14]
 8009af2:	4619      	mov	r1, r3
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f001 fd79 	bl	800b5ec <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009afa:	e090      	b.n	8009c1e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	785a      	ldrb	r2, [r3, #1]
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	88db      	ldrh	r3, [r3, #6]
 8009b0a:	2b3f      	cmp	r3, #63	; 0x3f
 8009b0c:	d803      	bhi.n	8009b16 <USBD_CDC_Setup+0xa6>
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	88db      	ldrh	r3, [r3, #6]
 8009b12:	b2da      	uxtb	r2, r3
 8009b14:	e000      	b.n	8009b18 <USBD_CDC_Setup+0xa8>
 8009b16:	2240      	movs	r2, #64	; 0x40
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009b1e:	6939      	ldr	r1, [r7, #16]
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b26:	461a      	mov	r2, r3
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f001 fd8b 	bl	800b644 <USBD_CtlPrepareRx>
      break;
 8009b2e:	e076      	b.n	8009c1e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	33b0      	adds	r3, #176	; 0xb0
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	4413      	add	r3, r2
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	683a      	ldr	r2, [r7, #0]
 8009b44:	7850      	ldrb	r0, [r2, #1]
 8009b46:	2200      	movs	r2, #0
 8009b48:	6839      	ldr	r1, [r7, #0]
 8009b4a:	4798      	blx	r3
      break;
 8009b4c:	e067      	b.n	8009c1e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	785b      	ldrb	r3, [r3, #1]
 8009b52:	2b0b      	cmp	r3, #11
 8009b54:	d851      	bhi.n	8009bfa <USBD_CDC_Setup+0x18a>
 8009b56:	a201      	add	r2, pc, #4	; (adr r2, 8009b5c <USBD_CDC_Setup+0xec>)
 8009b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b5c:	08009b8d 	.word	0x08009b8d
 8009b60:	08009c09 	.word	0x08009c09
 8009b64:	08009bfb 	.word	0x08009bfb
 8009b68:	08009bfb 	.word	0x08009bfb
 8009b6c:	08009bfb 	.word	0x08009bfb
 8009b70:	08009bfb 	.word	0x08009bfb
 8009b74:	08009bfb 	.word	0x08009bfb
 8009b78:	08009bfb 	.word	0x08009bfb
 8009b7c:	08009bfb 	.word	0x08009bfb
 8009b80:	08009bfb 	.word	0x08009bfb
 8009b84:	08009bb7 	.word	0x08009bb7
 8009b88:	08009be1 	.word	0x08009be1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	2b03      	cmp	r3, #3
 8009b96:	d107      	bne.n	8009ba8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009b98:	f107 030a 	add.w	r3, r7, #10
 8009b9c:	2202      	movs	r2, #2
 8009b9e:	4619      	mov	r1, r3
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f001 fd23 	bl	800b5ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009ba6:	e032      	b.n	8009c0e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009ba8:	6839      	ldr	r1, [r7, #0]
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f001 fcad 	bl	800b50a <USBD_CtlError>
            ret = USBD_FAIL;
 8009bb0:	2303      	movs	r3, #3
 8009bb2:	75fb      	strb	r3, [r7, #23]
          break;
 8009bb4:	e02b      	b.n	8009c0e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bbc:	b2db      	uxtb	r3, r3
 8009bbe:	2b03      	cmp	r3, #3
 8009bc0:	d107      	bne.n	8009bd2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009bc2:	f107 030d 	add.w	r3, r7, #13
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	4619      	mov	r1, r3
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f001 fd0e 	bl	800b5ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009bd0:	e01d      	b.n	8009c0e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009bd2:	6839      	ldr	r1, [r7, #0]
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f001 fc98 	bl	800b50a <USBD_CtlError>
            ret = USBD_FAIL;
 8009bda:	2303      	movs	r3, #3
 8009bdc:	75fb      	strb	r3, [r7, #23]
          break;
 8009bde:	e016      	b.n	8009c0e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	2b03      	cmp	r3, #3
 8009bea:	d00f      	beq.n	8009c0c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009bec:	6839      	ldr	r1, [r7, #0]
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f001 fc8b 	bl	800b50a <USBD_CtlError>
            ret = USBD_FAIL;
 8009bf4:	2303      	movs	r3, #3
 8009bf6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009bf8:	e008      	b.n	8009c0c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009bfa:	6839      	ldr	r1, [r7, #0]
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f001 fc84 	bl	800b50a <USBD_CtlError>
          ret = USBD_FAIL;
 8009c02:	2303      	movs	r3, #3
 8009c04:	75fb      	strb	r3, [r7, #23]
          break;
 8009c06:	e002      	b.n	8009c0e <USBD_CDC_Setup+0x19e>
          break;
 8009c08:	bf00      	nop
 8009c0a:	e008      	b.n	8009c1e <USBD_CDC_Setup+0x1ae>
          break;
 8009c0c:	bf00      	nop
      }
      break;
 8009c0e:	e006      	b.n	8009c1e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009c10:	6839      	ldr	r1, [r7, #0]
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f001 fc79 	bl	800b50a <USBD_CtlError>
      ret = USBD_FAIL;
 8009c18:	2303      	movs	r3, #3
 8009c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8009c1c:	bf00      	nop
  }

  return (uint8_t)ret;
 8009c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3718      	adds	r7, #24
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b084      	sub	sp, #16
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	460b      	mov	r3, r1
 8009c32:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009c3a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	32b0      	adds	r2, #176	; 0xb0
 8009c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d101      	bne.n	8009c52 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009c4e:	2303      	movs	r3, #3
 8009c50:	e063      	b.n	8009d1a <USBD_CDC_DataIn+0xf2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	32b0      	adds	r2, #176	; 0xb0
 8009c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c60:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009c62:	78fb      	ldrb	r3, [r7, #3]
 8009c64:	f003 020f 	and.w	r2, r3, #15
 8009c68:	6879      	ldr	r1, [r7, #4]
 8009c6a:	4613      	mov	r3, r2
 8009c6c:	009b      	lsls	r3, r3, #2
 8009c6e:	4413      	add	r3, r2
 8009c70:	009b      	lsls	r3, r3, #2
 8009c72:	440b      	add	r3, r1
 8009c74:	3318      	adds	r3, #24
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d02f      	beq.n	8009cdc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009c7c:	78fb      	ldrb	r3, [r7, #3]
 8009c7e:	f003 020f 	and.w	r2, r3, #15
 8009c82:	6879      	ldr	r1, [r7, #4]
 8009c84:	4613      	mov	r3, r2
 8009c86:	009b      	lsls	r3, r3, #2
 8009c88:	4413      	add	r3, r2
 8009c8a:	009b      	lsls	r3, r3, #2
 8009c8c:	440b      	add	r3, r1
 8009c8e:	3318      	adds	r3, #24
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	78fb      	ldrb	r3, [r7, #3]
 8009c94:	f003 010f 	and.w	r1, r3, #15
 8009c98:	68f8      	ldr	r0, [r7, #12]
 8009c9a:	460b      	mov	r3, r1
 8009c9c:	00db      	lsls	r3, r3, #3
 8009c9e:	440b      	add	r3, r1
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	4403      	add	r3, r0
 8009ca4:	3348      	adds	r3, #72	; 0x48
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	fbb2 f1f3 	udiv	r1, r2, r3
 8009cac:	fb01 f303 	mul.w	r3, r1, r3
 8009cb0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d112      	bne.n	8009cdc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009cb6:	78fb      	ldrb	r3, [r7, #3]
 8009cb8:	f003 020f 	and.w	r2, r3, #15
 8009cbc:	6879      	ldr	r1, [r7, #4]
 8009cbe:	4613      	mov	r3, r2
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	4413      	add	r3, r2
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	440b      	add	r3, r1
 8009cc8:	3318      	adds	r3, #24
 8009cca:	2200      	movs	r2, #0
 8009ccc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009cce:	78f9      	ldrb	r1, [r7, #3]
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f002 f9be 	bl	800c056 <USBD_LL_Transmit>
 8009cda:	e01d      	b.n	8009d18 <USBD_CDC_DataIn+0xf0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	655a      	str	r2, [r3, #84]	; 0x54

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ce8:	687a      	ldr	r2, [r7, #4]
 8009cea:	33b0      	adds	r3, #176	; 0xb0
 8009cec:	009b      	lsls	r3, r3, #2
 8009cee:	4413      	add	r3, r2
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	691b      	ldr	r3, [r3, #16]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d00f      	beq.n	8009d18 <USBD_CDC_DataIn+0xf0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009cfe:	687a      	ldr	r2, [r7, #4]
 8009d00:	33b0      	adds	r3, #176	; 0xb0
 8009d02:	009b      	lsls	r3, r3, #2
 8009d04:	4413      	add	r3, r2
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	691b      	ldr	r3, [r3, #16]
 8009d0a:	68ba      	ldr	r2, [r7, #8]
 8009d0c:	6c90      	ldr	r0, [r2, #72]	; 0x48
 8009d0e:	68ba      	ldr	r2, [r7, #8]
 8009d10:	f102 0150 	add.w	r1, r2, #80	; 0x50
 8009d14:	78fa      	ldrb	r2, [r7, #3]
 8009d16:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009d18:	2300      	movs	r3, #0
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3710      	adds	r7, #16
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}

08009d22 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b084      	sub	sp, #16
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
 8009d2a:	460b      	mov	r3, r1
 8009d2c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	32b0      	adds	r2, #176	; 0xb0
 8009d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d3c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	32b0      	adds	r2, #176	; 0xb0
 8009d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d101      	bne.n	8009d54 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009d50:	2303      	movs	r3, #3
 8009d52:	e017      	b.n	8009d84 <USBD_CDC_DataOut+0x62>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009d54:	78fb      	ldrb	r3, [r7, #3]
 8009d56:	4619      	mov	r1, r3
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f002 f9be 	bl	800c0da <USBD_LL_GetRxDataSize>
 8009d5e:	4602      	mov	r2, r0
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	33b0      	adds	r3, #176	; 0xb0
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	4413      	add	r3, r2
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	68db      	ldr	r3, [r3, #12]
 8009d76:	68fa      	ldr	r2, [r7, #12]
 8009d78:	6c50      	ldr	r0, [r2, #68]	; 0x44
 8009d7a:	68fa      	ldr	r2, [r7, #12]
 8009d7c:	324c      	adds	r2, #76	; 0x4c
 8009d7e:	4611      	mov	r1, r2
 8009d80:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009d82:	2300      	movs	r3, #0
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3710      	adds	r7, #16
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	32b0      	adds	r2, #176	; 0xb0
 8009d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009da2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d101      	bne.n	8009dae <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009daa:	2303      	movs	r3, #3
 8009dac:	e025      	b.n	8009dfa <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	33b0      	adds	r3, #176	; 0xb0
 8009db8:	009b      	lsls	r3, r3, #2
 8009dba:	4413      	add	r3, r2
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d01a      	beq.n	8009df8 <USBD_CDC_EP0_RxReady+0x6c>
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009dc8:	2bff      	cmp	r3, #255	; 0xff
 8009dca:	d015      	beq.n	8009df8 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	33b0      	adds	r3, #176	; 0xb0
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	4413      	add	r3, r2
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	689b      	ldr	r3, [r3, #8]
 8009dde:	68fa      	ldr	r2, [r7, #12]
 8009de0:	f892 0040 	ldrb.w	r0, [r2, #64]	; 0x40
                                                                     (uint8_t *)hcdc->data,
 8009de4:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009de6:	68fa      	ldr	r2, [r7, #12]
 8009de8:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009dec:	b292      	uxth	r2, r2
 8009dee:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	22ff      	movs	r2, #255	; 0xff
 8009df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return (uint8_t)USBD_OK;
 8009df8:	2300      	movs	r3, #0
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3710      	adds	r7, #16
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
	...

08009e04 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b086      	sub	sp, #24
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009e0c:	2182      	movs	r1, #130	; 0x82
 8009e0e:	4818      	ldr	r0, [pc, #96]	; (8009e70 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009e10:	f000 fd43 	bl	800a89a <USBD_GetEpDesc>
 8009e14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009e16:	2101      	movs	r1, #1
 8009e18:	4815      	ldr	r0, [pc, #84]	; (8009e70 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009e1a:	f000 fd3e 	bl	800a89a <USBD_GetEpDesc>
 8009e1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009e20:	2181      	movs	r1, #129	; 0x81
 8009e22:	4813      	ldr	r0, [pc, #76]	; (8009e70 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009e24:	f000 fd39 	bl	800a89a <USBD_GetEpDesc>
 8009e28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d002      	beq.n	8009e36 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	2210      	movs	r2, #16
 8009e34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d006      	beq.n	8009e4a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e44:	711a      	strb	r2, [r3, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d006      	beq.n	8009e5e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e58:	711a      	strb	r2, [r3, #4]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2243      	movs	r2, #67	; 0x43
 8009e62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009e64:	4b02      	ldr	r3, [pc, #8]	; (8009e70 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3718      	adds	r7, #24
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	200000cc 	.word	0x200000cc

08009e74 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b086      	sub	sp, #24
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009e7c:	2182      	movs	r1, #130	; 0x82
 8009e7e:	4818      	ldr	r0, [pc, #96]	; (8009ee0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009e80:	f000 fd0b 	bl	800a89a <USBD_GetEpDesc>
 8009e84:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009e86:	2101      	movs	r1, #1
 8009e88:	4815      	ldr	r0, [pc, #84]	; (8009ee0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009e8a:	f000 fd06 	bl	800a89a <USBD_GetEpDesc>
 8009e8e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009e90:	2181      	movs	r1, #129	; 0x81
 8009e92:	4813      	ldr	r0, [pc, #76]	; (8009ee0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009e94:	f000 fd01 	bl	800a89a <USBD_GetEpDesc>
 8009e98:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d002      	beq.n	8009ea6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	2210      	movs	r2, #16
 8009ea4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d006      	beq.n	8009eba <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009eb4:	711a      	strb	r2, [r3, #4]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d006      	beq.n	8009ece <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ec8:	711a      	strb	r2, [r3, #4]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2243      	movs	r2, #67	; 0x43
 8009ed2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009ed4:	4b02      	ldr	r3, [pc, #8]	; (8009ee0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3718      	adds	r7, #24
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
 8009ede:	bf00      	nop
 8009ee0:	200000cc 	.word	0x200000cc

08009ee4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b086      	sub	sp, #24
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009eec:	2182      	movs	r1, #130	; 0x82
 8009eee:	4818      	ldr	r0, [pc, #96]	; (8009f50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009ef0:	f000 fcd3 	bl	800a89a <USBD_GetEpDesc>
 8009ef4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009ef6:	2101      	movs	r1, #1
 8009ef8:	4815      	ldr	r0, [pc, #84]	; (8009f50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009efa:	f000 fcce 	bl	800a89a <USBD_GetEpDesc>
 8009efe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009f00:	2181      	movs	r1, #129	; 0x81
 8009f02:	4813      	ldr	r0, [pc, #76]	; (8009f50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009f04:	f000 fcc9 	bl	800a89a <USBD_GetEpDesc>
 8009f08:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d002      	beq.n	8009f16 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	2210      	movs	r2, #16
 8009f14:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d006      	beq.n	8009f2a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f24:	711a      	strb	r2, [r3, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d006      	beq.n	8009f3e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2200      	movs	r2, #0
 8009f34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f38:	711a      	strb	r2, [r3, #4]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2243      	movs	r2, #67	; 0x43
 8009f42:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009f44:	4b02      	ldr	r3, [pc, #8]	; (8009f50 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3718      	adds	r7, #24
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
 8009f4e:	bf00      	nop
 8009f50:	200000cc 	.word	0x200000cc

08009f54 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b083      	sub	sp, #12
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	220a      	movs	r2, #10
 8009f60:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009f62:	4b03      	ldr	r3, [pc, #12]	; (8009f70 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	370c      	adds	r7, #12
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr
 8009f70:	20000088 	.word	0x20000088

08009f74 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b083      	sub	sp, #12
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d101      	bne.n	8009f88 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009f84:	2303      	movs	r3, #3
 8009f86:	e009      	b.n	8009f9c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	33b0      	adds	r3, #176	; 0xb0
 8009f92:	009b      	lsls	r3, r3, #2
 8009f94:	4413      	add	r3, r2
 8009f96:	683a      	ldr	r2, [r7, #0]
 8009f98:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009f9a:	2300      	movs	r3, #0
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	370c      	adds	r7, #12
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b087      	sub	sp, #28
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	60b9      	str	r1, [r7, #8]
 8009fb2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	32b0      	adds	r2, #176	; 0xb0
 8009fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fc2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d101      	bne.n	8009fce <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009fca:	2303      	movs	r3, #3
 8009fcc:	e006      	b.n	8009fdc <USBD_CDC_SetTxBuffer+0x34>
  }

  hcdc->TxBuffer = pbuff;
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	68ba      	ldr	r2, [r7, #8]
 8009fd2:	649a      	str	r2, [r3, #72]	; 0x48
  hcdc->TxLength = length;
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	651a      	str	r2, [r3, #80]	; 0x50

  return (uint8_t)USBD_OK;
 8009fda:	2300      	movs	r3, #0
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	371c      	adds	r7, #28
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr

08009fe8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b085      	sub	sp, #20
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	32b0      	adds	r2, #176	; 0xb0
 8009ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a000:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d101      	bne.n	800a00c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a008:	2303      	movs	r3, #3
 800a00a:	e003      	b.n	800a014 <USBD_CDC_SetRxBuffer+0x2c>
  }

  hcdc->RxBuffer = pbuff;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	683a      	ldr	r2, [r7, #0]
 800a010:	645a      	str	r2, [r3, #68]	; 0x44

  return (uint8_t)USBD_OK;
 800a012:	2300      	movs	r3, #0
}
 800a014:	4618      	mov	r0, r3
 800a016:	3714      	adds	r7, #20
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr

0800a020 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	32b0      	adds	r2, #176	; 0xb0
 800a032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a036:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a038:	2301      	movs	r3, #1
 800a03a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	32b0      	adds	r2, #176	; 0xb0
 800a046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d101      	bne.n	800a052 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a04e:	2303      	movs	r3, #3
 800a050:	e020      	b.n	800a094 <USBD_CDC_TransmitPacket+0x74>
  }

  if (hcdc->TxState == 0U)
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a056:	2b00      	cmp	r3, #0
 800a058:	d11b      	bne.n	800a092 <USBD_CDC_TransmitPacket+0x72>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	2201      	movs	r2, #1
 800a05e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a060:	4b0e      	ldr	r3, [pc, #56]	; (800a09c <USBD_CDC_TransmitPacket+0x7c>)
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	f003 020f 	and.w	r2, r3, #15
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	4613      	mov	r3, r2
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	4413      	add	r3, r2
 800a074:	009b      	lsls	r3, r3, #2
 800a076:	4403      	add	r3, r0
 800a078:	3318      	adds	r3, #24
 800a07a:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a07c:	4b07      	ldr	r3, [pc, #28]	; (800a09c <USBD_CDC_TransmitPacket+0x7c>)
 800a07e:	7819      	ldrb	r1, [r3, #0]
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f001 ffe4 	bl	800c056 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a08e:	2300      	movs	r3, #0
 800a090:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a092:	7bfb      	ldrb	r3, [r7, #15]
}
 800a094:	4618      	mov	r0, r3
 800a096:	3710      	adds	r7, #16
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}
 800a09c:	2000010f 	.word	0x2000010f

0800a0a0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b084      	sub	sp, #16
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	32b0      	adds	r2, #176	; 0xb0
 800a0b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0b6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	32b0      	adds	r2, #176	; 0xb0
 800a0c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d101      	bne.n	800a0ce <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a0ca:	2303      	movs	r3, #3
 800a0cc:	e015      	b.n	800a0fa <USBD_CDC_ReceivePacket+0x5a>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	7c1b      	ldrb	r3, [r3, #16]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d108      	bne.n	800a0e8 <USBD_CDC_ReceivePacket+0x48>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a0d6:	4b0b      	ldr	r3, [pc, #44]	; (800a104 <USBD_CDC_ReceivePacket+0x64>)
 800a0d8:	7819      	ldrb	r1, [r3, #0]
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a0de:	2340      	movs	r3, #64	; 0x40
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f001 ffd9 	bl	800c098 <USBD_LL_PrepareReceive>
 800a0e6:	e007      	b.n	800a0f8 <USBD_CDC_ReceivePacket+0x58>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a0e8:	4b06      	ldr	r3, [pc, #24]	; (800a104 <USBD_CDC_ReceivePacket+0x64>)
 800a0ea:	7819      	ldrb	r1, [r3, #0]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a0f0:	2340      	movs	r3, #64	; 0x40
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f001 ffd0 	bl	800c098 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a0f8:	2300      	movs	r3, #0
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3710      	adds	r7, #16
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
 800a102:	bf00      	nop
 800a104:	20000110 	.word	0x20000110

0800a108 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b086      	sub	sp, #24
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	60f8      	str	r0, [r7, #12]
 800a110:	60b9      	str	r1, [r7, #8]
 800a112:	4613      	mov	r3, r2
 800a114:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d101      	bne.n	800a120 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a11c:	2303      	movs	r3, #3
 800a11e:	e01f      	b.n	800a160 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2200      	movs	r2, #0
 800a124:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2200      	movs	r2, #0
 800a12c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2200      	movs	r2, #0
 800a134:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d003      	beq.n	800a146 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	68ba      	ldr	r2, [r7, #8]
 800a142:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2201      	movs	r2, #1
 800a14a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	79fa      	ldrb	r2, [r7, #7]
 800a152:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a154:	68f8      	ldr	r0, [r7, #12]
 800a156:	f001 fe43 	bl	800bde0 <USBD_LL_Init>
 800a15a:	4603      	mov	r3, r0
 800a15c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a15e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a160:	4618      	mov	r0, r3
 800a162:	3718      	adds	r7, #24
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}

0800a168 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a172:	2300      	movs	r3, #0
 800a174:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d101      	bne.n	800a180 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a17c:	2303      	movs	r3, #3
 800a17e:	e025      	b.n	800a1cc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	683a      	ldr	r2, [r7, #0]
 800a184:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	32ae      	adds	r2, #174	; 0xae
 800a192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d00f      	beq.n	800a1bc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	32ae      	adds	r2, #174	; 0xae
 800a1a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ac:	f107 020e 	add.w	r2, r7, #14
 800a1b0:	4610      	mov	r0, r2
 800a1b2:	4798      	blx	r3
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a1c2:	1c5a      	adds	r2, r3, #1
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a1ca:	2300      	movs	r3, #0
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3710      	adds	r7, #16
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b082      	sub	sp, #8
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f001 fe51 	bl	800be84 <USBD_LL_Start>
 800a1e2:	4603      	mov	r3, r0
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3708      	adds	r7, #8
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b083      	sub	sp, #12
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a1f4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	370c      	adds	r7, #12
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr

0800a202 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a202:	b580      	push	{r7, lr}
 800a204:	b084      	sub	sp, #16
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
 800a20a:	460b      	mov	r3, r1
 800a20c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a20e:	2300      	movs	r3, #0
 800a210:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d009      	beq.n	800a230 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	78fa      	ldrb	r2, [r7, #3]
 800a226:	4611      	mov	r1, r2
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	4798      	blx	r3
 800a22c:	4603      	mov	r3, r0
 800a22e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a230:	7bfb      	ldrb	r3, [r7, #15]
}
 800a232:	4618      	mov	r0, r3
 800a234:	3710      	adds	r7, #16
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}

0800a23a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a23a:	b580      	push	{r7, lr}
 800a23c:	b084      	sub	sp, #16
 800a23e:	af00      	add	r7, sp, #0
 800a240:	6078      	str	r0, [r7, #4]
 800a242:	460b      	mov	r3, r1
 800a244:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a246:	2300      	movs	r3, #0
 800a248:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	78fa      	ldrb	r2, [r7, #3]
 800a254:	4611      	mov	r1, r2
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	4798      	blx	r3
 800a25a:	4603      	mov	r3, r0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d001      	beq.n	800a264 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a260:	2303      	movs	r3, #3
 800a262:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a264:	7bfb      	ldrb	r3, [r7, #15]
}
 800a266:	4618      	mov	r0, r3
 800a268:	3710      	adds	r7, #16
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}

0800a26e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a26e:	b580      	push	{r7, lr}
 800a270:	b084      	sub	sp, #16
 800a272:	af00      	add	r7, sp, #0
 800a274:	6078      	str	r0, [r7, #4]
 800a276:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a27e:	6839      	ldr	r1, [r7, #0]
 800a280:	4618      	mov	r0, r3
 800a282:	f001 f908 	bl	800b496 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2201      	movs	r2, #1
 800a28a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a294:	461a      	mov	r2, r3
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a2a2:	f003 031f 	and.w	r3, r3, #31
 800a2a6:	2b02      	cmp	r3, #2
 800a2a8:	d01a      	beq.n	800a2e0 <USBD_LL_SetupStage+0x72>
 800a2aa:	2b02      	cmp	r3, #2
 800a2ac:	d822      	bhi.n	800a2f4 <USBD_LL_SetupStage+0x86>
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d002      	beq.n	800a2b8 <USBD_LL_SetupStage+0x4a>
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d00a      	beq.n	800a2cc <USBD_LL_SetupStage+0x5e>
 800a2b6:	e01d      	b.n	800a2f4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a2be:	4619      	mov	r1, r3
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f000 fb5f 	bl	800a984 <USBD_StdDevReq>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	73fb      	strb	r3, [r7, #15]
      break;
 800a2ca:	e020      	b.n	800a30e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f000 fbc7 	bl	800aa68 <USBD_StdItfReq>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	73fb      	strb	r3, [r7, #15]
      break;
 800a2de:	e016      	b.n	800a30e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a2e6:	4619      	mov	r1, r3
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f000 fc29 	bl	800ab40 <USBD_StdEPReq>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	73fb      	strb	r3, [r7, #15]
      break;
 800a2f2:	e00c      	b.n	800a30e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a2fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a2fe:	b2db      	uxtb	r3, r3
 800a300:	4619      	mov	r1, r3
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f001 fe1e 	bl	800bf44 <USBD_LL_StallEP>
 800a308:	4603      	mov	r3, r0
 800a30a:	73fb      	strb	r3, [r7, #15]
      break;
 800a30c:	bf00      	nop
  }

  return ret;
 800a30e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a310:	4618      	mov	r0, r3
 800a312:	3710      	adds	r7, #16
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b086      	sub	sp, #24
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	460b      	mov	r3, r1
 800a322:	607a      	str	r2, [r7, #4]
 800a324:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a326:	2300      	movs	r3, #0
 800a328:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a32a:	7afb      	ldrb	r3, [r7, #11]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d16e      	bne.n	800a40e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a336:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a33e:	2b03      	cmp	r3, #3
 800a340:	f040 8098 	bne.w	800a474 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	689a      	ldr	r2, [r3, #8]
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	68db      	ldr	r3, [r3, #12]
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d913      	bls.n	800a378 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	689a      	ldr	r2, [r3, #8]
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	68db      	ldr	r3, [r3, #12]
 800a358:	1ad2      	subs	r2, r2, r3
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	68da      	ldr	r2, [r3, #12]
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	689b      	ldr	r3, [r3, #8]
 800a366:	4293      	cmp	r3, r2
 800a368:	bf28      	it	cs
 800a36a:	4613      	movcs	r3, r2
 800a36c:	461a      	mov	r2, r3
 800a36e:	6879      	ldr	r1, [r7, #4]
 800a370:	68f8      	ldr	r0, [r7, #12]
 800a372:	f001 f984 	bl	800b67e <USBD_CtlContinueRx>
 800a376:	e07d      	b.n	800a474 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a37e:	f003 031f 	and.w	r3, r3, #31
 800a382:	2b02      	cmp	r3, #2
 800a384:	d014      	beq.n	800a3b0 <USBD_LL_DataOutStage+0x98>
 800a386:	2b02      	cmp	r3, #2
 800a388:	d81d      	bhi.n	800a3c6 <USBD_LL_DataOutStage+0xae>
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d002      	beq.n	800a394 <USBD_LL_DataOutStage+0x7c>
 800a38e:	2b01      	cmp	r3, #1
 800a390:	d003      	beq.n	800a39a <USBD_LL_DataOutStage+0x82>
 800a392:	e018      	b.n	800a3c6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a394:	2300      	movs	r3, #0
 800a396:	75bb      	strb	r3, [r7, #22]
            break;
 800a398:	e018      	b.n	800a3cc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	68f8      	ldr	r0, [r7, #12]
 800a3a6:	f000 fa5e 	bl	800a866 <USBD_CoreFindIF>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	75bb      	strb	r3, [r7, #22]
            break;
 800a3ae:	e00d      	b.n	800a3cc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a3b6:	b2db      	uxtb	r3, r3
 800a3b8:	4619      	mov	r1, r3
 800a3ba:	68f8      	ldr	r0, [r7, #12]
 800a3bc:	f000 fa60 	bl	800a880 <USBD_CoreFindEP>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	75bb      	strb	r3, [r7, #22]
            break;
 800a3c4:	e002      	b.n	800a3cc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	75bb      	strb	r3, [r7, #22]
            break;
 800a3ca:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a3cc:	7dbb      	ldrb	r3, [r7, #22]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d119      	bne.n	800a406 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3d8:	b2db      	uxtb	r3, r3
 800a3da:	2b03      	cmp	r3, #3
 800a3dc:	d113      	bne.n	800a406 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a3de:	7dba      	ldrb	r2, [r7, #22]
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	32ae      	adds	r2, #174	; 0xae
 800a3e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3e8:	691b      	ldr	r3, [r3, #16]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d00b      	beq.n	800a406 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a3ee:	7dba      	ldrb	r2, [r7, #22]
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a3f6:	7dba      	ldrb	r2, [r7, #22]
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	32ae      	adds	r2, #174	; 0xae
 800a3fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a400:	691b      	ldr	r3, [r3, #16]
 800a402:	68f8      	ldr	r0, [r7, #12]
 800a404:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a406:	68f8      	ldr	r0, [r7, #12]
 800a408:	f001 f94a 	bl	800b6a0 <USBD_CtlSendStatus>
 800a40c:	e032      	b.n	800a474 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a40e:	7afb      	ldrb	r3, [r7, #11]
 800a410:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a414:	b2db      	uxtb	r3, r3
 800a416:	4619      	mov	r1, r3
 800a418:	68f8      	ldr	r0, [r7, #12]
 800a41a:	f000 fa31 	bl	800a880 <USBD_CoreFindEP>
 800a41e:	4603      	mov	r3, r0
 800a420:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a422:	7dbb      	ldrb	r3, [r7, #22]
 800a424:	2bff      	cmp	r3, #255	; 0xff
 800a426:	d025      	beq.n	800a474 <USBD_LL_DataOutStage+0x15c>
 800a428:	7dbb      	ldrb	r3, [r7, #22]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d122      	bne.n	800a474 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a434:	b2db      	uxtb	r3, r3
 800a436:	2b03      	cmp	r3, #3
 800a438:	d117      	bne.n	800a46a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a43a:	7dba      	ldrb	r2, [r7, #22]
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	32ae      	adds	r2, #174	; 0xae
 800a440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a444:	699b      	ldr	r3, [r3, #24]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d00f      	beq.n	800a46a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a44a:	7dba      	ldrb	r2, [r7, #22]
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a452:	7dba      	ldrb	r2, [r7, #22]
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	32ae      	adds	r2, #174	; 0xae
 800a458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a45c:	699b      	ldr	r3, [r3, #24]
 800a45e:	7afa      	ldrb	r2, [r7, #11]
 800a460:	4611      	mov	r1, r2
 800a462:	68f8      	ldr	r0, [r7, #12]
 800a464:	4798      	blx	r3
 800a466:	4603      	mov	r3, r0
 800a468:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a46a:	7dfb      	ldrb	r3, [r7, #23]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d001      	beq.n	800a474 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a470:	7dfb      	ldrb	r3, [r7, #23]
 800a472:	e000      	b.n	800a476 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a474:	2300      	movs	r3, #0
}
 800a476:	4618      	mov	r0, r3
 800a478:	3718      	adds	r7, #24
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}

0800a47e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a47e:	b580      	push	{r7, lr}
 800a480:	b086      	sub	sp, #24
 800a482:	af00      	add	r7, sp, #0
 800a484:	60f8      	str	r0, [r7, #12]
 800a486:	460b      	mov	r3, r1
 800a488:	607a      	str	r2, [r7, #4]
 800a48a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a48c:	7afb      	ldrb	r3, [r7, #11]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d16f      	bne.n	800a572 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	3314      	adds	r3, #20
 800a496:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a49e:	2b02      	cmp	r3, #2
 800a4a0:	d15a      	bne.n	800a558 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	689a      	ldr	r2, [r3, #8]
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	68db      	ldr	r3, [r3, #12]
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d914      	bls.n	800a4d8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	689a      	ldr	r2, [r3, #8]
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	68db      	ldr	r3, [r3, #12]
 800a4b6:	1ad2      	subs	r2, r2, r3
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	689b      	ldr	r3, [r3, #8]
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	6879      	ldr	r1, [r7, #4]
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	f001 f8ac 	bl	800b622 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	2100      	movs	r1, #0
 800a4d0:	68f8      	ldr	r0, [r7, #12]
 800a4d2:	f001 fde1 	bl	800c098 <USBD_LL_PrepareReceive>
 800a4d6:	e03f      	b.n	800a558 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	68da      	ldr	r2, [r3, #12]
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	689b      	ldr	r3, [r3, #8]
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d11c      	bne.n	800a51e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	685a      	ldr	r2, [r3, #4]
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d316      	bcc.n	800a51e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	685a      	ldr	r2, [r3, #4]
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d20f      	bcs.n	800a51e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a4fe:	2200      	movs	r2, #0
 800a500:	2100      	movs	r1, #0
 800a502:	68f8      	ldr	r0, [r7, #12]
 800a504:	f001 f88d 	bl	800b622 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2200      	movs	r2, #0
 800a50c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a510:	2300      	movs	r3, #0
 800a512:	2200      	movs	r2, #0
 800a514:	2100      	movs	r1, #0
 800a516:	68f8      	ldr	r0, [r7, #12]
 800a518:	f001 fdbe 	bl	800c098 <USBD_LL_PrepareReceive>
 800a51c:	e01c      	b.n	800a558 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a524:	b2db      	uxtb	r3, r3
 800a526:	2b03      	cmp	r3, #3
 800a528:	d10f      	bne.n	800a54a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a530:	68db      	ldr	r3, [r3, #12]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d009      	beq.n	800a54a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2200      	movs	r2, #0
 800a53a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a544:	68db      	ldr	r3, [r3, #12]
 800a546:	68f8      	ldr	r0, [r7, #12]
 800a548:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a54a:	2180      	movs	r1, #128	; 0x80
 800a54c:	68f8      	ldr	r0, [r7, #12]
 800a54e:	f001 fcf9 	bl	800bf44 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a552:	68f8      	ldr	r0, [r7, #12]
 800a554:	f001 f8b7 	bl	800b6c6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d03a      	beq.n	800a5d8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a562:	68f8      	ldr	r0, [r7, #12]
 800a564:	f7ff fe42 	bl	800a1ec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	2200      	movs	r2, #0
 800a56c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a570:	e032      	b.n	800a5d8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a572:	7afb      	ldrb	r3, [r7, #11]
 800a574:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a578:	b2db      	uxtb	r3, r3
 800a57a:	4619      	mov	r1, r3
 800a57c:	68f8      	ldr	r0, [r7, #12]
 800a57e:	f000 f97f 	bl	800a880 <USBD_CoreFindEP>
 800a582:	4603      	mov	r3, r0
 800a584:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a586:	7dfb      	ldrb	r3, [r7, #23]
 800a588:	2bff      	cmp	r3, #255	; 0xff
 800a58a:	d025      	beq.n	800a5d8 <USBD_LL_DataInStage+0x15a>
 800a58c:	7dfb      	ldrb	r3, [r7, #23]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d122      	bne.n	800a5d8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a598:	b2db      	uxtb	r3, r3
 800a59a:	2b03      	cmp	r3, #3
 800a59c:	d11c      	bne.n	800a5d8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a59e:	7dfa      	ldrb	r2, [r7, #23]
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	32ae      	adds	r2, #174	; 0xae
 800a5a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5a8:	695b      	ldr	r3, [r3, #20]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d014      	beq.n	800a5d8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a5ae:	7dfa      	ldrb	r2, [r7, #23]
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a5b6:	7dfa      	ldrb	r2, [r7, #23]
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	32ae      	adds	r2, #174	; 0xae
 800a5bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5c0:	695b      	ldr	r3, [r3, #20]
 800a5c2:	7afa      	ldrb	r2, [r7, #11]
 800a5c4:	4611      	mov	r1, r2
 800a5c6:	68f8      	ldr	r0, [r7, #12]
 800a5c8:	4798      	blx	r3
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a5ce:	7dbb      	ldrb	r3, [r7, #22]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d001      	beq.n	800a5d8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a5d4:	7dbb      	ldrb	r3, [r7, #22]
 800a5d6:	e000      	b.n	800a5da <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a5d8:	2300      	movs	r3, #0
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3718      	adds	r7, #24
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a5e2:	b580      	push	{r7, lr}
 800a5e4:	b084      	sub	sp, #16
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2200      	movs	r2, #0
 800a602:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2200      	movs	r2, #0
 800a608:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2200      	movs	r2, #0
 800a610:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d014      	beq.n	800a648 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d00e      	beq.n	800a648 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	6852      	ldr	r2, [r2, #4]
 800a636:	b2d2      	uxtb	r2, r2
 800a638:	4611      	mov	r1, r2
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	4798      	blx	r3
 800a63e:	4603      	mov	r3, r0
 800a640:	2b00      	cmp	r3, #0
 800a642:	d001      	beq.n	800a648 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a644:	2303      	movs	r3, #3
 800a646:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a648:	2340      	movs	r3, #64	; 0x40
 800a64a:	2200      	movs	r2, #0
 800a64c:	2100      	movs	r1, #0
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f001 fc33 	bl	800beba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2201      	movs	r2, #1
 800a658:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2240      	movs	r2, #64	; 0x40
 800a660:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a664:	2340      	movs	r3, #64	; 0x40
 800a666:	2200      	movs	r2, #0
 800a668:	2180      	movs	r1, #128	; 0x80
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f001 fc25 	bl	800beba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2201      	movs	r2, #1
 800a674:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2240      	movs	r2, #64	; 0x40
 800a67a:	621a      	str	r2, [r3, #32]

  return ret;
 800a67c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3710      	adds	r7, #16
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}

0800a686 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a686:	b480      	push	{r7}
 800a688:	b083      	sub	sp, #12
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
 800a68e:	460b      	mov	r3, r1
 800a690:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	78fa      	ldrb	r2, [r7, #3]
 800a696:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a698:	2300      	movs	r3, #0
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	370c      	adds	r7, #12
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a4:	4770      	bx	lr

0800a6a6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a6a6:	b480      	push	{r7}
 800a6a8:	b083      	sub	sp, #12
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6b4:	b2da      	uxtb	r2, r3
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2204      	movs	r2, #4
 800a6c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a6c4:	2300      	movs	r3, #0
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	370c      	adds	r7, #12
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d0:	4770      	bx	lr

0800a6d2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a6d2:	b480      	push	{r7}
 800a6d4:	b083      	sub	sp, #12
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	2b04      	cmp	r3, #4
 800a6e4:	d106      	bne.n	800a6f4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a6ec:	b2da      	uxtb	r2, r3
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a6f4:	2300      	movs	r3, #0
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	370c      	adds	r7, #12
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a700:	4770      	bx	lr

0800a702 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a702:	b580      	push	{r7, lr}
 800a704:	b082      	sub	sp, #8
 800a706:	af00      	add	r7, sp, #0
 800a708:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a710:	b2db      	uxtb	r3, r3
 800a712:	2b03      	cmp	r3, #3
 800a714:	d110      	bne.n	800a738 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d00b      	beq.n	800a738 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a726:	69db      	ldr	r3, [r3, #28]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d005      	beq.n	800a738 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a732:	69db      	ldr	r3, [r3, #28]
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a738:	2300      	movs	r3, #0
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3708      	adds	r7, #8
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}

0800a742 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a742:	b580      	push	{r7, lr}
 800a744:	b082      	sub	sp, #8
 800a746:	af00      	add	r7, sp, #0
 800a748:	6078      	str	r0, [r7, #4]
 800a74a:	460b      	mov	r3, r1
 800a74c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	32ae      	adds	r2, #174	; 0xae
 800a758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d101      	bne.n	800a764 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a760:	2303      	movs	r3, #3
 800a762:	e01c      	b.n	800a79e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	2b03      	cmp	r3, #3
 800a76e:	d115      	bne.n	800a79c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	32ae      	adds	r2, #174	; 0xae
 800a77a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a77e:	6a1b      	ldr	r3, [r3, #32]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d00b      	beq.n	800a79c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	32ae      	adds	r2, #174	; 0xae
 800a78e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a792:	6a1b      	ldr	r3, [r3, #32]
 800a794:	78fa      	ldrb	r2, [r7, #3]
 800a796:	4611      	mov	r1, r2
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a79c:	2300      	movs	r3, #0
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3708      	adds	r7, #8
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}

0800a7a6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b082      	sub	sp, #8
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	32ae      	adds	r2, #174	; 0xae
 800a7bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d101      	bne.n	800a7c8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a7c4:	2303      	movs	r3, #3
 800a7c6:	e01c      	b.n	800a802 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7ce:	b2db      	uxtb	r3, r3
 800a7d0:	2b03      	cmp	r3, #3
 800a7d2:	d115      	bne.n	800a800 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	32ae      	adds	r2, #174	; 0xae
 800a7de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d00b      	beq.n	800a800 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	32ae      	adds	r2, #174	; 0xae
 800a7f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f8:	78fa      	ldrb	r2, [r7, #3]
 800a7fa:	4611      	mov	r1, r2
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a800:	2300      	movs	r3, #0
}
 800a802:	4618      	mov	r0, r3
 800a804:	3708      	adds	r7, #8
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}

0800a80a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a80a:	b480      	push	{r7}
 800a80c:	b083      	sub	sp, #12
 800a80e:	af00      	add	r7, sp, #0
 800a810:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a812:	2300      	movs	r3, #0
}
 800a814:	4618      	mov	r0, r3
 800a816:	370c      	adds	r7, #12
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr

0800a820 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b084      	sub	sp, #16
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a828:	2300      	movs	r3, #0
 800a82a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2201      	movs	r2, #1
 800a830:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d00e      	beq.n	800a85c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	687a      	ldr	r2, [r7, #4]
 800a848:	6852      	ldr	r2, [r2, #4]
 800a84a:	b2d2      	uxtb	r2, r2
 800a84c:	4611      	mov	r1, r2
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	4798      	blx	r3
 800a852:	4603      	mov	r3, r0
 800a854:	2b00      	cmp	r3, #0
 800a856:	d001      	beq.n	800a85c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a858:	2303      	movs	r3, #3
 800a85a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a85c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3710      	adds	r7, #16
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}

0800a866 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a866:	b480      	push	{r7}
 800a868:	b083      	sub	sp, #12
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
 800a86e:	460b      	mov	r3, r1
 800a870:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a872:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a874:	4618      	mov	r0, r3
 800a876:	370c      	adds	r7, #12
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr

0800a880 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a880:	b480      	push	{r7}
 800a882:	b083      	sub	sp, #12
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	460b      	mov	r3, r1
 800a88a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a88c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a88e:	4618      	mov	r0, r3
 800a890:	370c      	adds	r7, #12
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr

0800a89a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a89a:	b580      	push	{r7, lr}
 800a89c:	b086      	sub	sp, #24
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	6078      	str	r0, [r7, #4]
 800a8a2:	460b      	mov	r3, r1
 800a8a4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	885b      	ldrh	r3, [r3, #2]
 800a8b6:	b29a      	uxth	r2, r3
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	781b      	ldrb	r3, [r3, #0]
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d920      	bls.n	800a904 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	781b      	ldrb	r3, [r3, #0]
 800a8c6:	b29b      	uxth	r3, r3
 800a8c8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a8ca:	e013      	b.n	800a8f4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a8cc:	f107 030a 	add.w	r3, r7, #10
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	6978      	ldr	r0, [r7, #20]
 800a8d4:	f000 f81b 	bl	800a90e <USBD_GetNextDesc>
 800a8d8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	785b      	ldrb	r3, [r3, #1]
 800a8de:	2b05      	cmp	r3, #5
 800a8e0:	d108      	bne.n	800a8f4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	789b      	ldrb	r3, [r3, #2]
 800a8ea:	78fa      	ldrb	r2, [r7, #3]
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d008      	beq.n	800a902 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	885b      	ldrh	r3, [r3, #2]
 800a8f8:	b29a      	uxth	r2, r3
 800a8fa:	897b      	ldrh	r3, [r7, #10]
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d8e5      	bhi.n	800a8cc <USBD_GetEpDesc+0x32>
 800a900:	e000      	b.n	800a904 <USBD_GetEpDesc+0x6a>
          break;
 800a902:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a904:	693b      	ldr	r3, [r7, #16]
}
 800a906:	4618      	mov	r0, r3
 800a908:	3718      	adds	r7, #24
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}

0800a90e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a90e:	b480      	push	{r7}
 800a910:	b085      	sub	sp, #20
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
 800a916:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	881a      	ldrh	r2, [r3, #0]
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	781b      	ldrb	r3, [r3, #0]
 800a924:	b29b      	uxth	r3, r3
 800a926:	4413      	add	r3, r2
 800a928:	b29a      	uxth	r2, r3
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	781b      	ldrb	r3, [r3, #0]
 800a932:	461a      	mov	r2, r3
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	4413      	add	r3, r2
 800a938:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a93a:	68fb      	ldr	r3, [r7, #12]
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3714      	adds	r7, #20
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr

0800a948 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a948:	b480      	push	{r7}
 800a94a:	b087      	sub	sp, #28
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	3301      	adds	r3, #1
 800a95e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	781b      	ldrb	r3, [r3, #0]
 800a964:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a966:	8a3b      	ldrh	r3, [r7, #16]
 800a968:	021b      	lsls	r3, r3, #8
 800a96a:	b21a      	sxth	r2, r3
 800a96c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a970:	4313      	orrs	r3, r2
 800a972:	b21b      	sxth	r3, r3
 800a974:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a976:	89fb      	ldrh	r3, [r7, #14]
}
 800a978:	4618      	mov	r0, r3
 800a97a:	371c      	adds	r7, #28
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr

0800a984 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a98e:	2300      	movs	r3, #0
 800a990:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	781b      	ldrb	r3, [r3, #0]
 800a996:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a99a:	2b40      	cmp	r3, #64	; 0x40
 800a99c:	d005      	beq.n	800a9aa <USBD_StdDevReq+0x26>
 800a99e:	2b40      	cmp	r3, #64	; 0x40
 800a9a0:	d857      	bhi.n	800aa52 <USBD_StdDevReq+0xce>
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d00f      	beq.n	800a9c6 <USBD_StdDevReq+0x42>
 800a9a6:	2b20      	cmp	r3, #32
 800a9a8:	d153      	bne.n	800aa52 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	32ae      	adds	r2, #174	; 0xae
 800a9b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9b8:	689b      	ldr	r3, [r3, #8]
 800a9ba:	6839      	ldr	r1, [r7, #0]
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	4798      	blx	r3
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	73fb      	strb	r3, [r7, #15]
      break;
 800a9c4:	e04a      	b.n	800aa5c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	785b      	ldrb	r3, [r3, #1]
 800a9ca:	2b09      	cmp	r3, #9
 800a9cc:	d83b      	bhi.n	800aa46 <USBD_StdDevReq+0xc2>
 800a9ce:	a201      	add	r2, pc, #4	; (adr r2, 800a9d4 <USBD_StdDevReq+0x50>)
 800a9d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9d4:	0800aa29 	.word	0x0800aa29
 800a9d8:	0800aa3d 	.word	0x0800aa3d
 800a9dc:	0800aa47 	.word	0x0800aa47
 800a9e0:	0800aa33 	.word	0x0800aa33
 800a9e4:	0800aa47 	.word	0x0800aa47
 800a9e8:	0800aa07 	.word	0x0800aa07
 800a9ec:	0800a9fd 	.word	0x0800a9fd
 800a9f0:	0800aa47 	.word	0x0800aa47
 800a9f4:	0800aa1f 	.word	0x0800aa1f
 800a9f8:	0800aa11 	.word	0x0800aa11
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a9fc:	6839      	ldr	r1, [r7, #0]
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 fa3c 	bl	800ae7c <USBD_GetDescriptor>
          break;
 800aa04:	e024      	b.n	800aa50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800aa06:	6839      	ldr	r1, [r7, #0]
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f000 fba1 	bl	800b150 <USBD_SetAddress>
          break;
 800aa0e:	e01f      	b.n	800aa50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800aa10:	6839      	ldr	r1, [r7, #0]
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f000 fbe0 	bl	800b1d8 <USBD_SetConfig>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	73fb      	strb	r3, [r7, #15]
          break;
 800aa1c:	e018      	b.n	800aa50 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800aa1e:	6839      	ldr	r1, [r7, #0]
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f000 fc83 	bl	800b32c <USBD_GetConfig>
          break;
 800aa26:	e013      	b.n	800aa50 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800aa28:	6839      	ldr	r1, [r7, #0]
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f000 fcb4 	bl	800b398 <USBD_GetStatus>
          break;
 800aa30:	e00e      	b.n	800aa50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800aa32:	6839      	ldr	r1, [r7, #0]
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f000 fce3 	bl	800b400 <USBD_SetFeature>
          break;
 800aa3a:	e009      	b.n	800aa50 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800aa3c:	6839      	ldr	r1, [r7, #0]
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f000 fd07 	bl	800b452 <USBD_ClrFeature>
          break;
 800aa44:	e004      	b.n	800aa50 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800aa46:	6839      	ldr	r1, [r7, #0]
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f000 fd5e 	bl	800b50a <USBD_CtlError>
          break;
 800aa4e:	bf00      	nop
      }
      break;
 800aa50:	e004      	b.n	800aa5c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800aa52:	6839      	ldr	r1, [r7, #0]
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f000 fd58 	bl	800b50a <USBD_CtlError>
      break;
 800aa5a:	bf00      	nop
  }

  return ret;
 800aa5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3710      	adds	r7, #16
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}
 800aa66:	bf00      	nop

0800aa68 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b084      	sub	sp, #16
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa72:	2300      	movs	r3, #0
 800aa74:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	781b      	ldrb	r3, [r3, #0]
 800aa7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa7e:	2b40      	cmp	r3, #64	; 0x40
 800aa80:	d005      	beq.n	800aa8e <USBD_StdItfReq+0x26>
 800aa82:	2b40      	cmp	r3, #64	; 0x40
 800aa84:	d852      	bhi.n	800ab2c <USBD_StdItfReq+0xc4>
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d001      	beq.n	800aa8e <USBD_StdItfReq+0x26>
 800aa8a:	2b20      	cmp	r3, #32
 800aa8c:	d14e      	bne.n	800ab2c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa94:	b2db      	uxtb	r3, r3
 800aa96:	3b01      	subs	r3, #1
 800aa98:	2b02      	cmp	r3, #2
 800aa9a:	d840      	bhi.n	800ab1e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	889b      	ldrh	r3, [r3, #4]
 800aaa0:	b2db      	uxtb	r3, r3
 800aaa2:	2b01      	cmp	r3, #1
 800aaa4:	d836      	bhi.n	800ab14 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	889b      	ldrh	r3, [r3, #4]
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	4619      	mov	r1, r3
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f7ff fed9 	bl	800a866 <USBD_CoreFindIF>
 800aab4:	4603      	mov	r3, r0
 800aab6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aab8:	7bbb      	ldrb	r3, [r7, #14]
 800aaba:	2bff      	cmp	r3, #255	; 0xff
 800aabc:	d01d      	beq.n	800aafa <USBD_StdItfReq+0x92>
 800aabe:	7bbb      	ldrb	r3, [r7, #14]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d11a      	bne.n	800aafa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800aac4:	7bba      	ldrb	r2, [r7, #14]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	32ae      	adds	r2, #174	; 0xae
 800aaca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aace:	689b      	ldr	r3, [r3, #8]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d00f      	beq.n	800aaf4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800aad4:	7bba      	ldrb	r2, [r7, #14]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aadc:	7bba      	ldrb	r2, [r7, #14]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	32ae      	adds	r2, #174	; 0xae
 800aae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aae6:	689b      	ldr	r3, [r3, #8]
 800aae8:	6839      	ldr	r1, [r7, #0]
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	4798      	blx	r3
 800aaee:	4603      	mov	r3, r0
 800aaf0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aaf2:	e004      	b.n	800aafe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800aaf4:	2303      	movs	r3, #3
 800aaf6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aaf8:	e001      	b.n	800aafe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800aafa:	2303      	movs	r3, #3
 800aafc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	88db      	ldrh	r3, [r3, #6]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d110      	bne.n	800ab28 <USBD_StdItfReq+0xc0>
 800ab06:	7bfb      	ldrb	r3, [r7, #15]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d10d      	bne.n	800ab28 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f000 fdc7 	bl	800b6a0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ab12:	e009      	b.n	800ab28 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ab14:	6839      	ldr	r1, [r7, #0]
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 fcf7 	bl	800b50a <USBD_CtlError>
          break;
 800ab1c:	e004      	b.n	800ab28 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ab1e:	6839      	ldr	r1, [r7, #0]
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 fcf2 	bl	800b50a <USBD_CtlError>
          break;
 800ab26:	e000      	b.n	800ab2a <USBD_StdItfReq+0xc2>
          break;
 800ab28:	bf00      	nop
      }
      break;
 800ab2a:	e004      	b.n	800ab36 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ab2c:	6839      	ldr	r1, [r7, #0]
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f000 fceb 	bl	800b50a <USBD_CtlError>
      break;
 800ab34:	bf00      	nop
  }

  return ret;
 800ab36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3710      	adds	r7, #16
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}

0800ab40 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b084      	sub	sp, #16
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	889b      	ldrh	r3, [r3, #4]
 800ab52:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	781b      	ldrb	r3, [r3, #0]
 800ab58:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab5c:	2b40      	cmp	r3, #64	; 0x40
 800ab5e:	d007      	beq.n	800ab70 <USBD_StdEPReq+0x30>
 800ab60:	2b40      	cmp	r3, #64	; 0x40
 800ab62:	f200 817f 	bhi.w	800ae64 <USBD_StdEPReq+0x324>
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d02a      	beq.n	800abc0 <USBD_StdEPReq+0x80>
 800ab6a:	2b20      	cmp	r3, #32
 800ab6c:	f040 817a 	bne.w	800ae64 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ab70:	7bbb      	ldrb	r3, [r7, #14]
 800ab72:	4619      	mov	r1, r3
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f7ff fe83 	bl	800a880 <USBD_CoreFindEP>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ab7e:	7b7b      	ldrb	r3, [r7, #13]
 800ab80:	2bff      	cmp	r3, #255	; 0xff
 800ab82:	f000 8174 	beq.w	800ae6e <USBD_StdEPReq+0x32e>
 800ab86:	7b7b      	ldrb	r3, [r7, #13]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	f040 8170 	bne.w	800ae6e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ab8e:	7b7a      	ldrb	r2, [r7, #13]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ab96:	7b7a      	ldrb	r2, [r7, #13]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	32ae      	adds	r2, #174	; 0xae
 800ab9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aba0:	689b      	ldr	r3, [r3, #8]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	f000 8163 	beq.w	800ae6e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800aba8:	7b7a      	ldrb	r2, [r7, #13]
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	32ae      	adds	r2, #174	; 0xae
 800abae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abb2:	689b      	ldr	r3, [r3, #8]
 800abb4:	6839      	ldr	r1, [r7, #0]
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	4798      	blx	r3
 800abba:	4603      	mov	r3, r0
 800abbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800abbe:	e156      	b.n	800ae6e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	785b      	ldrb	r3, [r3, #1]
 800abc4:	2b03      	cmp	r3, #3
 800abc6:	d008      	beq.n	800abda <USBD_StdEPReq+0x9a>
 800abc8:	2b03      	cmp	r3, #3
 800abca:	f300 8145 	bgt.w	800ae58 <USBD_StdEPReq+0x318>
 800abce:	2b00      	cmp	r3, #0
 800abd0:	f000 809b 	beq.w	800ad0a <USBD_StdEPReq+0x1ca>
 800abd4:	2b01      	cmp	r3, #1
 800abd6:	d03c      	beq.n	800ac52 <USBD_StdEPReq+0x112>
 800abd8:	e13e      	b.n	800ae58 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abe0:	b2db      	uxtb	r3, r3
 800abe2:	2b02      	cmp	r3, #2
 800abe4:	d002      	beq.n	800abec <USBD_StdEPReq+0xac>
 800abe6:	2b03      	cmp	r3, #3
 800abe8:	d016      	beq.n	800ac18 <USBD_StdEPReq+0xd8>
 800abea:	e02c      	b.n	800ac46 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800abec:	7bbb      	ldrb	r3, [r7, #14]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d00d      	beq.n	800ac0e <USBD_StdEPReq+0xce>
 800abf2:	7bbb      	ldrb	r3, [r7, #14]
 800abf4:	2b80      	cmp	r3, #128	; 0x80
 800abf6:	d00a      	beq.n	800ac0e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800abf8:	7bbb      	ldrb	r3, [r7, #14]
 800abfa:	4619      	mov	r1, r3
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f001 f9a1 	bl	800bf44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac02:	2180      	movs	r1, #128	; 0x80
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f001 f99d 	bl	800bf44 <USBD_LL_StallEP>
 800ac0a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ac0c:	e020      	b.n	800ac50 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ac0e:	6839      	ldr	r1, [r7, #0]
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f000 fc7a 	bl	800b50a <USBD_CtlError>
              break;
 800ac16:	e01b      	b.n	800ac50 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	885b      	ldrh	r3, [r3, #2]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d10e      	bne.n	800ac3e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ac20:	7bbb      	ldrb	r3, [r7, #14]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d00b      	beq.n	800ac3e <USBD_StdEPReq+0xfe>
 800ac26:	7bbb      	ldrb	r3, [r7, #14]
 800ac28:	2b80      	cmp	r3, #128	; 0x80
 800ac2a:	d008      	beq.n	800ac3e <USBD_StdEPReq+0xfe>
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	88db      	ldrh	r3, [r3, #6]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d104      	bne.n	800ac3e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ac34:	7bbb      	ldrb	r3, [r7, #14]
 800ac36:	4619      	mov	r1, r3
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f001 f983 	bl	800bf44 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f000 fd2e 	bl	800b6a0 <USBD_CtlSendStatus>

              break;
 800ac44:	e004      	b.n	800ac50 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ac46:	6839      	ldr	r1, [r7, #0]
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f000 fc5e 	bl	800b50a <USBD_CtlError>
              break;
 800ac4e:	bf00      	nop
          }
          break;
 800ac50:	e107      	b.n	800ae62 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac58:	b2db      	uxtb	r3, r3
 800ac5a:	2b02      	cmp	r3, #2
 800ac5c:	d002      	beq.n	800ac64 <USBD_StdEPReq+0x124>
 800ac5e:	2b03      	cmp	r3, #3
 800ac60:	d016      	beq.n	800ac90 <USBD_StdEPReq+0x150>
 800ac62:	e04b      	b.n	800acfc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac64:	7bbb      	ldrb	r3, [r7, #14]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d00d      	beq.n	800ac86 <USBD_StdEPReq+0x146>
 800ac6a:	7bbb      	ldrb	r3, [r7, #14]
 800ac6c:	2b80      	cmp	r3, #128	; 0x80
 800ac6e:	d00a      	beq.n	800ac86 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ac70:	7bbb      	ldrb	r3, [r7, #14]
 800ac72:	4619      	mov	r1, r3
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f001 f965 	bl	800bf44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac7a:	2180      	movs	r1, #128	; 0x80
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f001 f961 	bl	800bf44 <USBD_LL_StallEP>
 800ac82:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ac84:	e040      	b.n	800ad08 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ac86:	6839      	ldr	r1, [r7, #0]
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f000 fc3e 	bl	800b50a <USBD_CtlError>
              break;
 800ac8e:	e03b      	b.n	800ad08 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	885b      	ldrh	r3, [r3, #2]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d136      	bne.n	800ad06 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ac98:	7bbb      	ldrb	r3, [r7, #14]
 800ac9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d004      	beq.n	800acac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800aca2:	7bbb      	ldrb	r3, [r7, #14]
 800aca4:	4619      	mov	r1, r3
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f001 f96b 	bl	800bf82 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f000 fcf7 	bl	800b6a0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800acb2:	7bbb      	ldrb	r3, [r7, #14]
 800acb4:	4619      	mov	r1, r3
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f7ff fde2 	bl	800a880 <USBD_CoreFindEP>
 800acbc:	4603      	mov	r3, r0
 800acbe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800acc0:	7b7b      	ldrb	r3, [r7, #13]
 800acc2:	2bff      	cmp	r3, #255	; 0xff
 800acc4:	d01f      	beq.n	800ad06 <USBD_StdEPReq+0x1c6>
 800acc6:	7b7b      	ldrb	r3, [r7, #13]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d11c      	bne.n	800ad06 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800accc:	7b7a      	ldrb	r2, [r7, #13]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800acd4:	7b7a      	ldrb	r2, [r7, #13]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	32ae      	adds	r2, #174	; 0xae
 800acda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acde:	689b      	ldr	r3, [r3, #8]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d010      	beq.n	800ad06 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ace4:	7b7a      	ldrb	r2, [r7, #13]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	32ae      	adds	r2, #174	; 0xae
 800acea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acee:	689b      	ldr	r3, [r3, #8]
 800acf0:	6839      	ldr	r1, [r7, #0]
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	4798      	blx	r3
 800acf6:	4603      	mov	r3, r0
 800acf8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800acfa:	e004      	b.n	800ad06 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800acfc:	6839      	ldr	r1, [r7, #0]
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f000 fc03 	bl	800b50a <USBD_CtlError>
              break;
 800ad04:	e000      	b.n	800ad08 <USBD_StdEPReq+0x1c8>
              break;
 800ad06:	bf00      	nop
          }
          break;
 800ad08:	e0ab      	b.n	800ae62 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad10:	b2db      	uxtb	r3, r3
 800ad12:	2b02      	cmp	r3, #2
 800ad14:	d002      	beq.n	800ad1c <USBD_StdEPReq+0x1dc>
 800ad16:	2b03      	cmp	r3, #3
 800ad18:	d032      	beq.n	800ad80 <USBD_StdEPReq+0x240>
 800ad1a:	e097      	b.n	800ae4c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad1c:	7bbb      	ldrb	r3, [r7, #14]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d007      	beq.n	800ad32 <USBD_StdEPReq+0x1f2>
 800ad22:	7bbb      	ldrb	r3, [r7, #14]
 800ad24:	2b80      	cmp	r3, #128	; 0x80
 800ad26:	d004      	beq.n	800ad32 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ad28:	6839      	ldr	r1, [r7, #0]
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 fbed 	bl	800b50a <USBD_CtlError>
                break;
 800ad30:	e091      	b.n	800ae56 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	da0b      	bge.n	800ad52 <USBD_StdEPReq+0x212>
 800ad3a:	7bbb      	ldrb	r3, [r7, #14]
 800ad3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad40:	4613      	mov	r3, r2
 800ad42:	009b      	lsls	r3, r3, #2
 800ad44:	4413      	add	r3, r2
 800ad46:	009b      	lsls	r3, r3, #2
 800ad48:	3310      	adds	r3, #16
 800ad4a:	687a      	ldr	r2, [r7, #4]
 800ad4c:	4413      	add	r3, r2
 800ad4e:	3304      	adds	r3, #4
 800ad50:	e00b      	b.n	800ad6a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ad52:	7bbb      	ldrb	r3, [r7, #14]
 800ad54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad58:	4613      	mov	r3, r2
 800ad5a:	009b      	lsls	r3, r3, #2
 800ad5c:	4413      	add	r3, r2
 800ad5e:	009b      	lsls	r3, r3, #2
 800ad60:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	4413      	add	r3, r2
 800ad68:	3304      	adds	r3, #4
 800ad6a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	2202      	movs	r2, #2
 800ad76:	4619      	mov	r1, r3
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f000 fc37 	bl	800b5ec <USBD_CtlSendData>
              break;
 800ad7e:	e06a      	b.n	800ae56 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ad80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	da11      	bge.n	800adac <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ad88:	7bbb      	ldrb	r3, [r7, #14]
 800ad8a:	f003 020f 	and.w	r2, r3, #15
 800ad8e:	6879      	ldr	r1, [r7, #4]
 800ad90:	4613      	mov	r3, r2
 800ad92:	009b      	lsls	r3, r3, #2
 800ad94:	4413      	add	r3, r2
 800ad96:	009b      	lsls	r3, r3, #2
 800ad98:	440b      	add	r3, r1
 800ad9a:	3324      	adds	r3, #36	; 0x24
 800ad9c:	881b      	ldrh	r3, [r3, #0]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d117      	bne.n	800add2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ada2:	6839      	ldr	r1, [r7, #0]
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f000 fbb0 	bl	800b50a <USBD_CtlError>
                  break;
 800adaa:	e054      	b.n	800ae56 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800adac:	7bbb      	ldrb	r3, [r7, #14]
 800adae:	f003 020f 	and.w	r2, r3, #15
 800adb2:	6879      	ldr	r1, [r7, #4]
 800adb4:	4613      	mov	r3, r2
 800adb6:	009b      	lsls	r3, r3, #2
 800adb8:	4413      	add	r3, r2
 800adba:	009b      	lsls	r3, r3, #2
 800adbc:	440b      	add	r3, r1
 800adbe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800adc2:	881b      	ldrh	r3, [r3, #0]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d104      	bne.n	800add2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800adc8:	6839      	ldr	r1, [r7, #0]
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f000 fb9d 	bl	800b50a <USBD_CtlError>
                  break;
 800add0:	e041      	b.n	800ae56 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800add2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800add6:	2b00      	cmp	r3, #0
 800add8:	da0b      	bge.n	800adf2 <USBD_StdEPReq+0x2b2>
 800adda:	7bbb      	ldrb	r3, [r7, #14]
 800addc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ade0:	4613      	mov	r3, r2
 800ade2:	009b      	lsls	r3, r3, #2
 800ade4:	4413      	add	r3, r2
 800ade6:	009b      	lsls	r3, r3, #2
 800ade8:	3310      	adds	r3, #16
 800adea:	687a      	ldr	r2, [r7, #4]
 800adec:	4413      	add	r3, r2
 800adee:	3304      	adds	r3, #4
 800adf0:	e00b      	b.n	800ae0a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800adf2:	7bbb      	ldrb	r3, [r7, #14]
 800adf4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800adf8:	4613      	mov	r3, r2
 800adfa:	009b      	lsls	r3, r3, #2
 800adfc:	4413      	add	r3, r2
 800adfe:	009b      	lsls	r3, r3, #2
 800ae00:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ae04:	687a      	ldr	r2, [r7, #4]
 800ae06:	4413      	add	r3, r2
 800ae08:	3304      	adds	r3, #4
 800ae0a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ae0c:	7bbb      	ldrb	r3, [r7, #14]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d002      	beq.n	800ae18 <USBD_StdEPReq+0x2d8>
 800ae12:	7bbb      	ldrb	r3, [r7, #14]
 800ae14:	2b80      	cmp	r3, #128	; 0x80
 800ae16:	d103      	bne.n	800ae20 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	601a      	str	r2, [r3, #0]
 800ae1e:	e00e      	b.n	800ae3e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ae20:	7bbb      	ldrb	r3, [r7, #14]
 800ae22:	4619      	mov	r1, r3
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f001 f8cb 	bl	800bfc0 <USBD_LL_IsStallEP>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d003      	beq.n	800ae38 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	2201      	movs	r2, #1
 800ae34:	601a      	str	r2, [r3, #0]
 800ae36:	e002      	b.n	800ae3e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	2202      	movs	r2, #2
 800ae42:	4619      	mov	r1, r3
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f000 fbd1 	bl	800b5ec <USBD_CtlSendData>
              break;
 800ae4a:	e004      	b.n	800ae56 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ae4c:	6839      	ldr	r1, [r7, #0]
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f000 fb5b 	bl	800b50a <USBD_CtlError>
              break;
 800ae54:	bf00      	nop
          }
          break;
 800ae56:	e004      	b.n	800ae62 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ae58:	6839      	ldr	r1, [r7, #0]
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f000 fb55 	bl	800b50a <USBD_CtlError>
          break;
 800ae60:	bf00      	nop
      }
      break;
 800ae62:	e005      	b.n	800ae70 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ae64:	6839      	ldr	r1, [r7, #0]
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f000 fb4f 	bl	800b50a <USBD_CtlError>
      break;
 800ae6c:	e000      	b.n	800ae70 <USBD_StdEPReq+0x330>
      break;
 800ae6e:	bf00      	nop
  }

  return ret;
 800ae70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3710      	adds	r7, #16
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
	...

0800ae7c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b084      	sub	sp, #16
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
 800ae84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ae86:	2300      	movs	r3, #0
 800ae88:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	885b      	ldrh	r3, [r3, #2]
 800ae96:	0a1b      	lsrs	r3, r3, #8
 800ae98:	b29b      	uxth	r3, r3
 800ae9a:	3b01      	subs	r3, #1
 800ae9c:	2b06      	cmp	r3, #6
 800ae9e:	f200 8128 	bhi.w	800b0f2 <USBD_GetDescriptor+0x276>
 800aea2:	a201      	add	r2, pc, #4	; (adr r2, 800aea8 <USBD_GetDescriptor+0x2c>)
 800aea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aea8:	0800aec5 	.word	0x0800aec5
 800aeac:	0800aedd 	.word	0x0800aedd
 800aeb0:	0800af1d 	.word	0x0800af1d
 800aeb4:	0800b0f3 	.word	0x0800b0f3
 800aeb8:	0800b0f3 	.word	0x0800b0f3
 800aebc:	0800b093 	.word	0x0800b093
 800aec0:	0800b0bf 	.word	0x0800b0bf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	7c12      	ldrb	r2, [r2, #16]
 800aed0:	f107 0108 	add.w	r1, r7, #8
 800aed4:	4610      	mov	r0, r2
 800aed6:	4798      	blx	r3
 800aed8:	60f8      	str	r0, [r7, #12]
      break;
 800aeda:	e112      	b.n	800b102 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	7c1b      	ldrb	r3, [r3, #16]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d10d      	bne.n	800af00 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aeea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeec:	f107 0208 	add.w	r2, r7, #8
 800aef0:	4610      	mov	r0, r2
 800aef2:	4798      	blx	r3
 800aef4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	3301      	adds	r3, #1
 800aefa:	2202      	movs	r2, #2
 800aefc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aefe:	e100      	b.n	800b102 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af08:	f107 0208 	add.w	r2, r7, #8
 800af0c:	4610      	mov	r0, r2
 800af0e:	4798      	blx	r3
 800af10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	3301      	adds	r3, #1
 800af16:	2202      	movs	r2, #2
 800af18:	701a      	strb	r2, [r3, #0]
      break;
 800af1a:	e0f2      	b.n	800b102 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	885b      	ldrh	r3, [r3, #2]
 800af20:	b2db      	uxtb	r3, r3
 800af22:	2b05      	cmp	r3, #5
 800af24:	f200 80ac 	bhi.w	800b080 <USBD_GetDescriptor+0x204>
 800af28:	a201      	add	r2, pc, #4	; (adr r2, 800af30 <USBD_GetDescriptor+0xb4>)
 800af2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af2e:	bf00      	nop
 800af30:	0800af49 	.word	0x0800af49
 800af34:	0800af7d 	.word	0x0800af7d
 800af38:	0800afb1 	.word	0x0800afb1
 800af3c:	0800afe5 	.word	0x0800afe5
 800af40:	0800b019 	.word	0x0800b019
 800af44:	0800b04d 	.word	0x0800b04d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d00b      	beq.n	800af6c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	687a      	ldr	r2, [r7, #4]
 800af5e:	7c12      	ldrb	r2, [r2, #16]
 800af60:	f107 0108 	add.w	r1, r7, #8
 800af64:	4610      	mov	r0, r2
 800af66:	4798      	blx	r3
 800af68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af6a:	e091      	b.n	800b090 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af6c:	6839      	ldr	r1, [r7, #0]
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 facb 	bl	800b50a <USBD_CtlError>
            err++;
 800af74:	7afb      	ldrb	r3, [r7, #11]
 800af76:	3301      	adds	r3, #1
 800af78:	72fb      	strb	r3, [r7, #11]
          break;
 800af7a:	e089      	b.n	800b090 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af82:	689b      	ldr	r3, [r3, #8]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d00b      	beq.n	800afa0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af8e:	689b      	ldr	r3, [r3, #8]
 800af90:	687a      	ldr	r2, [r7, #4]
 800af92:	7c12      	ldrb	r2, [r2, #16]
 800af94:	f107 0108 	add.w	r1, r7, #8
 800af98:	4610      	mov	r0, r2
 800af9a:	4798      	blx	r3
 800af9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af9e:	e077      	b.n	800b090 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800afa0:	6839      	ldr	r1, [r7, #0]
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f000 fab1 	bl	800b50a <USBD_CtlError>
            err++;
 800afa8:	7afb      	ldrb	r3, [r7, #11]
 800afaa:	3301      	adds	r3, #1
 800afac:	72fb      	strb	r3, [r7, #11]
          break;
 800afae:	e06f      	b.n	800b090 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afb6:	68db      	ldr	r3, [r3, #12]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d00b      	beq.n	800afd4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afc2:	68db      	ldr	r3, [r3, #12]
 800afc4:	687a      	ldr	r2, [r7, #4]
 800afc6:	7c12      	ldrb	r2, [r2, #16]
 800afc8:	f107 0108 	add.w	r1, r7, #8
 800afcc:	4610      	mov	r0, r2
 800afce:	4798      	blx	r3
 800afd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800afd2:	e05d      	b.n	800b090 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800afd4:	6839      	ldr	r1, [r7, #0]
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 fa97 	bl	800b50a <USBD_CtlError>
            err++;
 800afdc:	7afb      	ldrb	r3, [r7, #11]
 800afde:	3301      	adds	r3, #1
 800afe0:	72fb      	strb	r3, [r7, #11]
          break;
 800afe2:	e055      	b.n	800b090 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afea:	691b      	ldr	r3, [r3, #16]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d00b      	beq.n	800b008 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aff6:	691b      	ldr	r3, [r3, #16]
 800aff8:	687a      	ldr	r2, [r7, #4]
 800affa:	7c12      	ldrb	r2, [r2, #16]
 800affc:	f107 0108 	add.w	r1, r7, #8
 800b000:	4610      	mov	r0, r2
 800b002:	4798      	blx	r3
 800b004:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b006:	e043      	b.n	800b090 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b008:	6839      	ldr	r1, [r7, #0]
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f000 fa7d 	bl	800b50a <USBD_CtlError>
            err++;
 800b010:	7afb      	ldrb	r3, [r7, #11]
 800b012:	3301      	adds	r3, #1
 800b014:	72fb      	strb	r3, [r7, #11]
          break;
 800b016:	e03b      	b.n	800b090 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b01e:	695b      	ldr	r3, [r3, #20]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d00b      	beq.n	800b03c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b02a:	695b      	ldr	r3, [r3, #20]
 800b02c:	687a      	ldr	r2, [r7, #4]
 800b02e:	7c12      	ldrb	r2, [r2, #16]
 800b030:	f107 0108 	add.w	r1, r7, #8
 800b034:	4610      	mov	r0, r2
 800b036:	4798      	blx	r3
 800b038:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b03a:	e029      	b.n	800b090 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b03c:	6839      	ldr	r1, [r7, #0]
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f000 fa63 	bl	800b50a <USBD_CtlError>
            err++;
 800b044:	7afb      	ldrb	r3, [r7, #11]
 800b046:	3301      	adds	r3, #1
 800b048:	72fb      	strb	r3, [r7, #11]
          break;
 800b04a:	e021      	b.n	800b090 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b052:	699b      	ldr	r3, [r3, #24]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d00b      	beq.n	800b070 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b05e:	699b      	ldr	r3, [r3, #24]
 800b060:	687a      	ldr	r2, [r7, #4]
 800b062:	7c12      	ldrb	r2, [r2, #16]
 800b064:	f107 0108 	add.w	r1, r7, #8
 800b068:	4610      	mov	r0, r2
 800b06a:	4798      	blx	r3
 800b06c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b06e:	e00f      	b.n	800b090 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b070:	6839      	ldr	r1, [r7, #0]
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f000 fa49 	bl	800b50a <USBD_CtlError>
            err++;
 800b078:	7afb      	ldrb	r3, [r7, #11]
 800b07a:	3301      	adds	r3, #1
 800b07c:	72fb      	strb	r3, [r7, #11]
          break;
 800b07e:	e007      	b.n	800b090 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b080:	6839      	ldr	r1, [r7, #0]
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f000 fa41 	bl	800b50a <USBD_CtlError>
          err++;
 800b088:	7afb      	ldrb	r3, [r7, #11]
 800b08a:	3301      	adds	r3, #1
 800b08c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b08e:	bf00      	nop
      }
      break;
 800b090:	e037      	b.n	800b102 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	7c1b      	ldrb	r3, [r3, #16]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d109      	bne.n	800b0ae <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0a2:	f107 0208 	add.w	r2, r7, #8
 800b0a6:	4610      	mov	r0, r2
 800b0a8:	4798      	blx	r3
 800b0aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b0ac:	e029      	b.n	800b102 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b0ae:	6839      	ldr	r1, [r7, #0]
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f000 fa2a 	bl	800b50a <USBD_CtlError>
        err++;
 800b0b6:	7afb      	ldrb	r3, [r7, #11]
 800b0b8:	3301      	adds	r3, #1
 800b0ba:	72fb      	strb	r3, [r7, #11]
      break;
 800b0bc:	e021      	b.n	800b102 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	7c1b      	ldrb	r3, [r3, #16]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d10d      	bne.n	800b0e2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ce:	f107 0208 	add.w	r2, r7, #8
 800b0d2:	4610      	mov	r0, r2
 800b0d4:	4798      	blx	r3
 800b0d6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	3301      	adds	r3, #1
 800b0dc:	2207      	movs	r2, #7
 800b0de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b0e0:	e00f      	b.n	800b102 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b0e2:	6839      	ldr	r1, [r7, #0]
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f000 fa10 	bl	800b50a <USBD_CtlError>
        err++;
 800b0ea:	7afb      	ldrb	r3, [r7, #11]
 800b0ec:	3301      	adds	r3, #1
 800b0ee:	72fb      	strb	r3, [r7, #11]
      break;
 800b0f0:	e007      	b.n	800b102 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b0f2:	6839      	ldr	r1, [r7, #0]
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f000 fa08 	bl	800b50a <USBD_CtlError>
      err++;
 800b0fa:	7afb      	ldrb	r3, [r7, #11]
 800b0fc:	3301      	adds	r3, #1
 800b0fe:	72fb      	strb	r3, [r7, #11]
      break;
 800b100:	bf00      	nop
  }

  if (err != 0U)
 800b102:	7afb      	ldrb	r3, [r7, #11]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d11e      	bne.n	800b146 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	88db      	ldrh	r3, [r3, #6]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d016      	beq.n	800b13e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b110:	893b      	ldrh	r3, [r7, #8]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d00e      	beq.n	800b134 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	88da      	ldrh	r2, [r3, #6]
 800b11a:	893b      	ldrh	r3, [r7, #8]
 800b11c:	4293      	cmp	r3, r2
 800b11e:	bf28      	it	cs
 800b120:	4613      	movcs	r3, r2
 800b122:	b29b      	uxth	r3, r3
 800b124:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b126:	893b      	ldrh	r3, [r7, #8]
 800b128:	461a      	mov	r2, r3
 800b12a:	68f9      	ldr	r1, [r7, #12]
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f000 fa5d 	bl	800b5ec <USBD_CtlSendData>
 800b132:	e009      	b.n	800b148 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b134:	6839      	ldr	r1, [r7, #0]
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f000 f9e7 	bl	800b50a <USBD_CtlError>
 800b13c:	e004      	b.n	800b148 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f000 faae 	bl	800b6a0 <USBD_CtlSendStatus>
 800b144:	e000      	b.n	800b148 <USBD_GetDescriptor+0x2cc>
    return;
 800b146:	bf00      	nop
  }
}
 800b148:	3710      	adds	r7, #16
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
 800b14e:	bf00      	nop

0800b150 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	889b      	ldrh	r3, [r3, #4]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d131      	bne.n	800b1c6 <USBD_SetAddress+0x76>
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	88db      	ldrh	r3, [r3, #6]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d12d      	bne.n	800b1c6 <USBD_SetAddress+0x76>
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	885b      	ldrh	r3, [r3, #2]
 800b16e:	2b7f      	cmp	r3, #127	; 0x7f
 800b170:	d829      	bhi.n	800b1c6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	885b      	ldrh	r3, [r3, #2]
 800b176:	b2db      	uxtb	r3, r3
 800b178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b17c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b184:	b2db      	uxtb	r3, r3
 800b186:	2b03      	cmp	r3, #3
 800b188:	d104      	bne.n	800b194 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b18a:	6839      	ldr	r1, [r7, #0]
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f000 f9bc 	bl	800b50a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b192:	e01d      	b.n	800b1d0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	7bfa      	ldrb	r2, [r7, #15]
 800b198:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b19c:	7bfb      	ldrb	r3, [r7, #15]
 800b19e:	4619      	mov	r1, r3
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f000 ff39 	bl	800c018 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f000 fa7a 	bl	800b6a0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b1ac:	7bfb      	ldrb	r3, [r7, #15]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d004      	beq.n	800b1bc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2202      	movs	r2, #2
 800b1b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1ba:	e009      	b.n	800b1d0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2201      	movs	r2, #1
 800b1c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1c4:	e004      	b.n	800b1d0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b1c6:	6839      	ldr	r1, [r7, #0]
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 f99e 	bl	800b50a <USBD_CtlError>
  }
}
 800b1ce:	bf00      	nop
 800b1d0:	bf00      	nop
 800b1d2:	3710      	adds	r7, #16
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b084      	sub	sp, #16
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	885b      	ldrh	r3, [r3, #2]
 800b1ea:	b2da      	uxtb	r2, r3
 800b1ec:	4b4e      	ldr	r3, [pc, #312]	; (800b328 <USBD_SetConfig+0x150>)
 800b1ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b1f0:	4b4d      	ldr	r3, [pc, #308]	; (800b328 <USBD_SetConfig+0x150>)
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	2b01      	cmp	r3, #1
 800b1f6:	d905      	bls.n	800b204 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b1f8:	6839      	ldr	r1, [r7, #0]
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f000 f985 	bl	800b50a <USBD_CtlError>
    return USBD_FAIL;
 800b200:	2303      	movs	r3, #3
 800b202:	e08c      	b.n	800b31e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b20a:	b2db      	uxtb	r3, r3
 800b20c:	2b02      	cmp	r3, #2
 800b20e:	d002      	beq.n	800b216 <USBD_SetConfig+0x3e>
 800b210:	2b03      	cmp	r3, #3
 800b212:	d029      	beq.n	800b268 <USBD_SetConfig+0x90>
 800b214:	e075      	b.n	800b302 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b216:	4b44      	ldr	r3, [pc, #272]	; (800b328 <USBD_SetConfig+0x150>)
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d020      	beq.n	800b260 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b21e:	4b42      	ldr	r3, [pc, #264]	; (800b328 <USBD_SetConfig+0x150>)
 800b220:	781b      	ldrb	r3, [r3, #0]
 800b222:	461a      	mov	r2, r3
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b228:	4b3f      	ldr	r3, [pc, #252]	; (800b328 <USBD_SetConfig+0x150>)
 800b22a:	781b      	ldrb	r3, [r3, #0]
 800b22c:	4619      	mov	r1, r3
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f7fe ffe7 	bl	800a202 <USBD_SetClassConfig>
 800b234:	4603      	mov	r3, r0
 800b236:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b238:	7bfb      	ldrb	r3, [r7, #15]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d008      	beq.n	800b250 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b23e:	6839      	ldr	r1, [r7, #0]
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f000 f962 	bl	800b50a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2202      	movs	r2, #2
 800b24a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b24e:	e065      	b.n	800b31c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f000 fa25 	bl	800b6a0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2203      	movs	r2, #3
 800b25a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b25e:	e05d      	b.n	800b31c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f000 fa1d 	bl	800b6a0 <USBD_CtlSendStatus>
      break;
 800b266:	e059      	b.n	800b31c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b268:	4b2f      	ldr	r3, [pc, #188]	; (800b328 <USBD_SetConfig+0x150>)
 800b26a:	781b      	ldrb	r3, [r3, #0]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d112      	bne.n	800b296 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2202      	movs	r2, #2
 800b274:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b278:	4b2b      	ldr	r3, [pc, #172]	; (800b328 <USBD_SetConfig+0x150>)
 800b27a:	781b      	ldrb	r3, [r3, #0]
 800b27c:	461a      	mov	r2, r3
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b282:	4b29      	ldr	r3, [pc, #164]	; (800b328 <USBD_SetConfig+0x150>)
 800b284:	781b      	ldrb	r3, [r3, #0]
 800b286:	4619      	mov	r1, r3
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f7fe ffd6 	bl	800a23a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f000 fa06 	bl	800b6a0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b294:	e042      	b.n	800b31c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b296:	4b24      	ldr	r3, [pc, #144]	; (800b328 <USBD_SetConfig+0x150>)
 800b298:	781b      	ldrb	r3, [r3, #0]
 800b29a:	461a      	mov	r2, r3
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	d02a      	beq.n	800b2fa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	b2db      	uxtb	r3, r3
 800b2aa:	4619      	mov	r1, r3
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f7fe ffc4 	bl	800a23a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b2b2:	4b1d      	ldr	r3, [pc, #116]	; (800b328 <USBD_SetConfig+0x150>)
 800b2b4:	781b      	ldrb	r3, [r3, #0]
 800b2b6:	461a      	mov	r2, r3
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b2bc:	4b1a      	ldr	r3, [pc, #104]	; (800b328 <USBD_SetConfig+0x150>)
 800b2be:	781b      	ldrb	r3, [r3, #0]
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f7fe ff9d 	bl	800a202 <USBD_SetClassConfig>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b2cc:	7bfb      	ldrb	r3, [r7, #15]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d00f      	beq.n	800b2f2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b2d2:	6839      	ldr	r1, [r7, #0]
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f000 f918 	bl	800b50a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	b2db      	uxtb	r3, r3
 800b2e0:	4619      	mov	r1, r3
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f7fe ffa9 	bl	800a23a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2202      	movs	r2, #2
 800b2ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b2f0:	e014      	b.n	800b31c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f000 f9d4 	bl	800b6a0 <USBD_CtlSendStatus>
      break;
 800b2f8:	e010      	b.n	800b31c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f000 f9d0 	bl	800b6a0 <USBD_CtlSendStatus>
      break;
 800b300:	e00c      	b.n	800b31c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b302:	6839      	ldr	r1, [r7, #0]
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	f000 f900 	bl	800b50a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b30a:	4b07      	ldr	r3, [pc, #28]	; (800b328 <USBD_SetConfig+0x150>)
 800b30c:	781b      	ldrb	r3, [r3, #0]
 800b30e:	4619      	mov	r1, r3
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f7fe ff92 	bl	800a23a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b316:	2303      	movs	r3, #3
 800b318:	73fb      	strb	r3, [r7, #15]
      break;
 800b31a:	bf00      	nop
  }

  return ret;
 800b31c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3710      	adds	r7, #16
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}
 800b326:	bf00      	nop
 800b328:	20000628 	.word	0x20000628

0800b32c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b082      	sub	sp, #8
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	88db      	ldrh	r3, [r3, #6]
 800b33a:	2b01      	cmp	r3, #1
 800b33c:	d004      	beq.n	800b348 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b33e:	6839      	ldr	r1, [r7, #0]
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f000 f8e2 	bl	800b50a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b346:	e023      	b.n	800b390 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b34e:	b2db      	uxtb	r3, r3
 800b350:	2b02      	cmp	r3, #2
 800b352:	dc02      	bgt.n	800b35a <USBD_GetConfig+0x2e>
 800b354:	2b00      	cmp	r3, #0
 800b356:	dc03      	bgt.n	800b360 <USBD_GetConfig+0x34>
 800b358:	e015      	b.n	800b386 <USBD_GetConfig+0x5a>
 800b35a:	2b03      	cmp	r3, #3
 800b35c:	d00b      	beq.n	800b376 <USBD_GetConfig+0x4a>
 800b35e:	e012      	b.n	800b386 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2200      	movs	r2, #0
 800b364:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	3308      	adds	r3, #8
 800b36a:	2201      	movs	r2, #1
 800b36c:	4619      	mov	r1, r3
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f000 f93c 	bl	800b5ec <USBD_CtlSendData>
        break;
 800b374:	e00c      	b.n	800b390 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	3304      	adds	r3, #4
 800b37a:	2201      	movs	r2, #1
 800b37c:	4619      	mov	r1, r3
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f000 f934 	bl	800b5ec <USBD_CtlSendData>
        break;
 800b384:	e004      	b.n	800b390 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b386:	6839      	ldr	r1, [r7, #0]
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f000 f8be 	bl	800b50a <USBD_CtlError>
        break;
 800b38e:	bf00      	nop
}
 800b390:	bf00      	nop
 800b392:	3708      	adds	r7, #8
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}

0800b398 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b082      	sub	sp, #8
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3a8:	b2db      	uxtb	r3, r3
 800b3aa:	3b01      	subs	r3, #1
 800b3ac:	2b02      	cmp	r3, #2
 800b3ae:	d81e      	bhi.n	800b3ee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	88db      	ldrh	r3, [r3, #6]
 800b3b4:	2b02      	cmp	r3, #2
 800b3b6:	d004      	beq.n	800b3c2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b3b8:	6839      	ldr	r1, [r7, #0]
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 f8a5 	bl	800b50a <USBD_CtlError>
        break;
 800b3c0:	e01a      	b.n	800b3f8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2201      	movs	r2, #1
 800b3c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d005      	beq.n	800b3de <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	68db      	ldr	r3, [r3, #12]
 800b3d6:	f043 0202 	orr.w	r2, r3, #2
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	330c      	adds	r3, #12
 800b3e2:	2202      	movs	r2, #2
 800b3e4:	4619      	mov	r1, r3
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f000 f900 	bl	800b5ec <USBD_CtlSendData>
      break;
 800b3ec:	e004      	b.n	800b3f8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b3ee:	6839      	ldr	r1, [r7, #0]
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f000 f88a 	bl	800b50a <USBD_CtlError>
      break;
 800b3f6:	bf00      	nop
  }
}
 800b3f8:	bf00      	nop
 800b3fa:	3708      	adds	r7, #8
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b082      	sub	sp, #8
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
 800b408:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	885b      	ldrh	r3, [r3, #2]
 800b40e:	2b01      	cmp	r3, #1
 800b410:	d107      	bne.n	800b422 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2201      	movs	r2, #1
 800b416:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 f940 	bl	800b6a0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b420:	e013      	b.n	800b44a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	885b      	ldrh	r3, [r3, #2]
 800b426:	2b02      	cmp	r3, #2
 800b428:	d10b      	bne.n	800b442 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	889b      	ldrh	r3, [r3, #4]
 800b42e:	0a1b      	lsrs	r3, r3, #8
 800b430:	b29b      	uxth	r3, r3
 800b432:	b2da      	uxtb	r2, r3
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f000 f930 	bl	800b6a0 <USBD_CtlSendStatus>
}
 800b440:	e003      	b.n	800b44a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b442:	6839      	ldr	r1, [r7, #0]
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f000 f860 	bl	800b50a <USBD_CtlError>
}
 800b44a:	bf00      	nop
 800b44c:	3708      	adds	r7, #8
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}

0800b452 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b452:	b580      	push	{r7, lr}
 800b454:	b082      	sub	sp, #8
 800b456:	af00      	add	r7, sp, #0
 800b458:	6078      	str	r0, [r7, #4]
 800b45a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b462:	b2db      	uxtb	r3, r3
 800b464:	3b01      	subs	r3, #1
 800b466:	2b02      	cmp	r3, #2
 800b468:	d80b      	bhi.n	800b482 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	885b      	ldrh	r3, [r3, #2]
 800b46e:	2b01      	cmp	r3, #1
 800b470:	d10c      	bne.n	800b48c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2200      	movs	r2, #0
 800b476:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f000 f910 	bl	800b6a0 <USBD_CtlSendStatus>
      }
      break;
 800b480:	e004      	b.n	800b48c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b482:	6839      	ldr	r1, [r7, #0]
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f000 f840 	bl	800b50a <USBD_CtlError>
      break;
 800b48a:	e000      	b.n	800b48e <USBD_ClrFeature+0x3c>
      break;
 800b48c:	bf00      	nop
  }
}
 800b48e:	bf00      	nop
 800b490:	3708      	adds	r7, #8
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}

0800b496 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b496:	b580      	push	{r7, lr}
 800b498:	b084      	sub	sp, #16
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
 800b49e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	781a      	ldrb	r2, [r3, #0]
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	3301      	adds	r3, #1
 800b4b0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	781a      	ldrb	r2, [r3, #0]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	3301      	adds	r3, #1
 800b4be:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b4c0:	68f8      	ldr	r0, [r7, #12]
 800b4c2:	f7ff fa41 	bl	800a948 <SWAPBYTE>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	461a      	mov	r2, r3
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	3301      	adds	r3, #1
 800b4d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b4da:	68f8      	ldr	r0, [r7, #12]
 800b4dc:	f7ff fa34 	bl	800a948 <SWAPBYTE>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	3301      	adds	r3, #1
 800b4ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	3301      	adds	r3, #1
 800b4f2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b4f4:	68f8      	ldr	r0, [r7, #12]
 800b4f6:	f7ff fa27 	bl	800a948 <SWAPBYTE>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	461a      	mov	r2, r3
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	80da      	strh	r2, [r3, #6]
}
 800b502:	bf00      	nop
 800b504:	3710      	adds	r7, #16
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}

0800b50a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b50a:	b580      	push	{r7, lr}
 800b50c:	b082      	sub	sp, #8
 800b50e:	af00      	add	r7, sp, #0
 800b510:	6078      	str	r0, [r7, #4]
 800b512:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b514:	2180      	movs	r1, #128	; 0x80
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f000 fd14 	bl	800bf44 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b51c:	2100      	movs	r1, #0
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f000 fd10 	bl	800bf44 <USBD_LL_StallEP>
}
 800b524:	bf00      	nop
 800b526:	3708      	adds	r7, #8
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b086      	sub	sp, #24
 800b530:	af00      	add	r7, sp, #0
 800b532:	60f8      	str	r0, [r7, #12]
 800b534:	60b9      	str	r1, [r7, #8]
 800b536:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b538:	2300      	movs	r3, #0
 800b53a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d036      	beq.n	800b5b0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b546:	6938      	ldr	r0, [r7, #16]
 800b548:	f000 f836 	bl	800b5b8 <USBD_GetLen>
 800b54c:	4603      	mov	r3, r0
 800b54e:	3301      	adds	r3, #1
 800b550:	b29b      	uxth	r3, r3
 800b552:	005b      	lsls	r3, r3, #1
 800b554:	b29a      	uxth	r2, r3
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b55a:	7dfb      	ldrb	r3, [r7, #23]
 800b55c:	68ba      	ldr	r2, [r7, #8]
 800b55e:	4413      	add	r3, r2
 800b560:	687a      	ldr	r2, [r7, #4]
 800b562:	7812      	ldrb	r2, [r2, #0]
 800b564:	701a      	strb	r2, [r3, #0]
  idx++;
 800b566:	7dfb      	ldrb	r3, [r7, #23]
 800b568:	3301      	adds	r3, #1
 800b56a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b56c:	7dfb      	ldrb	r3, [r7, #23]
 800b56e:	68ba      	ldr	r2, [r7, #8]
 800b570:	4413      	add	r3, r2
 800b572:	2203      	movs	r2, #3
 800b574:	701a      	strb	r2, [r3, #0]
  idx++;
 800b576:	7dfb      	ldrb	r3, [r7, #23]
 800b578:	3301      	adds	r3, #1
 800b57a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b57c:	e013      	b.n	800b5a6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b57e:	7dfb      	ldrb	r3, [r7, #23]
 800b580:	68ba      	ldr	r2, [r7, #8]
 800b582:	4413      	add	r3, r2
 800b584:	693a      	ldr	r2, [r7, #16]
 800b586:	7812      	ldrb	r2, [r2, #0]
 800b588:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	3301      	adds	r3, #1
 800b58e:	613b      	str	r3, [r7, #16]
    idx++;
 800b590:	7dfb      	ldrb	r3, [r7, #23]
 800b592:	3301      	adds	r3, #1
 800b594:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b596:	7dfb      	ldrb	r3, [r7, #23]
 800b598:	68ba      	ldr	r2, [r7, #8]
 800b59a:	4413      	add	r3, r2
 800b59c:	2200      	movs	r2, #0
 800b59e:	701a      	strb	r2, [r3, #0]
    idx++;
 800b5a0:	7dfb      	ldrb	r3, [r7, #23]
 800b5a2:	3301      	adds	r3, #1
 800b5a4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b5a6:	693b      	ldr	r3, [r7, #16]
 800b5a8:	781b      	ldrb	r3, [r3, #0]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d1e7      	bne.n	800b57e <USBD_GetString+0x52>
 800b5ae:	e000      	b.n	800b5b2 <USBD_GetString+0x86>
    return;
 800b5b0:	bf00      	nop
  }
}
 800b5b2:	3718      	adds	r7, #24
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}

0800b5b8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b085      	sub	sp, #20
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b5c8:	e005      	b.n	800b5d6 <USBD_GetLen+0x1e>
  {
    len++;
 800b5ca:	7bfb      	ldrb	r3, [r7, #15]
 800b5cc:	3301      	adds	r3, #1
 800b5ce:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	3301      	adds	r3, #1
 800b5d4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	781b      	ldrb	r3, [r3, #0]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d1f5      	bne.n	800b5ca <USBD_GetLen+0x12>
  }

  return len;
 800b5de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3714      	adds	r7, #20
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr

0800b5ec <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b084      	sub	sp, #16
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	60f8      	str	r0, [r7, #12]
 800b5f4:	60b9      	str	r1, [r7, #8]
 800b5f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	2202      	movs	r2, #2
 800b5fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	687a      	ldr	r2, [r7, #4]
 800b60a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	68ba      	ldr	r2, [r7, #8]
 800b610:	2100      	movs	r1, #0
 800b612:	68f8      	ldr	r0, [r7, #12]
 800b614:	f000 fd1f 	bl	800c056 <USBD_LL_Transmit>

  return USBD_OK;
 800b618:	2300      	movs	r3, #0
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3710      	adds	r7, #16
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}

0800b622 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b622:	b580      	push	{r7, lr}
 800b624:	b084      	sub	sp, #16
 800b626:	af00      	add	r7, sp, #0
 800b628:	60f8      	str	r0, [r7, #12]
 800b62a:	60b9      	str	r1, [r7, #8]
 800b62c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	68ba      	ldr	r2, [r7, #8]
 800b632:	2100      	movs	r1, #0
 800b634:	68f8      	ldr	r0, [r7, #12]
 800b636:	f000 fd0e 	bl	800c056 <USBD_LL_Transmit>

  return USBD_OK;
 800b63a:	2300      	movs	r3, #0
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3710      	adds	r7, #16
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}

0800b644 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b084      	sub	sp, #16
 800b648:	af00      	add	r7, sp, #0
 800b64a:	60f8      	str	r0, [r7, #12]
 800b64c:	60b9      	str	r1, [r7, #8]
 800b64e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	2203      	movs	r2, #3
 800b654:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	687a      	ldr	r2, [r7, #4]
 800b65c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	687a      	ldr	r2, [r7, #4]
 800b664:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	68ba      	ldr	r2, [r7, #8]
 800b66c:	2100      	movs	r1, #0
 800b66e:	68f8      	ldr	r0, [r7, #12]
 800b670:	f000 fd12 	bl	800c098 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b674:	2300      	movs	r3, #0
}
 800b676:	4618      	mov	r0, r3
 800b678:	3710      	adds	r7, #16
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}

0800b67e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b67e:	b580      	push	{r7, lr}
 800b680:	b084      	sub	sp, #16
 800b682:	af00      	add	r7, sp, #0
 800b684:	60f8      	str	r0, [r7, #12]
 800b686:	60b9      	str	r1, [r7, #8]
 800b688:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	68ba      	ldr	r2, [r7, #8]
 800b68e:	2100      	movs	r1, #0
 800b690:	68f8      	ldr	r0, [r7, #12]
 800b692:	f000 fd01 	bl	800c098 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b696:	2300      	movs	r3, #0
}
 800b698:	4618      	mov	r0, r3
 800b69a:	3710      	adds	r7, #16
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}

0800b6a0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b082      	sub	sp, #8
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2204      	movs	r2, #4
 800b6ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	2100      	movs	r1, #0
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f000 fccd 	bl	800c056 <USBD_LL_Transmit>

  return USBD_OK;
 800b6bc:	2300      	movs	r3, #0
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3708      	adds	r7, #8
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}

0800b6c6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b6c6:	b580      	push	{r7, lr}
 800b6c8:	b082      	sub	sp, #8
 800b6ca:	af00      	add	r7, sp, #0
 800b6cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2205      	movs	r2, #5
 800b6d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	2200      	movs	r2, #0
 800b6da:	2100      	movs	r1, #0
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f000 fcdb 	bl	800c098 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b6e2:	2300      	movs	r3, #0
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3708      	adds	r7, #8
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800b6f0:	2201      	movs	r2, #1
 800b6f2:	4912      	ldr	r1, [pc, #72]	; (800b73c <MX_USB_DEVICE_Init+0x50>)
 800b6f4:	4812      	ldr	r0, [pc, #72]	; (800b740 <MX_USB_DEVICE_Init+0x54>)
 800b6f6:	f7fe fd07 	bl	800a108 <USBD_Init>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d001      	beq.n	800b704 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b700:	f7f5 fe5c 	bl	80013bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800b704:	490f      	ldr	r1, [pc, #60]	; (800b744 <MX_USB_DEVICE_Init+0x58>)
 800b706:	480e      	ldr	r0, [pc, #56]	; (800b740 <MX_USB_DEVICE_Init+0x54>)
 800b708:	f7fe fd2e 	bl	800a168 <USBD_RegisterClass>
 800b70c:	4603      	mov	r3, r0
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d001      	beq.n	800b716 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b712:	f7f5 fe53 	bl	80013bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800b716:	490c      	ldr	r1, [pc, #48]	; (800b748 <MX_USB_DEVICE_Init+0x5c>)
 800b718:	4809      	ldr	r0, [pc, #36]	; (800b740 <MX_USB_DEVICE_Init+0x54>)
 800b71a:	f7fe fc2b 	bl	8009f74 <USBD_CDC_RegisterInterface>
 800b71e:	4603      	mov	r3, r0
 800b720:	2b00      	cmp	r3, #0
 800b722:	d001      	beq.n	800b728 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b724:	f7f5 fe4a 	bl	80013bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800b728:	4805      	ldr	r0, [pc, #20]	; (800b740 <MX_USB_DEVICE_Init+0x54>)
 800b72a:	f7fe fd53 	bl	800a1d4 <USBD_Start>
 800b72e:	4603      	mov	r3, r0
 800b730:	2b00      	cmp	r3, #0
 800b732:	d001      	beq.n	800b738 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b734:	f7f5 fe42 	bl	80013bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b738:	bf00      	nop
 800b73a:	bd80      	pop	{r7, pc}
 800b73c:	20000128 	.word	0x20000128
 800b740:	2000062c 	.word	0x2000062c
 800b744:	20000094 	.word	0x20000094
 800b748:	20000114 	.word	0x20000114

0800b74c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800b750:	2200      	movs	r2, #0
 800b752:	4905      	ldr	r1, [pc, #20]	; (800b768 <CDC_Init_HS+0x1c>)
 800b754:	4805      	ldr	r0, [pc, #20]	; (800b76c <CDC_Init_HS+0x20>)
 800b756:	f7fe fc27 	bl	8009fa8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800b75a:	4905      	ldr	r1, [pc, #20]	; (800b770 <CDC_Init_HS+0x24>)
 800b75c:	4803      	ldr	r0, [pc, #12]	; (800b76c <CDC_Init_HS+0x20>)
 800b75e:	f7fe fc43 	bl	8009fe8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b762:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800b764:	4618      	mov	r0, r3
 800b766:	bd80      	pop	{r7, pc}
 800b768:	20001108 	.word	0x20001108
 800b76c:	2000062c 	.word	0x2000062c
 800b770:	20000908 	.word	0x20000908

0800b774 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800b774:	b480      	push	{r7}
 800b776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800b778:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	46bd      	mov	sp, r7
 800b77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b782:	4770      	bx	lr

0800b784 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b784:	b480      	push	{r7}
 800b786:	b085      	sub	sp, #20
 800b788:	af00      	add	r7, sp, #0
 800b78a:	4603      	mov	r3, r0
 800b78c:	6039      	str	r1, [r7, #0]
 800b78e:	71fb      	strb	r3, [r7, #7]
 800b790:	4613      	mov	r3, r2
 800b792:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800b794:	79fb      	ldrb	r3, [r7, #7]
 800b796:	2b23      	cmp	r3, #35	; 0x23
 800b798:	d870      	bhi.n	800b87c <CDC_Control_HS+0xf8>
 800b79a:	a201      	add	r2, pc, #4	; (adr r2, 800b7a0 <CDC_Control_HS+0x1c>)
 800b79c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7a0:	0800b87d 	.word	0x0800b87d
 800b7a4:	0800b87d 	.word	0x0800b87d
 800b7a8:	0800b87d 	.word	0x0800b87d
 800b7ac:	0800b87d 	.word	0x0800b87d
 800b7b0:	0800b87d 	.word	0x0800b87d
 800b7b4:	0800b87d 	.word	0x0800b87d
 800b7b8:	0800b87d 	.word	0x0800b87d
 800b7bc:	0800b87d 	.word	0x0800b87d
 800b7c0:	0800b87d 	.word	0x0800b87d
 800b7c4:	0800b87d 	.word	0x0800b87d
 800b7c8:	0800b87d 	.word	0x0800b87d
 800b7cc:	0800b87d 	.word	0x0800b87d
 800b7d0:	0800b87d 	.word	0x0800b87d
 800b7d4:	0800b87d 	.word	0x0800b87d
 800b7d8:	0800b87d 	.word	0x0800b87d
 800b7dc:	0800b87d 	.word	0x0800b87d
 800b7e0:	0800b87d 	.word	0x0800b87d
 800b7e4:	0800b87d 	.word	0x0800b87d
 800b7e8:	0800b87d 	.word	0x0800b87d
 800b7ec:	0800b87d 	.word	0x0800b87d
 800b7f0:	0800b87d 	.word	0x0800b87d
 800b7f4:	0800b87d 	.word	0x0800b87d
 800b7f8:	0800b87d 	.word	0x0800b87d
 800b7fc:	0800b87d 	.word	0x0800b87d
 800b800:	0800b87d 	.word	0x0800b87d
 800b804:	0800b87d 	.word	0x0800b87d
 800b808:	0800b87d 	.word	0x0800b87d
 800b80c:	0800b87d 	.word	0x0800b87d
 800b810:	0800b87d 	.word	0x0800b87d
 800b814:	0800b87d 	.word	0x0800b87d
 800b818:	0800b87d 	.word	0x0800b87d
 800b81c:	0800b87d 	.word	0x0800b87d
 800b820:	0800b831 	.word	0x0800b831
 800b824:	0800b857 	.word	0x0800b857
 800b828:	0800b87d 	.word	0x0800b87d
 800b82c:	0800b87d 	.word	0x0800b87d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
  case CDC_SET_LINE_CODING:
	  for (int i = 0; i < 7; i++){
 800b830:	2300      	movs	r3, #0
 800b832:	60fb      	str	r3, [r7, #12]
 800b834:	e00b      	b.n	800b84e <CDC_Control_HS+0xca>
	  		  buff[i] = pbuf[i];
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	683a      	ldr	r2, [r7, #0]
 800b83a:	4413      	add	r3, r2
 800b83c:	7819      	ldrb	r1, [r3, #0]
 800b83e:	4a13      	ldr	r2, [pc, #76]	; (800b88c <CDC_Control_HS+0x108>)
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	4413      	add	r3, r2
 800b844:	460a      	mov	r2, r1
 800b846:	701a      	strb	r2, [r3, #0]
	  for (int i = 0; i < 7; i++){
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	3301      	adds	r3, #1
 800b84c:	60fb      	str	r3, [r7, #12]
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	2b06      	cmp	r3, #6
 800b852:	ddf0      	ble.n	800b836 <CDC_Control_HS+0xb2>
	  	  }
    break;
 800b854:	e013      	b.n	800b87e <CDC_Control_HS+0xfa>

  case CDC_GET_LINE_CODING:
	  for (int i = 0; i < 7; i++){
 800b856:	2300      	movs	r3, #0
 800b858:	60bb      	str	r3, [r7, #8]
 800b85a:	e00b      	b.n	800b874 <CDC_Control_HS+0xf0>
	  	  		  buff[i] = pbuf[i];
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	683a      	ldr	r2, [r7, #0]
 800b860:	4413      	add	r3, r2
 800b862:	7819      	ldrb	r1, [r3, #0]
 800b864:	4a09      	ldr	r2, [pc, #36]	; (800b88c <CDC_Control_HS+0x108>)
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	4413      	add	r3, r2
 800b86a:	460a      	mov	r2, r1
 800b86c:	701a      	strb	r2, [r3, #0]
	  for (int i = 0; i < 7; i++){
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	3301      	adds	r3, #1
 800b872:	60bb      	str	r3, [r7, #8]
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	2b06      	cmp	r3, #6
 800b878:	ddf0      	ble.n	800b85c <CDC_Control_HS+0xd8>
	  	  	  }
    break;
 800b87a:	e000      	b.n	800b87e <CDC_Control_HS+0xfa>
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b87c:	bf00      	nop
  }

  return (USBD_OK);
 800b87e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800b880:	4618      	mov	r0, r3
 800b882:	3714      	adds	r7, #20
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr
 800b88c:	20001908 	.word	0x20001908

0800b890 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b082      	sub	sp, #8
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
 800b898:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800b89a:	6879      	ldr	r1, [r7, #4]
 800b89c:	4809      	ldr	r0, [pc, #36]	; (800b8c4 <CDC_Receive_HS+0x34>)
 800b89e:	f7fe fba3 	bl	8009fe8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800b8a2:	4808      	ldr	r0, [pc, #32]	; (800b8c4 <CDC_Receive_HS+0x34>)
 800b8a4:	f7fe fbfc 	bl	800a0a0 <USBD_CDC_ReceivePacket>
  buffer = '\0';
 800b8a8:	4b07      	ldr	r3, [pc, #28]	; (800b8c8 <CDC_Receive_HS+0x38>)
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	601a      	str	r2, [r3, #0]
  buffer = Buf;
 800b8ae:	4a06      	ldr	r2, [pc, #24]	; (800b8c8 <CDC_Receive_HS+0x38>)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6013      	str	r3, [r2, #0]
  receive = 1;
 800b8b4:	4b05      	ldr	r3, [pc, #20]	; (800b8cc <CDC_Receive_HS+0x3c>)
 800b8b6:	2201      	movs	r2, #1
 800b8b8:	601a      	str	r2, [r3, #0]
  return (USBD_OK);
 800b8ba:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	3708      	adds	r7, #8
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}
 800b8c4:	2000062c 	.word	0x2000062c
 800b8c8:	200003c0 	.word	0x200003c0
 800b8cc:	200003c4 	.word	0x200003c4

0800b8d0 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b084      	sub	sp, #16
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
 800b8d8:	460b      	mov	r3, r1
 800b8da:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800b8e0:	4b0c      	ldr	r3, [pc, #48]	; (800b914 <CDC_Transmit_HS+0x44>)
 800b8e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b8e6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d001      	beq.n	800b8f4 <CDC_Transmit_HS+0x24>
    return USBD_BUSY;
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	e00b      	b.n	800b90c <CDC_Transmit_HS+0x3c>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800b8f4:	887b      	ldrh	r3, [r7, #2]
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	6879      	ldr	r1, [r7, #4]
 800b8fa:	4806      	ldr	r0, [pc, #24]	; (800b914 <CDC_Transmit_HS+0x44>)
 800b8fc:	f7fe fb54 	bl	8009fa8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800b900:	4804      	ldr	r0, [pc, #16]	; (800b914 <CDC_Transmit_HS+0x44>)
 800b902:	f7fe fb8d 	bl	800a020 <USBD_CDC_TransmitPacket>
 800b906:	4603      	mov	r3, r0
 800b908:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800b90a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3710      	adds	r7, #16
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}
 800b914:	2000062c 	.word	0x2000062c

0800b918 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b918:	b480      	push	{r7}
 800b91a:	b087      	sub	sp, #28
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	60f8      	str	r0, [r7, #12]
 800b920:	60b9      	str	r1, [r7, #8]
 800b922:	4613      	mov	r3, r2
 800b924:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b926:	2300      	movs	r3, #0
 800b928:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800b92a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b92e:	4618      	mov	r0, r3
 800b930:	371c      	adds	r7, #28
 800b932:	46bd      	mov	sp, r7
 800b934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b938:	4770      	bx	lr
	...

0800b93c <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b93c:	b480      	push	{r7}
 800b93e:	b083      	sub	sp, #12
 800b940:	af00      	add	r7, sp, #0
 800b942:	4603      	mov	r3, r0
 800b944:	6039      	str	r1, [r7, #0]
 800b946:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	2212      	movs	r2, #18
 800b94c:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800b94e:	4b03      	ldr	r3, [pc, #12]	; (800b95c <USBD_HS_DeviceDescriptor+0x20>)
}
 800b950:	4618      	mov	r0, r3
 800b952:	370c      	adds	r7, #12
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr
 800b95c:	20000144 	.word	0x20000144

0800b960 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b960:	b480      	push	{r7}
 800b962:	b083      	sub	sp, #12
 800b964:	af00      	add	r7, sp, #0
 800b966:	4603      	mov	r3, r0
 800b968:	6039      	str	r1, [r7, #0]
 800b96a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	2204      	movs	r2, #4
 800b970:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b972:	4b03      	ldr	r3, [pc, #12]	; (800b980 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800b974:	4618      	mov	r0, r3
 800b976:	370c      	adds	r7, #12
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr
 800b980:	20000158 	.word	0x20000158

0800b984 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b082      	sub	sp, #8
 800b988:	af00      	add	r7, sp, #0
 800b98a:	4603      	mov	r3, r0
 800b98c:	6039      	str	r1, [r7, #0]
 800b98e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b990:	79fb      	ldrb	r3, [r7, #7]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d105      	bne.n	800b9a2 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800b996:	683a      	ldr	r2, [r7, #0]
 800b998:	4907      	ldr	r1, [pc, #28]	; (800b9b8 <USBD_HS_ProductStrDescriptor+0x34>)
 800b99a:	4808      	ldr	r0, [pc, #32]	; (800b9bc <USBD_HS_ProductStrDescriptor+0x38>)
 800b99c:	f7ff fdc6 	bl	800b52c <USBD_GetString>
 800b9a0:	e004      	b.n	800b9ac <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800b9a2:	683a      	ldr	r2, [r7, #0]
 800b9a4:	4904      	ldr	r1, [pc, #16]	; (800b9b8 <USBD_HS_ProductStrDescriptor+0x34>)
 800b9a6:	4805      	ldr	r0, [pc, #20]	; (800b9bc <USBD_HS_ProductStrDescriptor+0x38>)
 800b9a8:	f7ff fdc0 	bl	800b52c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b9ac:	4b02      	ldr	r3, [pc, #8]	; (800b9b8 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3708      	adds	r7, #8
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}
 800b9b6:	bf00      	nop
 800b9b8:	20001910 	.word	0x20001910
 800b9bc:	08010b48 	.word	0x08010b48

0800b9c0 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b082      	sub	sp, #8
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	6039      	str	r1, [r7, #0]
 800b9ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b9cc:	683a      	ldr	r2, [r7, #0]
 800b9ce:	4904      	ldr	r1, [pc, #16]	; (800b9e0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800b9d0:	4804      	ldr	r0, [pc, #16]	; (800b9e4 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800b9d2:	f7ff fdab 	bl	800b52c <USBD_GetString>
  return USBD_StrDesc;
 800b9d6:	4b02      	ldr	r3, [pc, #8]	; (800b9e0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3708      	adds	r7, #8
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}
 800b9e0:	20001910 	.word	0x20001910
 800b9e4:	08010b60 	.word	0x08010b60

0800b9e8 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b082      	sub	sp, #8
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	6039      	str	r1, [r7, #0]
 800b9f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	221a      	movs	r2, #26
 800b9f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b9fa:	f000 f843 	bl	800ba84 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b9fe:	4b02      	ldr	r3, [pc, #8]	; (800ba08 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3708      	adds	r7, #8
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}
 800ba08:	2000015c 	.word	0x2000015c

0800ba0c <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b082      	sub	sp, #8
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	4603      	mov	r3, r0
 800ba14:	6039      	str	r1, [r7, #0]
 800ba16:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ba18:	79fb      	ldrb	r3, [r7, #7]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d105      	bne.n	800ba2a <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800ba1e:	683a      	ldr	r2, [r7, #0]
 800ba20:	4907      	ldr	r1, [pc, #28]	; (800ba40 <USBD_HS_ConfigStrDescriptor+0x34>)
 800ba22:	4808      	ldr	r0, [pc, #32]	; (800ba44 <USBD_HS_ConfigStrDescriptor+0x38>)
 800ba24:	f7ff fd82 	bl	800b52c <USBD_GetString>
 800ba28:	e004      	b.n	800ba34 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800ba2a:	683a      	ldr	r2, [r7, #0]
 800ba2c:	4904      	ldr	r1, [pc, #16]	; (800ba40 <USBD_HS_ConfigStrDescriptor+0x34>)
 800ba2e:	4805      	ldr	r0, [pc, #20]	; (800ba44 <USBD_HS_ConfigStrDescriptor+0x38>)
 800ba30:	f7ff fd7c 	bl	800b52c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba34:	4b02      	ldr	r3, [pc, #8]	; (800ba40 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3708      	adds	r7, #8
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}
 800ba3e:	bf00      	nop
 800ba40:	20001910 	.word	0x20001910
 800ba44:	08010b74 	.word	0x08010b74

0800ba48 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b082      	sub	sp, #8
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	4603      	mov	r3, r0
 800ba50:	6039      	str	r1, [r7, #0]
 800ba52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ba54:	79fb      	ldrb	r3, [r7, #7]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d105      	bne.n	800ba66 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800ba5a:	683a      	ldr	r2, [r7, #0]
 800ba5c:	4907      	ldr	r1, [pc, #28]	; (800ba7c <USBD_HS_InterfaceStrDescriptor+0x34>)
 800ba5e:	4808      	ldr	r0, [pc, #32]	; (800ba80 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800ba60:	f7ff fd64 	bl	800b52c <USBD_GetString>
 800ba64:	e004      	b.n	800ba70 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800ba66:	683a      	ldr	r2, [r7, #0]
 800ba68:	4904      	ldr	r1, [pc, #16]	; (800ba7c <USBD_HS_InterfaceStrDescriptor+0x34>)
 800ba6a:	4805      	ldr	r0, [pc, #20]	; (800ba80 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800ba6c:	f7ff fd5e 	bl	800b52c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba70:	4b02      	ldr	r3, [pc, #8]	; (800ba7c <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3708      	adds	r7, #8
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}
 800ba7a:	bf00      	nop
 800ba7c:	20001910 	.word	0x20001910
 800ba80:	08010b80 	.word	0x08010b80

0800ba84 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b084      	sub	sp, #16
 800ba88:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ba8a:	4b0f      	ldr	r3, [pc, #60]	; (800bac8 <Get_SerialNum+0x44>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ba90:	4b0e      	ldr	r3, [pc, #56]	; (800bacc <Get_SerialNum+0x48>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ba96:	4b0e      	ldr	r3, [pc, #56]	; (800bad0 <Get_SerialNum+0x4c>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ba9c:	68fa      	ldr	r2, [r7, #12]
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	4413      	add	r3, r2
 800baa2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d009      	beq.n	800babe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800baaa:	2208      	movs	r2, #8
 800baac:	4909      	ldr	r1, [pc, #36]	; (800bad4 <Get_SerialNum+0x50>)
 800baae:	68f8      	ldr	r0, [r7, #12]
 800bab0:	f000 f814 	bl	800badc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bab4:	2204      	movs	r2, #4
 800bab6:	4908      	ldr	r1, [pc, #32]	; (800bad8 <Get_SerialNum+0x54>)
 800bab8:	68b8      	ldr	r0, [r7, #8]
 800baba:	f000 f80f 	bl	800badc <IntToUnicode>
  }
}
 800babe:	bf00      	nop
 800bac0:	3710      	adds	r7, #16
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}
 800bac6:	bf00      	nop
 800bac8:	1fff7a10 	.word	0x1fff7a10
 800bacc:	1fff7a14 	.word	0x1fff7a14
 800bad0:	1fff7a18 	.word	0x1fff7a18
 800bad4:	2000015e 	.word	0x2000015e
 800bad8:	2000016e 	.word	0x2000016e

0800badc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800badc:	b480      	push	{r7}
 800bade:	b087      	sub	sp, #28
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	60f8      	str	r0, [r7, #12]
 800bae4:	60b9      	str	r1, [r7, #8]
 800bae6:	4613      	mov	r3, r2
 800bae8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800baea:	2300      	movs	r3, #0
 800baec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800baee:	2300      	movs	r3, #0
 800baf0:	75fb      	strb	r3, [r7, #23]
 800baf2:	e027      	b.n	800bb44 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	0f1b      	lsrs	r3, r3, #28
 800baf8:	2b09      	cmp	r3, #9
 800bafa:	d80b      	bhi.n	800bb14 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	0f1b      	lsrs	r3, r3, #28
 800bb00:	b2da      	uxtb	r2, r3
 800bb02:	7dfb      	ldrb	r3, [r7, #23]
 800bb04:	005b      	lsls	r3, r3, #1
 800bb06:	4619      	mov	r1, r3
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	440b      	add	r3, r1
 800bb0c:	3230      	adds	r2, #48	; 0x30
 800bb0e:	b2d2      	uxtb	r2, r2
 800bb10:	701a      	strb	r2, [r3, #0]
 800bb12:	e00a      	b.n	800bb2a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	0f1b      	lsrs	r3, r3, #28
 800bb18:	b2da      	uxtb	r2, r3
 800bb1a:	7dfb      	ldrb	r3, [r7, #23]
 800bb1c:	005b      	lsls	r3, r3, #1
 800bb1e:	4619      	mov	r1, r3
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	440b      	add	r3, r1
 800bb24:	3237      	adds	r2, #55	; 0x37
 800bb26:	b2d2      	uxtb	r2, r2
 800bb28:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	011b      	lsls	r3, r3, #4
 800bb2e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bb30:	7dfb      	ldrb	r3, [r7, #23]
 800bb32:	005b      	lsls	r3, r3, #1
 800bb34:	3301      	adds	r3, #1
 800bb36:	68ba      	ldr	r2, [r7, #8]
 800bb38:	4413      	add	r3, r2
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bb3e:	7dfb      	ldrb	r3, [r7, #23]
 800bb40:	3301      	adds	r3, #1
 800bb42:	75fb      	strb	r3, [r7, #23]
 800bb44:	7dfa      	ldrb	r2, [r7, #23]
 800bb46:	79fb      	ldrb	r3, [r7, #7]
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	d3d3      	bcc.n	800baf4 <IntToUnicode+0x18>
  }
}
 800bb4c:	bf00      	nop
 800bb4e:	bf00      	nop
 800bb50:	371c      	adds	r7, #28
 800bb52:	46bd      	mov	sp, r7
 800bb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb58:	4770      	bx	lr
	...

0800bb5c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b08a      	sub	sp, #40	; 0x28
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bb64:	f107 0314 	add.w	r3, r7, #20
 800bb68:	2200      	movs	r2, #0
 800bb6a:	601a      	str	r2, [r3, #0]
 800bb6c:	605a      	str	r2, [r3, #4]
 800bb6e:	609a      	str	r2, [r3, #8]
 800bb70:	60da      	str	r2, [r3, #12]
 800bb72:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	4a1d      	ldr	r2, [pc, #116]	; (800bbf0 <HAL_PCD_MspInit+0x94>)
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d134      	bne.n	800bbe8 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bb7e:	2300      	movs	r3, #0
 800bb80:	613b      	str	r3, [r7, #16]
 800bb82:	4b1c      	ldr	r3, [pc, #112]	; (800bbf4 <HAL_PCD_MspInit+0x98>)
 800bb84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb86:	4a1b      	ldr	r2, [pc, #108]	; (800bbf4 <HAL_PCD_MspInit+0x98>)
 800bb88:	f043 0302 	orr.w	r3, r3, #2
 800bb8c:	6313      	str	r3, [r2, #48]	; 0x30
 800bb8e:	4b19      	ldr	r3, [pc, #100]	; (800bbf4 <HAL_PCD_MspInit+0x98>)
 800bb90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb92:	f003 0302 	and.w	r3, r3, #2
 800bb96:	613b      	str	r3, [r7, #16]
 800bb98:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800bb9a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800bb9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bba0:	2302      	movs	r3, #2
 800bba2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bba4:	2300      	movs	r3, #0
 800bba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bba8:	2303      	movs	r3, #3
 800bbaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800bbac:	230c      	movs	r3, #12
 800bbae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bbb0:	f107 0314 	add.w	r3, r7, #20
 800bbb4:	4619      	mov	r1, r3
 800bbb6:	4810      	ldr	r0, [pc, #64]	; (800bbf8 <HAL_PCD_MspInit+0x9c>)
 800bbb8:	f7f8 fbb2 	bl	8004320 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	60fb      	str	r3, [r7, #12]
 800bbc0:	4b0c      	ldr	r3, [pc, #48]	; (800bbf4 <HAL_PCD_MspInit+0x98>)
 800bbc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbc4:	4a0b      	ldr	r2, [pc, #44]	; (800bbf4 <HAL_PCD_MspInit+0x98>)
 800bbc6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bbca:	6313      	str	r3, [r2, #48]	; 0x30
 800bbcc:	4b09      	ldr	r3, [pc, #36]	; (800bbf4 <HAL_PCD_MspInit+0x98>)
 800bbce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bbd4:	60fb      	str	r3, [r7, #12]
 800bbd6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800bbd8:	2200      	movs	r2, #0
 800bbda:	2100      	movs	r1, #0
 800bbdc:	204d      	movs	r0, #77	; 0x4d
 800bbde:	f7f7 ff14 	bl	8003a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800bbe2:	204d      	movs	r0, #77	; 0x4d
 800bbe4:	f7f7 ff2d 	bl	8003a42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800bbe8:	bf00      	nop
 800bbea:	3728      	adds	r7, #40	; 0x28
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}
 800bbf0:	40040000 	.word	0x40040000
 800bbf4:	40023800 	.word	0x40023800
 800bbf8:	40020400 	.word	0x40020400

0800bbfc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b082      	sub	sp, #8
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bc10:	4619      	mov	r1, r3
 800bc12:	4610      	mov	r0, r2
 800bc14:	f7fe fb2b 	bl	800a26e <USBD_LL_SetupStage>
}
 800bc18:	bf00      	nop
 800bc1a:	3708      	adds	r7, #8
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b082      	sub	sp, #8
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
 800bc28:	460b      	mov	r3, r1
 800bc2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bc32:	78fa      	ldrb	r2, [r7, #3]
 800bc34:	6879      	ldr	r1, [r7, #4]
 800bc36:	4613      	mov	r3, r2
 800bc38:	00db      	lsls	r3, r3, #3
 800bc3a:	4413      	add	r3, r2
 800bc3c:	009b      	lsls	r3, r3, #2
 800bc3e:	440b      	add	r3, r1
 800bc40:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800bc44:	681a      	ldr	r2, [r3, #0]
 800bc46:	78fb      	ldrb	r3, [r7, #3]
 800bc48:	4619      	mov	r1, r3
 800bc4a:	f7fe fb65 	bl	800a318 <USBD_LL_DataOutStage>
}
 800bc4e:	bf00      	nop
 800bc50:	3708      	adds	r7, #8
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}

0800bc56 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc56:	b580      	push	{r7, lr}
 800bc58:	b082      	sub	sp, #8
 800bc5a:	af00      	add	r7, sp, #0
 800bc5c:	6078      	str	r0, [r7, #4]
 800bc5e:	460b      	mov	r3, r1
 800bc60:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bc68:	78fa      	ldrb	r2, [r7, #3]
 800bc6a:	6879      	ldr	r1, [r7, #4]
 800bc6c:	4613      	mov	r3, r2
 800bc6e:	00db      	lsls	r3, r3, #3
 800bc70:	4413      	add	r3, r2
 800bc72:	009b      	lsls	r3, r3, #2
 800bc74:	440b      	add	r3, r1
 800bc76:	334c      	adds	r3, #76	; 0x4c
 800bc78:	681a      	ldr	r2, [r3, #0]
 800bc7a:	78fb      	ldrb	r3, [r7, #3]
 800bc7c:	4619      	mov	r1, r3
 800bc7e:	f7fe fbfe 	bl	800a47e <USBD_LL_DataInStage>
}
 800bc82:	bf00      	nop
 800bc84:	3708      	adds	r7, #8
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}

0800bc8a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc8a:	b580      	push	{r7, lr}
 800bc8c:	b082      	sub	sp, #8
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f7fe fd32 	bl	800a702 <USBD_LL_SOF>
}
 800bc9e:	bf00      	nop
 800bca0:	3708      	adds	r7, #8
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}

0800bca6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bca6:	b580      	push	{r7, lr}
 800bca8:	b084      	sub	sp, #16
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bcae:	2301      	movs	r3, #1
 800bcb0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	68db      	ldr	r3, [r3, #12]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d102      	bne.n	800bcc0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	73fb      	strb	r3, [r7, #15]
 800bcbe:	e008      	b.n	800bcd2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	68db      	ldr	r3, [r3, #12]
 800bcc4:	2b02      	cmp	r3, #2
 800bcc6:	d102      	bne.n	800bcce <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	73fb      	strb	r3, [r7, #15]
 800bccc:	e001      	b.n	800bcd2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bcce:	f7f5 fb75 	bl	80013bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bcd8:	7bfa      	ldrb	r2, [r7, #15]
 800bcda:	4611      	mov	r1, r2
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f7fe fcd2 	bl	800a686 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bce8:	4618      	mov	r0, r3
 800bcea:	f7fe fc7a 	bl	800a5e2 <USBD_LL_Reset>
}
 800bcee:	bf00      	nop
 800bcf0:	3710      	adds	r7, #16
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}
	...

0800bcf8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b082      	sub	sp, #8
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bd06:	4618      	mov	r0, r3
 800bd08:	f7fe fccd 	bl	800a6a6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	687a      	ldr	r2, [r7, #4]
 800bd18:	6812      	ldr	r2, [r2, #0]
 800bd1a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bd1e:	f043 0301 	orr.w	r3, r3, #1
 800bd22:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6a1b      	ldr	r3, [r3, #32]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d005      	beq.n	800bd38 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bd2c:	4b04      	ldr	r3, [pc, #16]	; (800bd40 <HAL_PCD_SuspendCallback+0x48>)
 800bd2e:	691b      	ldr	r3, [r3, #16]
 800bd30:	4a03      	ldr	r2, [pc, #12]	; (800bd40 <HAL_PCD_SuspendCallback+0x48>)
 800bd32:	f043 0306 	orr.w	r3, r3, #6
 800bd36:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bd38:	bf00      	nop
 800bd3a:	3708      	adds	r7, #8
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}
 800bd40:	e000ed00 	.word	0xe000ed00

0800bd44 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b082      	sub	sp, #8
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bd52:	4618      	mov	r0, r3
 800bd54:	f7fe fcbd 	bl	800a6d2 <USBD_LL_Resume>
}
 800bd58:	bf00      	nop
 800bd5a:	3708      	adds	r7, #8
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}

0800bd60 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b082      	sub	sp, #8
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
 800bd68:	460b      	mov	r3, r1
 800bd6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bd72:	78fa      	ldrb	r2, [r7, #3]
 800bd74:	4611      	mov	r1, r2
 800bd76:	4618      	mov	r0, r3
 800bd78:	f7fe fd15 	bl	800a7a6 <USBD_LL_IsoOUTIncomplete>
}
 800bd7c:	bf00      	nop
 800bd7e:	3708      	adds	r7, #8
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}

0800bd84 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b082      	sub	sp, #8
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
 800bd8c:	460b      	mov	r3, r1
 800bd8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bd96:	78fa      	ldrb	r2, [r7, #3]
 800bd98:	4611      	mov	r1, r2
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f7fe fcd1 	bl	800a742 <USBD_LL_IsoINIncomplete>
}
 800bda0:	bf00      	nop
 800bda2:	3708      	adds	r7, #8
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b082      	sub	sp, #8
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f7fe fd27 	bl	800a80a <USBD_LL_DevConnected>
}
 800bdbc:	bf00      	nop
 800bdbe:	3708      	adds	r7, #8
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}

0800bdc4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b082      	sub	sp, #8
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f7fe fd24 	bl	800a820 <USBD_LL_DevDisconnected>
}
 800bdd8:	bf00      	nop
 800bdda:	3708      	adds	r7, #8
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}

0800bde0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b082      	sub	sp, #8
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	781b      	ldrb	r3, [r3, #0]
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	d140      	bne.n	800be72 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800bdf0:	4a22      	ldr	r2, [pc, #136]	; (800be7c <USBD_LL_Init+0x9c>)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	4a20      	ldr	r2, [pc, #128]	; (800be7c <USBD_LL_Init+0x9c>)
 800bdfc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800be00:	4b1e      	ldr	r3, [pc, #120]	; (800be7c <USBD_LL_Init+0x9c>)
 800be02:	4a1f      	ldr	r2, [pc, #124]	; (800be80 <USBD_LL_Init+0xa0>)
 800be04:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800be06:	4b1d      	ldr	r3, [pc, #116]	; (800be7c <USBD_LL_Init+0x9c>)
 800be08:	2206      	movs	r2, #6
 800be0a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800be0c:	4b1b      	ldr	r3, [pc, #108]	; (800be7c <USBD_LL_Init+0x9c>)
 800be0e:	2202      	movs	r2, #2
 800be10:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800be12:	4b1a      	ldr	r3, [pc, #104]	; (800be7c <USBD_LL_Init+0x9c>)
 800be14:	2200      	movs	r2, #0
 800be16:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800be18:	4b18      	ldr	r3, [pc, #96]	; (800be7c <USBD_LL_Init+0x9c>)
 800be1a:	2202      	movs	r2, #2
 800be1c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800be1e:	4b17      	ldr	r3, [pc, #92]	; (800be7c <USBD_LL_Init+0x9c>)
 800be20:	2200      	movs	r2, #0
 800be22:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800be24:	4b15      	ldr	r3, [pc, #84]	; (800be7c <USBD_LL_Init+0x9c>)
 800be26:	2200      	movs	r2, #0
 800be28:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800be2a:	4b14      	ldr	r3, [pc, #80]	; (800be7c <USBD_LL_Init+0x9c>)
 800be2c:	2200      	movs	r2, #0
 800be2e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800be30:	4b12      	ldr	r3, [pc, #72]	; (800be7c <USBD_LL_Init+0x9c>)
 800be32:	2200      	movs	r2, #0
 800be34:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800be36:	4b11      	ldr	r3, [pc, #68]	; (800be7c <USBD_LL_Init+0x9c>)
 800be38:	2200      	movs	r2, #0
 800be3a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800be3c:	4b0f      	ldr	r3, [pc, #60]	; (800be7c <USBD_LL_Init+0x9c>)
 800be3e:	2200      	movs	r2, #0
 800be40:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800be42:	480e      	ldr	r0, [pc, #56]	; (800be7c <USBD_LL_Init+0x9c>)
 800be44:	f7f9 f817 	bl	8004e76 <HAL_PCD_Init>
 800be48:	4603      	mov	r3, r0
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d001      	beq.n	800be52 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800be4e:	f7f5 fab5 	bl	80013bc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800be52:	f44f 7100 	mov.w	r1, #512	; 0x200
 800be56:	4809      	ldr	r0, [pc, #36]	; (800be7c <USBD_LL_Init+0x9c>)
 800be58:	f7fa fa6d 	bl	8006336 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800be5c:	2280      	movs	r2, #128	; 0x80
 800be5e:	2100      	movs	r1, #0
 800be60:	4806      	ldr	r0, [pc, #24]	; (800be7c <USBD_LL_Init+0x9c>)
 800be62:	f7fa fa21 	bl	80062a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800be66:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800be6a:	2101      	movs	r1, #1
 800be6c:	4803      	ldr	r0, [pc, #12]	; (800be7c <USBD_LL_Init+0x9c>)
 800be6e:	f7fa fa1b 	bl	80062a8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800be72:	2300      	movs	r3, #0
}
 800be74:	4618      	mov	r0, r3
 800be76:	3708      	adds	r7, #8
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}
 800be7c:	20001b10 	.word	0x20001b10
 800be80:	40040000 	.word	0x40040000

0800be84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b084      	sub	sp, #16
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be8c:	2300      	movs	r3, #0
 800be8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be90:	2300      	movs	r3, #0
 800be92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800be9a:	4618      	mov	r0, r3
 800be9c:	f7f9 f908 	bl	80050b0 <HAL_PCD_Start>
 800bea0:	4603      	mov	r3, r0
 800bea2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bea4:	7bfb      	ldrb	r3, [r7, #15]
 800bea6:	4618      	mov	r0, r3
 800bea8:	f000 f942 	bl	800c130 <USBD_Get_USB_Status>
 800beac:	4603      	mov	r3, r0
 800beae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800beb0:	7bbb      	ldrb	r3, [r7, #14]
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	3710      	adds	r7, #16
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}

0800beba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800beba:	b580      	push	{r7, lr}
 800bebc:	b084      	sub	sp, #16
 800bebe:	af00      	add	r7, sp, #0
 800bec0:	6078      	str	r0, [r7, #4]
 800bec2:	4608      	mov	r0, r1
 800bec4:	4611      	mov	r1, r2
 800bec6:	461a      	mov	r2, r3
 800bec8:	4603      	mov	r3, r0
 800beca:	70fb      	strb	r3, [r7, #3]
 800becc:	460b      	mov	r3, r1
 800bece:	70bb      	strb	r3, [r7, #2]
 800bed0:	4613      	mov	r3, r2
 800bed2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bed4:	2300      	movs	r3, #0
 800bed6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bed8:	2300      	movs	r3, #0
 800beda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bee2:	78bb      	ldrb	r3, [r7, #2]
 800bee4:	883a      	ldrh	r2, [r7, #0]
 800bee6:	78f9      	ldrb	r1, [r7, #3]
 800bee8:	f7f9 fdd9 	bl	8005a9e <HAL_PCD_EP_Open>
 800beec:	4603      	mov	r3, r0
 800beee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bef0:	7bfb      	ldrb	r3, [r7, #15]
 800bef2:	4618      	mov	r0, r3
 800bef4:	f000 f91c 	bl	800c130 <USBD_Get_USB_Status>
 800bef8:	4603      	mov	r3, r0
 800befa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800befc:	7bbb      	ldrb	r3, [r7, #14]
}
 800befe:	4618      	mov	r0, r3
 800bf00:	3710      	adds	r7, #16
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}

0800bf06 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf06:	b580      	push	{r7, lr}
 800bf08:	b084      	sub	sp, #16
 800bf0a:	af00      	add	r7, sp, #0
 800bf0c:	6078      	str	r0, [r7, #4]
 800bf0e:	460b      	mov	r3, r1
 800bf10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf12:	2300      	movs	r3, #0
 800bf14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf16:	2300      	movs	r3, #0
 800bf18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bf20:	78fa      	ldrb	r2, [r7, #3]
 800bf22:	4611      	mov	r1, r2
 800bf24:	4618      	mov	r0, r3
 800bf26:	f7f9 fe22 	bl	8005b6e <HAL_PCD_EP_Close>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf2e:	7bfb      	ldrb	r3, [r7, #15]
 800bf30:	4618      	mov	r0, r3
 800bf32:	f000 f8fd 	bl	800c130 <USBD_Get_USB_Status>
 800bf36:	4603      	mov	r3, r0
 800bf38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3710      	adds	r7, #16
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b084      	sub	sp, #16
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
 800bf4c:	460b      	mov	r3, r1
 800bf4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf50:	2300      	movs	r3, #0
 800bf52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf54:	2300      	movs	r3, #0
 800bf56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bf5e:	78fa      	ldrb	r2, [r7, #3]
 800bf60:	4611      	mov	r1, r2
 800bf62:	4618      	mov	r0, r3
 800bf64:	f7f9 fefa 	bl	8005d5c <HAL_PCD_EP_SetStall>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf6c:	7bfb      	ldrb	r3, [r7, #15]
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f000 f8de 	bl	800c130 <USBD_Get_USB_Status>
 800bf74:	4603      	mov	r3, r0
 800bf76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf78:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3710      	adds	r7, #16
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}

0800bf82 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf82:	b580      	push	{r7, lr}
 800bf84:	b084      	sub	sp, #16
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	6078      	str	r0, [r7, #4]
 800bf8a:	460b      	mov	r3, r1
 800bf8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf92:	2300      	movs	r3, #0
 800bf94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bf9c:	78fa      	ldrb	r2, [r7, #3]
 800bf9e:	4611      	mov	r1, r2
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f7f9 ff3f 	bl	8005e24 <HAL_PCD_EP_ClrStall>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfaa:	7bfb      	ldrb	r3, [r7, #15]
 800bfac:	4618      	mov	r0, r3
 800bfae:	f000 f8bf 	bl	800c130 <USBD_Get_USB_Status>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfb6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3710      	adds	r7, #16
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}

0800bfc0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	b085      	sub	sp, #20
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
 800bfc8:	460b      	mov	r3, r1
 800bfca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bfd2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bfd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	da0b      	bge.n	800bff4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bfdc:	78fb      	ldrb	r3, [r7, #3]
 800bfde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bfe2:	68f9      	ldr	r1, [r7, #12]
 800bfe4:	4613      	mov	r3, r2
 800bfe6:	00db      	lsls	r3, r3, #3
 800bfe8:	4413      	add	r3, r2
 800bfea:	009b      	lsls	r3, r3, #2
 800bfec:	440b      	add	r3, r1
 800bfee:	333e      	adds	r3, #62	; 0x3e
 800bff0:	781b      	ldrb	r3, [r3, #0]
 800bff2:	e00b      	b.n	800c00c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bff4:	78fb      	ldrb	r3, [r7, #3]
 800bff6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bffa:	68f9      	ldr	r1, [r7, #12]
 800bffc:	4613      	mov	r3, r2
 800bffe:	00db      	lsls	r3, r3, #3
 800c000:	4413      	add	r3, r2
 800c002:	009b      	lsls	r3, r3, #2
 800c004:	440b      	add	r3, r1
 800c006:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c00a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	3714      	adds	r7, #20
 800c010:	46bd      	mov	sp, r7
 800c012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c016:	4770      	bx	lr

0800c018 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b084      	sub	sp, #16
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
 800c020:	460b      	mov	r3, r1
 800c022:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c024:	2300      	movs	r3, #0
 800c026:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c028:	2300      	movs	r3, #0
 800c02a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c032:	78fa      	ldrb	r2, [r7, #3]
 800c034:	4611      	mov	r1, r2
 800c036:	4618      	mov	r0, r3
 800c038:	f7f9 fd0c 	bl	8005a54 <HAL_PCD_SetAddress>
 800c03c:	4603      	mov	r3, r0
 800c03e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c040:	7bfb      	ldrb	r3, [r7, #15]
 800c042:	4618      	mov	r0, r3
 800c044:	f000 f874 	bl	800c130 <USBD_Get_USB_Status>
 800c048:	4603      	mov	r3, r0
 800c04a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c04c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c04e:	4618      	mov	r0, r3
 800c050:	3710      	adds	r7, #16
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}

0800c056 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c056:	b580      	push	{r7, lr}
 800c058:	b086      	sub	sp, #24
 800c05a:	af00      	add	r7, sp, #0
 800c05c:	60f8      	str	r0, [r7, #12]
 800c05e:	607a      	str	r2, [r7, #4]
 800c060:	603b      	str	r3, [r7, #0]
 800c062:	460b      	mov	r3, r1
 800c064:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c066:	2300      	movs	r3, #0
 800c068:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c06a:	2300      	movs	r3, #0
 800c06c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c074:	7af9      	ldrb	r1, [r7, #11]
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	687a      	ldr	r2, [r7, #4]
 800c07a:	f7f9 fe25 	bl	8005cc8 <HAL_PCD_EP_Transmit>
 800c07e:	4603      	mov	r3, r0
 800c080:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c082:	7dfb      	ldrb	r3, [r7, #23]
 800c084:	4618      	mov	r0, r3
 800c086:	f000 f853 	bl	800c130 <USBD_Get_USB_Status>
 800c08a:	4603      	mov	r3, r0
 800c08c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c08e:	7dbb      	ldrb	r3, [r7, #22]
}
 800c090:	4618      	mov	r0, r3
 800c092:	3718      	adds	r7, #24
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}

0800c098 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b086      	sub	sp, #24
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	60f8      	str	r0, [r7, #12]
 800c0a0:	607a      	str	r2, [r7, #4]
 800c0a2:	603b      	str	r3, [r7, #0]
 800c0a4:	460b      	mov	r3, r1
 800c0a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c0b6:	7af9      	ldrb	r1, [r7, #11]
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	687a      	ldr	r2, [r7, #4]
 800c0bc:	f7f9 fda1 	bl	8005c02 <HAL_PCD_EP_Receive>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0c4:	7dfb      	ldrb	r3, [r7, #23]
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f000 f832 	bl	800c130 <USBD_Get_USB_Status>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c0d0:	7dbb      	ldrb	r3, [r7, #22]
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3718      	adds	r7, #24
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}

0800c0da <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0da:	b580      	push	{r7, lr}
 800c0dc:	b082      	sub	sp, #8
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	6078      	str	r0, [r7, #4]
 800c0e2:	460b      	mov	r3, r1
 800c0e4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c0ec:	78fa      	ldrb	r2, [r7, #3]
 800c0ee:	4611      	mov	r1, r2
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f7f9 fdd1 	bl	8005c98 <HAL_PCD_EP_GetRxCount>
 800c0f6:	4603      	mov	r3, r0
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3708      	adds	r7, #8
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}

0800c100 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c100:	b480      	push	{r7}
 800c102:	b083      	sub	sp, #12
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c108:	4b03      	ldr	r3, [pc, #12]	; (800c118 <USBD_static_malloc+0x18>)
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	370c      	adds	r7, #12
 800c10e:	46bd      	mov	sp, r7
 800c110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c114:	4770      	bx	lr
 800c116:	bf00      	nop
 800c118:	2000201c 	.word	0x2000201c

0800c11c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c11c:	b480      	push	{r7}
 800c11e:	b083      	sub	sp, #12
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]

}
 800c124:	bf00      	nop
 800c126:	370c      	adds	r7, #12
 800c128:	46bd      	mov	sp, r7
 800c12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12e:	4770      	bx	lr

0800c130 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c130:	b480      	push	{r7}
 800c132:	b085      	sub	sp, #20
 800c134:	af00      	add	r7, sp, #0
 800c136:	4603      	mov	r3, r0
 800c138:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c13a:	2300      	movs	r3, #0
 800c13c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c13e:	79fb      	ldrb	r3, [r7, #7]
 800c140:	2b03      	cmp	r3, #3
 800c142:	d817      	bhi.n	800c174 <USBD_Get_USB_Status+0x44>
 800c144:	a201      	add	r2, pc, #4	; (adr r2, 800c14c <USBD_Get_USB_Status+0x1c>)
 800c146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c14a:	bf00      	nop
 800c14c:	0800c15d 	.word	0x0800c15d
 800c150:	0800c163 	.word	0x0800c163
 800c154:	0800c169 	.word	0x0800c169
 800c158:	0800c16f 	.word	0x0800c16f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c15c:	2300      	movs	r3, #0
 800c15e:	73fb      	strb	r3, [r7, #15]
    break;
 800c160:	e00b      	b.n	800c17a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c162:	2303      	movs	r3, #3
 800c164:	73fb      	strb	r3, [r7, #15]
    break;
 800c166:	e008      	b.n	800c17a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c168:	2301      	movs	r3, #1
 800c16a:	73fb      	strb	r3, [r7, #15]
    break;
 800c16c:	e005      	b.n	800c17a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c16e:	2303      	movs	r3, #3
 800c170:	73fb      	strb	r3, [r7, #15]
    break;
 800c172:	e002      	b.n	800c17a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c174:	2303      	movs	r3, #3
 800c176:	73fb      	strb	r3, [r7, #15]
    break;
 800c178:	bf00      	nop
  }
  return usb_status;
 800c17a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	3714      	adds	r7, #20
 800c180:	46bd      	mov	sp, r7
 800c182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c186:	4770      	bx	lr

0800c188 <__errno>:
 800c188:	4b01      	ldr	r3, [pc, #4]	; (800c190 <__errno+0x8>)
 800c18a:	6818      	ldr	r0, [r3, #0]
 800c18c:	4770      	bx	lr
 800c18e:	bf00      	nop
 800c190:	20000178 	.word	0x20000178

0800c194 <__libc_init_array>:
 800c194:	b570      	push	{r4, r5, r6, lr}
 800c196:	4d0d      	ldr	r5, [pc, #52]	; (800c1cc <__libc_init_array+0x38>)
 800c198:	4c0d      	ldr	r4, [pc, #52]	; (800c1d0 <__libc_init_array+0x3c>)
 800c19a:	1b64      	subs	r4, r4, r5
 800c19c:	10a4      	asrs	r4, r4, #2
 800c19e:	2600      	movs	r6, #0
 800c1a0:	42a6      	cmp	r6, r4
 800c1a2:	d109      	bne.n	800c1b8 <__libc_init_array+0x24>
 800c1a4:	4d0b      	ldr	r5, [pc, #44]	; (800c1d4 <__libc_init_array+0x40>)
 800c1a6:	4c0c      	ldr	r4, [pc, #48]	; (800c1d8 <__libc_init_array+0x44>)
 800c1a8:	f004 fc92 	bl	8010ad0 <_init>
 800c1ac:	1b64      	subs	r4, r4, r5
 800c1ae:	10a4      	asrs	r4, r4, #2
 800c1b0:	2600      	movs	r6, #0
 800c1b2:	42a6      	cmp	r6, r4
 800c1b4:	d105      	bne.n	800c1c2 <__libc_init_array+0x2e>
 800c1b6:	bd70      	pop	{r4, r5, r6, pc}
 800c1b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1bc:	4798      	blx	r3
 800c1be:	3601      	adds	r6, #1
 800c1c0:	e7ee      	b.n	800c1a0 <__libc_init_array+0xc>
 800c1c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1c6:	4798      	blx	r3
 800c1c8:	3601      	adds	r6, #1
 800c1ca:	e7f2      	b.n	800c1b2 <__libc_init_array+0x1e>
 800c1cc:	08012b0c 	.word	0x08012b0c
 800c1d0:	08012b0c 	.word	0x08012b0c
 800c1d4:	08012b0c 	.word	0x08012b0c
 800c1d8:	08012b10 	.word	0x08012b10

0800c1dc <memset>:
 800c1dc:	4402      	add	r2, r0
 800c1de:	4603      	mov	r3, r0
 800c1e0:	4293      	cmp	r3, r2
 800c1e2:	d100      	bne.n	800c1e6 <memset+0xa>
 800c1e4:	4770      	bx	lr
 800c1e6:	f803 1b01 	strb.w	r1, [r3], #1
 800c1ea:	e7f9      	b.n	800c1e0 <memset+0x4>

0800c1ec <__cvt>:
 800c1ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c1f0:	ec55 4b10 	vmov	r4, r5, d0
 800c1f4:	2d00      	cmp	r5, #0
 800c1f6:	460e      	mov	r6, r1
 800c1f8:	4619      	mov	r1, r3
 800c1fa:	462b      	mov	r3, r5
 800c1fc:	bfbb      	ittet	lt
 800c1fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c202:	461d      	movlt	r5, r3
 800c204:	2300      	movge	r3, #0
 800c206:	232d      	movlt	r3, #45	; 0x2d
 800c208:	700b      	strb	r3, [r1, #0]
 800c20a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c20c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c210:	4691      	mov	r9, r2
 800c212:	f023 0820 	bic.w	r8, r3, #32
 800c216:	bfbc      	itt	lt
 800c218:	4622      	movlt	r2, r4
 800c21a:	4614      	movlt	r4, r2
 800c21c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c220:	d005      	beq.n	800c22e <__cvt+0x42>
 800c222:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c226:	d100      	bne.n	800c22a <__cvt+0x3e>
 800c228:	3601      	adds	r6, #1
 800c22a:	2102      	movs	r1, #2
 800c22c:	e000      	b.n	800c230 <__cvt+0x44>
 800c22e:	2103      	movs	r1, #3
 800c230:	ab03      	add	r3, sp, #12
 800c232:	9301      	str	r3, [sp, #4]
 800c234:	ab02      	add	r3, sp, #8
 800c236:	9300      	str	r3, [sp, #0]
 800c238:	ec45 4b10 	vmov	d0, r4, r5
 800c23c:	4653      	mov	r3, sl
 800c23e:	4632      	mov	r2, r6
 800c240:	f001 fdae 	bl	800dda0 <_dtoa_r>
 800c244:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c248:	4607      	mov	r7, r0
 800c24a:	d102      	bne.n	800c252 <__cvt+0x66>
 800c24c:	f019 0f01 	tst.w	r9, #1
 800c250:	d022      	beq.n	800c298 <__cvt+0xac>
 800c252:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c256:	eb07 0906 	add.w	r9, r7, r6
 800c25a:	d110      	bne.n	800c27e <__cvt+0x92>
 800c25c:	783b      	ldrb	r3, [r7, #0]
 800c25e:	2b30      	cmp	r3, #48	; 0x30
 800c260:	d10a      	bne.n	800c278 <__cvt+0x8c>
 800c262:	2200      	movs	r2, #0
 800c264:	2300      	movs	r3, #0
 800c266:	4620      	mov	r0, r4
 800c268:	4629      	mov	r1, r5
 800c26a:	f7f4 fc3d 	bl	8000ae8 <__aeabi_dcmpeq>
 800c26e:	b918      	cbnz	r0, 800c278 <__cvt+0x8c>
 800c270:	f1c6 0601 	rsb	r6, r6, #1
 800c274:	f8ca 6000 	str.w	r6, [sl]
 800c278:	f8da 3000 	ldr.w	r3, [sl]
 800c27c:	4499      	add	r9, r3
 800c27e:	2200      	movs	r2, #0
 800c280:	2300      	movs	r3, #0
 800c282:	4620      	mov	r0, r4
 800c284:	4629      	mov	r1, r5
 800c286:	f7f4 fc2f 	bl	8000ae8 <__aeabi_dcmpeq>
 800c28a:	b108      	cbz	r0, 800c290 <__cvt+0xa4>
 800c28c:	f8cd 900c 	str.w	r9, [sp, #12]
 800c290:	2230      	movs	r2, #48	; 0x30
 800c292:	9b03      	ldr	r3, [sp, #12]
 800c294:	454b      	cmp	r3, r9
 800c296:	d307      	bcc.n	800c2a8 <__cvt+0xbc>
 800c298:	9b03      	ldr	r3, [sp, #12]
 800c29a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c29c:	1bdb      	subs	r3, r3, r7
 800c29e:	4638      	mov	r0, r7
 800c2a0:	6013      	str	r3, [r2, #0]
 800c2a2:	b004      	add	sp, #16
 800c2a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2a8:	1c59      	adds	r1, r3, #1
 800c2aa:	9103      	str	r1, [sp, #12]
 800c2ac:	701a      	strb	r2, [r3, #0]
 800c2ae:	e7f0      	b.n	800c292 <__cvt+0xa6>

0800c2b0 <__exponent>:
 800c2b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	2900      	cmp	r1, #0
 800c2b6:	bfb8      	it	lt
 800c2b8:	4249      	neglt	r1, r1
 800c2ba:	f803 2b02 	strb.w	r2, [r3], #2
 800c2be:	bfb4      	ite	lt
 800c2c0:	222d      	movlt	r2, #45	; 0x2d
 800c2c2:	222b      	movge	r2, #43	; 0x2b
 800c2c4:	2909      	cmp	r1, #9
 800c2c6:	7042      	strb	r2, [r0, #1]
 800c2c8:	dd2a      	ble.n	800c320 <__exponent+0x70>
 800c2ca:	f10d 0407 	add.w	r4, sp, #7
 800c2ce:	46a4      	mov	ip, r4
 800c2d0:	270a      	movs	r7, #10
 800c2d2:	46a6      	mov	lr, r4
 800c2d4:	460a      	mov	r2, r1
 800c2d6:	fb91 f6f7 	sdiv	r6, r1, r7
 800c2da:	fb07 1516 	mls	r5, r7, r6, r1
 800c2de:	3530      	adds	r5, #48	; 0x30
 800c2e0:	2a63      	cmp	r2, #99	; 0x63
 800c2e2:	f104 34ff 	add.w	r4, r4, #4294967295
 800c2e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c2ea:	4631      	mov	r1, r6
 800c2ec:	dcf1      	bgt.n	800c2d2 <__exponent+0x22>
 800c2ee:	3130      	adds	r1, #48	; 0x30
 800c2f0:	f1ae 0502 	sub.w	r5, lr, #2
 800c2f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c2f8:	1c44      	adds	r4, r0, #1
 800c2fa:	4629      	mov	r1, r5
 800c2fc:	4561      	cmp	r1, ip
 800c2fe:	d30a      	bcc.n	800c316 <__exponent+0x66>
 800c300:	f10d 0209 	add.w	r2, sp, #9
 800c304:	eba2 020e 	sub.w	r2, r2, lr
 800c308:	4565      	cmp	r5, ip
 800c30a:	bf88      	it	hi
 800c30c:	2200      	movhi	r2, #0
 800c30e:	4413      	add	r3, r2
 800c310:	1a18      	subs	r0, r3, r0
 800c312:	b003      	add	sp, #12
 800c314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c316:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c31a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c31e:	e7ed      	b.n	800c2fc <__exponent+0x4c>
 800c320:	2330      	movs	r3, #48	; 0x30
 800c322:	3130      	adds	r1, #48	; 0x30
 800c324:	7083      	strb	r3, [r0, #2]
 800c326:	70c1      	strb	r1, [r0, #3]
 800c328:	1d03      	adds	r3, r0, #4
 800c32a:	e7f1      	b.n	800c310 <__exponent+0x60>

0800c32c <_printf_float>:
 800c32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c330:	ed2d 8b02 	vpush	{d8}
 800c334:	b08d      	sub	sp, #52	; 0x34
 800c336:	460c      	mov	r4, r1
 800c338:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c33c:	4616      	mov	r6, r2
 800c33e:	461f      	mov	r7, r3
 800c340:	4605      	mov	r5, r0
 800c342:	f002 fe8b 	bl	800f05c <_localeconv_r>
 800c346:	f8d0 a000 	ldr.w	sl, [r0]
 800c34a:	4650      	mov	r0, sl
 800c34c:	f7f3 ff50 	bl	80001f0 <strlen>
 800c350:	2300      	movs	r3, #0
 800c352:	930a      	str	r3, [sp, #40]	; 0x28
 800c354:	6823      	ldr	r3, [r4, #0]
 800c356:	9305      	str	r3, [sp, #20]
 800c358:	f8d8 3000 	ldr.w	r3, [r8]
 800c35c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c360:	3307      	adds	r3, #7
 800c362:	f023 0307 	bic.w	r3, r3, #7
 800c366:	f103 0208 	add.w	r2, r3, #8
 800c36a:	f8c8 2000 	str.w	r2, [r8]
 800c36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c372:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c376:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c37a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c37e:	9307      	str	r3, [sp, #28]
 800c380:	f8cd 8018 	str.w	r8, [sp, #24]
 800c384:	ee08 0a10 	vmov	s16, r0
 800c388:	4b9f      	ldr	r3, [pc, #636]	; (800c608 <_printf_float+0x2dc>)
 800c38a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c38e:	f04f 32ff 	mov.w	r2, #4294967295
 800c392:	f7f4 fbdb 	bl	8000b4c <__aeabi_dcmpun>
 800c396:	bb88      	cbnz	r0, 800c3fc <_printf_float+0xd0>
 800c398:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c39c:	4b9a      	ldr	r3, [pc, #616]	; (800c608 <_printf_float+0x2dc>)
 800c39e:	f04f 32ff 	mov.w	r2, #4294967295
 800c3a2:	f7f4 fbb5 	bl	8000b10 <__aeabi_dcmple>
 800c3a6:	bb48      	cbnz	r0, 800c3fc <_printf_float+0xd0>
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	4640      	mov	r0, r8
 800c3ae:	4649      	mov	r1, r9
 800c3b0:	f7f4 fba4 	bl	8000afc <__aeabi_dcmplt>
 800c3b4:	b110      	cbz	r0, 800c3bc <_printf_float+0x90>
 800c3b6:	232d      	movs	r3, #45	; 0x2d
 800c3b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3bc:	4b93      	ldr	r3, [pc, #588]	; (800c60c <_printf_float+0x2e0>)
 800c3be:	4894      	ldr	r0, [pc, #592]	; (800c610 <_printf_float+0x2e4>)
 800c3c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c3c4:	bf94      	ite	ls
 800c3c6:	4698      	movls	r8, r3
 800c3c8:	4680      	movhi	r8, r0
 800c3ca:	2303      	movs	r3, #3
 800c3cc:	6123      	str	r3, [r4, #16]
 800c3ce:	9b05      	ldr	r3, [sp, #20]
 800c3d0:	f023 0204 	bic.w	r2, r3, #4
 800c3d4:	6022      	str	r2, [r4, #0]
 800c3d6:	f04f 0900 	mov.w	r9, #0
 800c3da:	9700      	str	r7, [sp, #0]
 800c3dc:	4633      	mov	r3, r6
 800c3de:	aa0b      	add	r2, sp, #44	; 0x2c
 800c3e0:	4621      	mov	r1, r4
 800c3e2:	4628      	mov	r0, r5
 800c3e4:	f000 f9d8 	bl	800c798 <_printf_common>
 800c3e8:	3001      	adds	r0, #1
 800c3ea:	f040 8090 	bne.w	800c50e <_printf_float+0x1e2>
 800c3ee:	f04f 30ff 	mov.w	r0, #4294967295
 800c3f2:	b00d      	add	sp, #52	; 0x34
 800c3f4:	ecbd 8b02 	vpop	{d8}
 800c3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3fc:	4642      	mov	r2, r8
 800c3fe:	464b      	mov	r3, r9
 800c400:	4640      	mov	r0, r8
 800c402:	4649      	mov	r1, r9
 800c404:	f7f4 fba2 	bl	8000b4c <__aeabi_dcmpun>
 800c408:	b140      	cbz	r0, 800c41c <_printf_float+0xf0>
 800c40a:	464b      	mov	r3, r9
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	bfbc      	itt	lt
 800c410:	232d      	movlt	r3, #45	; 0x2d
 800c412:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c416:	487f      	ldr	r0, [pc, #508]	; (800c614 <_printf_float+0x2e8>)
 800c418:	4b7f      	ldr	r3, [pc, #508]	; (800c618 <_printf_float+0x2ec>)
 800c41a:	e7d1      	b.n	800c3c0 <_printf_float+0x94>
 800c41c:	6863      	ldr	r3, [r4, #4]
 800c41e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c422:	9206      	str	r2, [sp, #24]
 800c424:	1c5a      	adds	r2, r3, #1
 800c426:	d13f      	bne.n	800c4a8 <_printf_float+0x17c>
 800c428:	2306      	movs	r3, #6
 800c42a:	6063      	str	r3, [r4, #4]
 800c42c:	9b05      	ldr	r3, [sp, #20]
 800c42e:	6861      	ldr	r1, [r4, #4]
 800c430:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c434:	2300      	movs	r3, #0
 800c436:	9303      	str	r3, [sp, #12]
 800c438:	ab0a      	add	r3, sp, #40	; 0x28
 800c43a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c43e:	ab09      	add	r3, sp, #36	; 0x24
 800c440:	ec49 8b10 	vmov	d0, r8, r9
 800c444:	9300      	str	r3, [sp, #0]
 800c446:	6022      	str	r2, [r4, #0]
 800c448:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c44c:	4628      	mov	r0, r5
 800c44e:	f7ff fecd 	bl	800c1ec <__cvt>
 800c452:	9b06      	ldr	r3, [sp, #24]
 800c454:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c456:	2b47      	cmp	r3, #71	; 0x47
 800c458:	4680      	mov	r8, r0
 800c45a:	d108      	bne.n	800c46e <_printf_float+0x142>
 800c45c:	1cc8      	adds	r0, r1, #3
 800c45e:	db02      	blt.n	800c466 <_printf_float+0x13a>
 800c460:	6863      	ldr	r3, [r4, #4]
 800c462:	4299      	cmp	r1, r3
 800c464:	dd41      	ble.n	800c4ea <_printf_float+0x1be>
 800c466:	f1ab 0b02 	sub.w	fp, fp, #2
 800c46a:	fa5f fb8b 	uxtb.w	fp, fp
 800c46e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c472:	d820      	bhi.n	800c4b6 <_printf_float+0x18a>
 800c474:	3901      	subs	r1, #1
 800c476:	465a      	mov	r2, fp
 800c478:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c47c:	9109      	str	r1, [sp, #36]	; 0x24
 800c47e:	f7ff ff17 	bl	800c2b0 <__exponent>
 800c482:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c484:	1813      	adds	r3, r2, r0
 800c486:	2a01      	cmp	r2, #1
 800c488:	4681      	mov	r9, r0
 800c48a:	6123      	str	r3, [r4, #16]
 800c48c:	dc02      	bgt.n	800c494 <_printf_float+0x168>
 800c48e:	6822      	ldr	r2, [r4, #0]
 800c490:	07d2      	lsls	r2, r2, #31
 800c492:	d501      	bpl.n	800c498 <_printf_float+0x16c>
 800c494:	3301      	adds	r3, #1
 800c496:	6123      	str	r3, [r4, #16]
 800c498:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d09c      	beq.n	800c3da <_printf_float+0xae>
 800c4a0:	232d      	movs	r3, #45	; 0x2d
 800c4a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4a6:	e798      	b.n	800c3da <_printf_float+0xae>
 800c4a8:	9a06      	ldr	r2, [sp, #24]
 800c4aa:	2a47      	cmp	r2, #71	; 0x47
 800c4ac:	d1be      	bne.n	800c42c <_printf_float+0x100>
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d1bc      	bne.n	800c42c <_printf_float+0x100>
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	e7b9      	b.n	800c42a <_printf_float+0xfe>
 800c4b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c4ba:	d118      	bne.n	800c4ee <_printf_float+0x1c2>
 800c4bc:	2900      	cmp	r1, #0
 800c4be:	6863      	ldr	r3, [r4, #4]
 800c4c0:	dd0b      	ble.n	800c4da <_printf_float+0x1ae>
 800c4c2:	6121      	str	r1, [r4, #16]
 800c4c4:	b913      	cbnz	r3, 800c4cc <_printf_float+0x1a0>
 800c4c6:	6822      	ldr	r2, [r4, #0]
 800c4c8:	07d0      	lsls	r0, r2, #31
 800c4ca:	d502      	bpl.n	800c4d2 <_printf_float+0x1a6>
 800c4cc:	3301      	adds	r3, #1
 800c4ce:	440b      	add	r3, r1
 800c4d0:	6123      	str	r3, [r4, #16]
 800c4d2:	65a1      	str	r1, [r4, #88]	; 0x58
 800c4d4:	f04f 0900 	mov.w	r9, #0
 800c4d8:	e7de      	b.n	800c498 <_printf_float+0x16c>
 800c4da:	b913      	cbnz	r3, 800c4e2 <_printf_float+0x1b6>
 800c4dc:	6822      	ldr	r2, [r4, #0]
 800c4de:	07d2      	lsls	r2, r2, #31
 800c4e0:	d501      	bpl.n	800c4e6 <_printf_float+0x1ba>
 800c4e2:	3302      	adds	r3, #2
 800c4e4:	e7f4      	b.n	800c4d0 <_printf_float+0x1a4>
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	e7f2      	b.n	800c4d0 <_printf_float+0x1a4>
 800c4ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c4ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4f0:	4299      	cmp	r1, r3
 800c4f2:	db05      	blt.n	800c500 <_printf_float+0x1d4>
 800c4f4:	6823      	ldr	r3, [r4, #0]
 800c4f6:	6121      	str	r1, [r4, #16]
 800c4f8:	07d8      	lsls	r0, r3, #31
 800c4fa:	d5ea      	bpl.n	800c4d2 <_printf_float+0x1a6>
 800c4fc:	1c4b      	adds	r3, r1, #1
 800c4fe:	e7e7      	b.n	800c4d0 <_printf_float+0x1a4>
 800c500:	2900      	cmp	r1, #0
 800c502:	bfd4      	ite	le
 800c504:	f1c1 0202 	rsble	r2, r1, #2
 800c508:	2201      	movgt	r2, #1
 800c50a:	4413      	add	r3, r2
 800c50c:	e7e0      	b.n	800c4d0 <_printf_float+0x1a4>
 800c50e:	6823      	ldr	r3, [r4, #0]
 800c510:	055a      	lsls	r2, r3, #21
 800c512:	d407      	bmi.n	800c524 <_printf_float+0x1f8>
 800c514:	6923      	ldr	r3, [r4, #16]
 800c516:	4642      	mov	r2, r8
 800c518:	4631      	mov	r1, r6
 800c51a:	4628      	mov	r0, r5
 800c51c:	47b8      	blx	r7
 800c51e:	3001      	adds	r0, #1
 800c520:	d12c      	bne.n	800c57c <_printf_float+0x250>
 800c522:	e764      	b.n	800c3ee <_printf_float+0xc2>
 800c524:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c528:	f240 80e0 	bls.w	800c6ec <_printf_float+0x3c0>
 800c52c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c530:	2200      	movs	r2, #0
 800c532:	2300      	movs	r3, #0
 800c534:	f7f4 fad8 	bl	8000ae8 <__aeabi_dcmpeq>
 800c538:	2800      	cmp	r0, #0
 800c53a:	d034      	beq.n	800c5a6 <_printf_float+0x27a>
 800c53c:	4a37      	ldr	r2, [pc, #220]	; (800c61c <_printf_float+0x2f0>)
 800c53e:	2301      	movs	r3, #1
 800c540:	4631      	mov	r1, r6
 800c542:	4628      	mov	r0, r5
 800c544:	47b8      	blx	r7
 800c546:	3001      	adds	r0, #1
 800c548:	f43f af51 	beq.w	800c3ee <_printf_float+0xc2>
 800c54c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c550:	429a      	cmp	r2, r3
 800c552:	db02      	blt.n	800c55a <_printf_float+0x22e>
 800c554:	6823      	ldr	r3, [r4, #0]
 800c556:	07d8      	lsls	r0, r3, #31
 800c558:	d510      	bpl.n	800c57c <_printf_float+0x250>
 800c55a:	ee18 3a10 	vmov	r3, s16
 800c55e:	4652      	mov	r2, sl
 800c560:	4631      	mov	r1, r6
 800c562:	4628      	mov	r0, r5
 800c564:	47b8      	blx	r7
 800c566:	3001      	adds	r0, #1
 800c568:	f43f af41 	beq.w	800c3ee <_printf_float+0xc2>
 800c56c:	f04f 0800 	mov.w	r8, #0
 800c570:	f104 091a 	add.w	r9, r4, #26
 800c574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c576:	3b01      	subs	r3, #1
 800c578:	4543      	cmp	r3, r8
 800c57a:	dc09      	bgt.n	800c590 <_printf_float+0x264>
 800c57c:	6823      	ldr	r3, [r4, #0]
 800c57e:	079b      	lsls	r3, r3, #30
 800c580:	f100 8105 	bmi.w	800c78e <_printf_float+0x462>
 800c584:	68e0      	ldr	r0, [r4, #12]
 800c586:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c588:	4298      	cmp	r0, r3
 800c58a:	bfb8      	it	lt
 800c58c:	4618      	movlt	r0, r3
 800c58e:	e730      	b.n	800c3f2 <_printf_float+0xc6>
 800c590:	2301      	movs	r3, #1
 800c592:	464a      	mov	r2, r9
 800c594:	4631      	mov	r1, r6
 800c596:	4628      	mov	r0, r5
 800c598:	47b8      	blx	r7
 800c59a:	3001      	adds	r0, #1
 800c59c:	f43f af27 	beq.w	800c3ee <_printf_float+0xc2>
 800c5a0:	f108 0801 	add.w	r8, r8, #1
 800c5a4:	e7e6      	b.n	800c574 <_printf_float+0x248>
 800c5a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	dc39      	bgt.n	800c620 <_printf_float+0x2f4>
 800c5ac:	4a1b      	ldr	r2, [pc, #108]	; (800c61c <_printf_float+0x2f0>)
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	4631      	mov	r1, r6
 800c5b2:	4628      	mov	r0, r5
 800c5b4:	47b8      	blx	r7
 800c5b6:	3001      	adds	r0, #1
 800c5b8:	f43f af19 	beq.w	800c3ee <_printf_float+0xc2>
 800c5bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c5c0:	4313      	orrs	r3, r2
 800c5c2:	d102      	bne.n	800c5ca <_printf_float+0x29e>
 800c5c4:	6823      	ldr	r3, [r4, #0]
 800c5c6:	07d9      	lsls	r1, r3, #31
 800c5c8:	d5d8      	bpl.n	800c57c <_printf_float+0x250>
 800c5ca:	ee18 3a10 	vmov	r3, s16
 800c5ce:	4652      	mov	r2, sl
 800c5d0:	4631      	mov	r1, r6
 800c5d2:	4628      	mov	r0, r5
 800c5d4:	47b8      	blx	r7
 800c5d6:	3001      	adds	r0, #1
 800c5d8:	f43f af09 	beq.w	800c3ee <_printf_float+0xc2>
 800c5dc:	f04f 0900 	mov.w	r9, #0
 800c5e0:	f104 0a1a 	add.w	sl, r4, #26
 800c5e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5e6:	425b      	negs	r3, r3
 800c5e8:	454b      	cmp	r3, r9
 800c5ea:	dc01      	bgt.n	800c5f0 <_printf_float+0x2c4>
 800c5ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5ee:	e792      	b.n	800c516 <_printf_float+0x1ea>
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	4652      	mov	r2, sl
 800c5f4:	4631      	mov	r1, r6
 800c5f6:	4628      	mov	r0, r5
 800c5f8:	47b8      	blx	r7
 800c5fa:	3001      	adds	r0, #1
 800c5fc:	f43f aef7 	beq.w	800c3ee <_printf_float+0xc2>
 800c600:	f109 0901 	add.w	r9, r9, #1
 800c604:	e7ee      	b.n	800c5e4 <_printf_float+0x2b8>
 800c606:	bf00      	nop
 800c608:	7fefffff 	.word	0x7fefffff
 800c60c:	08012664 	.word	0x08012664
 800c610:	08012668 	.word	0x08012668
 800c614:	08012670 	.word	0x08012670
 800c618:	0801266c 	.word	0x0801266c
 800c61c:	08012674 	.word	0x08012674
 800c620:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c622:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c624:	429a      	cmp	r2, r3
 800c626:	bfa8      	it	ge
 800c628:	461a      	movge	r2, r3
 800c62a:	2a00      	cmp	r2, #0
 800c62c:	4691      	mov	r9, r2
 800c62e:	dc37      	bgt.n	800c6a0 <_printf_float+0x374>
 800c630:	f04f 0b00 	mov.w	fp, #0
 800c634:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c638:	f104 021a 	add.w	r2, r4, #26
 800c63c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c63e:	9305      	str	r3, [sp, #20]
 800c640:	eba3 0309 	sub.w	r3, r3, r9
 800c644:	455b      	cmp	r3, fp
 800c646:	dc33      	bgt.n	800c6b0 <_printf_float+0x384>
 800c648:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c64c:	429a      	cmp	r2, r3
 800c64e:	db3b      	blt.n	800c6c8 <_printf_float+0x39c>
 800c650:	6823      	ldr	r3, [r4, #0]
 800c652:	07da      	lsls	r2, r3, #31
 800c654:	d438      	bmi.n	800c6c8 <_printf_float+0x39c>
 800c656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c658:	9a05      	ldr	r2, [sp, #20]
 800c65a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c65c:	1a9a      	subs	r2, r3, r2
 800c65e:	eba3 0901 	sub.w	r9, r3, r1
 800c662:	4591      	cmp	r9, r2
 800c664:	bfa8      	it	ge
 800c666:	4691      	movge	r9, r2
 800c668:	f1b9 0f00 	cmp.w	r9, #0
 800c66c:	dc35      	bgt.n	800c6da <_printf_float+0x3ae>
 800c66e:	f04f 0800 	mov.w	r8, #0
 800c672:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c676:	f104 0a1a 	add.w	sl, r4, #26
 800c67a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c67e:	1a9b      	subs	r3, r3, r2
 800c680:	eba3 0309 	sub.w	r3, r3, r9
 800c684:	4543      	cmp	r3, r8
 800c686:	f77f af79 	ble.w	800c57c <_printf_float+0x250>
 800c68a:	2301      	movs	r3, #1
 800c68c:	4652      	mov	r2, sl
 800c68e:	4631      	mov	r1, r6
 800c690:	4628      	mov	r0, r5
 800c692:	47b8      	blx	r7
 800c694:	3001      	adds	r0, #1
 800c696:	f43f aeaa 	beq.w	800c3ee <_printf_float+0xc2>
 800c69a:	f108 0801 	add.w	r8, r8, #1
 800c69e:	e7ec      	b.n	800c67a <_printf_float+0x34e>
 800c6a0:	4613      	mov	r3, r2
 800c6a2:	4631      	mov	r1, r6
 800c6a4:	4642      	mov	r2, r8
 800c6a6:	4628      	mov	r0, r5
 800c6a8:	47b8      	blx	r7
 800c6aa:	3001      	adds	r0, #1
 800c6ac:	d1c0      	bne.n	800c630 <_printf_float+0x304>
 800c6ae:	e69e      	b.n	800c3ee <_printf_float+0xc2>
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	4631      	mov	r1, r6
 800c6b4:	4628      	mov	r0, r5
 800c6b6:	9205      	str	r2, [sp, #20]
 800c6b8:	47b8      	blx	r7
 800c6ba:	3001      	adds	r0, #1
 800c6bc:	f43f ae97 	beq.w	800c3ee <_printf_float+0xc2>
 800c6c0:	9a05      	ldr	r2, [sp, #20]
 800c6c2:	f10b 0b01 	add.w	fp, fp, #1
 800c6c6:	e7b9      	b.n	800c63c <_printf_float+0x310>
 800c6c8:	ee18 3a10 	vmov	r3, s16
 800c6cc:	4652      	mov	r2, sl
 800c6ce:	4631      	mov	r1, r6
 800c6d0:	4628      	mov	r0, r5
 800c6d2:	47b8      	blx	r7
 800c6d4:	3001      	adds	r0, #1
 800c6d6:	d1be      	bne.n	800c656 <_printf_float+0x32a>
 800c6d8:	e689      	b.n	800c3ee <_printf_float+0xc2>
 800c6da:	9a05      	ldr	r2, [sp, #20]
 800c6dc:	464b      	mov	r3, r9
 800c6de:	4442      	add	r2, r8
 800c6e0:	4631      	mov	r1, r6
 800c6e2:	4628      	mov	r0, r5
 800c6e4:	47b8      	blx	r7
 800c6e6:	3001      	adds	r0, #1
 800c6e8:	d1c1      	bne.n	800c66e <_printf_float+0x342>
 800c6ea:	e680      	b.n	800c3ee <_printf_float+0xc2>
 800c6ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c6ee:	2a01      	cmp	r2, #1
 800c6f0:	dc01      	bgt.n	800c6f6 <_printf_float+0x3ca>
 800c6f2:	07db      	lsls	r3, r3, #31
 800c6f4:	d538      	bpl.n	800c768 <_printf_float+0x43c>
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	4642      	mov	r2, r8
 800c6fa:	4631      	mov	r1, r6
 800c6fc:	4628      	mov	r0, r5
 800c6fe:	47b8      	blx	r7
 800c700:	3001      	adds	r0, #1
 800c702:	f43f ae74 	beq.w	800c3ee <_printf_float+0xc2>
 800c706:	ee18 3a10 	vmov	r3, s16
 800c70a:	4652      	mov	r2, sl
 800c70c:	4631      	mov	r1, r6
 800c70e:	4628      	mov	r0, r5
 800c710:	47b8      	blx	r7
 800c712:	3001      	adds	r0, #1
 800c714:	f43f ae6b 	beq.w	800c3ee <_printf_float+0xc2>
 800c718:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c71c:	2200      	movs	r2, #0
 800c71e:	2300      	movs	r3, #0
 800c720:	f7f4 f9e2 	bl	8000ae8 <__aeabi_dcmpeq>
 800c724:	b9d8      	cbnz	r0, 800c75e <_printf_float+0x432>
 800c726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c728:	f108 0201 	add.w	r2, r8, #1
 800c72c:	3b01      	subs	r3, #1
 800c72e:	4631      	mov	r1, r6
 800c730:	4628      	mov	r0, r5
 800c732:	47b8      	blx	r7
 800c734:	3001      	adds	r0, #1
 800c736:	d10e      	bne.n	800c756 <_printf_float+0x42a>
 800c738:	e659      	b.n	800c3ee <_printf_float+0xc2>
 800c73a:	2301      	movs	r3, #1
 800c73c:	4652      	mov	r2, sl
 800c73e:	4631      	mov	r1, r6
 800c740:	4628      	mov	r0, r5
 800c742:	47b8      	blx	r7
 800c744:	3001      	adds	r0, #1
 800c746:	f43f ae52 	beq.w	800c3ee <_printf_float+0xc2>
 800c74a:	f108 0801 	add.w	r8, r8, #1
 800c74e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c750:	3b01      	subs	r3, #1
 800c752:	4543      	cmp	r3, r8
 800c754:	dcf1      	bgt.n	800c73a <_printf_float+0x40e>
 800c756:	464b      	mov	r3, r9
 800c758:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c75c:	e6dc      	b.n	800c518 <_printf_float+0x1ec>
 800c75e:	f04f 0800 	mov.w	r8, #0
 800c762:	f104 0a1a 	add.w	sl, r4, #26
 800c766:	e7f2      	b.n	800c74e <_printf_float+0x422>
 800c768:	2301      	movs	r3, #1
 800c76a:	4642      	mov	r2, r8
 800c76c:	e7df      	b.n	800c72e <_printf_float+0x402>
 800c76e:	2301      	movs	r3, #1
 800c770:	464a      	mov	r2, r9
 800c772:	4631      	mov	r1, r6
 800c774:	4628      	mov	r0, r5
 800c776:	47b8      	blx	r7
 800c778:	3001      	adds	r0, #1
 800c77a:	f43f ae38 	beq.w	800c3ee <_printf_float+0xc2>
 800c77e:	f108 0801 	add.w	r8, r8, #1
 800c782:	68e3      	ldr	r3, [r4, #12]
 800c784:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c786:	1a5b      	subs	r3, r3, r1
 800c788:	4543      	cmp	r3, r8
 800c78a:	dcf0      	bgt.n	800c76e <_printf_float+0x442>
 800c78c:	e6fa      	b.n	800c584 <_printf_float+0x258>
 800c78e:	f04f 0800 	mov.w	r8, #0
 800c792:	f104 0919 	add.w	r9, r4, #25
 800c796:	e7f4      	b.n	800c782 <_printf_float+0x456>

0800c798 <_printf_common>:
 800c798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c79c:	4616      	mov	r6, r2
 800c79e:	4699      	mov	r9, r3
 800c7a0:	688a      	ldr	r2, [r1, #8]
 800c7a2:	690b      	ldr	r3, [r1, #16]
 800c7a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c7a8:	4293      	cmp	r3, r2
 800c7aa:	bfb8      	it	lt
 800c7ac:	4613      	movlt	r3, r2
 800c7ae:	6033      	str	r3, [r6, #0]
 800c7b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c7b4:	4607      	mov	r7, r0
 800c7b6:	460c      	mov	r4, r1
 800c7b8:	b10a      	cbz	r2, 800c7be <_printf_common+0x26>
 800c7ba:	3301      	adds	r3, #1
 800c7bc:	6033      	str	r3, [r6, #0]
 800c7be:	6823      	ldr	r3, [r4, #0]
 800c7c0:	0699      	lsls	r1, r3, #26
 800c7c2:	bf42      	ittt	mi
 800c7c4:	6833      	ldrmi	r3, [r6, #0]
 800c7c6:	3302      	addmi	r3, #2
 800c7c8:	6033      	strmi	r3, [r6, #0]
 800c7ca:	6825      	ldr	r5, [r4, #0]
 800c7cc:	f015 0506 	ands.w	r5, r5, #6
 800c7d0:	d106      	bne.n	800c7e0 <_printf_common+0x48>
 800c7d2:	f104 0a19 	add.w	sl, r4, #25
 800c7d6:	68e3      	ldr	r3, [r4, #12]
 800c7d8:	6832      	ldr	r2, [r6, #0]
 800c7da:	1a9b      	subs	r3, r3, r2
 800c7dc:	42ab      	cmp	r3, r5
 800c7de:	dc26      	bgt.n	800c82e <_printf_common+0x96>
 800c7e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c7e4:	1e13      	subs	r3, r2, #0
 800c7e6:	6822      	ldr	r2, [r4, #0]
 800c7e8:	bf18      	it	ne
 800c7ea:	2301      	movne	r3, #1
 800c7ec:	0692      	lsls	r2, r2, #26
 800c7ee:	d42b      	bmi.n	800c848 <_printf_common+0xb0>
 800c7f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c7f4:	4649      	mov	r1, r9
 800c7f6:	4638      	mov	r0, r7
 800c7f8:	47c0      	blx	r8
 800c7fa:	3001      	adds	r0, #1
 800c7fc:	d01e      	beq.n	800c83c <_printf_common+0xa4>
 800c7fe:	6823      	ldr	r3, [r4, #0]
 800c800:	68e5      	ldr	r5, [r4, #12]
 800c802:	6832      	ldr	r2, [r6, #0]
 800c804:	f003 0306 	and.w	r3, r3, #6
 800c808:	2b04      	cmp	r3, #4
 800c80a:	bf08      	it	eq
 800c80c:	1aad      	subeq	r5, r5, r2
 800c80e:	68a3      	ldr	r3, [r4, #8]
 800c810:	6922      	ldr	r2, [r4, #16]
 800c812:	bf0c      	ite	eq
 800c814:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c818:	2500      	movne	r5, #0
 800c81a:	4293      	cmp	r3, r2
 800c81c:	bfc4      	itt	gt
 800c81e:	1a9b      	subgt	r3, r3, r2
 800c820:	18ed      	addgt	r5, r5, r3
 800c822:	2600      	movs	r6, #0
 800c824:	341a      	adds	r4, #26
 800c826:	42b5      	cmp	r5, r6
 800c828:	d11a      	bne.n	800c860 <_printf_common+0xc8>
 800c82a:	2000      	movs	r0, #0
 800c82c:	e008      	b.n	800c840 <_printf_common+0xa8>
 800c82e:	2301      	movs	r3, #1
 800c830:	4652      	mov	r2, sl
 800c832:	4649      	mov	r1, r9
 800c834:	4638      	mov	r0, r7
 800c836:	47c0      	blx	r8
 800c838:	3001      	adds	r0, #1
 800c83a:	d103      	bne.n	800c844 <_printf_common+0xac>
 800c83c:	f04f 30ff 	mov.w	r0, #4294967295
 800c840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c844:	3501      	adds	r5, #1
 800c846:	e7c6      	b.n	800c7d6 <_printf_common+0x3e>
 800c848:	18e1      	adds	r1, r4, r3
 800c84a:	1c5a      	adds	r2, r3, #1
 800c84c:	2030      	movs	r0, #48	; 0x30
 800c84e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c852:	4422      	add	r2, r4
 800c854:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c858:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c85c:	3302      	adds	r3, #2
 800c85e:	e7c7      	b.n	800c7f0 <_printf_common+0x58>
 800c860:	2301      	movs	r3, #1
 800c862:	4622      	mov	r2, r4
 800c864:	4649      	mov	r1, r9
 800c866:	4638      	mov	r0, r7
 800c868:	47c0      	blx	r8
 800c86a:	3001      	adds	r0, #1
 800c86c:	d0e6      	beq.n	800c83c <_printf_common+0xa4>
 800c86e:	3601      	adds	r6, #1
 800c870:	e7d9      	b.n	800c826 <_printf_common+0x8e>
	...

0800c874 <_printf_i>:
 800c874:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c878:	7e0f      	ldrb	r7, [r1, #24]
 800c87a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c87c:	2f78      	cmp	r7, #120	; 0x78
 800c87e:	4691      	mov	r9, r2
 800c880:	4680      	mov	r8, r0
 800c882:	460c      	mov	r4, r1
 800c884:	469a      	mov	sl, r3
 800c886:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c88a:	d807      	bhi.n	800c89c <_printf_i+0x28>
 800c88c:	2f62      	cmp	r7, #98	; 0x62
 800c88e:	d80a      	bhi.n	800c8a6 <_printf_i+0x32>
 800c890:	2f00      	cmp	r7, #0
 800c892:	f000 80d8 	beq.w	800ca46 <_printf_i+0x1d2>
 800c896:	2f58      	cmp	r7, #88	; 0x58
 800c898:	f000 80a3 	beq.w	800c9e2 <_printf_i+0x16e>
 800c89c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c8a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c8a4:	e03a      	b.n	800c91c <_printf_i+0xa8>
 800c8a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c8aa:	2b15      	cmp	r3, #21
 800c8ac:	d8f6      	bhi.n	800c89c <_printf_i+0x28>
 800c8ae:	a101      	add	r1, pc, #4	; (adr r1, 800c8b4 <_printf_i+0x40>)
 800c8b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c8b4:	0800c90d 	.word	0x0800c90d
 800c8b8:	0800c921 	.word	0x0800c921
 800c8bc:	0800c89d 	.word	0x0800c89d
 800c8c0:	0800c89d 	.word	0x0800c89d
 800c8c4:	0800c89d 	.word	0x0800c89d
 800c8c8:	0800c89d 	.word	0x0800c89d
 800c8cc:	0800c921 	.word	0x0800c921
 800c8d0:	0800c89d 	.word	0x0800c89d
 800c8d4:	0800c89d 	.word	0x0800c89d
 800c8d8:	0800c89d 	.word	0x0800c89d
 800c8dc:	0800c89d 	.word	0x0800c89d
 800c8e0:	0800ca2d 	.word	0x0800ca2d
 800c8e4:	0800c951 	.word	0x0800c951
 800c8e8:	0800ca0f 	.word	0x0800ca0f
 800c8ec:	0800c89d 	.word	0x0800c89d
 800c8f0:	0800c89d 	.word	0x0800c89d
 800c8f4:	0800ca4f 	.word	0x0800ca4f
 800c8f8:	0800c89d 	.word	0x0800c89d
 800c8fc:	0800c951 	.word	0x0800c951
 800c900:	0800c89d 	.word	0x0800c89d
 800c904:	0800c89d 	.word	0x0800c89d
 800c908:	0800ca17 	.word	0x0800ca17
 800c90c:	682b      	ldr	r3, [r5, #0]
 800c90e:	1d1a      	adds	r2, r3, #4
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	602a      	str	r2, [r5, #0]
 800c914:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c918:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c91c:	2301      	movs	r3, #1
 800c91e:	e0a3      	b.n	800ca68 <_printf_i+0x1f4>
 800c920:	6820      	ldr	r0, [r4, #0]
 800c922:	6829      	ldr	r1, [r5, #0]
 800c924:	0606      	lsls	r6, r0, #24
 800c926:	f101 0304 	add.w	r3, r1, #4
 800c92a:	d50a      	bpl.n	800c942 <_printf_i+0xce>
 800c92c:	680e      	ldr	r6, [r1, #0]
 800c92e:	602b      	str	r3, [r5, #0]
 800c930:	2e00      	cmp	r6, #0
 800c932:	da03      	bge.n	800c93c <_printf_i+0xc8>
 800c934:	232d      	movs	r3, #45	; 0x2d
 800c936:	4276      	negs	r6, r6
 800c938:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c93c:	485e      	ldr	r0, [pc, #376]	; (800cab8 <_printf_i+0x244>)
 800c93e:	230a      	movs	r3, #10
 800c940:	e019      	b.n	800c976 <_printf_i+0x102>
 800c942:	680e      	ldr	r6, [r1, #0]
 800c944:	602b      	str	r3, [r5, #0]
 800c946:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c94a:	bf18      	it	ne
 800c94c:	b236      	sxthne	r6, r6
 800c94e:	e7ef      	b.n	800c930 <_printf_i+0xbc>
 800c950:	682b      	ldr	r3, [r5, #0]
 800c952:	6820      	ldr	r0, [r4, #0]
 800c954:	1d19      	adds	r1, r3, #4
 800c956:	6029      	str	r1, [r5, #0]
 800c958:	0601      	lsls	r1, r0, #24
 800c95a:	d501      	bpl.n	800c960 <_printf_i+0xec>
 800c95c:	681e      	ldr	r6, [r3, #0]
 800c95e:	e002      	b.n	800c966 <_printf_i+0xf2>
 800c960:	0646      	lsls	r6, r0, #25
 800c962:	d5fb      	bpl.n	800c95c <_printf_i+0xe8>
 800c964:	881e      	ldrh	r6, [r3, #0]
 800c966:	4854      	ldr	r0, [pc, #336]	; (800cab8 <_printf_i+0x244>)
 800c968:	2f6f      	cmp	r7, #111	; 0x6f
 800c96a:	bf0c      	ite	eq
 800c96c:	2308      	moveq	r3, #8
 800c96e:	230a      	movne	r3, #10
 800c970:	2100      	movs	r1, #0
 800c972:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c976:	6865      	ldr	r5, [r4, #4]
 800c978:	60a5      	str	r5, [r4, #8]
 800c97a:	2d00      	cmp	r5, #0
 800c97c:	bfa2      	ittt	ge
 800c97e:	6821      	ldrge	r1, [r4, #0]
 800c980:	f021 0104 	bicge.w	r1, r1, #4
 800c984:	6021      	strge	r1, [r4, #0]
 800c986:	b90e      	cbnz	r6, 800c98c <_printf_i+0x118>
 800c988:	2d00      	cmp	r5, #0
 800c98a:	d04d      	beq.n	800ca28 <_printf_i+0x1b4>
 800c98c:	4615      	mov	r5, r2
 800c98e:	fbb6 f1f3 	udiv	r1, r6, r3
 800c992:	fb03 6711 	mls	r7, r3, r1, r6
 800c996:	5dc7      	ldrb	r7, [r0, r7]
 800c998:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c99c:	4637      	mov	r7, r6
 800c99e:	42bb      	cmp	r3, r7
 800c9a0:	460e      	mov	r6, r1
 800c9a2:	d9f4      	bls.n	800c98e <_printf_i+0x11a>
 800c9a4:	2b08      	cmp	r3, #8
 800c9a6:	d10b      	bne.n	800c9c0 <_printf_i+0x14c>
 800c9a8:	6823      	ldr	r3, [r4, #0]
 800c9aa:	07de      	lsls	r6, r3, #31
 800c9ac:	d508      	bpl.n	800c9c0 <_printf_i+0x14c>
 800c9ae:	6923      	ldr	r3, [r4, #16]
 800c9b0:	6861      	ldr	r1, [r4, #4]
 800c9b2:	4299      	cmp	r1, r3
 800c9b4:	bfde      	ittt	le
 800c9b6:	2330      	movle	r3, #48	; 0x30
 800c9b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c9bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c9c0:	1b52      	subs	r2, r2, r5
 800c9c2:	6122      	str	r2, [r4, #16]
 800c9c4:	f8cd a000 	str.w	sl, [sp]
 800c9c8:	464b      	mov	r3, r9
 800c9ca:	aa03      	add	r2, sp, #12
 800c9cc:	4621      	mov	r1, r4
 800c9ce:	4640      	mov	r0, r8
 800c9d0:	f7ff fee2 	bl	800c798 <_printf_common>
 800c9d4:	3001      	adds	r0, #1
 800c9d6:	d14c      	bne.n	800ca72 <_printf_i+0x1fe>
 800c9d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c9dc:	b004      	add	sp, #16
 800c9de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9e2:	4835      	ldr	r0, [pc, #212]	; (800cab8 <_printf_i+0x244>)
 800c9e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c9e8:	6829      	ldr	r1, [r5, #0]
 800c9ea:	6823      	ldr	r3, [r4, #0]
 800c9ec:	f851 6b04 	ldr.w	r6, [r1], #4
 800c9f0:	6029      	str	r1, [r5, #0]
 800c9f2:	061d      	lsls	r5, r3, #24
 800c9f4:	d514      	bpl.n	800ca20 <_printf_i+0x1ac>
 800c9f6:	07df      	lsls	r7, r3, #31
 800c9f8:	bf44      	itt	mi
 800c9fa:	f043 0320 	orrmi.w	r3, r3, #32
 800c9fe:	6023      	strmi	r3, [r4, #0]
 800ca00:	b91e      	cbnz	r6, 800ca0a <_printf_i+0x196>
 800ca02:	6823      	ldr	r3, [r4, #0]
 800ca04:	f023 0320 	bic.w	r3, r3, #32
 800ca08:	6023      	str	r3, [r4, #0]
 800ca0a:	2310      	movs	r3, #16
 800ca0c:	e7b0      	b.n	800c970 <_printf_i+0xfc>
 800ca0e:	6823      	ldr	r3, [r4, #0]
 800ca10:	f043 0320 	orr.w	r3, r3, #32
 800ca14:	6023      	str	r3, [r4, #0]
 800ca16:	2378      	movs	r3, #120	; 0x78
 800ca18:	4828      	ldr	r0, [pc, #160]	; (800cabc <_printf_i+0x248>)
 800ca1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ca1e:	e7e3      	b.n	800c9e8 <_printf_i+0x174>
 800ca20:	0659      	lsls	r1, r3, #25
 800ca22:	bf48      	it	mi
 800ca24:	b2b6      	uxthmi	r6, r6
 800ca26:	e7e6      	b.n	800c9f6 <_printf_i+0x182>
 800ca28:	4615      	mov	r5, r2
 800ca2a:	e7bb      	b.n	800c9a4 <_printf_i+0x130>
 800ca2c:	682b      	ldr	r3, [r5, #0]
 800ca2e:	6826      	ldr	r6, [r4, #0]
 800ca30:	6961      	ldr	r1, [r4, #20]
 800ca32:	1d18      	adds	r0, r3, #4
 800ca34:	6028      	str	r0, [r5, #0]
 800ca36:	0635      	lsls	r5, r6, #24
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	d501      	bpl.n	800ca40 <_printf_i+0x1cc>
 800ca3c:	6019      	str	r1, [r3, #0]
 800ca3e:	e002      	b.n	800ca46 <_printf_i+0x1d2>
 800ca40:	0670      	lsls	r0, r6, #25
 800ca42:	d5fb      	bpl.n	800ca3c <_printf_i+0x1c8>
 800ca44:	8019      	strh	r1, [r3, #0]
 800ca46:	2300      	movs	r3, #0
 800ca48:	6123      	str	r3, [r4, #16]
 800ca4a:	4615      	mov	r5, r2
 800ca4c:	e7ba      	b.n	800c9c4 <_printf_i+0x150>
 800ca4e:	682b      	ldr	r3, [r5, #0]
 800ca50:	1d1a      	adds	r2, r3, #4
 800ca52:	602a      	str	r2, [r5, #0]
 800ca54:	681d      	ldr	r5, [r3, #0]
 800ca56:	6862      	ldr	r2, [r4, #4]
 800ca58:	2100      	movs	r1, #0
 800ca5a:	4628      	mov	r0, r5
 800ca5c:	f7f3 fbd0 	bl	8000200 <memchr>
 800ca60:	b108      	cbz	r0, 800ca66 <_printf_i+0x1f2>
 800ca62:	1b40      	subs	r0, r0, r5
 800ca64:	6060      	str	r0, [r4, #4]
 800ca66:	6863      	ldr	r3, [r4, #4]
 800ca68:	6123      	str	r3, [r4, #16]
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca70:	e7a8      	b.n	800c9c4 <_printf_i+0x150>
 800ca72:	6923      	ldr	r3, [r4, #16]
 800ca74:	462a      	mov	r2, r5
 800ca76:	4649      	mov	r1, r9
 800ca78:	4640      	mov	r0, r8
 800ca7a:	47d0      	blx	sl
 800ca7c:	3001      	adds	r0, #1
 800ca7e:	d0ab      	beq.n	800c9d8 <_printf_i+0x164>
 800ca80:	6823      	ldr	r3, [r4, #0]
 800ca82:	079b      	lsls	r3, r3, #30
 800ca84:	d413      	bmi.n	800caae <_printf_i+0x23a>
 800ca86:	68e0      	ldr	r0, [r4, #12]
 800ca88:	9b03      	ldr	r3, [sp, #12]
 800ca8a:	4298      	cmp	r0, r3
 800ca8c:	bfb8      	it	lt
 800ca8e:	4618      	movlt	r0, r3
 800ca90:	e7a4      	b.n	800c9dc <_printf_i+0x168>
 800ca92:	2301      	movs	r3, #1
 800ca94:	4632      	mov	r2, r6
 800ca96:	4649      	mov	r1, r9
 800ca98:	4640      	mov	r0, r8
 800ca9a:	47d0      	blx	sl
 800ca9c:	3001      	adds	r0, #1
 800ca9e:	d09b      	beq.n	800c9d8 <_printf_i+0x164>
 800caa0:	3501      	adds	r5, #1
 800caa2:	68e3      	ldr	r3, [r4, #12]
 800caa4:	9903      	ldr	r1, [sp, #12]
 800caa6:	1a5b      	subs	r3, r3, r1
 800caa8:	42ab      	cmp	r3, r5
 800caaa:	dcf2      	bgt.n	800ca92 <_printf_i+0x21e>
 800caac:	e7eb      	b.n	800ca86 <_printf_i+0x212>
 800caae:	2500      	movs	r5, #0
 800cab0:	f104 0619 	add.w	r6, r4, #25
 800cab4:	e7f5      	b.n	800caa2 <_printf_i+0x22e>
 800cab6:	bf00      	nop
 800cab8:	08012676 	.word	0x08012676
 800cabc:	08012687 	.word	0x08012687

0800cac0 <_scanf_float>:
 800cac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cac4:	b087      	sub	sp, #28
 800cac6:	4617      	mov	r7, r2
 800cac8:	9303      	str	r3, [sp, #12]
 800caca:	688b      	ldr	r3, [r1, #8]
 800cacc:	1e5a      	subs	r2, r3, #1
 800cace:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cad2:	bf83      	ittte	hi
 800cad4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cad8:	195b      	addhi	r3, r3, r5
 800cada:	9302      	strhi	r3, [sp, #8]
 800cadc:	2300      	movls	r3, #0
 800cade:	bf86      	itte	hi
 800cae0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cae4:	608b      	strhi	r3, [r1, #8]
 800cae6:	9302      	strls	r3, [sp, #8]
 800cae8:	680b      	ldr	r3, [r1, #0]
 800caea:	468b      	mov	fp, r1
 800caec:	2500      	movs	r5, #0
 800caee:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800caf2:	f84b 3b1c 	str.w	r3, [fp], #28
 800caf6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cafa:	4680      	mov	r8, r0
 800cafc:	460c      	mov	r4, r1
 800cafe:	465e      	mov	r6, fp
 800cb00:	46aa      	mov	sl, r5
 800cb02:	46a9      	mov	r9, r5
 800cb04:	9501      	str	r5, [sp, #4]
 800cb06:	68a2      	ldr	r2, [r4, #8]
 800cb08:	b152      	cbz	r2, 800cb20 <_scanf_float+0x60>
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	781b      	ldrb	r3, [r3, #0]
 800cb0e:	2b4e      	cmp	r3, #78	; 0x4e
 800cb10:	d864      	bhi.n	800cbdc <_scanf_float+0x11c>
 800cb12:	2b40      	cmp	r3, #64	; 0x40
 800cb14:	d83c      	bhi.n	800cb90 <_scanf_float+0xd0>
 800cb16:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800cb1a:	b2c8      	uxtb	r0, r1
 800cb1c:	280e      	cmp	r0, #14
 800cb1e:	d93a      	bls.n	800cb96 <_scanf_float+0xd6>
 800cb20:	f1b9 0f00 	cmp.w	r9, #0
 800cb24:	d003      	beq.n	800cb2e <_scanf_float+0x6e>
 800cb26:	6823      	ldr	r3, [r4, #0]
 800cb28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb2c:	6023      	str	r3, [r4, #0]
 800cb2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cb32:	f1ba 0f01 	cmp.w	sl, #1
 800cb36:	f200 8113 	bhi.w	800cd60 <_scanf_float+0x2a0>
 800cb3a:	455e      	cmp	r6, fp
 800cb3c:	f200 8105 	bhi.w	800cd4a <_scanf_float+0x28a>
 800cb40:	2501      	movs	r5, #1
 800cb42:	4628      	mov	r0, r5
 800cb44:	b007      	add	sp, #28
 800cb46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb4a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800cb4e:	2a0d      	cmp	r2, #13
 800cb50:	d8e6      	bhi.n	800cb20 <_scanf_float+0x60>
 800cb52:	a101      	add	r1, pc, #4	; (adr r1, 800cb58 <_scanf_float+0x98>)
 800cb54:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cb58:	0800cc97 	.word	0x0800cc97
 800cb5c:	0800cb21 	.word	0x0800cb21
 800cb60:	0800cb21 	.word	0x0800cb21
 800cb64:	0800cb21 	.word	0x0800cb21
 800cb68:	0800ccf7 	.word	0x0800ccf7
 800cb6c:	0800cccf 	.word	0x0800cccf
 800cb70:	0800cb21 	.word	0x0800cb21
 800cb74:	0800cb21 	.word	0x0800cb21
 800cb78:	0800cca5 	.word	0x0800cca5
 800cb7c:	0800cb21 	.word	0x0800cb21
 800cb80:	0800cb21 	.word	0x0800cb21
 800cb84:	0800cb21 	.word	0x0800cb21
 800cb88:	0800cb21 	.word	0x0800cb21
 800cb8c:	0800cc5d 	.word	0x0800cc5d
 800cb90:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800cb94:	e7db      	b.n	800cb4e <_scanf_float+0x8e>
 800cb96:	290e      	cmp	r1, #14
 800cb98:	d8c2      	bhi.n	800cb20 <_scanf_float+0x60>
 800cb9a:	a001      	add	r0, pc, #4	; (adr r0, 800cba0 <_scanf_float+0xe0>)
 800cb9c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cba0:	0800cc4f 	.word	0x0800cc4f
 800cba4:	0800cb21 	.word	0x0800cb21
 800cba8:	0800cc4f 	.word	0x0800cc4f
 800cbac:	0800cce3 	.word	0x0800cce3
 800cbb0:	0800cb21 	.word	0x0800cb21
 800cbb4:	0800cbfd 	.word	0x0800cbfd
 800cbb8:	0800cc39 	.word	0x0800cc39
 800cbbc:	0800cc39 	.word	0x0800cc39
 800cbc0:	0800cc39 	.word	0x0800cc39
 800cbc4:	0800cc39 	.word	0x0800cc39
 800cbc8:	0800cc39 	.word	0x0800cc39
 800cbcc:	0800cc39 	.word	0x0800cc39
 800cbd0:	0800cc39 	.word	0x0800cc39
 800cbd4:	0800cc39 	.word	0x0800cc39
 800cbd8:	0800cc39 	.word	0x0800cc39
 800cbdc:	2b6e      	cmp	r3, #110	; 0x6e
 800cbde:	d809      	bhi.n	800cbf4 <_scanf_float+0x134>
 800cbe0:	2b60      	cmp	r3, #96	; 0x60
 800cbe2:	d8b2      	bhi.n	800cb4a <_scanf_float+0x8a>
 800cbe4:	2b54      	cmp	r3, #84	; 0x54
 800cbe6:	d077      	beq.n	800ccd8 <_scanf_float+0x218>
 800cbe8:	2b59      	cmp	r3, #89	; 0x59
 800cbea:	d199      	bne.n	800cb20 <_scanf_float+0x60>
 800cbec:	2d07      	cmp	r5, #7
 800cbee:	d197      	bne.n	800cb20 <_scanf_float+0x60>
 800cbf0:	2508      	movs	r5, #8
 800cbf2:	e029      	b.n	800cc48 <_scanf_float+0x188>
 800cbf4:	2b74      	cmp	r3, #116	; 0x74
 800cbf6:	d06f      	beq.n	800ccd8 <_scanf_float+0x218>
 800cbf8:	2b79      	cmp	r3, #121	; 0x79
 800cbfa:	e7f6      	b.n	800cbea <_scanf_float+0x12a>
 800cbfc:	6821      	ldr	r1, [r4, #0]
 800cbfe:	05c8      	lsls	r0, r1, #23
 800cc00:	d51a      	bpl.n	800cc38 <_scanf_float+0x178>
 800cc02:	9b02      	ldr	r3, [sp, #8]
 800cc04:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800cc08:	6021      	str	r1, [r4, #0]
 800cc0a:	f109 0901 	add.w	r9, r9, #1
 800cc0e:	b11b      	cbz	r3, 800cc18 <_scanf_float+0x158>
 800cc10:	3b01      	subs	r3, #1
 800cc12:	3201      	adds	r2, #1
 800cc14:	9302      	str	r3, [sp, #8]
 800cc16:	60a2      	str	r2, [r4, #8]
 800cc18:	68a3      	ldr	r3, [r4, #8]
 800cc1a:	3b01      	subs	r3, #1
 800cc1c:	60a3      	str	r3, [r4, #8]
 800cc1e:	6923      	ldr	r3, [r4, #16]
 800cc20:	3301      	adds	r3, #1
 800cc22:	6123      	str	r3, [r4, #16]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	3b01      	subs	r3, #1
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	607b      	str	r3, [r7, #4]
 800cc2c:	f340 8084 	ble.w	800cd38 <_scanf_float+0x278>
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	3301      	adds	r3, #1
 800cc34:	603b      	str	r3, [r7, #0]
 800cc36:	e766      	b.n	800cb06 <_scanf_float+0x46>
 800cc38:	eb1a 0f05 	cmn.w	sl, r5
 800cc3c:	f47f af70 	bne.w	800cb20 <_scanf_float+0x60>
 800cc40:	6822      	ldr	r2, [r4, #0]
 800cc42:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800cc46:	6022      	str	r2, [r4, #0]
 800cc48:	f806 3b01 	strb.w	r3, [r6], #1
 800cc4c:	e7e4      	b.n	800cc18 <_scanf_float+0x158>
 800cc4e:	6822      	ldr	r2, [r4, #0]
 800cc50:	0610      	lsls	r0, r2, #24
 800cc52:	f57f af65 	bpl.w	800cb20 <_scanf_float+0x60>
 800cc56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cc5a:	e7f4      	b.n	800cc46 <_scanf_float+0x186>
 800cc5c:	f1ba 0f00 	cmp.w	sl, #0
 800cc60:	d10e      	bne.n	800cc80 <_scanf_float+0x1c0>
 800cc62:	f1b9 0f00 	cmp.w	r9, #0
 800cc66:	d10e      	bne.n	800cc86 <_scanf_float+0x1c6>
 800cc68:	6822      	ldr	r2, [r4, #0]
 800cc6a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800cc6e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800cc72:	d108      	bne.n	800cc86 <_scanf_float+0x1c6>
 800cc74:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cc78:	6022      	str	r2, [r4, #0]
 800cc7a:	f04f 0a01 	mov.w	sl, #1
 800cc7e:	e7e3      	b.n	800cc48 <_scanf_float+0x188>
 800cc80:	f1ba 0f02 	cmp.w	sl, #2
 800cc84:	d055      	beq.n	800cd32 <_scanf_float+0x272>
 800cc86:	2d01      	cmp	r5, #1
 800cc88:	d002      	beq.n	800cc90 <_scanf_float+0x1d0>
 800cc8a:	2d04      	cmp	r5, #4
 800cc8c:	f47f af48 	bne.w	800cb20 <_scanf_float+0x60>
 800cc90:	3501      	adds	r5, #1
 800cc92:	b2ed      	uxtb	r5, r5
 800cc94:	e7d8      	b.n	800cc48 <_scanf_float+0x188>
 800cc96:	f1ba 0f01 	cmp.w	sl, #1
 800cc9a:	f47f af41 	bne.w	800cb20 <_scanf_float+0x60>
 800cc9e:	f04f 0a02 	mov.w	sl, #2
 800cca2:	e7d1      	b.n	800cc48 <_scanf_float+0x188>
 800cca4:	b97d      	cbnz	r5, 800ccc6 <_scanf_float+0x206>
 800cca6:	f1b9 0f00 	cmp.w	r9, #0
 800ccaa:	f47f af3c 	bne.w	800cb26 <_scanf_float+0x66>
 800ccae:	6822      	ldr	r2, [r4, #0]
 800ccb0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ccb4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ccb8:	f47f af39 	bne.w	800cb2e <_scanf_float+0x6e>
 800ccbc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ccc0:	6022      	str	r2, [r4, #0]
 800ccc2:	2501      	movs	r5, #1
 800ccc4:	e7c0      	b.n	800cc48 <_scanf_float+0x188>
 800ccc6:	2d03      	cmp	r5, #3
 800ccc8:	d0e2      	beq.n	800cc90 <_scanf_float+0x1d0>
 800ccca:	2d05      	cmp	r5, #5
 800cccc:	e7de      	b.n	800cc8c <_scanf_float+0x1cc>
 800ccce:	2d02      	cmp	r5, #2
 800ccd0:	f47f af26 	bne.w	800cb20 <_scanf_float+0x60>
 800ccd4:	2503      	movs	r5, #3
 800ccd6:	e7b7      	b.n	800cc48 <_scanf_float+0x188>
 800ccd8:	2d06      	cmp	r5, #6
 800ccda:	f47f af21 	bne.w	800cb20 <_scanf_float+0x60>
 800ccde:	2507      	movs	r5, #7
 800cce0:	e7b2      	b.n	800cc48 <_scanf_float+0x188>
 800cce2:	6822      	ldr	r2, [r4, #0]
 800cce4:	0591      	lsls	r1, r2, #22
 800cce6:	f57f af1b 	bpl.w	800cb20 <_scanf_float+0x60>
 800ccea:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ccee:	6022      	str	r2, [r4, #0]
 800ccf0:	f8cd 9004 	str.w	r9, [sp, #4]
 800ccf4:	e7a8      	b.n	800cc48 <_scanf_float+0x188>
 800ccf6:	6822      	ldr	r2, [r4, #0]
 800ccf8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ccfc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800cd00:	d006      	beq.n	800cd10 <_scanf_float+0x250>
 800cd02:	0550      	lsls	r0, r2, #21
 800cd04:	f57f af0c 	bpl.w	800cb20 <_scanf_float+0x60>
 800cd08:	f1b9 0f00 	cmp.w	r9, #0
 800cd0c:	f43f af0f 	beq.w	800cb2e <_scanf_float+0x6e>
 800cd10:	0591      	lsls	r1, r2, #22
 800cd12:	bf58      	it	pl
 800cd14:	9901      	ldrpl	r1, [sp, #4]
 800cd16:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cd1a:	bf58      	it	pl
 800cd1c:	eba9 0101 	subpl.w	r1, r9, r1
 800cd20:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800cd24:	bf58      	it	pl
 800cd26:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cd2a:	6022      	str	r2, [r4, #0]
 800cd2c:	f04f 0900 	mov.w	r9, #0
 800cd30:	e78a      	b.n	800cc48 <_scanf_float+0x188>
 800cd32:	f04f 0a03 	mov.w	sl, #3
 800cd36:	e787      	b.n	800cc48 <_scanf_float+0x188>
 800cd38:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cd3c:	4639      	mov	r1, r7
 800cd3e:	4640      	mov	r0, r8
 800cd40:	4798      	blx	r3
 800cd42:	2800      	cmp	r0, #0
 800cd44:	f43f aedf 	beq.w	800cb06 <_scanf_float+0x46>
 800cd48:	e6ea      	b.n	800cb20 <_scanf_float+0x60>
 800cd4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cd4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cd52:	463a      	mov	r2, r7
 800cd54:	4640      	mov	r0, r8
 800cd56:	4798      	blx	r3
 800cd58:	6923      	ldr	r3, [r4, #16]
 800cd5a:	3b01      	subs	r3, #1
 800cd5c:	6123      	str	r3, [r4, #16]
 800cd5e:	e6ec      	b.n	800cb3a <_scanf_float+0x7a>
 800cd60:	1e6b      	subs	r3, r5, #1
 800cd62:	2b06      	cmp	r3, #6
 800cd64:	d825      	bhi.n	800cdb2 <_scanf_float+0x2f2>
 800cd66:	2d02      	cmp	r5, #2
 800cd68:	d836      	bhi.n	800cdd8 <_scanf_float+0x318>
 800cd6a:	455e      	cmp	r6, fp
 800cd6c:	f67f aee8 	bls.w	800cb40 <_scanf_float+0x80>
 800cd70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cd74:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cd78:	463a      	mov	r2, r7
 800cd7a:	4640      	mov	r0, r8
 800cd7c:	4798      	blx	r3
 800cd7e:	6923      	ldr	r3, [r4, #16]
 800cd80:	3b01      	subs	r3, #1
 800cd82:	6123      	str	r3, [r4, #16]
 800cd84:	e7f1      	b.n	800cd6a <_scanf_float+0x2aa>
 800cd86:	9802      	ldr	r0, [sp, #8]
 800cd88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cd8c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800cd90:	9002      	str	r0, [sp, #8]
 800cd92:	463a      	mov	r2, r7
 800cd94:	4640      	mov	r0, r8
 800cd96:	4798      	blx	r3
 800cd98:	6923      	ldr	r3, [r4, #16]
 800cd9a:	3b01      	subs	r3, #1
 800cd9c:	6123      	str	r3, [r4, #16]
 800cd9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cda2:	fa5f fa8a 	uxtb.w	sl, sl
 800cda6:	f1ba 0f02 	cmp.w	sl, #2
 800cdaa:	d1ec      	bne.n	800cd86 <_scanf_float+0x2c6>
 800cdac:	3d03      	subs	r5, #3
 800cdae:	b2ed      	uxtb	r5, r5
 800cdb0:	1b76      	subs	r6, r6, r5
 800cdb2:	6823      	ldr	r3, [r4, #0]
 800cdb4:	05da      	lsls	r2, r3, #23
 800cdb6:	d52f      	bpl.n	800ce18 <_scanf_float+0x358>
 800cdb8:	055b      	lsls	r3, r3, #21
 800cdba:	d510      	bpl.n	800cdde <_scanf_float+0x31e>
 800cdbc:	455e      	cmp	r6, fp
 800cdbe:	f67f aebf 	bls.w	800cb40 <_scanf_float+0x80>
 800cdc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cdc6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cdca:	463a      	mov	r2, r7
 800cdcc:	4640      	mov	r0, r8
 800cdce:	4798      	blx	r3
 800cdd0:	6923      	ldr	r3, [r4, #16]
 800cdd2:	3b01      	subs	r3, #1
 800cdd4:	6123      	str	r3, [r4, #16]
 800cdd6:	e7f1      	b.n	800cdbc <_scanf_float+0x2fc>
 800cdd8:	46aa      	mov	sl, r5
 800cdda:	9602      	str	r6, [sp, #8]
 800cddc:	e7df      	b.n	800cd9e <_scanf_float+0x2de>
 800cdde:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cde2:	6923      	ldr	r3, [r4, #16]
 800cde4:	2965      	cmp	r1, #101	; 0x65
 800cde6:	f103 33ff 	add.w	r3, r3, #4294967295
 800cdea:	f106 35ff 	add.w	r5, r6, #4294967295
 800cdee:	6123      	str	r3, [r4, #16]
 800cdf0:	d00c      	beq.n	800ce0c <_scanf_float+0x34c>
 800cdf2:	2945      	cmp	r1, #69	; 0x45
 800cdf4:	d00a      	beq.n	800ce0c <_scanf_float+0x34c>
 800cdf6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cdfa:	463a      	mov	r2, r7
 800cdfc:	4640      	mov	r0, r8
 800cdfe:	4798      	blx	r3
 800ce00:	6923      	ldr	r3, [r4, #16]
 800ce02:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ce06:	3b01      	subs	r3, #1
 800ce08:	1eb5      	subs	r5, r6, #2
 800ce0a:	6123      	str	r3, [r4, #16]
 800ce0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ce10:	463a      	mov	r2, r7
 800ce12:	4640      	mov	r0, r8
 800ce14:	4798      	blx	r3
 800ce16:	462e      	mov	r6, r5
 800ce18:	6825      	ldr	r5, [r4, #0]
 800ce1a:	f015 0510 	ands.w	r5, r5, #16
 800ce1e:	d159      	bne.n	800ced4 <_scanf_float+0x414>
 800ce20:	7035      	strb	r5, [r6, #0]
 800ce22:	6823      	ldr	r3, [r4, #0]
 800ce24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ce28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ce2c:	d11b      	bne.n	800ce66 <_scanf_float+0x3a6>
 800ce2e:	9b01      	ldr	r3, [sp, #4]
 800ce30:	454b      	cmp	r3, r9
 800ce32:	eba3 0209 	sub.w	r2, r3, r9
 800ce36:	d123      	bne.n	800ce80 <_scanf_float+0x3c0>
 800ce38:	2200      	movs	r2, #0
 800ce3a:	4659      	mov	r1, fp
 800ce3c:	4640      	mov	r0, r8
 800ce3e:	f000 fe99 	bl	800db74 <_strtod_r>
 800ce42:	6822      	ldr	r2, [r4, #0]
 800ce44:	9b03      	ldr	r3, [sp, #12]
 800ce46:	f012 0f02 	tst.w	r2, #2
 800ce4a:	ec57 6b10 	vmov	r6, r7, d0
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	d021      	beq.n	800ce96 <_scanf_float+0x3d6>
 800ce52:	9903      	ldr	r1, [sp, #12]
 800ce54:	1d1a      	adds	r2, r3, #4
 800ce56:	600a      	str	r2, [r1, #0]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	e9c3 6700 	strd	r6, r7, [r3]
 800ce5e:	68e3      	ldr	r3, [r4, #12]
 800ce60:	3301      	adds	r3, #1
 800ce62:	60e3      	str	r3, [r4, #12]
 800ce64:	e66d      	b.n	800cb42 <_scanf_float+0x82>
 800ce66:	9b04      	ldr	r3, [sp, #16]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d0e5      	beq.n	800ce38 <_scanf_float+0x378>
 800ce6c:	9905      	ldr	r1, [sp, #20]
 800ce6e:	230a      	movs	r3, #10
 800ce70:	462a      	mov	r2, r5
 800ce72:	3101      	adds	r1, #1
 800ce74:	4640      	mov	r0, r8
 800ce76:	f000 ff05 	bl	800dc84 <_strtol_r>
 800ce7a:	9b04      	ldr	r3, [sp, #16]
 800ce7c:	9e05      	ldr	r6, [sp, #20]
 800ce7e:	1ac2      	subs	r2, r0, r3
 800ce80:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ce84:	429e      	cmp	r6, r3
 800ce86:	bf28      	it	cs
 800ce88:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ce8c:	4912      	ldr	r1, [pc, #72]	; (800ced8 <_scanf_float+0x418>)
 800ce8e:	4630      	mov	r0, r6
 800ce90:	f000 f82c 	bl	800ceec <siprintf>
 800ce94:	e7d0      	b.n	800ce38 <_scanf_float+0x378>
 800ce96:	9903      	ldr	r1, [sp, #12]
 800ce98:	f012 0f04 	tst.w	r2, #4
 800ce9c:	f103 0204 	add.w	r2, r3, #4
 800cea0:	600a      	str	r2, [r1, #0]
 800cea2:	d1d9      	bne.n	800ce58 <_scanf_float+0x398>
 800cea4:	f8d3 8000 	ldr.w	r8, [r3]
 800cea8:	ee10 2a10 	vmov	r2, s0
 800ceac:	ee10 0a10 	vmov	r0, s0
 800ceb0:	463b      	mov	r3, r7
 800ceb2:	4639      	mov	r1, r7
 800ceb4:	f7f3 fe4a 	bl	8000b4c <__aeabi_dcmpun>
 800ceb8:	b128      	cbz	r0, 800cec6 <_scanf_float+0x406>
 800ceba:	4808      	ldr	r0, [pc, #32]	; (800cedc <_scanf_float+0x41c>)
 800cebc:	f000 f810 	bl	800cee0 <nanf>
 800cec0:	ed88 0a00 	vstr	s0, [r8]
 800cec4:	e7cb      	b.n	800ce5e <_scanf_float+0x39e>
 800cec6:	4630      	mov	r0, r6
 800cec8:	4639      	mov	r1, r7
 800ceca:	f7f3 fe9d 	bl	8000c08 <__aeabi_d2f>
 800cece:	f8c8 0000 	str.w	r0, [r8]
 800ced2:	e7c4      	b.n	800ce5e <_scanf_float+0x39e>
 800ced4:	2500      	movs	r5, #0
 800ced6:	e634      	b.n	800cb42 <_scanf_float+0x82>
 800ced8:	08012698 	.word	0x08012698
 800cedc:	08012aa0 	.word	0x08012aa0

0800cee0 <nanf>:
 800cee0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cee8 <nanf+0x8>
 800cee4:	4770      	bx	lr
 800cee6:	bf00      	nop
 800cee8:	7fc00000 	.word	0x7fc00000

0800ceec <siprintf>:
 800ceec:	b40e      	push	{r1, r2, r3}
 800ceee:	b500      	push	{lr}
 800cef0:	b09c      	sub	sp, #112	; 0x70
 800cef2:	ab1d      	add	r3, sp, #116	; 0x74
 800cef4:	9002      	str	r0, [sp, #8]
 800cef6:	9006      	str	r0, [sp, #24]
 800cef8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cefc:	4809      	ldr	r0, [pc, #36]	; (800cf24 <siprintf+0x38>)
 800cefe:	9107      	str	r1, [sp, #28]
 800cf00:	9104      	str	r1, [sp, #16]
 800cf02:	4909      	ldr	r1, [pc, #36]	; (800cf28 <siprintf+0x3c>)
 800cf04:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf08:	9105      	str	r1, [sp, #20]
 800cf0a:	6800      	ldr	r0, [r0, #0]
 800cf0c:	9301      	str	r3, [sp, #4]
 800cf0e:	a902      	add	r1, sp, #8
 800cf10:	f002 fee4 	bl	800fcdc <_svfiprintf_r>
 800cf14:	9b02      	ldr	r3, [sp, #8]
 800cf16:	2200      	movs	r2, #0
 800cf18:	701a      	strb	r2, [r3, #0]
 800cf1a:	b01c      	add	sp, #112	; 0x70
 800cf1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf20:	b003      	add	sp, #12
 800cf22:	4770      	bx	lr
 800cf24:	20000178 	.word	0x20000178
 800cf28:	ffff0208 	.word	0xffff0208

0800cf2c <sulp>:
 800cf2c:	b570      	push	{r4, r5, r6, lr}
 800cf2e:	4604      	mov	r4, r0
 800cf30:	460d      	mov	r5, r1
 800cf32:	ec45 4b10 	vmov	d0, r4, r5
 800cf36:	4616      	mov	r6, r2
 800cf38:	f002 fc2e 	bl	800f798 <__ulp>
 800cf3c:	ec51 0b10 	vmov	r0, r1, d0
 800cf40:	b17e      	cbz	r6, 800cf62 <sulp+0x36>
 800cf42:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cf46:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	dd09      	ble.n	800cf62 <sulp+0x36>
 800cf4e:	051b      	lsls	r3, r3, #20
 800cf50:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800cf54:	2400      	movs	r4, #0
 800cf56:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800cf5a:	4622      	mov	r2, r4
 800cf5c:	462b      	mov	r3, r5
 800cf5e:	f7f3 fb5b 	bl	8000618 <__aeabi_dmul>
 800cf62:	bd70      	pop	{r4, r5, r6, pc}
 800cf64:	0000      	movs	r0, r0
	...

0800cf68 <_strtod_l>:
 800cf68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf6c:	ed2d 8b02 	vpush	{d8}
 800cf70:	b09d      	sub	sp, #116	; 0x74
 800cf72:	461f      	mov	r7, r3
 800cf74:	2300      	movs	r3, #0
 800cf76:	9318      	str	r3, [sp, #96]	; 0x60
 800cf78:	4ba2      	ldr	r3, [pc, #648]	; (800d204 <_strtod_l+0x29c>)
 800cf7a:	9213      	str	r2, [sp, #76]	; 0x4c
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	9305      	str	r3, [sp, #20]
 800cf80:	4604      	mov	r4, r0
 800cf82:	4618      	mov	r0, r3
 800cf84:	4688      	mov	r8, r1
 800cf86:	f7f3 f933 	bl	80001f0 <strlen>
 800cf8a:	f04f 0a00 	mov.w	sl, #0
 800cf8e:	4605      	mov	r5, r0
 800cf90:	f04f 0b00 	mov.w	fp, #0
 800cf94:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cf98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cf9a:	781a      	ldrb	r2, [r3, #0]
 800cf9c:	2a2b      	cmp	r2, #43	; 0x2b
 800cf9e:	d04e      	beq.n	800d03e <_strtod_l+0xd6>
 800cfa0:	d83b      	bhi.n	800d01a <_strtod_l+0xb2>
 800cfa2:	2a0d      	cmp	r2, #13
 800cfa4:	d834      	bhi.n	800d010 <_strtod_l+0xa8>
 800cfa6:	2a08      	cmp	r2, #8
 800cfa8:	d834      	bhi.n	800d014 <_strtod_l+0xac>
 800cfaa:	2a00      	cmp	r2, #0
 800cfac:	d03e      	beq.n	800d02c <_strtod_l+0xc4>
 800cfae:	2300      	movs	r3, #0
 800cfb0:	930a      	str	r3, [sp, #40]	; 0x28
 800cfb2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800cfb4:	7833      	ldrb	r3, [r6, #0]
 800cfb6:	2b30      	cmp	r3, #48	; 0x30
 800cfb8:	f040 80b0 	bne.w	800d11c <_strtod_l+0x1b4>
 800cfbc:	7873      	ldrb	r3, [r6, #1]
 800cfbe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cfc2:	2b58      	cmp	r3, #88	; 0x58
 800cfc4:	d168      	bne.n	800d098 <_strtod_l+0x130>
 800cfc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfc8:	9301      	str	r3, [sp, #4]
 800cfca:	ab18      	add	r3, sp, #96	; 0x60
 800cfcc:	9702      	str	r7, [sp, #8]
 800cfce:	9300      	str	r3, [sp, #0]
 800cfd0:	4a8d      	ldr	r2, [pc, #564]	; (800d208 <_strtod_l+0x2a0>)
 800cfd2:	ab19      	add	r3, sp, #100	; 0x64
 800cfd4:	a917      	add	r1, sp, #92	; 0x5c
 800cfd6:	4620      	mov	r0, r4
 800cfd8:	f001 fd38 	bl	800ea4c <__gethex>
 800cfdc:	f010 0707 	ands.w	r7, r0, #7
 800cfe0:	4605      	mov	r5, r0
 800cfe2:	d005      	beq.n	800cff0 <_strtod_l+0x88>
 800cfe4:	2f06      	cmp	r7, #6
 800cfe6:	d12c      	bne.n	800d042 <_strtod_l+0xda>
 800cfe8:	3601      	adds	r6, #1
 800cfea:	2300      	movs	r3, #0
 800cfec:	9617      	str	r6, [sp, #92]	; 0x5c
 800cfee:	930a      	str	r3, [sp, #40]	; 0x28
 800cff0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	f040 8590 	bne.w	800db18 <_strtod_l+0xbb0>
 800cff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cffa:	b1eb      	cbz	r3, 800d038 <_strtod_l+0xd0>
 800cffc:	4652      	mov	r2, sl
 800cffe:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d002:	ec43 2b10 	vmov	d0, r2, r3
 800d006:	b01d      	add	sp, #116	; 0x74
 800d008:	ecbd 8b02 	vpop	{d8}
 800d00c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d010:	2a20      	cmp	r2, #32
 800d012:	d1cc      	bne.n	800cfae <_strtod_l+0x46>
 800d014:	3301      	adds	r3, #1
 800d016:	9317      	str	r3, [sp, #92]	; 0x5c
 800d018:	e7be      	b.n	800cf98 <_strtod_l+0x30>
 800d01a:	2a2d      	cmp	r2, #45	; 0x2d
 800d01c:	d1c7      	bne.n	800cfae <_strtod_l+0x46>
 800d01e:	2201      	movs	r2, #1
 800d020:	920a      	str	r2, [sp, #40]	; 0x28
 800d022:	1c5a      	adds	r2, r3, #1
 800d024:	9217      	str	r2, [sp, #92]	; 0x5c
 800d026:	785b      	ldrb	r3, [r3, #1]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d1c2      	bne.n	800cfb2 <_strtod_l+0x4a>
 800d02c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d02e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d032:	2b00      	cmp	r3, #0
 800d034:	f040 856e 	bne.w	800db14 <_strtod_l+0xbac>
 800d038:	4652      	mov	r2, sl
 800d03a:	465b      	mov	r3, fp
 800d03c:	e7e1      	b.n	800d002 <_strtod_l+0x9a>
 800d03e:	2200      	movs	r2, #0
 800d040:	e7ee      	b.n	800d020 <_strtod_l+0xb8>
 800d042:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d044:	b13a      	cbz	r2, 800d056 <_strtod_l+0xee>
 800d046:	2135      	movs	r1, #53	; 0x35
 800d048:	a81a      	add	r0, sp, #104	; 0x68
 800d04a:	f002 fcb0 	bl	800f9ae <__copybits>
 800d04e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d050:	4620      	mov	r0, r4
 800d052:	f002 f86f 	bl	800f134 <_Bfree>
 800d056:	3f01      	subs	r7, #1
 800d058:	2f04      	cmp	r7, #4
 800d05a:	d806      	bhi.n	800d06a <_strtod_l+0x102>
 800d05c:	e8df f007 	tbb	[pc, r7]
 800d060:	1714030a 	.word	0x1714030a
 800d064:	0a          	.byte	0x0a
 800d065:	00          	.byte	0x00
 800d066:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800d06a:	0728      	lsls	r0, r5, #28
 800d06c:	d5c0      	bpl.n	800cff0 <_strtod_l+0x88>
 800d06e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d072:	e7bd      	b.n	800cff0 <_strtod_l+0x88>
 800d074:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800d078:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d07a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d07e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d082:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d086:	e7f0      	b.n	800d06a <_strtod_l+0x102>
 800d088:	f8df b180 	ldr.w	fp, [pc, #384]	; 800d20c <_strtod_l+0x2a4>
 800d08c:	e7ed      	b.n	800d06a <_strtod_l+0x102>
 800d08e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d092:	f04f 3aff 	mov.w	sl, #4294967295
 800d096:	e7e8      	b.n	800d06a <_strtod_l+0x102>
 800d098:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d09a:	1c5a      	adds	r2, r3, #1
 800d09c:	9217      	str	r2, [sp, #92]	; 0x5c
 800d09e:	785b      	ldrb	r3, [r3, #1]
 800d0a0:	2b30      	cmp	r3, #48	; 0x30
 800d0a2:	d0f9      	beq.n	800d098 <_strtod_l+0x130>
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d0a3      	beq.n	800cff0 <_strtod_l+0x88>
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	f04f 0900 	mov.w	r9, #0
 800d0ae:	9304      	str	r3, [sp, #16]
 800d0b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d0b2:	9308      	str	r3, [sp, #32]
 800d0b4:	f8cd 901c 	str.w	r9, [sp, #28]
 800d0b8:	464f      	mov	r7, r9
 800d0ba:	220a      	movs	r2, #10
 800d0bc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d0be:	7806      	ldrb	r6, [r0, #0]
 800d0c0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d0c4:	b2d9      	uxtb	r1, r3
 800d0c6:	2909      	cmp	r1, #9
 800d0c8:	d92a      	bls.n	800d120 <_strtod_l+0x1b8>
 800d0ca:	9905      	ldr	r1, [sp, #20]
 800d0cc:	462a      	mov	r2, r5
 800d0ce:	f002 ff1f 	bl	800ff10 <strncmp>
 800d0d2:	b398      	cbz	r0, 800d13c <_strtod_l+0x1d4>
 800d0d4:	2000      	movs	r0, #0
 800d0d6:	4632      	mov	r2, r6
 800d0d8:	463d      	mov	r5, r7
 800d0da:	9005      	str	r0, [sp, #20]
 800d0dc:	4603      	mov	r3, r0
 800d0de:	2a65      	cmp	r2, #101	; 0x65
 800d0e0:	d001      	beq.n	800d0e6 <_strtod_l+0x17e>
 800d0e2:	2a45      	cmp	r2, #69	; 0x45
 800d0e4:	d118      	bne.n	800d118 <_strtod_l+0x1b0>
 800d0e6:	b91d      	cbnz	r5, 800d0f0 <_strtod_l+0x188>
 800d0e8:	9a04      	ldr	r2, [sp, #16]
 800d0ea:	4302      	orrs	r2, r0
 800d0ec:	d09e      	beq.n	800d02c <_strtod_l+0xc4>
 800d0ee:	2500      	movs	r5, #0
 800d0f0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800d0f4:	f108 0201 	add.w	r2, r8, #1
 800d0f8:	9217      	str	r2, [sp, #92]	; 0x5c
 800d0fa:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d0fe:	2a2b      	cmp	r2, #43	; 0x2b
 800d100:	d075      	beq.n	800d1ee <_strtod_l+0x286>
 800d102:	2a2d      	cmp	r2, #45	; 0x2d
 800d104:	d07b      	beq.n	800d1fe <_strtod_l+0x296>
 800d106:	f04f 0c00 	mov.w	ip, #0
 800d10a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d10e:	2909      	cmp	r1, #9
 800d110:	f240 8082 	bls.w	800d218 <_strtod_l+0x2b0>
 800d114:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d118:	2600      	movs	r6, #0
 800d11a:	e09d      	b.n	800d258 <_strtod_l+0x2f0>
 800d11c:	2300      	movs	r3, #0
 800d11e:	e7c4      	b.n	800d0aa <_strtod_l+0x142>
 800d120:	2f08      	cmp	r7, #8
 800d122:	bfd8      	it	le
 800d124:	9907      	ldrle	r1, [sp, #28]
 800d126:	f100 0001 	add.w	r0, r0, #1
 800d12a:	bfda      	itte	le
 800d12c:	fb02 3301 	mlale	r3, r2, r1, r3
 800d130:	9307      	strle	r3, [sp, #28]
 800d132:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d136:	3701      	adds	r7, #1
 800d138:	9017      	str	r0, [sp, #92]	; 0x5c
 800d13a:	e7bf      	b.n	800d0bc <_strtod_l+0x154>
 800d13c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d13e:	195a      	adds	r2, r3, r5
 800d140:	9217      	str	r2, [sp, #92]	; 0x5c
 800d142:	5d5a      	ldrb	r2, [r3, r5]
 800d144:	2f00      	cmp	r7, #0
 800d146:	d037      	beq.n	800d1b8 <_strtod_l+0x250>
 800d148:	9005      	str	r0, [sp, #20]
 800d14a:	463d      	mov	r5, r7
 800d14c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d150:	2b09      	cmp	r3, #9
 800d152:	d912      	bls.n	800d17a <_strtod_l+0x212>
 800d154:	2301      	movs	r3, #1
 800d156:	e7c2      	b.n	800d0de <_strtod_l+0x176>
 800d158:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d15a:	1c5a      	adds	r2, r3, #1
 800d15c:	9217      	str	r2, [sp, #92]	; 0x5c
 800d15e:	785a      	ldrb	r2, [r3, #1]
 800d160:	3001      	adds	r0, #1
 800d162:	2a30      	cmp	r2, #48	; 0x30
 800d164:	d0f8      	beq.n	800d158 <_strtod_l+0x1f0>
 800d166:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d16a:	2b08      	cmp	r3, #8
 800d16c:	f200 84d9 	bhi.w	800db22 <_strtod_l+0xbba>
 800d170:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d172:	9005      	str	r0, [sp, #20]
 800d174:	2000      	movs	r0, #0
 800d176:	9308      	str	r3, [sp, #32]
 800d178:	4605      	mov	r5, r0
 800d17a:	3a30      	subs	r2, #48	; 0x30
 800d17c:	f100 0301 	add.w	r3, r0, #1
 800d180:	d014      	beq.n	800d1ac <_strtod_l+0x244>
 800d182:	9905      	ldr	r1, [sp, #20]
 800d184:	4419      	add	r1, r3
 800d186:	9105      	str	r1, [sp, #20]
 800d188:	462b      	mov	r3, r5
 800d18a:	eb00 0e05 	add.w	lr, r0, r5
 800d18e:	210a      	movs	r1, #10
 800d190:	4573      	cmp	r3, lr
 800d192:	d113      	bne.n	800d1bc <_strtod_l+0x254>
 800d194:	182b      	adds	r3, r5, r0
 800d196:	2b08      	cmp	r3, #8
 800d198:	f105 0501 	add.w	r5, r5, #1
 800d19c:	4405      	add	r5, r0
 800d19e:	dc1c      	bgt.n	800d1da <_strtod_l+0x272>
 800d1a0:	9907      	ldr	r1, [sp, #28]
 800d1a2:	230a      	movs	r3, #10
 800d1a4:	fb03 2301 	mla	r3, r3, r1, r2
 800d1a8:	9307      	str	r3, [sp, #28]
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d1ae:	1c51      	adds	r1, r2, #1
 800d1b0:	9117      	str	r1, [sp, #92]	; 0x5c
 800d1b2:	7852      	ldrb	r2, [r2, #1]
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	e7c9      	b.n	800d14c <_strtod_l+0x1e4>
 800d1b8:	4638      	mov	r0, r7
 800d1ba:	e7d2      	b.n	800d162 <_strtod_l+0x1fa>
 800d1bc:	2b08      	cmp	r3, #8
 800d1be:	dc04      	bgt.n	800d1ca <_strtod_l+0x262>
 800d1c0:	9e07      	ldr	r6, [sp, #28]
 800d1c2:	434e      	muls	r6, r1
 800d1c4:	9607      	str	r6, [sp, #28]
 800d1c6:	3301      	adds	r3, #1
 800d1c8:	e7e2      	b.n	800d190 <_strtod_l+0x228>
 800d1ca:	f103 0c01 	add.w	ip, r3, #1
 800d1ce:	f1bc 0f10 	cmp.w	ip, #16
 800d1d2:	bfd8      	it	le
 800d1d4:	fb01 f909 	mulle.w	r9, r1, r9
 800d1d8:	e7f5      	b.n	800d1c6 <_strtod_l+0x25e>
 800d1da:	2d10      	cmp	r5, #16
 800d1dc:	bfdc      	itt	le
 800d1de:	230a      	movle	r3, #10
 800d1e0:	fb03 2909 	mlale	r9, r3, r9, r2
 800d1e4:	e7e1      	b.n	800d1aa <_strtod_l+0x242>
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	9305      	str	r3, [sp, #20]
 800d1ea:	2301      	movs	r3, #1
 800d1ec:	e77c      	b.n	800d0e8 <_strtod_l+0x180>
 800d1ee:	f04f 0c00 	mov.w	ip, #0
 800d1f2:	f108 0202 	add.w	r2, r8, #2
 800d1f6:	9217      	str	r2, [sp, #92]	; 0x5c
 800d1f8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d1fc:	e785      	b.n	800d10a <_strtod_l+0x1a2>
 800d1fe:	f04f 0c01 	mov.w	ip, #1
 800d202:	e7f6      	b.n	800d1f2 <_strtod_l+0x28a>
 800d204:	080128e8 	.word	0x080128e8
 800d208:	080126a0 	.word	0x080126a0
 800d20c:	7ff00000 	.word	0x7ff00000
 800d210:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d212:	1c51      	adds	r1, r2, #1
 800d214:	9117      	str	r1, [sp, #92]	; 0x5c
 800d216:	7852      	ldrb	r2, [r2, #1]
 800d218:	2a30      	cmp	r2, #48	; 0x30
 800d21a:	d0f9      	beq.n	800d210 <_strtod_l+0x2a8>
 800d21c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d220:	2908      	cmp	r1, #8
 800d222:	f63f af79 	bhi.w	800d118 <_strtod_l+0x1b0>
 800d226:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d22a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d22c:	9206      	str	r2, [sp, #24]
 800d22e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d230:	1c51      	adds	r1, r2, #1
 800d232:	9117      	str	r1, [sp, #92]	; 0x5c
 800d234:	7852      	ldrb	r2, [r2, #1]
 800d236:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800d23a:	2e09      	cmp	r6, #9
 800d23c:	d937      	bls.n	800d2ae <_strtod_l+0x346>
 800d23e:	9e06      	ldr	r6, [sp, #24]
 800d240:	1b89      	subs	r1, r1, r6
 800d242:	2908      	cmp	r1, #8
 800d244:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d248:	dc02      	bgt.n	800d250 <_strtod_l+0x2e8>
 800d24a:	4576      	cmp	r6, lr
 800d24c:	bfa8      	it	ge
 800d24e:	4676      	movge	r6, lr
 800d250:	f1bc 0f00 	cmp.w	ip, #0
 800d254:	d000      	beq.n	800d258 <_strtod_l+0x2f0>
 800d256:	4276      	negs	r6, r6
 800d258:	2d00      	cmp	r5, #0
 800d25a:	d14d      	bne.n	800d2f8 <_strtod_l+0x390>
 800d25c:	9904      	ldr	r1, [sp, #16]
 800d25e:	4301      	orrs	r1, r0
 800d260:	f47f aec6 	bne.w	800cff0 <_strtod_l+0x88>
 800d264:	2b00      	cmp	r3, #0
 800d266:	f47f aee1 	bne.w	800d02c <_strtod_l+0xc4>
 800d26a:	2a69      	cmp	r2, #105	; 0x69
 800d26c:	d027      	beq.n	800d2be <_strtod_l+0x356>
 800d26e:	dc24      	bgt.n	800d2ba <_strtod_l+0x352>
 800d270:	2a49      	cmp	r2, #73	; 0x49
 800d272:	d024      	beq.n	800d2be <_strtod_l+0x356>
 800d274:	2a4e      	cmp	r2, #78	; 0x4e
 800d276:	f47f aed9 	bne.w	800d02c <_strtod_l+0xc4>
 800d27a:	499f      	ldr	r1, [pc, #636]	; (800d4f8 <_strtod_l+0x590>)
 800d27c:	a817      	add	r0, sp, #92	; 0x5c
 800d27e:	f001 fe3d 	bl	800eefc <__match>
 800d282:	2800      	cmp	r0, #0
 800d284:	f43f aed2 	beq.w	800d02c <_strtod_l+0xc4>
 800d288:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d28a:	781b      	ldrb	r3, [r3, #0]
 800d28c:	2b28      	cmp	r3, #40	; 0x28
 800d28e:	d12d      	bne.n	800d2ec <_strtod_l+0x384>
 800d290:	499a      	ldr	r1, [pc, #616]	; (800d4fc <_strtod_l+0x594>)
 800d292:	aa1a      	add	r2, sp, #104	; 0x68
 800d294:	a817      	add	r0, sp, #92	; 0x5c
 800d296:	f001 fe45 	bl	800ef24 <__hexnan>
 800d29a:	2805      	cmp	r0, #5
 800d29c:	d126      	bne.n	800d2ec <_strtod_l+0x384>
 800d29e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d2a0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800d2a4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d2a8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d2ac:	e6a0      	b.n	800cff0 <_strtod_l+0x88>
 800d2ae:	210a      	movs	r1, #10
 800d2b0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800d2b4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d2b8:	e7b9      	b.n	800d22e <_strtod_l+0x2c6>
 800d2ba:	2a6e      	cmp	r2, #110	; 0x6e
 800d2bc:	e7db      	b.n	800d276 <_strtod_l+0x30e>
 800d2be:	4990      	ldr	r1, [pc, #576]	; (800d500 <_strtod_l+0x598>)
 800d2c0:	a817      	add	r0, sp, #92	; 0x5c
 800d2c2:	f001 fe1b 	bl	800eefc <__match>
 800d2c6:	2800      	cmp	r0, #0
 800d2c8:	f43f aeb0 	beq.w	800d02c <_strtod_l+0xc4>
 800d2cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d2ce:	498d      	ldr	r1, [pc, #564]	; (800d504 <_strtod_l+0x59c>)
 800d2d0:	3b01      	subs	r3, #1
 800d2d2:	a817      	add	r0, sp, #92	; 0x5c
 800d2d4:	9317      	str	r3, [sp, #92]	; 0x5c
 800d2d6:	f001 fe11 	bl	800eefc <__match>
 800d2da:	b910      	cbnz	r0, 800d2e2 <_strtod_l+0x37a>
 800d2dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d2de:	3301      	adds	r3, #1
 800d2e0:	9317      	str	r3, [sp, #92]	; 0x5c
 800d2e2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800d514 <_strtod_l+0x5ac>
 800d2e6:	f04f 0a00 	mov.w	sl, #0
 800d2ea:	e681      	b.n	800cff0 <_strtod_l+0x88>
 800d2ec:	4886      	ldr	r0, [pc, #536]	; (800d508 <_strtod_l+0x5a0>)
 800d2ee:	f002 fdf7 	bl	800fee0 <nan>
 800d2f2:	ec5b ab10 	vmov	sl, fp, d0
 800d2f6:	e67b      	b.n	800cff0 <_strtod_l+0x88>
 800d2f8:	9b05      	ldr	r3, [sp, #20]
 800d2fa:	9807      	ldr	r0, [sp, #28]
 800d2fc:	1af3      	subs	r3, r6, r3
 800d2fe:	2f00      	cmp	r7, #0
 800d300:	bf08      	it	eq
 800d302:	462f      	moveq	r7, r5
 800d304:	2d10      	cmp	r5, #16
 800d306:	9306      	str	r3, [sp, #24]
 800d308:	46a8      	mov	r8, r5
 800d30a:	bfa8      	it	ge
 800d30c:	f04f 0810 	movge.w	r8, #16
 800d310:	f7f3 f908 	bl	8000524 <__aeabi_ui2d>
 800d314:	2d09      	cmp	r5, #9
 800d316:	4682      	mov	sl, r0
 800d318:	468b      	mov	fp, r1
 800d31a:	dd13      	ble.n	800d344 <_strtod_l+0x3dc>
 800d31c:	4b7b      	ldr	r3, [pc, #492]	; (800d50c <_strtod_l+0x5a4>)
 800d31e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d322:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d326:	f7f3 f977 	bl	8000618 <__aeabi_dmul>
 800d32a:	4682      	mov	sl, r0
 800d32c:	4648      	mov	r0, r9
 800d32e:	468b      	mov	fp, r1
 800d330:	f7f3 f8f8 	bl	8000524 <__aeabi_ui2d>
 800d334:	4602      	mov	r2, r0
 800d336:	460b      	mov	r3, r1
 800d338:	4650      	mov	r0, sl
 800d33a:	4659      	mov	r1, fp
 800d33c:	f7f2 ffb6 	bl	80002ac <__adddf3>
 800d340:	4682      	mov	sl, r0
 800d342:	468b      	mov	fp, r1
 800d344:	2d0f      	cmp	r5, #15
 800d346:	dc38      	bgt.n	800d3ba <_strtod_l+0x452>
 800d348:	9b06      	ldr	r3, [sp, #24]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	f43f ae50 	beq.w	800cff0 <_strtod_l+0x88>
 800d350:	dd24      	ble.n	800d39c <_strtod_l+0x434>
 800d352:	2b16      	cmp	r3, #22
 800d354:	dc0b      	bgt.n	800d36e <_strtod_l+0x406>
 800d356:	496d      	ldr	r1, [pc, #436]	; (800d50c <_strtod_l+0x5a4>)
 800d358:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d35c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d360:	4652      	mov	r2, sl
 800d362:	465b      	mov	r3, fp
 800d364:	f7f3 f958 	bl	8000618 <__aeabi_dmul>
 800d368:	4682      	mov	sl, r0
 800d36a:	468b      	mov	fp, r1
 800d36c:	e640      	b.n	800cff0 <_strtod_l+0x88>
 800d36e:	9a06      	ldr	r2, [sp, #24]
 800d370:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d374:	4293      	cmp	r3, r2
 800d376:	db20      	blt.n	800d3ba <_strtod_l+0x452>
 800d378:	4c64      	ldr	r4, [pc, #400]	; (800d50c <_strtod_l+0x5a4>)
 800d37a:	f1c5 050f 	rsb	r5, r5, #15
 800d37e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d382:	4652      	mov	r2, sl
 800d384:	465b      	mov	r3, fp
 800d386:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d38a:	f7f3 f945 	bl	8000618 <__aeabi_dmul>
 800d38e:	9b06      	ldr	r3, [sp, #24]
 800d390:	1b5d      	subs	r5, r3, r5
 800d392:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d396:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d39a:	e7e3      	b.n	800d364 <_strtod_l+0x3fc>
 800d39c:	9b06      	ldr	r3, [sp, #24]
 800d39e:	3316      	adds	r3, #22
 800d3a0:	db0b      	blt.n	800d3ba <_strtod_l+0x452>
 800d3a2:	9b05      	ldr	r3, [sp, #20]
 800d3a4:	1b9e      	subs	r6, r3, r6
 800d3a6:	4b59      	ldr	r3, [pc, #356]	; (800d50c <_strtod_l+0x5a4>)
 800d3a8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d3ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d3b0:	4650      	mov	r0, sl
 800d3b2:	4659      	mov	r1, fp
 800d3b4:	f7f3 fa5a 	bl	800086c <__aeabi_ddiv>
 800d3b8:	e7d6      	b.n	800d368 <_strtod_l+0x400>
 800d3ba:	9b06      	ldr	r3, [sp, #24]
 800d3bc:	eba5 0808 	sub.w	r8, r5, r8
 800d3c0:	4498      	add	r8, r3
 800d3c2:	f1b8 0f00 	cmp.w	r8, #0
 800d3c6:	dd74      	ble.n	800d4b2 <_strtod_l+0x54a>
 800d3c8:	f018 030f 	ands.w	r3, r8, #15
 800d3cc:	d00a      	beq.n	800d3e4 <_strtod_l+0x47c>
 800d3ce:	494f      	ldr	r1, [pc, #316]	; (800d50c <_strtod_l+0x5a4>)
 800d3d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d3d4:	4652      	mov	r2, sl
 800d3d6:	465b      	mov	r3, fp
 800d3d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d3dc:	f7f3 f91c 	bl	8000618 <__aeabi_dmul>
 800d3e0:	4682      	mov	sl, r0
 800d3e2:	468b      	mov	fp, r1
 800d3e4:	f038 080f 	bics.w	r8, r8, #15
 800d3e8:	d04f      	beq.n	800d48a <_strtod_l+0x522>
 800d3ea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d3ee:	dd22      	ble.n	800d436 <_strtod_l+0x4ce>
 800d3f0:	2500      	movs	r5, #0
 800d3f2:	462e      	mov	r6, r5
 800d3f4:	9507      	str	r5, [sp, #28]
 800d3f6:	9505      	str	r5, [sp, #20]
 800d3f8:	2322      	movs	r3, #34	; 0x22
 800d3fa:	f8df b118 	ldr.w	fp, [pc, #280]	; 800d514 <_strtod_l+0x5ac>
 800d3fe:	6023      	str	r3, [r4, #0]
 800d400:	f04f 0a00 	mov.w	sl, #0
 800d404:	9b07      	ldr	r3, [sp, #28]
 800d406:	2b00      	cmp	r3, #0
 800d408:	f43f adf2 	beq.w	800cff0 <_strtod_l+0x88>
 800d40c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d40e:	4620      	mov	r0, r4
 800d410:	f001 fe90 	bl	800f134 <_Bfree>
 800d414:	9905      	ldr	r1, [sp, #20]
 800d416:	4620      	mov	r0, r4
 800d418:	f001 fe8c 	bl	800f134 <_Bfree>
 800d41c:	4631      	mov	r1, r6
 800d41e:	4620      	mov	r0, r4
 800d420:	f001 fe88 	bl	800f134 <_Bfree>
 800d424:	9907      	ldr	r1, [sp, #28]
 800d426:	4620      	mov	r0, r4
 800d428:	f001 fe84 	bl	800f134 <_Bfree>
 800d42c:	4629      	mov	r1, r5
 800d42e:	4620      	mov	r0, r4
 800d430:	f001 fe80 	bl	800f134 <_Bfree>
 800d434:	e5dc      	b.n	800cff0 <_strtod_l+0x88>
 800d436:	4b36      	ldr	r3, [pc, #216]	; (800d510 <_strtod_l+0x5a8>)
 800d438:	9304      	str	r3, [sp, #16]
 800d43a:	2300      	movs	r3, #0
 800d43c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d440:	4650      	mov	r0, sl
 800d442:	4659      	mov	r1, fp
 800d444:	4699      	mov	r9, r3
 800d446:	f1b8 0f01 	cmp.w	r8, #1
 800d44a:	dc21      	bgt.n	800d490 <_strtod_l+0x528>
 800d44c:	b10b      	cbz	r3, 800d452 <_strtod_l+0x4ea>
 800d44e:	4682      	mov	sl, r0
 800d450:	468b      	mov	fp, r1
 800d452:	4b2f      	ldr	r3, [pc, #188]	; (800d510 <_strtod_l+0x5a8>)
 800d454:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d458:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d45c:	4652      	mov	r2, sl
 800d45e:	465b      	mov	r3, fp
 800d460:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d464:	f7f3 f8d8 	bl	8000618 <__aeabi_dmul>
 800d468:	4b2a      	ldr	r3, [pc, #168]	; (800d514 <_strtod_l+0x5ac>)
 800d46a:	460a      	mov	r2, r1
 800d46c:	400b      	ands	r3, r1
 800d46e:	492a      	ldr	r1, [pc, #168]	; (800d518 <_strtod_l+0x5b0>)
 800d470:	428b      	cmp	r3, r1
 800d472:	4682      	mov	sl, r0
 800d474:	d8bc      	bhi.n	800d3f0 <_strtod_l+0x488>
 800d476:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d47a:	428b      	cmp	r3, r1
 800d47c:	bf86      	itte	hi
 800d47e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800d51c <_strtod_l+0x5b4>
 800d482:	f04f 3aff 	movhi.w	sl, #4294967295
 800d486:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d48a:	2300      	movs	r3, #0
 800d48c:	9304      	str	r3, [sp, #16]
 800d48e:	e084      	b.n	800d59a <_strtod_l+0x632>
 800d490:	f018 0f01 	tst.w	r8, #1
 800d494:	d005      	beq.n	800d4a2 <_strtod_l+0x53a>
 800d496:	9b04      	ldr	r3, [sp, #16]
 800d498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d49c:	f7f3 f8bc 	bl	8000618 <__aeabi_dmul>
 800d4a0:	2301      	movs	r3, #1
 800d4a2:	9a04      	ldr	r2, [sp, #16]
 800d4a4:	3208      	adds	r2, #8
 800d4a6:	f109 0901 	add.w	r9, r9, #1
 800d4aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d4ae:	9204      	str	r2, [sp, #16]
 800d4b0:	e7c9      	b.n	800d446 <_strtod_l+0x4de>
 800d4b2:	d0ea      	beq.n	800d48a <_strtod_l+0x522>
 800d4b4:	f1c8 0800 	rsb	r8, r8, #0
 800d4b8:	f018 020f 	ands.w	r2, r8, #15
 800d4bc:	d00a      	beq.n	800d4d4 <_strtod_l+0x56c>
 800d4be:	4b13      	ldr	r3, [pc, #76]	; (800d50c <_strtod_l+0x5a4>)
 800d4c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d4c4:	4650      	mov	r0, sl
 800d4c6:	4659      	mov	r1, fp
 800d4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4cc:	f7f3 f9ce 	bl	800086c <__aeabi_ddiv>
 800d4d0:	4682      	mov	sl, r0
 800d4d2:	468b      	mov	fp, r1
 800d4d4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d4d8:	d0d7      	beq.n	800d48a <_strtod_l+0x522>
 800d4da:	f1b8 0f1f 	cmp.w	r8, #31
 800d4de:	dd1f      	ble.n	800d520 <_strtod_l+0x5b8>
 800d4e0:	2500      	movs	r5, #0
 800d4e2:	462e      	mov	r6, r5
 800d4e4:	9507      	str	r5, [sp, #28]
 800d4e6:	9505      	str	r5, [sp, #20]
 800d4e8:	2322      	movs	r3, #34	; 0x22
 800d4ea:	f04f 0a00 	mov.w	sl, #0
 800d4ee:	f04f 0b00 	mov.w	fp, #0
 800d4f2:	6023      	str	r3, [r4, #0]
 800d4f4:	e786      	b.n	800d404 <_strtod_l+0x49c>
 800d4f6:	bf00      	nop
 800d4f8:	08012671 	.word	0x08012671
 800d4fc:	080126b4 	.word	0x080126b4
 800d500:	08012669 	.word	0x08012669
 800d504:	080127f4 	.word	0x080127f4
 800d508:	08012aa0 	.word	0x08012aa0
 800d50c:	08012980 	.word	0x08012980
 800d510:	08012958 	.word	0x08012958
 800d514:	7ff00000 	.word	0x7ff00000
 800d518:	7ca00000 	.word	0x7ca00000
 800d51c:	7fefffff 	.word	0x7fefffff
 800d520:	f018 0310 	ands.w	r3, r8, #16
 800d524:	bf18      	it	ne
 800d526:	236a      	movne	r3, #106	; 0x6a
 800d528:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800d8d8 <_strtod_l+0x970>
 800d52c:	9304      	str	r3, [sp, #16]
 800d52e:	4650      	mov	r0, sl
 800d530:	4659      	mov	r1, fp
 800d532:	2300      	movs	r3, #0
 800d534:	f018 0f01 	tst.w	r8, #1
 800d538:	d004      	beq.n	800d544 <_strtod_l+0x5dc>
 800d53a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d53e:	f7f3 f86b 	bl	8000618 <__aeabi_dmul>
 800d542:	2301      	movs	r3, #1
 800d544:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d548:	f109 0908 	add.w	r9, r9, #8
 800d54c:	d1f2      	bne.n	800d534 <_strtod_l+0x5cc>
 800d54e:	b10b      	cbz	r3, 800d554 <_strtod_l+0x5ec>
 800d550:	4682      	mov	sl, r0
 800d552:	468b      	mov	fp, r1
 800d554:	9b04      	ldr	r3, [sp, #16]
 800d556:	b1c3      	cbz	r3, 800d58a <_strtod_l+0x622>
 800d558:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d55c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d560:	2b00      	cmp	r3, #0
 800d562:	4659      	mov	r1, fp
 800d564:	dd11      	ble.n	800d58a <_strtod_l+0x622>
 800d566:	2b1f      	cmp	r3, #31
 800d568:	f340 8124 	ble.w	800d7b4 <_strtod_l+0x84c>
 800d56c:	2b34      	cmp	r3, #52	; 0x34
 800d56e:	bfde      	ittt	le
 800d570:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d574:	f04f 33ff 	movle.w	r3, #4294967295
 800d578:	fa03 f202 	lslle.w	r2, r3, r2
 800d57c:	f04f 0a00 	mov.w	sl, #0
 800d580:	bfcc      	ite	gt
 800d582:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d586:	ea02 0b01 	andle.w	fp, r2, r1
 800d58a:	2200      	movs	r2, #0
 800d58c:	2300      	movs	r3, #0
 800d58e:	4650      	mov	r0, sl
 800d590:	4659      	mov	r1, fp
 800d592:	f7f3 faa9 	bl	8000ae8 <__aeabi_dcmpeq>
 800d596:	2800      	cmp	r0, #0
 800d598:	d1a2      	bne.n	800d4e0 <_strtod_l+0x578>
 800d59a:	9b07      	ldr	r3, [sp, #28]
 800d59c:	9300      	str	r3, [sp, #0]
 800d59e:	9908      	ldr	r1, [sp, #32]
 800d5a0:	462b      	mov	r3, r5
 800d5a2:	463a      	mov	r2, r7
 800d5a4:	4620      	mov	r0, r4
 800d5a6:	f001 fe2d 	bl	800f204 <__s2b>
 800d5aa:	9007      	str	r0, [sp, #28]
 800d5ac:	2800      	cmp	r0, #0
 800d5ae:	f43f af1f 	beq.w	800d3f0 <_strtod_l+0x488>
 800d5b2:	9b05      	ldr	r3, [sp, #20]
 800d5b4:	1b9e      	subs	r6, r3, r6
 800d5b6:	9b06      	ldr	r3, [sp, #24]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	bfb4      	ite	lt
 800d5bc:	4633      	movlt	r3, r6
 800d5be:	2300      	movge	r3, #0
 800d5c0:	930c      	str	r3, [sp, #48]	; 0x30
 800d5c2:	9b06      	ldr	r3, [sp, #24]
 800d5c4:	2500      	movs	r5, #0
 800d5c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d5ca:	9312      	str	r3, [sp, #72]	; 0x48
 800d5cc:	462e      	mov	r6, r5
 800d5ce:	9b07      	ldr	r3, [sp, #28]
 800d5d0:	4620      	mov	r0, r4
 800d5d2:	6859      	ldr	r1, [r3, #4]
 800d5d4:	f001 fd6e 	bl	800f0b4 <_Balloc>
 800d5d8:	9005      	str	r0, [sp, #20]
 800d5da:	2800      	cmp	r0, #0
 800d5dc:	f43f af0c 	beq.w	800d3f8 <_strtod_l+0x490>
 800d5e0:	9b07      	ldr	r3, [sp, #28]
 800d5e2:	691a      	ldr	r2, [r3, #16]
 800d5e4:	3202      	adds	r2, #2
 800d5e6:	f103 010c 	add.w	r1, r3, #12
 800d5ea:	0092      	lsls	r2, r2, #2
 800d5ec:	300c      	adds	r0, #12
 800d5ee:	f001 fd53 	bl	800f098 <memcpy>
 800d5f2:	ec4b ab10 	vmov	d0, sl, fp
 800d5f6:	aa1a      	add	r2, sp, #104	; 0x68
 800d5f8:	a919      	add	r1, sp, #100	; 0x64
 800d5fa:	4620      	mov	r0, r4
 800d5fc:	f002 f948 	bl	800f890 <__d2b>
 800d600:	ec4b ab18 	vmov	d8, sl, fp
 800d604:	9018      	str	r0, [sp, #96]	; 0x60
 800d606:	2800      	cmp	r0, #0
 800d608:	f43f aef6 	beq.w	800d3f8 <_strtod_l+0x490>
 800d60c:	2101      	movs	r1, #1
 800d60e:	4620      	mov	r0, r4
 800d610:	f001 fe92 	bl	800f338 <__i2b>
 800d614:	4606      	mov	r6, r0
 800d616:	2800      	cmp	r0, #0
 800d618:	f43f aeee 	beq.w	800d3f8 <_strtod_l+0x490>
 800d61c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d61e:	9904      	ldr	r1, [sp, #16]
 800d620:	2b00      	cmp	r3, #0
 800d622:	bfab      	itete	ge
 800d624:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800d626:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800d628:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d62a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800d62e:	bfac      	ite	ge
 800d630:	eb03 0902 	addge.w	r9, r3, r2
 800d634:	1ad7      	sublt	r7, r2, r3
 800d636:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d638:	eba3 0801 	sub.w	r8, r3, r1
 800d63c:	4490      	add	r8, r2
 800d63e:	4ba1      	ldr	r3, [pc, #644]	; (800d8c4 <_strtod_l+0x95c>)
 800d640:	f108 38ff 	add.w	r8, r8, #4294967295
 800d644:	4598      	cmp	r8, r3
 800d646:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d64a:	f280 80c7 	bge.w	800d7dc <_strtod_l+0x874>
 800d64e:	eba3 0308 	sub.w	r3, r3, r8
 800d652:	2b1f      	cmp	r3, #31
 800d654:	eba2 0203 	sub.w	r2, r2, r3
 800d658:	f04f 0101 	mov.w	r1, #1
 800d65c:	f300 80b1 	bgt.w	800d7c2 <_strtod_l+0x85a>
 800d660:	fa01 f303 	lsl.w	r3, r1, r3
 800d664:	930d      	str	r3, [sp, #52]	; 0x34
 800d666:	2300      	movs	r3, #0
 800d668:	9308      	str	r3, [sp, #32]
 800d66a:	eb09 0802 	add.w	r8, r9, r2
 800d66e:	9b04      	ldr	r3, [sp, #16]
 800d670:	45c1      	cmp	r9, r8
 800d672:	4417      	add	r7, r2
 800d674:	441f      	add	r7, r3
 800d676:	464b      	mov	r3, r9
 800d678:	bfa8      	it	ge
 800d67a:	4643      	movge	r3, r8
 800d67c:	42bb      	cmp	r3, r7
 800d67e:	bfa8      	it	ge
 800d680:	463b      	movge	r3, r7
 800d682:	2b00      	cmp	r3, #0
 800d684:	bfc2      	ittt	gt
 800d686:	eba8 0803 	subgt.w	r8, r8, r3
 800d68a:	1aff      	subgt	r7, r7, r3
 800d68c:	eba9 0903 	subgt.w	r9, r9, r3
 800d690:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d692:	2b00      	cmp	r3, #0
 800d694:	dd17      	ble.n	800d6c6 <_strtod_l+0x75e>
 800d696:	4631      	mov	r1, r6
 800d698:	461a      	mov	r2, r3
 800d69a:	4620      	mov	r0, r4
 800d69c:	f001 ff0c 	bl	800f4b8 <__pow5mult>
 800d6a0:	4606      	mov	r6, r0
 800d6a2:	2800      	cmp	r0, #0
 800d6a4:	f43f aea8 	beq.w	800d3f8 <_strtod_l+0x490>
 800d6a8:	4601      	mov	r1, r0
 800d6aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d6ac:	4620      	mov	r0, r4
 800d6ae:	f001 fe59 	bl	800f364 <__multiply>
 800d6b2:	900b      	str	r0, [sp, #44]	; 0x2c
 800d6b4:	2800      	cmp	r0, #0
 800d6b6:	f43f ae9f 	beq.w	800d3f8 <_strtod_l+0x490>
 800d6ba:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d6bc:	4620      	mov	r0, r4
 800d6be:	f001 fd39 	bl	800f134 <_Bfree>
 800d6c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6c4:	9318      	str	r3, [sp, #96]	; 0x60
 800d6c6:	f1b8 0f00 	cmp.w	r8, #0
 800d6ca:	f300 808c 	bgt.w	800d7e6 <_strtod_l+0x87e>
 800d6ce:	9b06      	ldr	r3, [sp, #24]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	dd08      	ble.n	800d6e6 <_strtod_l+0x77e>
 800d6d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d6d6:	9905      	ldr	r1, [sp, #20]
 800d6d8:	4620      	mov	r0, r4
 800d6da:	f001 feed 	bl	800f4b8 <__pow5mult>
 800d6de:	9005      	str	r0, [sp, #20]
 800d6e0:	2800      	cmp	r0, #0
 800d6e2:	f43f ae89 	beq.w	800d3f8 <_strtod_l+0x490>
 800d6e6:	2f00      	cmp	r7, #0
 800d6e8:	dd08      	ble.n	800d6fc <_strtod_l+0x794>
 800d6ea:	9905      	ldr	r1, [sp, #20]
 800d6ec:	463a      	mov	r2, r7
 800d6ee:	4620      	mov	r0, r4
 800d6f0:	f001 ff3c 	bl	800f56c <__lshift>
 800d6f4:	9005      	str	r0, [sp, #20]
 800d6f6:	2800      	cmp	r0, #0
 800d6f8:	f43f ae7e 	beq.w	800d3f8 <_strtod_l+0x490>
 800d6fc:	f1b9 0f00 	cmp.w	r9, #0
 800d700:	dd08      	ble.n	800d714 <_strtod_l+0x7ac>
 800d702:	4631      	mov	r1, r6
 800d704:	464a      	mov	r2, r9
 800d706:	4620      	mov	r0, r4
 800d708:	f001 ff30 	bl	800f56c <__lshift>
 800d70c:	4606      	mov	r6, r0
 800d70e:	2800      	cmp	r0, #0
 800d710:	f43f ae72 	beq.w	800d3f8 <_strtod_l+0x490>
 800d714:	9a05      	ldr	r2, [sp, #20]
 800d716:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d718:	4620      	mov	r0, r4
 800d71a:	f001 ffb3 	bl	800f684 <__mdiff>
 800d71e:	4605      	mov	r5, r0
 800d720:	2800      	cmp	r0, #0
 800d722:	f43f ae69 	beq.w	800d3f8 <_strtod_l+0x490>
 800d726:	68c3      	ldr	r3, [r0, #12]
 800d728:	930b      	str	r3, [sp, #44]	; 0x2c
 800d72a:	2300      	movs	r3, #0
 800d72c:	60c3      	str	r3, [r0, #12]
 800d72e:	4631      	mov	r1, r6
 800d730:	f001 ff8c 	bl	800f64c <__mcmp>
 800d734:	2800      	cmp	r0, #0
 800d736:	da60      	bge.n	800d7fa <_strtod_l+0x892>
 800d738:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d73a:	ea53 030a 	orrs.w	r3, r3, sl
 800d73e:	f040 8082 	bne.w	800d846 <_strtod_l+0x8de>
 800d742:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d746:	2b00      	cmp	r3, #0
 800d748:	d17d      	bne.n	800d846 <_strtod_l+0x8de>
 800d74a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d74e:	0d1b      	lsrs	r3, r3, #20
 800d750:	051b      	lsls	r3, r3, #20
 800d752:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d756:	d976      	bls.n	800d846 <_strtod_l+0x8de>
 800d758:	696b      	ldr	r3, [r5, #20]
 800d75a:	b913      	cbnz	r3, 800d762 <_strtod_l+0x7fa>
 800d75c:	692b      	ldr	r3, [r5, #16]
 800d75e:	2b01      	cmp	r3, #1
 800d760:	dd71      	ble.n	800d846 <_strtod_l+0x8de>
 800d762:	4629      	mov	r1, r5
 800d764:	2201      	movs	r2, #1
 800d766:	4620      	mov	r0, r4
 800d768:	f001 ff00 	bl	800f56c <__lshift>
 800d76c:	4631      	mov	r1, r6
 800d76e:	4605      	mov	r5, r0
 800d770:	f001 ff6c 	bl	800f64c <__mcmp>
 800d774:	2800      	cmp	r0, #0
 800d776:	dd66      	ble.n	800d846 <_strtod_l+0x8de>
 800d778:	9904      	ldr	r1, [sp, #16]
 800d77a:	4a53      	ldr	r2, [pc, #332]	; (800d8c8 <_strtod_l+0x960>)
 800d77c:	465b      	mov	r3, fp
 800d77e:	2900      	cmp	r1, #0
 800d780:	f000 8081 	beq.w	800d886 <_strtod_l+0x91e>
 800d784:	ea02 010b 	and.w	r1, r2, fp
 800d788:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d78c:	dc7b      	bgt.n	800d886 <_strtod_l+0x91e>
 800d78e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d792:	f77f aea9 	ble.w	800d4e8 <_strtod_l+0x580>
 800d796:	4b4d      	ldr	r3, [pc, #308]	; (800d8cc <_strtod_l+0x964>)
 800d798:	4650      	mov	r0, sl
 800d79a:	4659      	mov	r1, fp
 800d79c:	2200      	movs	r2, #0
 800d79e:	f7f2 ff3b 	bl	8000618 <__aeabi_dmul>
 800d7a2:	460b      	mov	r3, r1
 800d7a4:	4303      	orrs	r3, r0
 800d7a6:	bf08      	it	eq
 800d7a8:	2322      	moveq	r3, #34	; 0x22
 800d7aa:	4682      	mov	sl, r0
 800d7ac:	468b      	mov	fp, r1
 800d7ae:	bf08      	it	eq
 800d7b0:	6023      	streq	r3, [r4, #0]
 800d7b2:	e62b      	b.n	800d40c <_strtod_l+0x4a4>
 800d7b4:	f04f 32ff 	mov.w	r2, #4294967295
 800d7b8:	fa02 f303 	lsl.w	r3, r2, r3
 800d7bc:	ea03 0a0a 	and.w	sl, r3, sl
 800d7c0:	e6e3      	b.n	800d58a <_strtod_l+0x622>
 800d7c2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d7c6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d7ca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d7ce:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d7d2:	fa01 f308 	lsl.w	r3, r1, r8
 800d7d6:	9308      	str	r3, [sp, #32]
 800d7d8:	910d      	str	r1, [sp, #52]	; 0x34
 800d7da:	e746      	b.n	800d66a <_strtod_l+0x702>
 800d7dc:	2300      	movs	r3, #0
 800d7de:	9308      	str	r3, [sp, #32]
 800d7e0:	2301      	movs	r3, #1
 800d7e2:	930d      	str	r3, [sp, #52]	; 0x34
 800d7e4:	e741      	b.n	800d66a <_strtod_l+0x702>
 800d7e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d7e8:	4642      	mov	r2, r8
 800d7ea:	4620      	mov	r0, r4
 800d7ec:	f001 febe 	bl	800f56c <__lshift>
 800d7f0:	9018      	str	r0, [sp, #96]	; 0x60
 800d7f2:	2800      	cmp	r0, #0
 800d7f4:	f47f af6b 	bne.w	800d6ce <_strtod_l+0x766>
 800d7f8:	e5fe      	b.n	800d3f8 <_strtod_l+0x490>
 800d7fa:	465f      	mov	r7, fp
 800d7fc:	d16e      	bne.n	800d8dc <_strtod_l+0x974>
 800d7fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d800:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d804:	b342      	cbz	r2, 800d858 <_strtod_l+0x8f0>
 800d806:	4a32      	ldr	r2, [pc, #200]	; (800d8d0 <_strtod_l+0x968>)
 800d808:	4293      	cmp	r3, r2
 800d80a:	d128      	bne.n	800d85e <_strtod_l+0x8f6>
 800d80c:	9b04      	ldr	r3, [sp, #16]
 800d80e:	4651      	mov	r1, sl
 800d810:	b1eb      	cbz	r3, 800d84e <_strtod_l+0x8e6>
 800d812:	4b2d      	ldr	r3, [pc, #180]	; (800d8c8 <_strtod_l+0x960>)
 800d814:	403b      	ands	r3, r7
 800d816:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d81a:	f04f 32ff 	mov.w	r2, #4294967295
 800d81e:	d819      	bhi.n	800d854 <_strtod_l+0x8ec>
 800d820:	0d1b      	lsrs	r3, r3, #20
 800d822:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d826:	fa02 f303 	lsl.w	r3, r2, r3
 800d82a:	4299      	cmp	r1, r3
 800d82c:	d117      	bne.n	800d85e <_strtod_l+0x8f6>
 800d82e:	4b29      	ldr	r3, [pc, #164]	; (800d8d4 <_strtod_l+0x96c>)
 800d830:	429f      	cmp	r7, r3
 800d832:	d102      	bne.n	800d83a <_strtod_l+0x8d2>
 800d834:	3101      	adds	r1, #1
 800d836:	f43f addf 	beq.w	800d3f8 <_strtod_l+0x490>
 800d83a:	4b23      	ldr	r3, [pc, #140]	; (800d8c8 <_strtod_l+0x960>)
 800d83c:	403b      	ands	r3, r7
 800d83e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d842:	f04f 0a00 	mov.w	sl, #0
 800d846:	9b04      	ldr	r3, [sp, #16]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d1a4      	bne.n	800d796 <_strtod_l+0x82e>
 800d84c:	e5de      	b.n	800d40c <_strtod_l+0x4a4>
 800d84e:	f04f 33ff 	mov.w	r3, #4294967295
 800d852:	e7ea      	b.n	800d82a <_strtod_l+0x8c2>
 800d854:	4613      	mov	r3, r2
 800d856:	e7e8      	b.n	800d82a <_strtod_l+0x8c2>
 800d858:	ea53 030a 	orrs.w	r3, r3, sl
 800d85c:	d08c      	beq.n	800d778 <_strtod_l+0x810>
 800d85e:	9b08      	ldr	r3, [sp, #32]
 800d860:	b1db      	cbz	r3, 800d89a <_strtod_l+0x932>
 800d862:	423b      	tst	r3, r7
 800d864:	d0ef      	beq.n	800d846 <_strtod_l+0x8de>
 800d866:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d868:	9a04      	ldr	r2, [sp, #16]
 800d86a:	4650      	mov	r0, sl
 800d86c:	4659      	mov	r1, fp
 800d86e:	b1c3      	cbz	r3, 800d8a2 <_strtod_l+0x93a>
 800d870:	f7ff fb5c 	bl	800cf2c <sulp>
 800d874:	4602      	mov	r2, r0
 800d876:	460b      	mov	r3, r1
 800d878:	ec51 0b18 	vmov	r0, r1, d8
 800d87c:	f7f2 fd16 	bl	80002ac <__adddf3>
 800d880:	4682      	mov	sl, r0
 800d882:	468b      	mov	fp, r1
 800d884:	e7df      	b.n	800d846 <_strtod_l+0x8de>
 800d886:	4013      	ands	r3, r2
 800d888:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d88c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d890:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d894:	f04f 3aff 	mov.w	sl, #4294967295
 800d898:	e7d5      	b.n	800d846 <_strtod_l+0x8de>
 800d89a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d89c:	ea13 0f0a 	tst.w	r3, sl
 800d8a0:	e7e0      	b.n	800d864 <_strtod_l+0x8fc>
 800d8a2:	f7ff fb43 	bl	800cf2c <sulp>
 800d8a6:	4602      	mov	r2, r0
 800d8a8:	460b      	mov	r3, r1
 800d8aa:	ec51 0b18 	vmov	r0, r1, d8
 800d8ae:	f7f2 fcfb 	bl	80002a8 <__aeabi_dsub>
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	4682      	mov	sl, r0
 800d8b8:	468b      	mov	fp, r1
 800d8ba:	f7f3 f915 	bl	8000ae8 <__aeabi_dcmpeq>
 800d8be:	2800      	cmp	r0, #0
 800d8c0:	d0c1      	beq.n	800d846 <_strtod_l+0x8de>
 800d8c2:	e611      	b.n	800d4e8 <_strtod_l+0x580>
 800d8c4:	fffffc02 	.word	0xfffffc02
 800d8c8:	7ff00000 	.word	0x7ff00000
 800d8cc:	39500000 	.word	0x39500000
 800d8d0:	000fffff 	.word	0x000fffff
 800d8d4:	7fefffff 	.word	0x7fefffff
 800d8d8:	080126c8 	.word	0x080126c8
 800d8dc:	4631      	mov	r1, r6
 800d8de:	4628      	mov	r0, r5
 800d8e0:	f002 f832 	bl	800f948 <__ratio>
 800d8e4:	ec59 8b10 	vmov	r8, r9, d0
 800d8e8:	ee10 0a10 	vmov	r0, s0
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d8f2:	4649      	mov	r1, r9
 800d8f4:	f7f3 f90c 	bl	8000b10 <__aeabi_dcmple>
 800d8f8:	2800      	cmp	r0, #0
 800d8fa:	d07a      	beq.n	800d9f2 <_strtod_l+0xa8a>
 800d8fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d04a      	beq.n	800d998 <_strtod_l+0xa30>
 800d902:	4b95      	ldr	r3, [pc, #596]	; (800db58 <_strtod_l+0xbf0>)
 800d904:	2200      	movs	r2, #0
 800d906:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d90a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800db58 <_strtod_l+0xbf0>
 800d90e:	f04f 0800 	mov.w	r8, #0
 800d912:	4b92      	ldr	r3, [pc, #584]	; (800db5c <_strtod_l+0xbf4>)
 800d914:	403b      	ands	r3, r7
 800d916:	930d      	str	r3, [sp, #52]	; 0x34
 800d918:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d91a:	4b91      	ldr	r3, [pc, #580]	; (800db60 <_strtod_l+0xbf8>)
 800d91c:	429a      	cmp	r2, r3
 800d91e:	f040 80b0 	bne.w	800da82 <_strtod_l+0xb1a>
 800d922:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d926:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d92a:	ec4b ab10 	vmov	d0, sl, fp
 800d92e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d932:	f001 ff31 	bl	800f798 <__ulp>
 800d936:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d93a:	ec53 2b10 	vmov	r2, r3, d0
 800d93e:	f7f2 fe6b 	bl	8000618 <__aeabi_dmul>
 800d942:	4652      	mov	r2, sl
 800d944:	465b      	mov	r3, fp
 800d946:	f7f2 fcb1 	bl	80002ac <__adddf3>
 800d94a:	460b      	mov	r3, r1
 800d94c:	4983      	ldr	r1, [pc, #524]	; (800db5c <_strtod_l+0xbf4>)
 800d94e:	4a85      	ldr	r2, [pc, #532]	; (800db64 <_strtod_l+0xbfc>)
 800d950:	4019      	ands	r1, r3
 800d952:	4291      	cmp	r1, r2
 800d954:	4682      	mov	sl, r0
 800d956:	d960      	bls.n	800da1a <_strtod_l+0xab2>
 800d958:	ee18 3a90 	vmov	r3, s17
 800d95c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d960:	4293      	cmp	r3, r2
 800d962:	d104      	bne.n	800d96e <_strtod_l+0xa06>
 800d964:	ee18 3a10 	vmov	r3, s16
 800d968:	3301      	adds	r3, #1
 800d96a:	f43f ad45 	beq.w	800d3f8 <_strtod_l+0x490>
 800d96e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800db70 <_strtod_l+0xc08>
 800d972:	f04f 3aff 	mov.w	sl, #4294967295
 800d976:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d978:	4620      	mov	r0, r4
 800d97a:	f001 fbdb 	bl	800f134 <_Bfree>
 800d97e:	9905      	ldr	r1, [sp, #20]
 800d980:	4620      	mov	r0, r4
 800d982:	f001 fbd7 	bl	800f134 <_Bfree>
 800d986:	4631      	mov	r1, r6
 800d988:	4620      	mov	r0, r4
 800d98a:	f001 fbd3 	bl	800f134 <_Bfree>
 800d98e:	4629      	mov	r1, r5
 800d990:	4620      	mov	r0, r4
 800d992:	f001 fbcf 	bl	800f134 <_Bfree>
 800d996:	e61a      	b.n	800d5ce <_strtod_l+0x666>
 800d998:	f1ba 0f00 	cmp.w	sl, #0
 800d99c:	d11b      	bne.n	800d9d6 <_strtod_l+0xa6e>
 800d99e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d9a2:	b9f3      	cbnz	r3, 800d9e2 <_strtod_l+0xa7a>
 800d9a4:	4b6c      	ldr	r3, [pc, #432]	; (800db58 <_strtod_l+0xbf0>)
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	4640      	mov	r0, r8
 800d9aa:	4649      	mov	r1, r9
 800d9ac:	f7f3 f8a6 	bl	8000afc <__aeabi_dcmplt>
 800d9b0:	b9d0      	cbnz	r0, 800d9e8 <_strtod_l+0xa80>
 800d9b2:	4640      	mov	r0, r8
 800d9b4:	4649      	mov	r1, r9
 800d9b6:	4b6c      	ldr	r3, [pc, #432]	; (800db68 <_strtod_l+0xc00>)
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	f7f2 fe2d 	bl	8000618 <__aeabi_dmul>
 800d9be:	4680      	mov	r8, r0
 800d9c0:	4689      	mov	r9, r1
 800d9c2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d9c6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800d9ca:	9315      	str	r3, [sp, #84]	; 0x54
 800d9cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d9d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d9d4:	e79d      	b.n	800d912 <_strtod_l+0x9aa>
 800d9d6:	f1ba 0f01 	cmp.w	sl, #1
 800d9da:	d102      	bne.n	800d9e2 <_strtod_l+0xa7a>
 800d9dc:	2f00      	cmp	r7, #0
 800d9de:	f43f ad83 	beq.w	800d4e8 <_strtod_l+0x580>
 800d9e2:	4b62      	ldr	r3, [pc, #392]	; (800db6c <_strtod_l+0xc04>)
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	e78e      	b.n	800d906 <_strtod_l+0x99e>
 800d9e8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800db68 <_strtod_l+0xc00>
 800d9ec:	f04f 0800 	mov.w	r8, #0
 800d9f0:	e7e7      	b.n	800d9c2 <_strtod_l+0xa5a>
 800d9f2:	4b5d      	ldr	r3, [pc, #372]	; (800db68 <_strtod_l+0xc00>)
 800d9f4:	4640      	mov	r0, r8
 800d9f6:	4649      	mov	r1, r9
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	f7f2 fe0d 	bl	8000618 <__aeabi_dmul>
 800d9fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da00:	4680      	mov	r8, r0
 800da02:	4689      	mov	r9, r1
 800da04:	b933      	cbnz	r3, 800da14 <_strtod_l+0xaac>
 800da06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800da0a:	900e      	str	r0, [sp, #56]	; 0x38
 800da0c:	930f      	str	r3, [sp, #60]	; 0x3c
 800da0e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800da12:	e7dd      	b.n	800d9d0 <_strtod_l+0xa68>
 800da14:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800da18:	e7f9      	b.n	800da0e <_strtod_l+0xaa6>
 800da1a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800da1e:	9b04      	ldr	r3, [sp, #16]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d1a8      	bne.n	800d976 <_strtod_l+0xa0e>
 800da24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800da28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800da2a:	0d1b      	lsrs	r3, r3, #20
 800da2c:	051b      	lsls	r3, r3, #20
 800da2e:	429a      	cmp	r2, r3
 800da30:	d1a1      	bne.n	800d976 <_strtod_l+0xa0e>
 800da32:	4640      	mov	r0, r8
 800da34:	4649      	mov	r1, r9
 800da36:	f7f3 f94f 	bl	8000cd8 <__aeabi_d2lz>
 800da3a:	f7f2 fdbf 	bl	80005bc <__aeabi_l2d>
 800da3e:	4602      	mov	r2, r0
 800da40:	460b      	mov	r3, r1
 800da42:	4640      	mov	r0, r8
 800da44:	4649      	mov	r1, r9
 800da46:	f7f2 fc2f 	bl	80002a8 <__aeabi_dsub>
 800da4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800da4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800da50:	ea43 030a 	orr.w	r3, r3, sl
 800da54:	4313      	orrs	r3, r2
 800da56:	4680      	mov	r8, r0
 800da58:	4689      	mov	r9, r1
 800da5a:	d055      	beq.n	800db08 <_strtod_l+0xba0>
 800da5c:	a336      	add	r3, pc, #216	; (adr r3, 800db38 <_strtod_l+0xbd0>)
 800da5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da62:	f7f3 f84b 	bl	8000afc <__aeabi_dcmplt>
 800da66:	2800      	cmp	r0, #0
 800da68:	f47f acd0 	bne.w	800d40c <_strtod_l+0x4a4>
 800da6c:	a334      	add	r3, pc, #208	; (adr r3, 800db40 <_strtod_l+0xbd8>)
 800da6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da72:	4640      	mov	r0, r8
 800da74:	4649      	mov	r1, r9
 800da76:	f7f3 f85f 	bl	8000b38 <__aeabi_dcmpgt>
 800da7a:	2800      	cmp	r0, #0
 800da7c:	f43f af7b 	beq.w	800d976 <_strtod_l+0xa0e>
 800da80:	e4c4      	b.n	800d40c <_strtod_l+0x4a4>
 800da82:	9b04      	ldr	r3, [sp, #16]
 800da84:	b333      	cbz	r3, 800dad4 <_strtod_l+0xb6c>
 800da86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da88:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800da8c:	d822      	bhi.n	800dad4 <_strtod_l+0xb6c>
 800da8e:	a32e      	add	r3, pc, #184	; (adr r3, 800db48 <_strtod_l+0xbe0>)
 800da90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da94:	4640      	mov	r0, r8
 800da96:	4649      	mov	r1, r9
 800da98:	f7f3 f83a 	bl	8000b10 <__aeabi_dcmple>
 800da9c:	b1a0      	cbz	r0, 800dac8 <_strtod_l+0xb60>
 800da9e:	4649      	mov	r1, r9
 800daa0:	4640      	mov	r0, r8
 800daa2:	f7f3 f891 	bl	8000bc8 <__aeabi_d2uiz>
 800daa6:	2801      	cmp	r0, #1
 800daa8:	bf38      	it	cc
 800daaa:	2001      	movcc	r0, #1
 800daac:	f7f2 fd3a 	bl	8000524 <__aeabi_ui2d>
 800dab0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dab2:	4680      	mov	r8, r0
 800dab4:	4689      	mov	r9, r1
 800dab6:	bb23      	cbnz	r3, 800db02 <_strtod_l+0xb9a>
 800dab8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dabc:	9010      	str	r0, [sp, #64]	; 0x40
 800dabe:	9311      	str	r3, [sp, #68]	; 0x44
 800dac0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800dac4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800daca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dacc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800dad0:	1a9b      	subs	r3, r3, r2
 800dad2:	9309      	str	r3, [sp, #36]	; 0x24
 800dad4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dad8:	eeb0 0a48 	vmov.f32	s0, s16
 800dadc:	eef0 0a68 	vmov.f32	s1, s17
 800dae0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dae4:	f001 fe58 	bl	800f798 <__ulp>
 800dae8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800daec:	ec53 2b10 	vmov	r2, r3, d0
 800daf0:	f7f2 fd92 	bl	8000618 <__aeabi_dmul>
 800daf4:	ec53 2b18 	vmov	r2, r3, d8
 800daf8:	f7f2 fbd8 	bl	80002ac <__adddf3>
 800dafc:	4682      	mov	sl, r0
 800dafe:	468b      	mov	fp, r1
 800db00:	e78d      	b.n	800da1e <_strtod_l+0xab6>
 800db02:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800db06:	e7db      	b.n	800dac0 <_strtod_l+0xb58>
 800db08:	a311      	add	r3, pc, #68	; (adr r3, 800db50 <_strtod_l+0xbe8>)
 800db0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db0e:	f7f2 fff5 	bl	8000afc <__aeabi_dcmplt>
 800db12:	e7b2      	b.n	800da7a <_strtod_l+0xb12>
 800db14:	2300      	movs	r3, #0
 800db16:	930a      	str	r3, [sp, #40]	; 0x28
 800db18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800db1a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800db1c:	6013      	str	r3, [r2, #0]
 800db1e:	f7ff ba6b 	b.w	800cff8 <_strtod_l+0x90>
 800db22:	2a65      	cmp	r2, #101	; 0x65
 800db24:	f43f ab5f 	beq.w	800d1e6 <_strtod_l+0x27e>
 800db28:	2a45      	cmp	r2, #69	; 0x45
 800db2a:	f43f ab5c 	beq.w	800d1e6 <_strtod_l+0x27e>
 800db2e:	2301      	movs	r3, #1
 800db30:	f7ff bb94 	b.w	800d25c <_strtod_l+0x2f4>
 800db34:	f3af 8000 	nop.w
 800db38:	94a03595 	.word	0x94a03595
 800db3c:	3fdfffff 	.word	0x3fdfffff
 800db40:	35afe535 	.word	0x35afe535
 800db44:	3fe00000 	.word	0x3fe00000
 800db48:	ffc00000 	.word	0xffc00000
 800db4c:	41dfffff 	.word	0x41dfffff
 800db50:	94a03595 	.word	0x94a03595
 800db54:	3fcfffff 	.word	0x3fcfffff
 800db58:	3ff00000 	.word	0x3ff00000
 800db5c:	7ff00000 	.word	0x7ff00000
 800db60:	7fe00000 	.word	0x7fe00000
 800db64:	7c9fffff 	.word	0x7c9fffff
 800db68:	3fe00000 	.word	0x3fe00000
 800db6c:	bff00000 	.word	0xbff00000
 800db70:	7fefffff 	.word	0x7fefffff

0800db74 <_strtod_r>:
 800db74:	4b01      	ldr	r3, [pc, #4]	; (800db7c <_strtod_r+0x8>)
 800db76:	f7ff b9f7 	b.w	800cf68 <_strtod_l>
 800db7a:	bf00      	nop
 800db7c:	200001e0 	.word	0x200001e0

0800db80 <_strtol_l.constprop.0>:
 800db80:	2b01      	cmp	r3, #1
 800db82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db86:	d001      	beq.n	800db8c <_strtol_l.constprop.0+0xc>
 800db88:	2b24      	cmp	r3, #36	; 0x24
 800db8a:	d906      	bls.n	800db9a <_strtol_l.constprop.0+0x1a>
 800db8c:	f7fe fafc 	bl	800c188 <__errno>
 800db90:	2316      	movs	r3, #22
 800db92:	6003      	str	r3, [r0, #0]
 800db94:	2000      	movs	r0, #0
 800db96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db9a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800dc80 <_strtol_l.constprop.0+0x100>
 800db9e:	460d      	mov	r5, r1
 800dba0:	462e      	mov	r6, r5
 800dba2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dba6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800dbaa:	f017 0708 	ands.w	r7, r7, #8
 800dbae:	d1f7      	bne.n	800dba0 <_strtol_l.constprop.0+0x20>
 800dbb0:	2c2d      	cmp	r4, #45	; 0x2d
 800dbb2:	d132      	bne.n	800dc1a <_strtol_l.constprop.0+0x9a>
 800dbb4:	782c      	ldrb	r4, [r5, #0]
 800dbb6:	2701      	movs	r7, #1
 800dbb8:	1cb5      	adds	r5, r6, #2
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d05b      	beq.n	800dc76 <_strtol_l.constprop.0+0xf6>
 800dbbe:	2b10      	cmp	r3, #16
 800dbc0:	d109      	bne.n	800dbd6 <_strtol_l.constprop.0+0x56>
 800dbc2:	2c30      	cmp	r4, #48	; 0x30
 800dbc4:	d107      	bne.n	800dbd6 <_strtol_l.constprop.0+0x56>
 800dbc6:	782c      	ldrb	r4, [r5, #0]
 800dbc8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800dbcc:	2c58      	cmp	r4, #88	; 0x58
 800dbce:	d14d      	bne.n	800dc6c <_strtol_l.constprop.0+0xec>
 800dbd0:	786c      	ldrb	r4, [r5, #1]
 800dbd2:	2310      	movs	r3, #16
 800dbd4:	3502      	adds	r5, #2
 800dbd6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800dbda:	f108 38ff 	add.w	r8, r8, #4294967295
 800dbde:	f04f 0c00 	mov.w	ip, #0
 800dbe2:	fbb8 f9f3 	udiv	r9, r8, r3
 800dbe6:	4666      	mov	r6, ip
 800dbe8:	fb03 8a19 	mls	sl, r3, r9, r8
 800dbec:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800dbf0:	f1be 0f09 	cmp.w	lr, #9
 800dbf4:	d816      	bhi.n	800dc24 <_strtol_l.constprop.0+0xa4>
 800dbf6:	4674      	mov	r4, lr
 800dbf8:	42a3      	cmp	r3, r4
 800dbfa:	dd24      	ble.n	800dc46 <_strtol_l.constprop.0+0xc6>
 800dbfc:	f1bc 0f00 	cmp.w	ip, #0
 800dc00:	db1e      	blt.n	800dc40 <_strtol_l.constprop.0+0xc0>
 800dc02:	45b1      	cmp	r9, r6
 800dc04:	d31c      	bcc.n	800dc40 <_strtol_l.constprop.0+0xc0>
 800dc06:	d101      	bne.n	800dc0c <_strtol_l.constprop.0+0x8c>
 800dc08:	45a2      	cmp	sl, r4
 800dc0a:	db19      	blt.n	800dc40 <_strtol_l.constprop.0+0xc0>
 800dc0c:	fb06 4603 	mla	r6, r6, r3, r4
 800dc10:	f04f 0c01 	mov.w	ip, #1
 800dc14:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dc18:	e7e8      	b.n	800dbec <_strtol_l.constprop.0+0x6c>
 800dc1a:	2c2b      	cmp	r4, #43	; 0x2b
 800dc1c:	bf04      	itt	eq
 800dc1e:	782c      	ldrbeq	r4, [r5, #0]
 800dc20:	1cb5      	addeq	r5, r6, #2
 800dc22:	e7ca      	b.n	800dbba <_strtol_l.constprop.0+0x3a>
 800dc24:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800dc28:	f1be 0f19 	cmp.w	lr, #25
 800dc2c:	d801      	bhi.n	800dc32 <_strtol_l.constprop.0+0xb2>
 800dc2e:	3c37      	subs	r4, #55	; 0x37
 800dc30:	e7e2      	b.n	800dbf8 <_strtol_l.constprop.0+0x78>
 800dc32:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800dc36:	f1be 0f19 	cmp.w	lr, #25
 800dc3a:	d804      	bhi.n	800dc46 <_strtol_l.constprop.0+0xc6>
 800dc3c:	3c57      	subs	r4, #87	; 0x57
 800dc3e:	e7db      	b.n	800dbf8 <_strtol_l.constprop.0+0x78>
 800dc40:	f04f 3cff 	mov.w	ip, #4294967295
 800dc44:	e7e6      	b.n	800dc14 <_strtol_l.constprop.0+0x94>
 800dc46:	f1bc 0f00 	cmp.w	ip, #0
 800dc4a:	da05      	bge.n	800dc58 <_strtol_l.constprop.0+0xd8>
 800dc4c:	2322      	movs	r3, #34	; 0x22
 800dc4e:	6003      	str	r3, [r0, #0]
 800dc50:	4646      	mov	r6, r8
 800dc52:	b942      	cbnz	r2, 800dc66 <_strtol_l.constprop.0+0xe6>
 800dc54:	4630      	mov	r0, r6
 800dc56:	e79e      	b.n	800db96 <_strtol_l.constprop.0+0x16>
 800dc58:	b107      	cbz	r7, 800dc5c <_strtol_l.constprop.0+0xdc>
 800dc5a:	4276      	negs	r6, r6
 800dc5c:	2a00      	cmp	r2, #0
 800dc5e:	d0f9      	beq.n	800dc54 <_strtol_l.constprop.0+0xd4>
 800dc60:	f1bc 0f00 	cmp.w	ip, #0
 800dc64:	d000      	beq.n	800dc68 <_strtol_l.constprop.0+0xe8>
 800dc66:	1e69      	subs	r1, r5, #1
 800dc68:	6011      	str	r1, [r2, #0]
 800dc6a:	e7f3      	b.n	800dc54 <_strtol_l.constprop.0+0xd4>
 800dc6c:	2430      	movs	r4, #48	; 0x30
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d1b1      	bne.n	800dbd6 <_strtol_l.constprop.0+0x56>
 800dc72:	2308      	movs	r3, #8
 800dc74:	e7af      	b.n	800dbd6 <_strtol_l.constprop.0+0x56>
 800dc76:	2c30      	cmp	r4, #48	; 0x30
 800dc78:	d0a5      	beq.n	800dbc6 <_strtol_l.constprop.0+0x46>
 800dc7a:	230a      	movs	r3, #10
 800dc7c:	e7ab      	b.n	800dbd6 <_strtol_l.constprop.0+0x56>
 800dc7e:	bf00      	nop
 800dc80:	080126f1 	.word	0x080126f1

0800dc84 <_strtol_r>:
 800dc84:	f7ff bf7c 	b.w	800db80 <_strtol_l.constprop.0>

0800dc88 <quorem>:
 800dc88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc8c:	6903      	ldr	r3, [r0, #16]
 800dc8e:	690c      	ldr	r4, [r1, #16]
 800dc90:	42a3      	cmp	r3, r4
 800dc92:	4607      	mov	r7, r0
 800dc94:	f2c0 8081 	blt.w	800dd9a <quorem+0x112>
 800dc98:	3c01      	subs	r4, #1
 800dc9a:	f101 0814 	add.w	r8, r1, #20
 800dc9e:	f100 0514 	add.w	r5, r0, #20
 800dca2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dca6:	9301      	str	r3, [sp, #4]
 800dca8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dcac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dcb0:	3301      	adds	r3, #1
 800dcb2:	429a      	cmp	r2, r3
 800dcb4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800dcb8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dcbc:	fbb2 f6f3 	udiv	r6, r2, r3
 800dcc0:	d331      	bcc.n	800dd26 <quorem+0x9e>
 800dcc2:	f04f 0e00 	mov.w	lr, #0
 800dcc6:	4640      	mov	r0, r8
 800dcc8:	46ac      	mov	ip, r5
 800dcca:	46f2      	mov	sl, lr
 800dccc:	f850 2b04 	ldr.w	r2, [r0], #4
 800dcd0:	b293      	uxth	r3, r2
 800dcd2:	fb06 e303 	mla	r3, r6, r3, lr
 800dcd6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800dcda:	b29b      	uxth	r3, r3
 800dcdc:	ebaa 0303 	sub.w	r3, sl, r3
 800dce0:	f8dc a000 	ldr.w	sl, [ip]
 800dce4:	0c12      	lsrs	r2, r2, #16
 800dce6:	fa13 f38a 	uxtah	r3, r3, sl
 800dcea:	fb06 e202 	mla	r2, r6, r2, lr
 800dcee:	9300      	str	r3, [sp, #0]
 800dcf0:	9b00      	ldr	r3, [sp, #0]
 800dcf2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dcf6:	b292      	uxth	r2, r2
 800dcf8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800dcfc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dd00:	f8bd 3000 	ldrh.w	r3, [sp]
 800dd04:	4581      	cmp	r9, r0
 800dd06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd0a:	f84c 3b04 	str.w	r3, [ip], #4
 800dd0e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800dd12:	d2db      	bcs.n	800dccc <quorem+0x44>
 800dd14:	f855 300b 	ldr.w	r3, [r5, fp]
 800dd18:	b92b      	cbnz	r3, 800dd26 <quorem+0x9e>
 800dd1a:	9b01      	ldr	r3, [sp, #4]
 800dd1c:	3b04      	subs	r3, #4
 800dd1e:	429d      	cmp	r5, r3
 800dd20:	461a      	mov	r2, r3
 800dd22:	d32e      	bcc.n	800dd82 <quorem+0xfa>
 800dd24:	613c      	str	r4, [r7, #16]
 800dd26:	4638      	mov	r0, r7
 800dd28:	f001 fc90 	bl	800f64c <__mcmp>
 800dd2c:	2800      	cmp	r0, #0
 800dd2e:	db24      	blt.n	800dd7a <quorem+0xf2>
 800dd30:	3601      	adds	r6, #1
 800dd32:	4628      	mov	r0, r5
 800dd34:	f04f 0c00 	mov.w	ip, #0
 800dd38:	f858 2b04 	ldr.w	r2, [r8], #4
 800dd3c:	f8d0 e000 	ldr.w	lr, [r0]
 800dd40:	b293      	uxth	r3, r2
 800dd42:	ebac 0303 	sub.w	r3, ip, r3
 800dd46:	0c12      	lsrs	r2, r2, #16
 800dd48:	fa13 f38e 	uxtah	r3, r3, lr
 800dd4c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800dd50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dd54:	b29b      	uxth	r3, r3
 800dd56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd5a:	45c1      	cmp	r9, r8
 800dd5c:	f840 3b04 	str.w	r3, [r0], #4
 800dd60:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800dd64:	d2e8      	bcs.n	800dd38 <quorem+0xb0>
 800dd66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dd6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dd6e:	b922      	cbnz	r2, 800dd7a <quorem+0xf2>
 800dd70:	3b04      	subs	r3, #4
 800dd72:	429d      	cmp	r5, r3
 800dd74:	461a      	mov	r2, r3
 800dd76:	d30a      	bcc.n	800dd8e <quorem+0x106>
 800dd78:	613c      	str	r4, [r7, #16]
 800dd7a:	4630      	mov	r0, r6
 800dd7c:	b003      	add	sp, #12
 800dd7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd82:	6812      	ldr	r2, [r2, #0]
 800dd84:	3b04      	subs	r3, #4
 800dd86:	2a00      	cmp	r2, #0
 800dd88:	d1cc      	bne.n	800dd24 <quorem+0x9c>
 800dd8a:	3c01      	subs	r4, #1
 800dd8c:	e7c7      	b.n	800dd1e <quorem+0x96>
 800dd8e:	6812      	ldr	r2, [r2, #0]
 800dd90:	3b04      	subs	r3, #4
 800dd92:	2a00      	cmp	r2, #0
 800dd94:	d1f0      	bne.n	800dd78 <quorem+0xf0>
 800dd96:	3c01      	subs	r4, #1
 800dd98:	e7eb      	b.n	800dd72 <quorem+0xea>
 800dd9a:	2000      	movs	r0, #0
 800dd9c:	e7ee      	b.n	800dd7c <quorem+0xf4>
	...

0800dda0 <_dtoa_r>:
 800dda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dda4:	ed2d 8b04 	vpush	{d8-d9}
 800dda8:	ec57 6b10 	vmov	r6, r7, d0
 800ddac:	b093      	sub	sp, #76	; 0x4c
 800ddae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ddb0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ddb4:	9106      	str	r1, [sp, #24]
 800ddb6:	ee10 aa10 	vmov	sl, s0
 800ddba:	4604      	mov	r4, r0
 800ddbc:	9209      	str	r2, [sp, #36]	; 0x24
 800ddbe:	930c      	str	r3, [sp, #48]	; 0x30
 800ddc0:	46bb      	mov	fp, r7
 800ddc2:	b975      	cbnz	r5, 800dde2 <_dtoa_r+0x42>
 800ddc4:	2010      	movs	r0, #16
 800ddc6:	f001 f94d 	bl	800f064 <malloc>
 800ddca:	4602      	mov	r2, r0
 800ddcc:	6260      	str	r0, [r4, #36]	; 0x24
 800ddce:	b920      	cbnz	r0, 800ddda <_dtoa_r+0x3a>
 800ddd0:	4ba7      	ldr	r3, [pc, #668]	; (800e070 <_dtoa_r+0x2d0>)
 800ddd2:	21ea      	movs	r1, #234	; 0xea
 800ddd4:	48a7      	ldr	r0, [pc, #668]	; (800e074 <_dtoa_r+0x2d4>)
 800ddd6:	f002 f8bd 	bl	800ff54 <__assert_func>
 800ddda:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ddde:	6005      	str	r5, [r0, #0]
 800dde0:	60c5      	str	r5, [r0, #12]
 800dde2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dde4:	6819      	ldr	r1, [r3, #0]
 800dde6:	b151      	cbz	r1, 800ddfe <_dtoa_r+0x5e>
 800dde8:	685a      	ldr	r2, [r3, #4]
 800ddea:	604a      	str	r2, [r1, #4]
 800ddec:	2301      	movs	r3, #1
 800ddee:	4093      	lsls	r3, r2
 800ddf0:	608b      	str	r3, [r1, #8]
 800ddf2:	4620      	mov	r0, r4
 800ddf4:	f001 f99e 	bl	800f134 <_Bfree>
 800ddf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	601a      	str	r2, [r3, #0]
 800ddfe:	1e3b      	subs	r3, r7, #0
 800de00:	bfaa      	itet	ge
 800de02:	2300      	movge	r3, #0
 800de04:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800de08:	f8c8 3000 	strge.w	r3, [r8]
 800de0c:	4b9a      	ldr	r3, [pc, #616]	; (800e078 <_dtoa_r+0x2d8>)
 800de0e:	bfbc      	itt	lt
 800de10:	2201      	movlt	r2, #1
 800de12:	f8c8 2000 	strlt.w	r2, [r8]
 800de16:	ea33 030b 	bics.w	r3, r3, fp
 800de1a:	d11b      	bne.n	800de54 <_dtoa_r+0xb4>
 800de1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800de1e:	f242 730f 	movw	r3, #9999	; 0x270f
 800de22:	6013      	str	r3, [r2, #0]
 800de24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800de28:	4333      	orrs	r3, r6
 800de2a:	f000 8592 	beq.w	800e952 <_dtoa_r+0xbb2>
 800de2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de30:	b963      	cbnz	r3, 800de4c <_dtoa_r+0xac>
 800de32:	4b92      	ldr	r3, [pc, #584]	; (800e07c <_dtoa_r+0x2dc>)
 800de34:	e022      	b.n	800de7c <_dtoa_r+0xdc>
 800de36:	4b92      	ldr	r3, [pc, #584]	; (800e080 <_dtoa_r+0x2e0>)
 800de38:	9301      	str	r3, [sp, #4]
 800de3a:	3308      	adds	r3, #8
 800de3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800de3e:	6013      	str	r3, [r2, #0]
 800de40:	9801      	ldr	r0, [sp, #4]
 800de42:	b013      	add	sp, #76	; 0x4c
 800de44:	ecbd 8b04 	vpop	{d8-d9}
 800de48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de4c:	4b8b      	ldr	r3, [pc, #556]	; (800e07c <_dtoa_r+0x2dc>)
 800de4e:	9301      	str	r3, [sp, #4]
 800de50:	3303      	adds	r3, #3
 800de52:	e7f3      	b.n	800de3c <_dtoa_r+0x9c>
 800de54:	2200      	movs	r2, #0
 800de56:	2300      	movs	r3, #0
 800de58:	4650      	mov	r0, sl
 800de5a:	4659      	mov	r1, fp
 800de5c:	f7f2 fe44 	bl	8000ae8 <__aeabi_dcmpeq>
 800de60:	ec4b ab19 	vmov	d9, sl, fp
 800de64:	4680      	mov	r8, r0
 800de66:	b158      	cbz	r0, 800de80 <_dtoa_r+0xe0>
 800de68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800de6a:	2301      	movs	r3, #1
 800de6c:	6013      	str	r3, [r2, #0]
 800de6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de70:	2b00      	cmp	r3, #0
 800de72:	f000 856b 	beq.w	800e94c <_dtoa_r+0xbac>
 800de76:	4883      	ldr	r0, [pc, #524]	; (800e084 <_dtoa_r+0x2e4>)
 800de78:	6018      	str	r0, [r3, #0]
 800de7a:	1e43      	subs	r3, r0, #1
 800de7c:	9301      	str	r3, [sp, #4]
 800de7e:	e7df      	b.n	800de40 <_dtoa_r+0xa0>
 800de80:	ec4b ab10 	vmov	d0, sl, fp
 800de84:	aa10      	add	r2, sp, #64	; 0x40
 800de86:	a911      	add	r1, sp, #68	; 0x44
 800de88:	4620      	mov	r0, r4
 800de8a:	f001 fd01 	bl	800f890 <__d2b>
 800de8e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800de92:	ee08 0a10 	vmov	s16, r0
 800de96:	2d00      	cmp	r5, #0
 800de98:	f000 8084 	beq.w	800dfa4 <_dtoa_r+0x204>
 800de9c:	ee19 3a90 	vmov	r3, s19
 800dea0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dea4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800dea8:	4656      	mov	r6, sl
 800deaa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800deae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800deb2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800deb6:	4b74      	ldr	r3, [pc, #464]	; (800e088 <_dtoa_r+0x2e8>)
 800deb8:	2200      	movs	r2, #0
 800deba:	4630      	mov	r0, r6
 800debc:	4639      	mov	r1, r7
 800debe:	f7f2 f9f3 	bl	80002a8 <__aeabi_dsub>
 800dec2:	a365      	add	r3, pc, #404	; (adr r3, 800e058 <_dtoa_r+0x2b8>)
 800dec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dec8:	f7f2 fba6 	bl	8000618 <__aeabi_dmul>
 800decc:	a364      	add	r3, pc, #400	; (adr r3, 800e060 <_dtoa_r+0x2c0>)
 800dece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded2:	f7f2 f9eb 	bl	80002ac <__adddf3>
 800ded6:	4606      	mov	r6, r0
 800ded8:	4628      	mov	r0, r5
 800deda:	460f      	mov	r7, r1
 800dedc:	f7f2 fb32 	bl	8000544 <__aeabi_i2d>
 800dee0:	a361      	add	r3, pc, #388	; (adr r3, 800e068 <_dtoa_r+0x2c8>)
 800dee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee6:	f7f2 fb97 	bl	8000618 <__aeabi_dmul>
 800deea:	4602      	mov	r2, r0
 800deec:	460b      	mov	r3, r1
 800deee:	4630      	mov	r0, r6
 800def0:	4639      	mov	r1, r7
 800def2:	f7f2 f9db 	bl	80002ac <__adddf3>
 800def6:	4606      	mov	r6, r0
 800def8:	460f      	mov	r7, r1
 800defa:	f7f2 fe3d 	bl	8000b78 <__aeabi_d2iz>
 800defe:	2200      	movs	r2, #0
 800df00:	9000      	str	r0, [sp, #0]
 800df02:	2300      	movs	r3, #0
 800df04:	4630      	mov	r0, r6
 800df06:	4639      	mov	r1, r7
 800df08:	f7f2 fdf8 	bl	8000afc <__aeabi_dcmplt>
 800df0c:	b150      	cbz	r0, 800df24 <_dtoa_r+0x184>
 800df0e:	9800      	ldr	r0, [sp, #0]
 800df10:	f7f2 fb18 	bl	8000544 <__aeabi_i2d>
 800df14:	4632      	mov	r2, r6
 800df16:	463b      	mov	r3, r7
 800df18:	f7f2 fde6 	bl	8000ae8 <__aeabi_dcmpeq>
 800df1c:	b910      	cbnz	r0, 800df24 <_dtoa_r+0x184>
 800df1e:	9b00      	ldr	r3, [sp, #0]
 800df20:	3b01      	subs	r3, #1
 800df22:	9300      	str	r3, [sp, #0]
 800df24:	9b00      	ldr	r3, [sp, #0]
 800df26:	2b16      	cmp	r3, #22
 800df28:	d85a      	bhi.n	800dfe0 <_dtoa_r+0x240>
 800df2a:	9a00      	ldr	r2, [sp, #0]
 800df2c:	4b57      	ldr	r3, [pc, #348]	; (800e08c <_dtoa_r+0x2ec>)
 800df2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df36:	ec51 0b19 	vmov	r0, r1, d9
 800df3a:	f7f2 fddf 	bl	8000afc <__aeabi_dcmplt>
 800df3e:	2800      	cmp	r0, #0
 800df40:	d050      	beq.n	800dfe4 <_dtoa_r+0x244>
 800df42:	9b00      	ldr	r3, [sp, #0]
 800df44:	3b01      	subs	r3, #1
 800df46:	9300      	str	r3, [sp, #0]
 800df48:	2300      	movs	r3, #0
 800df4a:	930b      	str	r3, [sp, #44]	; 0x2c
 800df4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800df4e:	1b5d      	subs	r5, r3, r5
 800df50:	1e6b      	subs	r3, r5, #1
 800df52:	9305      	str	r3, [sp, #20]
 800df54:	bf45      	ittet	mi
 800df56:	f1c5 0301 	rsbmi	r3, r5, #1
 800df5a:	9304      	strmi	r3, [sp, #16]
 800df5c:	2300      	movpl	r3, #0
 800df5e:	2300      	movmi	r3, #0
 800df60:	bf4c      	ite	mi
 800df62:	9305      	strmi	r3, [sp, #20]
 800df64:	9304      	strpl	r3, [sp, #16]
 800df66:	9b00      	ldr	r3, [sp, #0]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	db3d      	blt.n	800dfe8 <_dtoa_r+0x248>
 800df6c:	9b05      	ldr	r3, [sp, #20]
 800df6e:	9a00      	ldr	r2, [sp, #0]
 800df70:	920a      	str	r2, [sp, #40]	; 0x28
 800df72:	4413      	add	r3, r2
 800df74:	9305      	str	r3, [sp, #20]
 800df76:	2300      	movs	r3, #0
 800df78:	9307      	str	r3, [sp, #28]
 800df7a:	9b06      	ldr	r3, [sp, #24]
 800df7c:	2b09      	cmp	r3, #9
 800df7e:	f200 8089 	bhi.w	800e094 <_dtoa_r+0x2f4>
 800df82:	2b05      	cmp	r3, #5
 800df84:	bfc4      	itt	gt
 800df86:	3b04      	subgt	r3, #4
 800df88:	9306      	strgt	r3, [sp, #24]
 800df8a:	9b06      	ldr	r3, [sp, #24]
 800df8c:	f1a3 0302 	sub.w	r3, r3, #2
 800df90:	bfcc      	ite	gt
 800df92:	2500      	movgt	r5, #0
 800df94:	2501      	movle	r5, #1
 800df96:	2b03      	cmp	r3, #3
 800df98:	f200 8087 	bhi.w	800e0aa <_dtoa_r+0x30a>
 800df9c:	e8df f003 	tbb	[pc, r3]
 800dfa0:	59383a2d 	.word	0x59383a2d
 800dfa4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800dfa8:	441d      	add	r5, r3
 800dfaa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800dfae:	2b20      	cmp	r3, #32
 800dfb0:	bfc1      	itttt	gt
 800dfb2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dfb6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800dfba:	fa0b f303 	lslgt.w	r3, fp, r3
 800dfbe:	fa26 f000 	lsrgt.w	r0, r6, r0
 800dfc2:	bfda      	itte	le
 800dfc4:	f1c3 0320 	rsble	r3, r3, #32
 800dfc8:	fa06 f003 	lslle.w	r0, r6, r3
 800dfcc:	4318      	orrgt	r0, r3
 800dfce:	f7f2 faa9 	bl	8000524 <__aeabi_ui2d>
 800dfd2:	2301      	movs	r3, #1
 800dfd4:	4606      	mov	r6, r0
 800dfd6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800dfda:	3d01      	subs	r5, #1
 800dfdc:	930e      	str	r3, [sp, #56]	; 0x38
 800dfde:	e76a      	b.n	800deb6 <_dtoa_r+0x116>
 800dfe0:	2301      	movs	r3, #1
 800dfe2:	e7b2      	b.n	800df4a <_dtoa_r+0x1aa>
 800dfe4:	900b      	str	r0, [sp, #44]	; 0x2c
 800dfe6:	e7b1      	b.n	800df4c <_dtoa_r+0x1ac>
 800dfe8:	9b04      	ldr	r3, [sp, #16]
 800dfea:	9a00      	ldr	r2, [sp, #0]
 800dfec:	1a9b      	subs	r3, r3, r2
 800dfee:	9304      	str	r3, [sp, #16]
 800dff0:	4253      	negs	r3, r2
 800dff2:	9307      	str	r3, [sp, #28]
 800dff4:	2300      	movs	r3, #0
 800dff6:	930a      	str	r3, [sp, #40]	; 0x28
 800dff8:	e7bf      	b.n	800df7a <_dtoa_r+0x1da>
 800dffa:	2300      	movs	r3, #0
 800dffc:	9308      	str	r3, [sp, #32]
 800dffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e000:	2b00      	cmp	r3, #0
 800e002:	dc55      	bgt.n	800e0b0 <_dtoa_r+0x310>
 800e004:	2301      	movs	r3, #1
 800e006:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e00a:	461a      	mov	r2, r3
 800e00c:	9209      	str	r2, [sp, #36]	; 0x24
 800e00e:	e00c      	b.n	800e02a <_dtoa_r+0x28a>
 800e010:	2301      	movs	r3, #1
 800e012:	e7f3      	b.n	800dffc <_dtoa_r+0x25c>
 800e014:	2300      	movs	r3, #0
 800e016:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e018:	9308      	str	r3, [sp, #32]
 800e01a:	9b00      	ldr	r3, [sp, #0]
 800e01c:	4413      	add	r3, r2
 800e01e:	9302      	str	r3, [sp, #8]
 800e020:	3301      	adds	r3, #1
 800e022:	2b01      	cmp	r3, #1
 800e024:	9303      	str	r3, [sp, #12]
 800e026:	bfb8      	it	lt
 800e028:	2301      	movlt	r3, #1
 800e02a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e02c:	2200      	movs	r2, #0
 800e02e:	6042      	str	r2, [r0, #4]
 800e030:	2204      	movs	r2, #4
 800e032:	f102 0614 	add.w	r6, r2, #20
 800e036:	429e      	cmp	r6, r3
 800e038:	6841      	ldr	r1, [r0, #4]
 800e03a:	d93d      	bls.n	800e0b8 <_dtoa_r+0x318>
 800e03c:	4620      	mov	r0, r4
 800e03e:	f001 f839 	bl	800f0b4 <_Balloc>
 800e042:	9001      	str	r0, [sp, #4]
 800e044:	2800      	cmp	r0, #0
 800e046:	d13b      	bne.n	800e0c0 <_dtoa_r+0x320>
 800e048:	4b11      	ldr	r3, [pc, #68]	; (800e090 <_dtoa_r+0x2f0>)
 800e04a:	4602      	mov	r2, r0
 800e04c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e050:	e6c0      	b.n	800ddd4 <_dtoa_r+0x34>
 800e052:	2301      	movs	r3, #1
 800e054:	e7df      	b.n	800e016 <_dtoa_r+0x276>
 800e056:	bf00      	nop
 800e058:	636f4361 	.word	0x636f4361
 800e05c:	3fd287a7 	.word	0x3fd287a7
 800e060:	8b60c8b3 	.word	0x8b60c8b3
 800e064:	3fc68a28 	.word	0x3fc68a28
 800e068:	509f79fb 	.word	0x509f79fb
 800e06c:	3fd34413 	.word	0x3fd34413
 800e070:	080127fe 	.word	0x080127fe
 800e074:	08012815 	.word	0x08012815
 800e078:	7ff00000 	.word	0x7ff00000
 800e07c:	080127fa 	.word	0x080127fa
 800e080:	080127f1 	.word	0x080127f1
 800e084:	08012675 	.word	0x08012675
 800e088:	3ff80000 	.word	0x3ff80000
 800e08c:	08012980 	.word	0x08012980
 800e090:	08012870 	.word	0x08012870
 800e094:	2501      	movs	r5, #1
 800e096:	2300      	movs	r3, #0
 800e098:	9306      	str	r3, [sp, #24]
 800e09a:	9508      	str	r5, [sp, #32]
 800e09c:	f04f 33ff 	mov.w	r3, #4294967295
 800e0a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	2312      	movs	r3, #18
 800e0a8:	e7b0      	b.n	800e00c <_dtoa_r+0x26c>
 800e0aa:	2301      	movs	r3, #1
 800e0ac:	9308      	str	r3, [sp, #32]
 800e0ae:	e7f5      	b.n	800e09c <_dtoa_r+0x2fc>
 800e0b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e0b6:	e7b8      	b.n	800e02a <_dtoa_r+0x28a>
 800e0b8:	3101      	adds	r1, #1
 800e0ba:	6041      	str	r1, [r0, #4]
 800e0bc:	0052      	lsls	r2, r2, #1
 800e0be:	e7b8      	b.n	800e032 <_dtoa_r+0x292>
 800e0c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e0c2:	9a01      	ldr	r2, [sp, #4]
 800e0c4:	601a      	str	r2, [r3, #0]
 800e0c6:	9b03      	ldr	r3, [sp, #12]
 800e0c8:	2b0e      	cmp	r3, #14
 800e0ca:	f200 809d 	bhi.w	800e208 <_dtoa_r+0x468>
 800e0ce:	2d00      	cmp	r5, #0
 800e0d0:	f000 809a 	beq.w	800e208 <_dtoa_r+0x468>
 800e0d4:	9b00      	ldr	r3, [sp, #0]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	dd32      	ble.n	800e140 <_dtoa_r+0x3a0>
 800e0da:	4ab7      	ldr	r2, [pc, #732]	; (800e3b8 <_dtoa_r+0x618>)
 800e0dc:	f003 030f 	and.w	r3, r3, #15
 800e0e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e0e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e0e8:	9b00      	ldr	r3, [sp, #0]
 800e0ea:	05d8      	lsls	r0, r3, #23
 800e0ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e0f0:	d516      	bpl.n	800e120 <_dtoa_r+0x380>
 800e0f2:	4bb2      	ldr	r3, [pc, #712]	; (800e3bc <_dtoa_r+0x61c>)
 800e0f4:	ec51 0b19 	vmov	r0, r1, d9
 800e0f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e0fc:	f7f2 fbb6 	bl	800086c <__aeabi_ddiv>
 800e100:	f007 070f 	and.w	r7, r7, #15
 800e104:	4682      	mov	sl, r0
 800e106:	468b      	mov	fp, r1
 800e108:	2503      	movs	r5, #3
 800e10a:	4eac      	ldr	r6, [pc, #688]	; (800e3bc <_dtoa_r+0x61c>)
 800e10c:	b957      	cbnz	r7, 800e124 <_dtoa_r+0x384>
 800e10e:	4642      	mov	r2, r8
 800e110:	464b      	mov	r3, r9
 800e112:	4650      	mov	r0, sl
 800e114:	4659      	mov	r1, fp
 800e116:	f7f2 fba9 	bl	800086c <__aeabi_ddiv>
 800e11a:	4682      	mov	sl, r0
 800e11c:	468b      	mov	fp, r1
 800e11e:	e028      	b.n	800e172 <_dtoa_r+0x3d2>
 800e120:	2502      	movs	r5, #2
 800e122:	e7f2      	b.n	800e10a <_dtoa_r+0x36a>
 800e124:	07f9      	lsls	r1, r7, #31
 800e126:	d508      	bpl.n	800e13a <_dtoa_r+0x39a>
 800e128:	4640      	mov	r0, r8
 800e12a:	4649      	mov	r1, r9
 800e12c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e130:	f7f2 fa72 	bl	8000618 <__aeabi_dmul>
 800e134:	3501      	adds	r5, #1
 800e136:	4680      	mov	r8, r0
 800e138:	4689      	mov	r9, r1
 800e13a:	107f      	asrs	r7, r7, #1
 800e13c:	3608      	adds	r6, #8
 800e13e:	e7e5      	b.n	800e10c <_dtoa_r+0x36c>
 800e140:	f000 809b 	beq.w	800e27a <_dtoa_r+0x4da>
 800e144:	9b00      	ldr	r3, [sp, #0]
 800e146:	4f9d      	ldr	r7, [pc, #628]	; (800e3bc <_dtoa_r+0x61c>)
 800e148:	425e      	negs	r6, r3
 800e14a:	4b9b      	ldr	r3, [pc, #620]	; (800e3b8 <_dtoa_r+0x618>)
 800e14c:	f006 020f 	and.w	r2, r6, #15
 800e150:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e158:	ec51 0b19 	vmov	r0, r1, d9
 800e15c:	f7f2 fa5c 	bl	8000618 <__aeabi_dmul>
 800e160:	1136      	asrs	r6, r6, #4
 800e162:	4682      	mov	sl, r0
 800e164:	468b      	mov	fp, r1
 800e166:	2300      	movs	r3, #0
 800e168:	2502      	movs	r5, #2
 800e16a:	2e00      	cmp	r6, #0
 800e16c:	d17a      	bne.n	800e264 <_dtoa_r+0x4c4>
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d1d3      	bne.n	800e11a <_dtoa_r+0x37a>
 800e172:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e174:	2b00      	cmp	r3, #0
 800e176:	f000 8082 	beq.w	800e27e <_dtoa_r+0x4de>
 800e17a:	4b91      	ldr	r3, [pc, #580]	; (800e3c0 <_dtoa_r+0x620>)
 800e17c:	2200      	movs	r2, #0
 800e17e:	4650      	mov	r0, sl
 800e180:	4659      	mov	r1, fp
 800e182:	f7f2 fcbb 	bl	8000afc <__aeabi_dcmplt>
 800e186:	2800      	cmp	r0, #0
 800e188:	d079      	beq.n	800e27e <_dtoa_r+0x4de>
 800e18a:	9b03      	ldr	r3, [sp, #12]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d076      	beq.n	800e27e <_dtoa_r+0x4de>
 800e190:	9b02      	ldr	r3, [sp, #8]
 800e192:	2b00      	cmp	r3, #0
 800e194:	dd36      	ble.n	800e204 <_dtoa_r+0x464>
 800e196:	9b00      	ldr	r3, [sp, #0]
 800e198:	4650      	mov	r0, sl
 800e19a:	4659      	mov	r1, fp
 800e19c:	1e5f      	subs	r7, r3, #1
 800e19e:	2200      	movs	r2, #0
 800e1a0:	4b88      	ldr	r3, [pc, #544]	; (800e3c4 <_dtoa_r+0x624>)
 800e1a2:	f7f2 fa39 	bl	8000618 <__aeabi_dmul>
 800e1a6:	9e02      	ldr	r6, [sp, #8]
 800e1a8:	4682      	mov	sl, r0
 800e1aa:	468b      	mov	fp, r1
 800e1ac:	3501      	adds	r5, #1
 800e1ae:	4628      	mov	r0, r5
 800e1b0:	f7f2 f9c8 	bl	8000544 <__aeabi_i2d>
 800e1b4:	4652      	mov	r2, sl
 800e1b6:	465b      	mov	r3, fp
 800e1b8:	f7f2 fa2e 	bl	8000618 <__aeabi_dmul>
 800e1bc:	4b82      	ldr	r3, [pc, #520]	; (800e3c8 <_dtoa_r+0x628>)
 800e1be:	2200      	movs	r2, #0
 800e1c0:	f7f2 f874 	bl	80002ac <__adddf3>
 800e1c4:	46d0      	mov	r8, sl
 800e1c6:	46d9      	mov	r9, fp
 800e1c8:	4682      	mov	sl, r0
 800e1ca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e1ce:	2e00      	cmp	r6, #0
 800e1d0:	d158      	bne.n	800e284 <_dtoa_r+0x4e4>
 800e1d2:	4b7e      	ldr	r3, [pc, #504]	; (800e3cc <_dtoa_r+0x62c>)
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	4640      	mov	r0, r8
 800e1d8:	4649      	mov	r1, r9
 800e1da:	f7f2 f865 	bl	80002a8 <__aeabi_dsub>
 800e1de:	4652      	mov	r2, sl
 800e1e0:	465b      	mov	r3, fp
 800e1e2:	4680      	mov	r8, r0
 800e1e4:	4689      	mov	r9, r1
 800e1e6:	f7f2 fca7 	bl	8000b38 <__aeabi_dcmpgt>
 800e1ea:	2800      	cmp	r0, #0
 800e1ec:	f040 8295 	bne.w	800e71a <_dtoa_r+0x97a>
 800e1f0:	4652      	mov	r2, sl
 800e1f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e1f6:	4640      	mov	r0, r8
 800e1f8:	4649      	mov	r1, r9
 800e1fa:	f7f2 fc7f 	bl	8000afc <__aeabi_dcmplt>
 800e1fe:	2800      	cmp	r0, #0
 800e200:	f040 8289 	bne.w	800e716 <_dtoa_r+0x976>
 800e204:	ec5b ab19 	vmov	sl, fp, d9
 800e208:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	f2c0 8148 	blt.w	800e4a0 <_dtoa_r+0x700>
 800e210:	9a00      	ldr	r2, [sp, #0]
 800e212:	2a0e      	cmp	r2, #14
 800e214:	f300 8144 	bgt.w	800e4a0 <_dtoa_r+0x700>
 800e218:	4b67      	ldr	r3, [pc, #412]	; (800e3b8 <_dtoa_r+0x618>)
 800e21a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e21e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e224:	2b00      	cmp	r3, #0
 800e226:	f280 80d5 	bge.w	800e3d4 <_dtoa_r+0x634>
 800e22a:	9b03      	ldr	r3, [sp, #12]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	f300 80d1 	bgt.w	800e3d4 <_dtoa_r+0x634>
 800e232:	f040 826f 	bne.w	800e714 <_dtoa_r+0x974>
 800e236:	4b65      	ldr	r3, [pc, #404]	; (800e3cc <_dtoa_r+0x62c>)
 800e238:	2200      	movs	r2, #0
 800e23a:	4640      	mov	r0, r8
 800e23c:	4649      	mov	r1, r9
 800e23e:	f7f2 f9eb 	bl	8000618 <__aeabi_dmul>
 800e242:	4652      	mov	r2, sl
 800e244:	465b      	mov	r3, fp
 800e246:	f7f2 fc6d 	bl	8000b24 <__aeabi_dcmpge>
 800e24a:	9e03      	ldr	r6, [sp, #12]
 800e24c:	4637      	mov	r7, r6
 800e24e:	2800      	cmp	r0, #0
 800e250:	f040 8245 	bne.w	800e6de <_dtoa_r+0x93e>
 800e254:	9d01      	ldr	r5, [sp, #4]
 800e256:	2331      	movs	r3, #49	; 0x31
 800e258:	f805 3b01 	strb.w	r3, [r5], #1
 800e25c:	9b00      	ldr	r3, [sp, #0]
 800e25e:	3301      	adds	r3, #1
 800e260:	9300      	str	r3, [sp, #0]
 800e262:	e240      	b.n	800e6e6 <_dtoa_r+0x946>
 800e264:	07f2      	lsls	r2, r6, #31
 800e266:	d505      	bpl.n	800e274 <_dtoa_r+0x4d4>
 800e268:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e26c:	f7f2 f9d4 	bl	8000618 <__aeabi_dmul>
 800e270:	3501      	adds	r5, #1
 800e272:	2301      	movs	r3, #1
 800e274:	1076      	asrs	r6, r6, #1
 800e276:	3708      	adds	r7, #8
 800e278:	e777      	b.n	800e16a <_dtoa_r+0x3ca>
 800e27a:	2502      	movs	r5, #2
 800e27c:	e779      	b.n	800e172 <_dtoa_r+0x3d2>
 800e27e:	9f00      	ldr	r7, [sp, #0]
 800e280:	9e03      	ldr	r6, [sp, #12]
 800e282:	e794      	b.n	800e1ae <_dtoa_r+0x40e>
 800e284:	9901      	ldr	r1, [sp, #4]
 800e286:	4b4c      	ldr	r3, [pc, #304]	; (800e3b8 <_dtoa_r+0x618>)
 800e288:	4431      	add	r1, r6
 800e28a:	910d      	str	r1, [sp, #52]	; 0x34
 800e28c:	9908      	ldr	r1, [sp, #32]
 800e28e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e292:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e296:	2900      	cmp	r1, #0
 800e298:	d043      	beq.n	800e322 <_dtoa_r+0x582>
 800e29a:	494d      	ldr	r1, [pc, #308]	; (800e3d0 <_dtoa_r+0x630>)
 800e29c:	2000      	movs	r0, #0
 800e29e:	f7f2 fae5 	bl	800086c <__aeabi_ddiv>
 800e2a2:	4652      	mov	r2, sl
 800e2a4:	465b      	mov	r3, fp
 800e2a6:	f7f1 ffff 	bl	80002a8 <__aeabi_dsub>
 800e2aa:	9d01      	ldr	r5, [sp, #4]
 800e2ac:	4682      	mov	sl, r0
 800e2ae:	468b      	mov	fp, r1
 800e2b0:	4649      	mov	r1, r9
 800e2b2:	4640      	mov	r0, r8
 800e2b4:	f7f2 fc60 	bl	8000b78 <__aeabi_d2iz>
 800e2b8:	4606      	mov	r6, r0
 800e2ba:	f7f2 f943 	bl	8000544 <__aeabi_i2d>
 800e2be:	4602      	mov	r2, r0
 800e2c0:	460b      	mov	r3, r1
 800e2c2:	4640      	mov	r0, r8
 800e2c4:	4649      	mov	r1, r9
 800e2c6:	f7f1 ffef 	bl	80002a8 <__aeabi_dsub>
 800e2ca:	3630      	adds	r6, #48	; 0x30
 800e2cc:	f805 6b01 	strb.w	r6, [r5], #1
 800e2d0:	4652      	mov	r2, sl
 800e2d2:	465b      	mov	r3, fp
 800e2d4:	4680      	mov	r8, r0
 800e2d6:	4689      	mov	r9, r1
 800e2d8:	f7f2 fc10 	bl	8000afc <__aeabi_dcmplt>
 800e2dc:	2800      	cmp	r0, #0
 800e2de:	d163      	bne.n	800e3a8 <_dtoa_r+0x608>
 800e2e0:	4642      	mov	r2, r8
 800e2e2:	464b      	mov	r3, r9
 800e2e4:	4936      	ldr	r1, [pc, #216]	; (800e3c0 <_dtoa_r+0x620>)
 800e2e6:	2000      	movs	r0, #0
 800e2e8:	f7f1 ffde 	bl	80002a8 <__aeabi_dsub>
 800e2ec:	4652      	mov	r2, sl
 800e2ee:	465b      	mov	r3, fp
 800e2f0:	f7f2 fc04 	bl	8000afc <__aeabi_dcmplt>
 800e2f4:	2800      	cmp	r0, #0
 800e2f6:	f040 80b5 	bne.w	800e464 <_dtoa_r+0x6c4>
 800e2fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e2fc:	429d      	cmp	r5, r3
 800e2fe:	d081      	beq.n	800e204 <_dtoa_r+0x464>
 800e300:	4b30      	ldr	r3, [pc, #192]	; (800e3c4 <_dtoa_r+0x624>)
 800e302:	2200      	movs	r2, #0
 800e304:	4650      	mov	r0, sl
 800e306:	4659      	mov	r1, fp
 800e308:	f7f2 f986 	bl	8000618 <__aeabi_dmul>
 800e30c:	4b2d      	ldr	r3, [pc, #180]	; (800e3c4 <_dtoa_r+0x624>)
 800e30e:	4682      	mov	sl, r0
 800e310:	468b      	mov	fp, r1
 800e312:	4640      	mov	r0, r8
 800e314:	4649      	mov	r1, r9
 800e316:	2200      	movs	r2, #0
 800e318:	f7f2 f97e 	bl	8000618 <__aeabi_dmul>
 800e31c:	4680      	mov	r8, r0
 800e31e:	4689      	mov	r9, r1
 800e320:	e7c6      	b.n	800e2b0 <_dtoa_r+0x510>
 800e322:	4650      	mov	r0, sl
 800e324:	4659      	mov	r1, fp
 800e326:	f7f2 f977 	bl	8000618 <__aeabi_dmul>
 800e32a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e32c:	9d01      	ldr	r5, [sp, #4]
 800e32e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e330:	4682      	mov	sl, r0
 800e332:	468b      	mov	fp, r1
 800e334:	4649      	mov	r1, r9
 800e336:	4640      	mov	r0, r8
 800e338:	f7f2 fc1e 	bl	8000b78 <__aeabi_d2iz>
 800e33c:	4606      	mov	r6, r0
 800e33e:	f7f2 f901 	bl	8000544 <__aeabi_i2d>
 800e342:	3630      	adds	r6, #48	; 0x30
 800e344:	4602      	mov	r2, r0
 800e346:	460b      	mov	r3, r1
 800e348:	4640      	mov	r0, r8
 800e34a:	4649      	mov	r1, r9
 800e34c:	f7f1 ffac 	bl	80002a8 <__aeabi_dsub>
 800e350:	f805 6b01 	strb.w	r6, [r5], #1
 800e354:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e356:	429d      	cmp	r5, r3
 800e358:	4680      	mov	r8, r0
 800e35a:	4689      	mov	r9, r1
 800e35c:	f04f 0200 	mov.w	r2, #0
 800e360:	d124      	bne.n	800e3ac <_dtoa_r+0x60c>
 800e362:	4b1b      	ldr	r3, [pc, #108]	; (800e3d0 <_dtoa_r+0x630>)
 800e364:	4650      	mov	r0, sl
 800e366:	4659      	mov	r1, fp
 800e368:	f7f1 ffa0 	bl	80002ac <__adddf3>
 800e36c:	4602      	mov	r2, r0
 800e36e:	460b      	mov	r3, r1
 800e370:	4640      	mov	r0, r8
 800e372:	4649      	mov	r1, r9
 800e374:	f7f2 fbe0 	bl	8000b38 <__aeabi_dcmpgt>
 800e378:	2800      	cmp	r0, #0
 800e37a:	d173      	bne.n	800e464 <_dtoa_r+0x6c4>
 800e37c:	4652      	mov	r2, sl
 800e37e:	465b      	mov	r3, fp
 800e380:	4913      	ldr	r1, [pc, #76]	; (800e3d0 <_dtoa_r+0x630>)
 800e382:	2000      	movs	r0, #0
 800e384:	f7f1 ff90 	bl	80002a8 <__aeabi_dsub>
 800e388:	4602      	mov	r2, r0
 800e38a:	460b      	mov	r3, r1
 800e38c:	4640      	mov	r0, r8
 800e38e:	4649      	mov	r1, r9
 800e390:	f7f2 fbb4 	bl	8000afc <__aeabi_dcmplt>
 800e394:	2800      	cmp	r0, #0
 800e396:	f43f af35 	beq.w	800e204 <_dtoa_r+0x464>
 800e39a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e39c:	1e6b      	subs	r3, r5, #1
 800e39e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e3a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e3a4:	2b30      	cmp	r3, #48	; 0x30
 800e3a6:	d0f8      	beq.n	800e39a <_dtoa_r+0x5fa>
 800e3a8:	9700      	str	r7, [sp, #0]
 800e3aa:	e049      	b.n	800e440 <_dtoa_r+0x6a0>
 800e3ac:	4b05      	ldr	r3, [pc, #20]	; (800e3c4 <_dtoa_r+0x624>)
 800e3ae:	f7f2 f933 	bl	8000618 <__aeabi_dmul>
 800e3b2:	4680      	mov	r8, r0
 800e3b4:	4689      	mov	r9, r1
 800e3b6:	e7bd      	b.n	800e334 <_dtoa_r+0x594>
 800e3b8:	08012980 	.word	0x08012980
 800e3bc:	08012958 	.word	0x08012958
 800e3c0:	3ff00000 	.word	0x3ff00000
 800e3c4:	40240000 	.word	0x40240000
 800e3c8:	401c0000 	.word	0x401c0000
 800e3cc:	40140000 	.word	0x40140000
 800e3d0:	3fe00000 	.word	0x3fe00000
 800e3d4:	9d01      	ldr	r5, [sp, #4]
 800e3d6:	4656      	mov	r6, sl
 800e3d8:	465f      	mov	r7, fp
 800e3da:	4642      	mov	r2, r8
 800e3dc:	464b      	mov	r3, r9
 800e3de:	4630      	mov	r0, r6
 800e3e0:	4639      	mov	r1, r7
 800e3e2:	f7f2 fa43 	bl	800086c <__aeabi_ddiv>
 800e3e6:	f7f2 fbc7 	bl	8000b78 <__aeabi_d2iz>
 800e3ea:	4682      	mov	sl, r0
 800e3ec:	f7f2 f8aa 	bl	8000544 <__aeabi_i2d>
 800e3f0:	4642      	mov	r2, r8
 800e3f2:	464b      	mov	r3, r9
 800e3f4:	f7f2 f910 	bl	8000618 <__aeabi_dmul>
 800e3f8:	4602      	mov	r2, r0
 800e3fa:	460b      	mov	r3, r1
 800e3fc:	4630      	mov	r0, r6
 800e3fe:	4639      	mov	r1, r7
 800e400:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e404:	f7f1 ff50 	bl	80002a8 <__aeabi_dsub>
 800e408:	f805 6b01 	strb.w	r6, [r5], #1
 800e40c:	9e01      	ldr	r6, [sp, #4]
 800e40e:	9f03      	ldr	r7, [sp, #12]
 800e410:	1bae      	subs	r6, r5, r6
 800e412:	42b7      	cmp	r7, r6
 800e414:	4602      	mov	r2, r0
 800e416:	460b      	mov	r3, r1
 800e418:	d135      	bne.n	800e486 <_dtoa_r+0x6e6>
 800e41a:	f7f1 ff47 	bl	80002ac <__adddf3>
 800e41e:	4642      	mov	r2, r8
 800e420:	464b      	mov	r3, r9
 800e422:	4606      	mov	r6, r0
 800e424:	460f      	mov	r7, r1
 800e426:	f7f2 fb87 	bl	8000b38 <__aeabi_dcmpgt>
 800e42a:	b9d0      	cbnz	r0, 800e462 <_dtoa_r+0x6c2>
 800e42c:	4642      	mov	r2, r8
 800e42e:	464b      	mov	r3, r9
 800e430:	4630      	mov	r0, r6
 800e432:	4639      	mov	r1, r7
 800e434:	f7f2 fb58 	bl	8000ae8 <__aeabi_dcmpeq>
 800e438:	b110      	cbz	r0, 800e440 <_dtoa_r+0x6a0>
 800e43a:	f01a 0f01 	tst.w	sl, #1
 800e43e:	d110      	bne.n	800e462 <_dtoa_r+0x6c2>
 800e440:	4620      	mov	r0, r4
 800e442:	ee18 1a10 	vmov	r1, s16
 800e446:	f000 fe75 	bl	800f134 <_Bfree>
 800e44a:	2300      	movs	r3, #0
 800e44c:	9800      	ldr	r0, [sp, #0]
 800e44e:	702b      	strb	r3, [r5, #0]
 800e450:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e452:	3001      	adds	r0, #1
 800e454:	6018      	str	r0, [r3, #0]
 800e456:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e458:	2b00      	cmp	r3, #0
 800e45a:	f43f acf1 	beq.w	800de40 <_dtoa_r+0xa0>
 800e45e:	601d      	str	r5, [r3, #0]
 800e460:	e4ee      	b.n	800de40 <_dtoa_r+0xa0>
 800e462:	9f00      	ldr	r7, [sp, #0]
 800e464:	462b      	mov	r3, r5
 800e466:	461d      	mov	r5, r3
 800e468:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e46c:	2a39      	cmp	r2, #57	; 0x39
 800e46e:	d106      	bne.n	800e47e <_dtoa_r+0x6de>
 800e470:	9a01      	ldr	r2, [sp, #4]
 800e472:	429a      	cmp	r2, r3
 800e474:	d1f7      	bne.n	800e466 <_dtoa_r+0x6c6>
 800e476:	9901      	ldr	r1, [sp, #4]
 800e478:	2230      	movs	r2, #48	; 0x30
 800e47a:	3701      	adds	r7, #1
 800e47c:	700a      	strb	r2, [r1, #0]
 800e47e:	781a      	ldrb	r2, [r3, #0]
 800e480:	3201      	adds	r2, #1
 800e482:	701a      	strb	r2, [r3, #0]
 800e484:	e790      	b.n	800e3a8 <_dtoa_r+0x608>
 800e486:	4ba6      	ldr	r3, [pc, #664]	; (800e720 <_dtoa_r+0x980>)
 800e488:	2200      	movs	r2, #0
 800e48a:	f7f2 f8c5 	bl	8000618 <__aeabi_dmul>
 800e48e:	2200      	movs	r2, #0
 800e490:	2300      	movs	r3, #0
 800e492:	4606      	mov	r6, r0
 800e494:	460f      	mov	r7, r1
 800e496:	f7f2 fb27 	bl	8000ae8 <__aeabi_dcmpeq>
 800e49a:	2800      	cmp	r0, #0
 800e49c:	d09d      	beq.n	800e3da <_dtoa_r+0x63a>
 800e49e:	e7cf      	b.n	800e440 <_dtoa_r+0x6a0>
 800e4a0:	9a08      	ldr	r2, [sp, #32]
 800e4a2:	2a00      	cmp	r2, #0
 800e4a4:	f000 80d7 	beq.w	800e656 <_dtoa_r+0x8b6>
 800e4a8:	9a06      	ldr	r2, [sp, #24]
 800e4aa:	2a01      	cmp	r2, #1
 800e4ac:	f300 80ba 	bgt.w	800e624 <_dtoa_r+0x884>
 800e4b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e4b2:	2a00      	cmp	r2, #0
 800e4b4:	f000 80b2 	beq.w	800e61c <_dtoa_r+0x87c>
 800e4b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e4bc:	9e07      	ldr	r6, [sp, #28]
 800e4be:	9d04      	ldr	r5, [sp, #16]
 800e4c0:	9a04      	ldr	r2, [sp, #16]
 800e4c2:	441a      	add	r2, r3
 800e4c4:	9204      	str	r2, [sp, #16]
 800e4c6:	9a05      	ldr	r2, [sp, #20]
 800e4c8:	2101      	movs	r1, #1
 800e4ca:	441a      	add	r2, r3
 800e4cc:	4620      	mov	r0, r4
 800e4ce:	9205      	str	r2, [sp, #20]
 800e4d0:	f000 ff32 	bl	800f338 <__i2b>
 800e4d4:	4607      	mov	r7, r0
 800e4d6:	2d00      	cmp	r5, #0
 800e4d8:	dd0c      	ble.n	800e4f4 <_dtoa_r+0x754>
 800e4da:	9b05      	ldr	r3, [sp, #20]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	dd09      	ble.n	800e4f4 <_dtoa_r+0x754>
 800e4e0:	42ab      	cmp	r3, r5
 800e4e2:	9a04      	ldr	r2, [sp, #16]
 800e4e4:	bfa8      	it	ge
 800e4e6:	462b      	movge	r3, r5
 800e4e8:	1ad2      	subs	r2, r2, r3
 800e4ea:	9204      	str	r2, [sp, #16]
 800e4ec:	9a05      	ldr	r2, [sp, #20]
 800e4ee:	1aed      	subs	r5, r5, r3
 800e4f0:	1ad3      	subs	r3, r2, r3
 800e4f2:	9305      	str	r3, [sp, #20]
 800e4f4:	9b07      	ldr	r3, [sp, #28]
 800e4f6:	b31b      	cbz	r3, 800e540 <_dtoa_r+0x7a0>
 800e4f8:	9b08      	ldr	r3, [sp, #32]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	f000 80af 	beq.w	800e65e <_dtoa_r+0x8be>
 800e500:	2e00      	cmp	r6, #0
 800e502:	dd13      	ble.n	800e52c <_dtoa_r+0x78c>
 800e504:	4639      	mov	r1, r7
 800e506:	4632      	mov	r2, r6
 800e508:	4620      	mov	r0, r4
 800e50a:	f000 ffd5 	bl	800f4b8 <__pow5mult>
 800e50e:	ee18 2a10 	vmov	r2, s16
 800e512:	4601      	mov	r1, r0
 800e514:	4607      	mov	r7, r0
 800e516:	4620      	mov	r0, r4
 800e518:	f000 ff24 	bl	800f364 <__multiply>
 800e51c:	ee18 1a10 	vmov	r1, s16
 800e520:	4680      	mov	r8, r0
 800e522:	4620      	mov	r0, r4
 800e524:	f000 fe06 	bl	800f134 <_Bfree>
 800e528:	ee08 8a10 	vmov	s16, r8
 800e52c:	9b07      	ldr	r3, [sp, #28]
 800e52e:	1b9a      	subs	r2, r3, r6
 800e530:	d006      	beq.n	800e540 <_dtoa_r+0x7a0>
 800e532:	ee18 1a10 	vmov	r1, s16
 800e536:	4620      	mov	r0, r4
 800e538:	f000 ffbe 	bl	800f4b8 <__pow5mult>
 800e53c:	ee08 0a10 	vmov	s16, r0
 800e540:	2101      	movs	r1, #1
 800e542:	4620      	mov	r0, r4
 800e544:	f000 fef8 	bl	800f338 <__i2b>
 800e548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	4606      	mov	r6, r0
 800e54e:	f340 8088 	ble.w	800e662 <_dtoa_r+0x8c2>
 800e552:	461a      	mov	r2, r3
 800e554:	4601      	mov	r1, r0
 800e556:	4620      	mov	r0, r4
 800e558:	f000 ffae 	bl	800f4b8 <__pow5mult>
 800e55c:	9b06      	ldr	r3, [sp, #24]
 800e55e:	2b01      	cmp	r3, #1
 800e560:	4606      	mov	r6, r0
 800e562:	f340 8081 	ble.w	800e668 <_dtoa_r+0x8c8>
 800e566:	f04f 0800 	mov.w	r8, #0
 800e56a:	6933      	ldr	r3, [r6, #16]
 800e56c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e570:	6918      	ldr	r0, [r3, #16]
 800e572:	f000 fe91 	bl	800f298 <__hi0bits>
 800e576:	f1c0 0020 	rsb	r0, r0, #32
 800e57a:	9b05      	ldr	r3, [sp, #20]
 800e57c:	4418      	add	r0, r3
 800e57e:	f010 001f 	ands.w	r0, r0, #31
 800e582:	f000 8092 	beq.w	800e6aa <_dtoa_r+0x90a>
 800e586:	f1c0 0320 	rsb	r3, r0, #32
 800e58a:	2b04      	cmp	r3, #4
 800e58c:	f340 808a 	ble.w	800e6a4 <_dtoa_r+0x904>
 800e590:	f1c0 001c 	rsb	r0, r0, #28
 800e594:	9b04      	ldr	r3, [sp, #16]
 800e596:	4403      	add	r3, r0
 800e598:	9304      	str	r3, [sp, #16]
 800e59a:	9b05      	ldr	r3, [sp, #20]
 800e59c:	4403      	add	r3, r0
 800e59e:	4405      	add	r5, r0
 800e5a0:	9305      	str	r3, [sp, #20]
 800e5a2:	9b04      	ldr	r3, [sp, #16]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	dd07      	ble.n	800e5b8 <_dtoa_r+0x818>
 800e5a8:	ee18 1a10 	vmov	r1, s16
 800e5ac:	461a      	mov	r2, r3
 800e5ae:	4620      	mov	r0, r4
 800e5b0:	f000 ffdc 	bl	800f56c <__lshift>
 800e5b4:	ee08 0a10 	vmov	s16, r0
 800e5b8:	9b05      	ldr	r3, [sp, #20]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	dd05      	ble.n	800e5ca <_dtoa_r+0x82a>
 800e5be:	4631      	mov	r1, r6
 800e5c0:	461a      	mov	r2, r3
 800e5c2:	4620      	mov	r0, r4
 800e5c4:	f000 ffd2 	bl	800f56c <__lshift>
 800e5c8:	4606      	mov	r6, r0
 800e5ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d06e      	beq.n	800e6ae <_dtoa_r+0x90e>
 800e5d0:	ee18 0a10 	vmov	r0, s16
 800e5d4:	4631      	mov	r1, r6
 800e5d6:	f001 f839 	bl	800f64c <__mcmp>
 800e5da:	2800      	cmp	r0, #0
 800e5dc:	da67      	bge.n	800e6ae <_dtoa_r+0x90e>
 800e5de:	9b00      	ldr	r3, [sp, #0]
 800e5e0:	3b01      	subs	r3, #1
 800e5e2:	ee18 1a10 	vmov	r1, s16
 800e5e6:	9300      	str	r3, [sp, #0]
 800e5e8:	220a      	movs	r2, #10
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	4620      	mov	r0, r4
 800e5ee:	f000 fdc3 	bl	800f178 <__multadd>
 800e5f2:	9b08      	ldr	r3, [sp, #32]
 800e5f4:	ee08 0a10 	vmov	s16, r0
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	f000 81b1 	beq.w	800e960 <_dtoa_r+0xbc0>
 800e5fe:	2300      	movs	r3, #0
 800e600:	4639      	mov	r1, r7
 800e602:	220a      	movs	r2, #10
 800e604:	4620      	mov	r0, r4
 800e606:	f000 fdb7 	bl	800f178 <__multadd>
 800e60a:	9b02      	ldr	r3, [sp, #8]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	4607      	mov	r7, r0
 800e610:	f300 808e 	bgt.w	800e730 <_dtoa_r+0x990>
 800e614:	9b06      	ldr	r3, [sp, #24]
 800e616:	2b02      	cmp	r3, #2
 800e618:	dc51      	bgt.n	800e6be <_dtoa_r+0x91e>
 800e61a:	e089      	b.n	800e730 <_dtoa_r+0x990>
 800e61c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e61e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e622:	e74b      	b.n	800e4bc <_dtoa_r+0x71c>
 800e624:	9b03      	ldr	r3, [sp, #12]
 800e626:	1e5e      	subs	r6, r3, #1
 800e628:	9b07      	ldr	r3, [sp, #28]
 800e62a:	42b3      	cmp	r3, r6
 800e62c:	bfbf      	itttt	lt
 800e62e:	9b07      	ldrlt	r3, [sp, #28]
 800e630:	9607      	strlt	r6, [sp, #28]
 800e632:	1af2      	sublt	r2, r6, r3
 800e634:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e636:	bfb6      	itet	lt
 800e638:	189b      	addlt	r3, r3, r2
 800e63a:	1b9e      	subge	r6, r3, r6
 800e63c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e63e:	9b03      	ldr	r3, [sp, #12]
 800e640:	bfb8      	it	lt
 800e642:	2600      	movlt	r6, #0
 800e644:	2b00      	cmp	r3, #0
 800e646:	bfb7      	itett	lt
 800e648:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e64c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e650:	1a9d      	sublt	r5, r3, r2
 800e652:	2300      	movlt	r3, #0
 800e654:	e734      	b.n	800e4c0 <_dtoa_r+0x720>
 800e656:	9e07      	ldr	r6, [sp, #28]
 800e658:	9d04      	ldr	r5, [sp, #16]
 800e65a:	9f08      	ldr	r7, [sp, #32]
 800e65c:	e73b      	b.n	800e4d6 <_dtoa_r+0x736>
 800e65e:	9a07      	ldr	r2, [sp, #28]
 800e660:	e767      	b.n	800e532 <_dtoa_r+0x792>
 800e662:	9b06      	ldr	r3, [sp, #24]
 800e664:	2b01      	cmp	r3, #1
 800e666:	dc18      	bgt.n	800e69a <_dtoa_r+0x8fa>
 800e668:	f1ba 0f00 	cmp.w	sl, #0
 800e66c:	d115      	bne.n	800e69a <_dtoa_r+0x8fa>
 800e66e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e672:	b993      	cbnz	r3, 800e69a <_dtoa_r+0x8fa>
 800e674:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e678:	0d1b      	lsrs	r3, r3, #20
 800e67a:	051b      	lsls	r3, r3, #20
 800e67c:	b183      	cbz	r3, 800e6a0 <_dtoa_r+0x900>
 800e67e:	9b04      	ldr	r3, [sp, #16]
 800e680:	3301      	adds	r3, #1
 800e682:	9304      	str	r3, [sp, #16]
 800e684:	9b05      	ldr	r3, [sp, #20]
 800e686:	3301      	adds	r3, #1
 800e688:	9305      	str	r3, [sp, #20]
 800e68a:	f04f 0801 	mov.w	r8, #1
 800e68e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e690:	2b00      	cmp	r3, #0
 800e692:	f47f af6a 	bne.w	800e56a <_dtoa_r+0x7ca>
 800e696:	2001      	movs	r0, #1
 800e698:	e76f      	b.n	800e57a <_dtoa_r+0x7da>
 800e69a:	f04f 0800 	mov.w	r8, #0
 800e69e:	e7f6      	b.n	800e68e <_dtoa_r+0x8ee>
 800e6a0:	4698      	mov	r8, r3
 800e6a2:	e7f4      	b.n	800e68e <_dtoa_r+0x8ee>
 800e6a4:	f43f af7d 	beq.w	800e5a2 <_dtoa_r+0x802>
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	301c      	adds	r0, #28
 800e6ac:	e772      	b.n	800e594 <_dtoa_r+0x7f4>
 800e6ae:	9b03      	ldr	r3, [sp, #12]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	dc37      	bgt.n	800e724 <_dtoa_r+0x984>
 800e6b4:	9b06      	ldr	r3, [sp, #24]
 800e6b6:	2b02      	cmp	r3, #2
 800e6b8:	dd34      	ble.n	800e724 <_dtoa_r+0x984>
 800e6ba:	9b03      	ldr	r3, [sp, #12]
 800e6bc:	9302      	str	r3, [sp, #8]
 800e6be:	9b02      	ldr	r3, [sp, #8]
 800e6c0:	b96b      	cbnz	r3, 800e6de <_dtoa_r+0x93e>
 800e6c2:	4631      	mov	r1, r6
 800e6c4:	2205      	movs	r2, #5
 800e6c6:	4620      	mov	r0, r4
 800e6c8:	f000 fd56 	bl	800f178 <__multadd>
 800e6cc:	4601      	mov	r1, r0
 800e6ce:	4606      	mov	r6, r0
 800e6d0:	ee18 0a10 	vmov	r0, s16
 800e6d4:	f000 ffba 	bl	800f64c <__mcmp>
 800e6d8:	2800      	cmp	r0, #0
 800e6da:	f73f adbb 	bgt.w	800e254 <_dtoa_r+0x4b4>
 800e6de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6e0:	9d01      	ldr	r5, [sp, #4]
 800e6e2:	43db      	mvns	r3, r3
 800e6e4:	9300      	str	r3, [sp, #0]
 800e6e6:	f04f 0800 	mov.w	r8, #0
 800e6ea:	4631      	mov	r1, r6
 800e6ec:	4620      	mov	r0, r4
 800e6ee:	f000 fd21 	bl	800f134 <_Bfree>
 800e6f2:	2f00      	cmp	r7, #0
 800e6f4:	f43f aea4 	beq.w	800e440 <_dtoa_r+0x6a0>
 800e6f8:	f1b8 0f00 	cmp.w	r8, #0
 800e6fc:	d005      	beq.n	800e70a <_dtoa_r+0x96a>
 800e6fe:	45b8      	cmp	r8, r7
 800e700:	d003      	beq.n	800e70a <_dtoa_r+0x96a>
 800e702:	4641      	mov	r1, r8
 800e704:	4620      	mov	r0, r4
 800e706:	f000 fd15 	bl	800f134 <_Bfree>
 800e70a:	4639      	mov	r1, r7
 800e70c:	4620      	mov	r0, r4
 800e70e:	f000 fd11 	bl	800f134 <_Bfree>
 800e712:	e695      	b.n	800e440 <_dtoa_r+0x6a0>
 800e714:	2600      	movs	r6, #0
 800e716:	4637      	mov	r7, r6
 800e718:	e7e1      	b.n	800e6de <_dtoa_r+0x93e>
 800e71a:	9700      	str	r7, [sp, #0]
 800e71c:	4637      	mov	r7, r6
 800e71e:	e599      	b.n	800e254 <_dtoa_r+0x4b4>
 800e720:	40240000 	.word	0x40240000
 800e724:	9b08      	ldr	r3, [sp, #32]
 800e726:	2b00      	cmp	r3, #0
 800e728:	f000 80ca 	beq.w	800e8c0 <_dtoa_r+0xb20>
 800e72c:	9b03      	ldr	r3, [sp, #12]
 800e72e:	9302      	str	r3, [sp, #8]
 800e730:	2d00      	cmp	r5, #0
 800e732:	dd05      	ble.n	800e740 <_dtoa_r+0x9a0>
 800e734:	4639      	mov	r1, r7
 800e736:	462a      	mov	r2, r5
 800e738:	4620      	mov	r0, r4
 800e73a:	f000 ff17 	bl	800f56c <__lshift>
 800e73e:	4607      	mov	r7, r0
 800e740:	f1b8 0f00 	cmp.w	r8, #0
 800e744:	d05b      	beq.n	800e7fe <_dtoa_r+0xa5e>
 800e746:	6879      	ldr	r1, [r7, #4]
 800e748:	4620      	mov	r0, r4
 800e74a:	f000 fcb3 	bl	800f0b4 <_Balloc>
 800e74e:	4605      	mov	r5, r0
 800e750:	b928      	cbnz	r0, 800e75e <_dtoa_r+0x9be>
 800e752:	4b87      	ldr	r3, [pc, #540]	; (800e970 <_dtoa_r+0xbd0>)
 800e754:	4602      	mov	r2, r0
 800e756:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e75a:	f7ff bb3b 	b.w	800ddd4 <_dtoa_r+0x34>
 800e75e:	693a      	ldr	r2, [r7, #16]
 800e760:	3202      	adds	r2, #2
 800e762:	0092      	lsls	r2, r2, #2
 800e764:	f107 010c 	add.w	r1, r7, #12
 800e768:	300c      	adds	r0, #12
 800e76a:	f000 fc95 	bl	800f098 <memcpy>
 800e76e:	2201      	movs	r2, #1
 800e770:	4629      	mov	r1, r5
 800e772:	4620      	mov	r0, r4
 800e774:	f000 fefa 	bl	800f56c <__lshift>
 800e778:	9b01      	ldr	r3, [sp, #4]
 800e77a:	f103 0901 	add.w	r9, r3, #1
 800e77e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e782:	4413      	add	r3, r2
 800e784:	9305      	str	r3, [sp, #20]
 800e786:	f00a 0301 	and.w	r3, sl, #1
 800e78a:	46b8      	mov	r8, r7
 800e78c:	9304      	str	r3, [sp, #16]
 800e78e:	4607      	mov	r7, r0
 800e790:	4631      	mov	r1, r6
 800e792:	ee18 0a10 	vmov	r0, s16
 800e796:	f7ff fa77 	bl	800dc88 <quorem>
 800e79a:	4641      	mov	r1, r8
 800e79c:	9002      	str	r0, [sp, #8]
 800e79e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e7a2:	ee18 0a10 	vmov	r0, s16
 800e7a6:	f000 ff51 	bl	800f64c <__mcmp>
 800e7aa:	463a      	mov	r2, r7
 800e7ac:	9003      	str	r0, [sp, #12]
 800e7ae:	4631      	mov	r1, r6
 800e7b0:	4620      	mov	r0, r4
 800e7b2:	f000 ff67 	bl	800f684 <__mdiff>
 800e7b6:	68c2      	ldr	r2, [r0, #12]
 800e7b8:	f109 3bff 	add.w	fp, r9, #4294967295
 800e7bc:	4605      	mov	r5, r0
 800e7be:	bb02      	cbnz	r2, 800e802 <_dtoa_r+0xa62>
 800e7c0:	4601      	mov	r1, r0
 800e7c2:	ee18 0a10 	vmov	r0, s16
 800e7c6:	f000 ff41 	bl	800f64c <__mcmp>
 800e7ca:	4602      	mov	r2, r0
 800e7cc:	4629      	mov	r1, r5
 800e7ce:	4620      	mov	r0, r4
 800e7d0:	9207      	str	r2, [sp, #28]
 800e7d2:	f000 fcaf 	bl	800f134 <_Bfree>
 800e7d6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e7da:	ea43 0102 	orr.w	r1, r3, r2
 800e7de:	9b04      	ldr	r3, [sp, #16]
 800e7e0:	430b      	orrs	r3, r1
 800e7e2:	464d      	mov	r5, r9
 800e7e4:	d10f      	bne.n	800e806 <_dtoa_r+0xa66>
 800e7e6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e7ea:	d02a      	beq.n	800e842 <_dtoa_r+0xaa2>
 800e7ec:	9b03      	ldr	r3, [sp, #12]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	dd02      	ble.n	800e7f8 <_dtoa_r+0xa58>
 800e7f2:	9b02      	ldr	r3, [sp, #8]
 800e7f4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e7f8:	f88b a000 	strb.w	sl, [fp]
 800e7fc:	e775      	b.n	800e6ea <_dtoa_r+0x94a>
 800e7fe:	4638      	mov	r0, r7
 800e800:	e7ba      	b.n	800e778 <_dtoa_r+0x9d8>
 800e802:	2201      	movs	r2, #1
 800e804:	e7e2      	b.n	800e7cc <_dtoa_r+0xa2c>
 800e806:	9b03      	ldr	r3, [sp, #12]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	db04      	blt.n	800e816 <_dtoa_r+0xa76>
 800e80c:	9906      	ldr	r1, [sp, #24]
 800e80e:	430b      	orrs	r3, r1
 800e810:	9904      	ldr	r1, [sp, #16]
 800e812:	430b      	orrs	r3, r1
 800e814:	d122      	bne.n	800e85c <_dtoa_r+0xabc>
 800e816:	2a00      	cmp	r2, #0
 800e818:	ddee      	ble.n	800e7f8 <_dtoa_r+0xa58>
 800e81a:	ee18 1a10 	vmov	r1, s16
 800e81e:	2201      	movs	r2, #1
 800e820:	4620      	mov	r0, r4
 800e822:	f000 fea3 	bl	800f56c <__lshift>
 800e826:	4631      	mov	r1, r6
 800e828:	ee08 0a10 	vmov	s16, r0
 800e82c:	f000 ff0e 	bl	800f64c <__mcmp>
 800e830:	2800      	cmp	r0, #0
 800e832:	dc03      	bgt.n	800e83c <_dtoa_r+0xa9c>
 800e834:	d1e0      	bne.n	800e7f8 <_dtoa_r+0xa58>
 800e836:	f01a 0f01 	tst.w	sl, #1
 800e83a:	d0dd      	beq.n	800e7f8 <_dtoa_r+0xa58>
 800e83c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e840:	d1d7      	bne.n	800e7f2 <_dtoa_r+0xa52>
 800e842:	2339      	movs	r3, #57	; 0x39
 800e844:	f88b 3000 	strb.w	r3, [fp]
 800e848:	462b      	mov	r3, r5
 800e84a:	461d      	mov	r5, r3
 800e84c:	3b01      	subs	r3, #1
 800e84e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e852:	2a39      	cmp	r2, #57	; 0x39
 800e854:	d071      	beq.n	800e93a <_dtoa_r+0xb9a>
 800e856:	3201      	adds	r2, #1
 800e858:	701a      	strb	r2, [r3, #0]
 800e85a:	e746      	b.n	800e6ea <_dtoa_r+0x94a>
 800e85c:	2a00      	cmp	r2, #0
 800e85e:	dd07      	ble.n	800e870 <_dtoa_r+0xad0>
 800e860:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e864:	d0ed      	beq.n	800e842 <_dtoa_r+0xaa2>
 800e866:	f10a 0301 	add.w	r3, sl, #1
 800e86a:	f88b 3000 	strb.w	r3, [fp]
 800e86e:	e73c      	b.n	800e6ea <_dtoa_r+0x94a>
 800e870:	9b05      	ldr	r3, [sp, #20]
 800e872:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e876:	4599      	cmp	r9, r3
 800e878:	d047      	beq.n	800e90a <_dtoa_r+0xb6a>
 800e87a:	ee18 1a10 	vmov	r1, s16
 800e87e:	2300      	movs	r3, #0
 800e880:	220a      	movs	r2, #10
 800e882:	4620      	mov	r0, r4
 800e884:	f000 fc78 	bl	800f178 <__multadd>
 800e888:	45b8      	cmp	r8, r7
 800e88a:	ee08 0a10 	vmov	s16, r0
 800e88e:	f04f 0300 	mov.w	r3, #0
 800e892:	f04f 020a 	mov.w	r2, #10
 800e896:	4641      	mov	r1, r8
 800e898:	4620      	mov	r0, r4
 800e89a:	d106      	bne.n	800e8aa <_dtoa_r+0xb0a>
 800e89c:	f000 fc6c 	bl	800f178 <__multadd>
 800e8a0:	4680      	mov	r8, r0
 800e8a2:	4607      	mov	r7, r0
 800e8a4:	f109 0901 	add.w	r9, r9, #1
 800e8a8:	e772      	b.n	800e790 <_dtoa_r+0x9f0>
 800e8aa:	f000 fc65 	bl	800f178 <__multadd>
 800e8ae:	4639      	mov	r1, r7
 800e8b0:	4680      	mov	r8, r0
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	220a      	movs	r2, #10
 800e8b6:	4620      	mov	r0, r4
 800e8b8:	f000 fc5e 	bl	800f178 <__multadd>
 800e8bc:	4607      	mov	r7, r0
 800e8be:	e7f1      	b.n	800e8a4 <_dtoa_r+0xb04>
 800e8c0:	9b03      	ldr	r3, [sp, #12]
 800e8c2:	9302      	str	r3, [sp, #8]
 800e8c4:	9d01      	ldr	r5, [sp, #4]
 800e8c6:	ee18 0a10 	vmov	r0, s16
 800e8ca:	4631      	mov	r1, r6
 800e8cc:	f7ff f9dc 	bl	800dc88 <quorem>
 800e8d0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e8d4:	9b01      	ldr	r3, [sp, #4]
 800e8d6:	f805 ab01 	strb.w	sl, [r5], #1
 800e8da:	1aea      	subs	r2, r5, r3
 800e8dc:	9b02      	ldr	r3, [sp, #8]
 800e8de:	4293      	cmp	r3, r2
 800e8e0:	dd09      	ble.n	800e8f6 <_dtoa_r+0xb56>
 800e8e2:	ee18 1a10 	vmov	r1, s16
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	220a      	movs	r2, #10
 800e8ea:	4620      	mov	r0, r4
 800e8ec:	f000 fc44 	bl	800f178 <__multadd>
 800e8f0:	ee08 0a10 	vmov	s16, r0
 800e8f4:	e7e7      	b.n	800e8c6 <_dtoa_r+0xb26>
 800e8f6:	9b02      	ldr	r3, [sp, #8]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	bfc8      	it	gt
 800e8fc:	461d      	movgt	r5, r3
 800e8fe:	9b01      	ldr	r3, [sp, #4]
 800e900:	bfd8      	it	le
 800e902:	2501      	movle	r5, #1
 800e904:	441d      	add	r5, r3
 800e906:	f04f 0800 	mov.w	r8, #0
 800e90a:	ee18 1a10 	vmov	r1, s16
 800e90e:	2201      	movs	r2, #1
 800e910:	4620      	mov	r0, r4
 800e912:	f000 fe2b 	bl	800f56c <__lshift>
 800e916:	4631      	mov	r1, r6
 800e918:	ee08 0a10 	vmov	s16, r0
 800e91c:	f000 fe96 	bl	800f64c <__mcmp>
 800e920:	2800      	cmp	r0, #0
 800e922:	dc91      	bgt.n	800e848 <_dtoa_r+0xaa8>
 800e924:	d102      	bne.n	800e92c <_dtoa_r+0xb8c>
 800e926:	f01a 0f01 	tst.w	sl, #1
 800e92a:	d18d      	bne.n	800e848 <_dtoa_r+0xaa8>
 800e92c:	462b      	mov	r3, r5
 800e92e:	461d      	mov	r5, r3
 800e930:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e934:	2a30      	cmp	r2, #48	; 0x30
 800e936:	d0fa      	beq.n	800e92e <_dtoa_r+0xb8e>
 800e938:	e6d7      	b.n	800e6ea <_dtoa_r+0x94a>
 800e93a:	9a01      	ldr	r2, [sp, #4]
 800e93c:	429a      	cmp	r2, r3
 800e93e:	d184      	bne.n	800e84a <_dtoa_r+0xaaa>
 800e940:	9b00      	ldr	r3, [sp, #0]
 800e942:	3301      	adds	r3, #1
 800e944:	9300      	str	r3, [sp, #0]
 800e946:	2331      	movs	r3, #49	; 0x31
 800e948:	7013      	strb	r3, [r2, #0]
 800e94a:	e6ce      	b.n	800e6ea <_dtoa_r+0x94a>
 800e94c:	4b09      	ldr	r3, [pc, #36]	; (800e974 <_dtoa_r+0xbd4>)
 800e94e:	f7ff ba95 	b.w	800de7c <_dtoa_r+0xdc>
 800e952:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e954:	2b00      	cmp	r3, #0
 800e956:	f47f aa6e 	bne.w	800de36 <_dtoa_r+0x96>
 800e95a:	4b07      	ldr	r3, [pc, #28]	; (800e978 <_dtoa_r+0xbd8>)
 800e95c:	f7ff ba8e 	b.w	800de7c <_dtoa_r+0xdc>
 800e960:	9b02      	ldr	r3, [sp, #8]
 800e962:	2b00      	cmp	r3, #0
 800e964:	dcae      	bgt.n	800e8c4 <_dtoa_r+0xb24>
 800e966:	9b06      	ldr	r3, [sp, #24]
 800e968:	2b02      	cmp	r3, #2
 800e96a:	f73f aea8 	bgt.w	800e6be <_dtoa_r+0x91e>
 800e96e:	e7a9      	b.n	800e8c4 <_dtoa_r+0xb24>
 800e970:	08012870 	.word	0x08012870
 800e974:	08012674 	.word	0x08012674
 800e978:	080127f1 	.word	0x080127f1

0800e97c <rshift>:
 800e97c:	6903      	ldr	r3, [r0, #16]
 800e97e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e982:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e986:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e98a:	f100 0414 	add.w	r4, r0, #20
 800e98e:	dd45      	ble.n	800ea1c <rshift+0xa0>
 800e990:	f011 011f 	ands.w	r1, r1, #31
 800e994:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e998:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e99c:	d10c      	bne.n	800e9b8 <rshift+0x3c>
 800e99e:	f100 0710 	add.w	r7, r0, #16
 800e9a2:	4629      	mov	r1, r5
 800e9a4:	42b1      	cmp	r1, r6
 800e9a6:	d334      	bcc.n	800ea12 <rshift+0x96>
 800e9a8:	1a9b      	subs	r3, r3, r2
 800e9aa:	009b      	lsls	r3, r3, #2
 800e9ac:	1eea      	subs	r2, r5, #3
 800e9ae:	4296      	cmp	r6, r2
 800e9b0:	bf38      	it	cc
 800e9b2:	2300      	movcc	r3, #0
 800e9b4:	4423      	add	r3, r4
 800e9b6:	e015      	b.n	800e9e4 <rshift+0x68>
 800e9b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e9bc:	f1c1 0820 	rsb	r8, r1, #32
 800e9c0:	40cf      	lsrs	r7, r1
 800e9c2:	f105 0e04 	add.w	lr, r5, #4
 800e9c6:	46a1      	mov	r9, r4
 800e9c8:	4576      	cmp	r6, lr
 800e9ca:	46f4      	mov	ip, lr
 800e9cc:	d815      	bhi.n	800e9fa <rshift+0x7e>
 800e9ce:	1a9a      	subs	r2, r3, r2
 800e9d0:	0092      	lsls	r2, r2, #2
 800e9d2:	3a04      	subs	r2, #4
 800e9d4:	3501      	adds	r5, #1
 800e9d6:	42ae      	cmp	r6, r5
 800e9d8:	bf38      	it	cc
 800e9da:	2200      	movcc	r2, #0
 800e9dc:	18a3      	adds	r3, r4, r2
 800e9de:	50a7      	str	r7, [r4, r2]
 800e9e0:	b107      	cbz	r7, 800e9e4 <rshift+0x68>
 800e9e2:	3304      	adds	r3, #4
 800e9e4:	1b1a      	subs	r2, r3, r4
 800e9e6:	42a3      	cmp	r3, r4
 800e9e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e9ec:	bf08      	it	eq
 800e9ee:	2300      	moveq	r3, #0
 800e9f0:	6102      	str	r2, [r0, #16]
 800e9f2:	bf08      	it	eq
 800e9f4:	6143      	streq	r3, [r0, #20]
 800e9f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e9fa:	f8dc c000 	ldr.w	ip, [ip]
 800e9fe:	fa0c fc08 	lsl.w	ip, ip, r8
 800ea02:	ea4c 0707 	orr.w	r7, ip, r7
 800ea06:	f849 7b04 	str.w	r7, [r9], #4
 800ea0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ea0e:	40cf      	lsrs	r7, r1
 800ea10:	e7da      	b.n	800e9c8 <rshift+0x4c>
 800ea12:	f851 cb04 	ldr.w	ip, [r1], #4
 800ea16:	f847 cf04 	str.w	ip, [r7, #4]!
 800ea1a:	e7c3      	b.n	800e9a4 <rshift+0x28>
 800ea1c:	4623      	mov	r3, r4
 800ea1e:	e7e1      	b.n	800e9e4 <rshift+0x68>

0800ea20 <__hexdig_fun>:
 800ea20:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ea24:	2b09      	cmp	r3, #9
 800ea26:	d802      	bhi.n	800ea2e <__hexdig_fun+0xe>
 800ea28:	3820      	subs	r0, #32
 800ea2a:	b2c0      	uxtb	r0, r0
 800ea2c:	4770      	bx	lr
 800ea2e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ea32:	2b05      	cmp	r3, #5
 800ea34:	d801      	bhi.n	800ea3a <__hexdig_fun+0x1a>
 800ea36:	3847      	subs	r0, #71	; 0x47
 800ea38:	e7f7      	b.n	800ea2a <__hexdig_fun+0xa>
 800ea3a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ea3e:	2b05      	cmp	r3, #5
 800ea40:	d801      	bhi.n	800ea46 <__hexdig_fun+0x26>
 800ea42:	3827      	subs	r0, #39	; 0x27
 800ea44:	e7f1      	b.n	800ea2a <__hexdig_fun+0xa>
 800ea46:	2000      	movs	r0, #0
 800ea48:	4770      	bx	lr
	...

0800ea4c <__gethex>:
 800ea4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea50:	ed2d 8b02 	vpush	{d8}
 800ea54:	b089      	sub	sp, #36	; 0x24
 800ea56:	ee08 0a10 	vmov	s16, r0
 800ea5a:	9304      	str	r3, [sp, #16]
 800ea5c:	4bb4      	ldr	r3, [pc, #720]	; (800ed30 <__gethex+0x2e4>)
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	9301      	str	r3, [sp, #4]
 800ea62:	4618      	mov	r0, r3
 800ea64:	468b      	mov	fp, r1
 800ea66:	4690      	mov	r8, r2
 800ea68:	f7f1 fbc2 	bl	80001f0 <strlen>
 800ea6c:	9b01      	ldr	r3, [sp, #4]
 800ea6e:	f8db 2000 	ldr.w	r2, [fp]
 800ea72:	4403      	add	r3, r0
 800ea74:	4682      	mov	sl, r0
 800ea76:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ea7a:	9305      	str	r3, [sp, #20]
 800ea7c:	1c93      	adds	r3, r2, #2
 800ea7e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ea82:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ea86:	32fe      	adds	r2, #254	; 0xfe
 800ea88:	18d1      	adds	r1, r2, r3
 800ea8a:	461f      	mov	r7, r3
 800ea8c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ea90:	9100      	str	r1, [sp, #0]
 800ea92:	2830      	cmp	r0, #48	; 0x30
 800ea94:	d0f8      	beq.n	800ea88 <__gethex+0x3c>
 800ea96:	f7ff ffc3 	bl	800ea20 <__hexdig_fun>
 800ea9a:	4604      	mov	r4, r0
 800ea9c:	2800      	cmp	r0, #0
 800ea9e:	d13a      	bne.n	800eb16 <__gethex+0xca>
 800eaa0:	9901      	ldr	r1, [sp, #4]
 800eaa2:	4652      	mov	r2, sl
 800eaa4:	4638      	mov	r0, r7
 800eaa6:	f001 fa33 	bl	800ff10 <strncmp>
 800eaaa:	4605      	mov	r5, r0
 800eaac:	2800      	cmp	r0, #0
 800eaae:	d168      	bne.n	800eb82 <__gethex+0x136>
 800eab0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800eab4:	eb07 060a 	add.w	r6, r7, sl
 800eab8:	f7ff ffb2 	bl	800ea20 <__hexdig_fun>
 800eabc:	2800      	cmp	r0, #0
 800eabe:	d062      	beq.n	800eb86 <__gethex+0x13a>
 800eac0:	4633      	mov	r3, r6
 800eac2:	7818      	ldrb	r0, [r3, #0]
 800eac4:	2830      	cmp	r0, #48	; 0x30
 800eac6:	461f      	mov	r7, r3
 800eac8:	f103 0301 	add.w	r3, r3, #1
 800eacc:	d0f9      	beq.n	800eac2 <__gethex+0x76>
 800eace:	f7ff ffa7 	bl	800ea20 <__hexdig_fun>
 800ead2:	2301      	movs	r3, #1
 800ead4:	fab0 f480 	clz	r4, r0
 800ead8:	0964      	lsrs	r4, r4, #5
 800eada:	4635      	mov	r5, r6
 800eadc:	9300      	str	r3, [sp, #0]
 800eade:	463a      	mov	r2, r7
 800eae0:	4616      	mov	r6, r2
 800eae2:	3201      	adds	r2, #1
 800eae4:	7830      	ldrb	r0, [r6, #0]
 800eae6:	f7ff ff9b 	bl	800ea20 <__hexdig_fun>
 800eaea:	2800      	cmp	r0, #0
 800eaec:	d1f8      	bne.n	800eae0 <__gethex+0x94>
 800eaee:	9901      	ldr	r1, [sp, #4]
 800eaf0:	4652      	mov	r2, sl
 800eaf2:	4630      	mov	r0, r6
 800eaf4:	f001 fa0c 	bl	800ff10 <strncmp>
 800eaf8:	b980      	cbnz	r0, 800eb1c <__gethex+0xd0>
 800eafa:	b94d      	cbnz	r5, 800eb10 <__gethex+0xc4>
 800eafc:	eb06 050a 	add.w	r5, r6, sl
 800eb00:	462a      	mov	r2, r5
 800eb02:	4616      	mov	r6, r2
 800eb04:	3201      	adds	r2, #1
 800eb06:	7830      	ldrb	r0, [r6, #0]
 800eb08:	f7ff ff8a 	bl	800ea20 <__hexdig_fun>
 800eb0c:	2800      	cmp	r0, #0
 800eb0e:	d1f8      	bne.n	800eb02 <__gethex+0xb6>
 800eb10:	1bad      	subs	r5, r5, r6
 800eb12:	00ad      	lsls	r5, r5, #2
 800eb14:	e004      	b.n	800eb20 <__gethex+0xd4>
 800eb16:	2400      	movs	r4, #0
 800eb18:	4625      	mov	r5, r4
 800eb1a:	e7e0      	b.n	800eade <__gethex+0x92>
 800eb1c:	2d00      	cmp	r5, #0
 800eb1e:	d1f7      	bne.n	800eb10 <__gethex+0xc4>
 800eb20:	7833      	ldrb	r3, [r6, #0]
 800eb22:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800eb26:	2b50      	cmp	r3, #80	; 0x50
 800eb28:	d13b      	bne.n	800eba2 <__gethex+0x156>
 800eb2a:	7873      	ldrb	r3, [r6, #1]
 800eb2c:	2b2b      	cmp	r3, #43	; 0x2b
 800eb2e:	d02c      	beq.n	800eb8a <__gethex+0x13e>
 800eb30:	2b2d      	cmp	r3, #45	; 0x2d
 800eb32:	d02e      	beq.n	800eb92 <__gethex+0x146>
 800eb34:	1c71      	adds	r1, r6, #1
 800eb36:	f04f 0900 	mov.w	r9, #0
 800eb3a:	7808      	ldrb	r0, [r1, #0]
 800eb3c:	f7ff ff70 	bl	800ea20 <__hexdig_fun>
 800eb40:	1e43      	subs	r3, r0, #1
 800eb42:	b2db      	uxtb	r3, r3
 800eb44:	2b18      	cmp	r3, #24
 800eb46:	d82c      	bhi.n	800eba2 <__gethex+0x156>
 800eb48:	f1a0 0210 	sub.w	r2, r0, #16
 800eb4c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800eb50:	f7ff ff66 	bl	800ea20 <__hexdig_fun>
 800eb54:	1e43      	subs	r3, r0, #1
 800eb56:	b2db      	uxtb	r3, r3
 800eb58:	2b18      	cmp	r3, #24
 800eb5a:	d91d      	bls.n	800eb98 <__gethex+0x14c>
 800eb5c:	f1b9 0f00 	cmp.w	r9, #0
 800eb60:	d000      	beq.n	800eb64 <__gethex+0x118>
 800eb62:	4252      	negs	r2, r2
 800eb64:	4415      	add	r5, r2
 800eb66:	f8cb 1000 	str.w	r1, [fp]
 800eb6a:	b1e4      	cbz	r4, 800eba6 <__gethex+0x15a>
 800eb6c:	9b00      	ldr	r3, [sp, #0]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	bf14      	ite	ne
 800eb72:	2700      	movne	r7, #0
 800eb74:	2706      	moveq	r7, #6
 800eb76:	4638      	mov	r0, r7
 800eb78:	b009      	add	sp, #36	; 0x24
 800eb7a:	ecbd 8b02 	vpop	{d8}
 800eb7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb82:	463e      	mov	r6, r7
 800eb84:	4625      	mov	r5, r4
 800eb86:	2401      	movs	r4, #1
 800eb88:	e7ca      	b.n	800eb20 <__gethex+0xd4>
 800eb8a:	f04f 0900 	mov.w	r9, #0
 800eb8e:	1cb1      	adds	r1, r6, #2
 800eb90:	e7d3      	b.n	800eb3a <__gethex+0xee>
 800eb92:	f04f 0901 	mov.w	r9, #1
 800eb96:	e7fa      	b.n	800eb8e <__gethex+0x142>
 800eb98:	230a      	movs	r3, #10
 800eb9a:	fb03 0202 	mla	r2, r3, r2, r0
 800eb9e:	3a10      	subs	r2, #16
 800eba0:	e7d4      	b.n	800eb4c <__gethex+0x100>
 800eba2:	4631      	mov	r1, r6
 800eba4:	e7df      	b.n	800eb66 <__gethex+0x11a>
 800eba6:	1bf3      	subs	r3, r6, r7
 800eba8:	3b01      	subs	r3, #1
 800ebaa:	4621      	mov	r1, r4
 800ebac:	2b07      	cmp	r3, #7
 800ebae:	dc0b      	bgt.n	800ebc8 <__gethex+0x17c>
 800ebb0:	ee18 0a10 	vmov	r0, s16
 800ebb4:	f000 fa7e 	bl	800f0b4 <_Balloc>
 800ebb8:	4604      	mov	r4, r0
 800ebba:	b940      	cbnz	r0, 800ebce <__gethex+0x182>
 800ebbc:	4b5d      	ldr	r3, [pc, #372]	; (800ed34 <__gethex+0x2e8>)
 800ebbe:	4602      	mov	r2, r0
 800ebc0:	21de      	movs	r1, #222	; 0xde
 800ebc2:	485d      	ldr	r0, [pc, #372]	; (800ed38 <__gethex+0x2ec>)
 800ebc4:	f001 f9c6 	bl	800ff54 <__assert_func>
 800ebc8:	3101      	adds	r1, #1
 800ebca:	105b      	asrs	r3, r3, #1
 800ebcc:	e7ee      	b.n	800ebac <__gethex+0x160>
 800ebce:	f100 0914 	add.w	r9, r0, #20
 800ebd2:	f04f 0b00 	mov.w	fp, #0
 800ebd6:	f1ca 0301 	rsb	r3, sl, #1
 800ebda:	f8cd 9008 	str.w	r9, [sp, #8]
 800ebde:	f8cd b000 	str.w	fp, [sp]
 800ebe2:	9306      	str	r3, [sp, #24]
 800ebe4:	42b7      	cmp	r7, r6
 800ebe6:	d340      	bcc.n	800ec6a <__gethex+0x21e>
 800ebe8:	9802      	ldr	r0, [sp, #8]
 800ebea:	9b00      	ldr	r3, [sp, #0]
 800ebec:	f840 3b04 	str.w	r3, [r0], #4
 800ebf0:	eba0 0009 	sub.w	r0, r0, r9
 800ebf4:	1080      	asrs	r0, r0, #2
 800ebf6:	0146      	lsls	r6, r0, #5
 800ebf8:	6120      	str	r0, [r4, #16]
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f000 fb4c 	bl	800f298 <__hi0bits>
 800ec00:	1a30      	subs	r0, r6, r0
 800ec02:	f8d8 6000 	ldr.w	r6, [r8]
 800ec06:	42b0      	cmp	r0, r6
 800ec08:	dd63      	ble.n	800ecd2 <__gethex+0x286>
 800ec0a:	1b87      	subs	r7, r0, r6
 800ec0c:	4639      	mov	r1, r7
 800ec0e:	4620      	mov	r0, r4
 800ec10:	f000 fef0 	bl	800f9f4 <__any_on>
 800ec14:	4682      	mov	sl, r0
 800ec16:	b1a8      	cbz	r0, 800ec44 <__gethex+0x1f8>
 800ec18:	1e7b      	subs	r3, r7, #1
 800ec1a:	1159      	asrs	r1, r3, #5
 800ec1c:	f003 021f 	and.w	r2, r3, #31
 800ec20:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ec24:	f04f 0a01 	mov.w	sl, #1
 800ec28:	fa0a f202 	lsl.w	r2, sl, r2
 800ec2c:	420a      	tst	r2, r1
 800ec2e:	d009      	beq.n	800ec44 <__gethex+0x1f8>
 800ec30:	4553      	cmp	r3, sl
 800ec32:	dd05      	ble.n	800ec40 <__gethex+0x1f4>
 800ec34:	1eb9      	subs	r1, r7, #2
 800ec36:	4620      	mov	r0, r4
 800ec38:	f000 fedc 	bl	800f9f4 <__any_on>
 800ec3c:	2800      	cmp	r0, #0
 800ec3e:	d145      	bne.n	800eccc <__gethex+0x280>
 800ec40:	f04f 0a02 	mov.w	sl, #2
 800ec44:	4639      	mov	r1, r7
 800ec46:	4620      	mov	r0, r4
 800ec48:	f7ff fe98 	bl	800e97c <rshift>
 800ec4c:	443d      	add	r5, r7
 800ec4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ec52:	42ab      	cmp	r3, r5
 800ec54:	da4c      	bge.n	800ecf0 <__gethex+0x2a4>
 800ec56:	ee18 0a10 	vmov	r0, s16
 800ec5a:	4621      	mov	r1, r4
 800ec5c:	f000 fa6a 	bl	800f134 <_Bfree>
 800ec60:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ec62:	2300      	movs	r3, #0
 800ec64:	6013      	str	r3, [r2, #0]
 800ec66:	27a3      	movs	r7, #163	; 0xa3
 800ec68:	e785      	b.n	800eb76 <__gethex+0x12a>
 800ec6a:	1e73      	subs	r3, r6, #1
 800ec6c:	9a05      	ldr	r2, [sp, #20]
 800ec6e:	9303      	str	r3, [sp, #12]
 800ec70:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ec74:	4293      	cmp	r3, r2
 800ec76:	d019      	beq.n	800ecac <__gethex+0x260>
 800ec78:	f1bb 0f20 	cmp.w	fp, #32
 800ec7c:	d107      	bne.n	800ec8e <__gethex+0x242>
 800ec7e:	9b02      	ldr	r3, [sp, #8]
 800ec80:	9a00      	ldr	r2, [sp, #0]
 800ec82:	f843 2b04 	str.w	r2, [r3], #4
 800ec86:	9302      	str	r3, [sp, #8]
 800ec88:	2300      	movs	r3, #0
 800ec8a:	9300      	str	r3, [sp, #0]
 800ec8c:	469b      	mov	fp, r3
 800ec8e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ec92:	f7ff fec5 	bl	800ea20 <__hexdig_fun>
 800ec96:	9b00      	ldr	r3, [sp, #0]
 800ec98:	f000 000f 	and.w	r0, r0, #15
 800ec9c:	fa00 f00b 	lsl.w	r0, r0, fp
 800eca0:	4303      	orrs	r3, r0
 800eca2:	9300      	str	r3, [sp, #0]
 800eca4:	f10b 0b04 	add.w	fp, fp, #4
 800eca8:	9b03      	ldr	r3, [sp, #12]
 800ecaa:	e00d      	b.n	800ecc8 <__gethex+0x27c>
 800ecac:	9b03      	ldr	r3, [sp, #12]
 800ecae:	9a06      	ldr	r2, [sp, #24]
 800ecb0:	4413      	add	r3, r2
 800ecb2:	42bb      	cmp	r3, r7
 800ecb4:	d3e0      	bcc.n	800ec78 <__gethex+0x22c>
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	9901      	ldr	r1, [sp, #4]
 800ecba:	9307      	str	r3, [sp, #28]
 800ecbc:	4652      	mov	r2, sl
 800ecbe:	f001 f927 	bl	800ff10 <strncmp>
 800ecc2:	9b07      	ldr	r3, [sp, #28]
 800ecc4:	2800      	cmp	r0, #0
 800ecc6:	d1d7      	bne.n	800ec78 <__gethex+0x22c>
 800ecc8:	461e      	mov	r6, r3
 800ecca:	e78b      	b.n	800ebe4 <__gethex+0x198>
 800eccc:	f04f 0a03 	mov.w	sl, #3
 800ecd0:	e7b8      	b.n	800ec44 <__gethex+0x1f8>
 800ecd2:	da0a      	bge.n	800ecea <__gethex+0x29e>
 800ecd4:	1a37      	subs	r7, r6, r0
 800ecd6:	4621      	mov	r1, r4
 800ecd8:	ee18 0a10 	vmov	r0, s16
 800ecdc:	463a      	mov	r2, r7
 800ecde:	f000 fc45 	bl	800f56c <__lshift>
 800ece2:	1bed      	subs	r5, r5, r7
 800ece4:	4604      	mov	r4, r0
 800ece6:	f100 0914 	add.w	r9, r0, #20
 800ecea:	f04f 0a00 	mov.w	sl, #0
 800ecee:	e7ae      	b.n	800ec4e <__gethex+0x202>
 800ecf0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ecf4:	42a8      	cmp	r0, r5
 800ecf6:	dd72      	ble.n	800edde <__gethex+0x392>
 800ecf8:	1b45      	subs	r5, r0, r5
 800ecfa:	42ae      	cmp	r6, r5
 800ecfc:	dc36      	bgt.n	800ed6c <__gethex+0x320>
 800ecfe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ed02:	2b02      	cmp	r3, #2
 800ed04:	d02a      	beq.n	800ed5c <__gethex+0x310>
 800ed06:	2b03      	cmp	r3, #3
 800ed08:	d02c      	beq.n	800ed64 <__gethex+0x318>
 800ed0a:	2b01      	cmp	r3, #1
 800ed0c:	d11c      	bne.n	800ed48 <__gethex+0x2fc>
 800ed0e:	42ae      	cmp	r6, r5
 800ed10:	d11a      	bne.n	800ed48 <__gethex+0x2fc>
 800ed12:	2e01      	cmp	r6, #1
 800ed14:	d112      	bne.n	800ed3c <__gethex+0x2f0>
 800ed16:	9a04      	ldr	r2, [sp, #16]
 800ed18:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ed1c:	6013      	str	r3, [r2, #0]
 800ed1e:	2301      	movs	r3, #1
 800ed20:	6123      	str	r3, [r4, #16]
 800ed22:	f8c9 3000 	str.w	r3, [r9]
 800ed26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ed28:	2762      	movs	r7, #98	; 0x62
 800ed2a:	601c      	str	r4, [r3, #0]
 800ed2c:	e723      	b.n	800eb76 <__gethex+0x12a>
 800ed2e:	bf00      	nop
 800ed30:	080128e8 	.word	0x080128e8
 800ed34:	08012870 	.word	0x08012870
 800ed38:	08012881 	.word	0x08012881
 800ed3c:	1e71      	subs	r1, r6, #1
 800ed3e:	4620      	mov	r0, r4
 800ed40:	f000 fe58 	bl	800f9f4 <__any_on>
 800ed44:	2800      	cmp	r0, #0
 800ed46:	d1e6      	bne.n	800ed16 <__gethex+0x2ca>
 800ed48:	ee18 0a10 	vmov	r0, s16
 800ed4c:	4621      	mov	r1, r4
 800ed4e:	f000 f9f1 	bl	800f134 <_Bfree>
 800ed52:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ed54:	2300      	movs	r3, #0
 800ed56:	6013      	str	r3, [r2, #0]
 800ed58:	2750      	movs	r7, #80	; 0x50
 800ed5a:	e70c      	b.n	800eb76 <__gethex+0x12a>
 800ed5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d1f2      	bne.n	800ed48 <__gethex+0x2fc>
 800ed62:	e7d8      	b.n	800ed16 <__gethex+0x2ca>
 800ed64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d1d5      	bne.n	800ed16 <__gethex+0x2ca>
 800ed6a:	e7ed      	b.n	800ed48 <__gethex+0x2fc>
 800ed6c:	1e6f      	subs	r7, r5, #1
 800ed6e:	f1ba 0f00 	cmp.w	sl, #0
 800ed72:	d131      	bne.n	800edd8 <__gethex+0x38c>
 800ed74:	b127      	cbz	r7, 800ed80 <__gethex+0x334>
 800ed76:	4639      	mov	r1, r7
 800ed78:	4620      	mov	r0, r4
 800ed7a:	f000 fe3b 	bl	800f9f4 <__any_on>
 800ed7e:	4682      	mov	sl, r0
 800ed80:	117b      	asrs	r3, r7, #5
 800ed82:	2101      	movs	r1, #1
 800ed84:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ed88:	f007 071f 	and.w	r7, r7, #31
 800ed8c:	fa01 f707 	lsl.w	r7, r1, r7
 800ed90:	421f      	tst	r7, r3
 800ed92:	4629      	mov	r1, r5
 800ed94:	4620      	mov	r0, r4
 800ed96:	bf18      	it	ne
 800ed98:	f04a 0a02 	orrne.w	sl, sl, #2
 800ed9c:	1b76      	subs	r6, r6, r5
 800ed9e:	f7ff fded 	bl	800e97c <rshift>
 800eda2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800eda6:	2702      	movs	r7, #2
 800eda8:	f1ba 0f00 	cmp.w	sl, #0
 800edac:	d048      	beq.n	800ee40 <__gethex+0x3f4>
 800edae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800edb2:	2b02      	cmp	r3, #2
 800edb4:	d015      	beq.n	800ede2 <__gethex+0x396>
 800edb6:	2b03      	cmp	r3, #3
 800edb8:	d017      	beq.n	800edea <__gethex+0x39e>
 800edba:	2b01      	cmp	r3, #1
 800edbc:	d109      	bne.n	800edd2 <__gethex+0x386>
 800edbe:	f01a 0f02 	tst.w	sl, #2
 800edc2:	d006      	beq.n	800edd2 <__gethex+0x386>
 800edc4:	f8d9 0000 	ldr.w	r0, [r9]
 800edc8:	ea4a 0a00 	orr.w	sl, sl, r0
 800edcc:	f01a 0f01 	tst.w	sl, #1
 800edd0:	d10e      	bne.n	800edf0 <__gethex+0x3a4>
 800edd2:	f047 0710 	orr.w	r7, r7, #16
 800edd6:	e033      	b.n	800ee40 <__gethex+0x3f4>
 800edd8:	f04f 0a01 	mov.w	sl, #1
 800eddc:	e7d0      	b.n	800ed80 <__gethex+0x334>
 800edde:	2701      	movs	r7, #1
 800ede0:	e7e2      	b.n	800eda8 <__gethex+0x35c>
 800ede2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ede4:	f1c3 0301 	rsb	r3, r3, #1
 800ede8:	9315      	str	r3, [sp, #84]	; 0x54
 800edea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800edec:	2b00      	cmp	r3, #0
 800edee:	d0f0      	beq.n	800edd2 <__gethex+0x386>
 800edf0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800edf4:	f104 0314 	add.w	r3, r4, #20
 800edf8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800edfc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ee00:	f04f 0c00 	mov.w	ip, #0
 800ee04:	4618      	mov	r0, r3
 800ee06:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee0a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ee0e:	d01c      	beq.n	800ee4a <__gethex+0x3fe>
 800ee10:	3201      	adds	r2, #1
 800ee12:	6002      	str	r2, [r0, #0]
 800ee14:	2f02      	cmp	r7, #2
 800ee16:	f104 0314 	add.w	r3, r4, #20
 800ee1a:	d13f      	bne.n	800ee9c <__gethex+0x450>
 800ee1c:	f8d8 2000 	ldr.w	r2, [r8]
 800ee20:	3a01      	subs	r2, #1
 800ee22:	42b2      	cmp	r2, r6
 800ee24:	d10a      	bne.n	800ee3c <__gethex+0x3f0>
 800ee26:	1171      	asrs	r1, r6, #5
 800ee28:	2201      	movs	r2, #1
 800ee2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ee2e:	f006 061f 	and.w	r6, r6, #31
 800ee32:	fa02 f606 	lsl.w	r6, r2, r6
 800ee36:	421e      	tst	r6, r3
 800ee38:	bf18      	it	ne
 800ee3a:	4617      	movne	r7, r2
 800ee3c:	f047 0720 	orr.w	r7, r7, #32
 800ee40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ee42:	601c      	str	r4, [r3, #0]
 800ee44:	9b04      	ldr	r3, [sp, #16]
 800ee46:	601d      	str	r5, [r3, #0]
 800ee48:	e695      	b.n	800eb76 <__gethex+0x12a>
 800ee4a:	4299      	cmp	r1, r3
 800ee4c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ee50:	d8d8      	bhi.n	800ee04 <__gethex+0x3b8>
 800ee52:	68a3      	ldr	r3, [r4, #8]
 800ee54:	459b      	cmp	fp, r3
 800ee56:	db19      	blt.n	800ee8c <__gethex+0x440>
 800ee58:	6861      	ldr	r1, [r4, #4]
 800ee5a:	ee18 0a10 	vmov	r0, s16
 800ee5e:	3101      	adds	r1, #1
 800ee60:	f000 f928 	bl	800f0b4 <_Balloc>
 800ee64:	4681      	mov	r9, r0
 800ee66:	b918      	cbnz	r0, 800ee70 <__gethex+0x424>
 800ee68:	4b1a      	ldr	r3, [pc, #104]	; (800eed4 <__gethex+0x488>)
 800ee6a:	4602      	mov	r2, r0
 800ee6c:	2184      	movs	r1, #132	; 0x84
 800ee6e:	e6a8      	b.n	800ebc2 <__gethex+0x176>
 800ee70:	6922      	ldr	r2, [r4, #16]
 800ee72:	3202      	adds	r2, #2
 800ee74:	f104 010c 	add.w	r1, r4, #12
 800ee78:	0092      	lsls	r2, r2, #2
 800ee7a:	300c      	adds	r0, #12
 800ee7c:	f000 f90c 	bl	800f098 <memcpy>
 800ee80:	4621      	mov	r1, r4
 800ee82:	ee18 0a10 	vmov	r0, s16
 800ee86:	f000 f955 	bl	800f134 <_Bfree>
 800ee8a:	464c      	mov	r4, r9
 800ee8c:	6923      	ldr	r3, [r4, #16]
 800ee8e:	1c5a      	adds	r2, r3, #1
 800ee90:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ee94:	6122      	str	r2, [r4, #16]
 800ee96:	2201      	movs	r2, #1
 800ee98:	615a      	str	r2, [r3, #20]
 800ee9a:	e7bb      	b.n	800ee14 <__gethex+0x3c8>
 800ee9c:	6922      	ldr	r2, [r4, #16]
 800ee9e:	455a      	cmp	r2, fp
 800eea0:	dd0b      	ble.n	800eeba <__gethex+0x46e>
 800eea2:	2101      	movs	r1, #1
 800eea4:	4620      	mov	r0, r4
 800eea6:	f7ff fd69 	bl	800e97c <rshift>
 800eeaa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eeae:	3501      	adds	r5, #1
 800eeb0:	42ab      	cmp	r3, r5
 800eeb2:	f6ff aed0 	blt.w	800ec56 <__gethex+0x20a>
 800eeb6:	2701      	movs	r7, #1
 800eeb8:	e7c0      	b.n	800ee3c <__gethex+0x3f0>
 800eeba:	f016 061f 	ands.w	r6, r6, #31
 800eebe:	d0fa      	beq.n	800eeb6 <__gethex+0x46a>
 800eec0:	4453      	add	r3, sl
 800eec2:	f1c6 0620 	rsb	r6, r6, #32
 800eec6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800eeca:	f000 f9e5 	bl	800f298 <__hi0bits>
 800eece:	42b0      	cmp	r0, r6
 800eed0:	dbe7      	blt.n	800eea2 <__gethex+0x456>
 800eed2:	e7f0      	b.n	800eeb6 <__gethex+0x46a>
 800eed4:	08012870 	.word	0x08012870

0800eed8 <L_shift>:
 800eed8:	f1c2 0208 	rsb	r2, r2, #8
 800eedc:	0092      	lsls	r2, r2, #2
 800eede:	b570      	push	{r4, r5, r6, lr}
 800eee0:	f1c2 0620 	rsb	r6, r2, #32
 800eee4:	6843      	ldr	r3, [r0, #4]
 800eee6:	6804      	ldr	r4, [r0, #0]
 800eee8:	fa03 f506 	lsl.w	r5, r3, r6
 800eeec:	432c      	orrs	r4, r5
 800eeee:	40d3      	lsrs	r3, r2
 800eef0:	6004      	str	r4, [r0, #0]
 800eef2:	f840 3f04 	str.w	r3, [r0, #4]!
 800eef6:	4288      	cmp	r0, r1
 800eef8:	d3f4      	bcc.n	800eee4 <L_shift+0xc>
 800eefa:	bd70      	pop	{r4, r5, r6, pc}

0800eefc <__match>:
 800eefc:	b530      	push	{r4, r5, lr}
 800eefe:	6803      	ldr	r3, [r0, #0]
 800ef00:	3301      	adds	r3, #1
 800ef02:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef06:	b914      	cbnz	r4, 800ef0e <__match+0x12>
 800ef08:	6003      	str	r3, [r0, #0]
 800ef0a:	2001      	movs	r0, #1
 800ef0c:	bd30      	pop	{r4, r5, pc}
 800ef0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef12:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ef16:	2d19      	cmp	r5, #25
 800ef18:	bf98      	it	ls
 800ef1a:	3220      	addls	r2, #32
 800ef1c:	42a2      	cmp	r2, r4
 800ef1e:	d0f0      	beq.n	800ef02 <__match+0x6>
 800ef20:	2000      	movs	r0, #0
 800ef22:	e7f3      	b.n	800ef0c <__match+0x10>

0800ef24 <__hexnan>:
 800ef24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef28:	680b      	ldr	r3, [r1, #0]
 800ef2a:	115e      	asrs	r6, r3, #5
 800ef2c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ef30:	f013 031f 	ands.w	r3, r3, #31
 800ef34:	b087      	sub	sp, #28
 800ef36:	bf18      	it	ne
 800ef38:	3604      	addne	r6, #4
 800ef3a:	2500      	movs	r5, #0
 800ef3c:	1f37      	subs	r7, r6, #4
 800ef3e:	4690      	mov	r8, r2
 800ef40:	6802      	ldr	r2, [r0, #0]
 800ef42:	9301      	str	r3, [sp, #4]
 800ef44:	4682      	mov	sl, r0
 800ef46:	f846 5c04 	str.w	r5, [r6, #-4]
 800ef4a:	46b9      	mov	r9, r7
 800ef4c:	463c      	mov	r4, r7
 800ef4e:	9502      	str	r5, [sp, #8]
 800ef50:	46ab      	mov	fp, r5
 800ef52:	7851      	ldrb	r1, [r2, #1]
 800ef54:	1c53      	adds	r3, r2, #1
 800ef56:	9303      	str	r3, [sp, #12]
 800ef58:	b341      	cbz	r1, 800efac <__hexnan+0x88>
 800ef5a:	4608      	mov	r0, r1
 800ef5c:	9205      	str	r2, [sp, #20]
 800ef5e:	9104      	str	r1, [sp, #16]
 800ef60:	f7ff fd5e 	bl	800ea20 <__hexdig_fun>
 800ef64:	2800      	cmp	r0, #0
 800ef66:	d14f      	bne.n	800f008 <__hexnan+0xe4>
 800ef68:	9904      	ldr	r1, [sp, #16]
 800ef6a:	9a05      	ldr	r2, [sp, #20]
 800ef6c:	2920      	cmp	r1, #32
 800ef6e:	d818      	bhi.n	800efa2 <__hexnan+0x7e>
 800ef70:	9b02      	ldr	r3, [sp, #8]
 800ef72:	459b      	cmp	fp, r3
 800ef74:	dd13      	ble.n	800ef9e <__hexnan+0x7a>
 800ef76:	454c      	cmp	r4, r9
 800ef78:	d206      	bcs.n	800ef88 <__hexnan+0x64>
 800ef7a:	2d07      	cmp	r5, #7
 800ef7c:	dc04      	bgt.n	800ef88 <__hexnan+0x64>
 800ef7e:	462a      	mov	r2, r5
 800ef80:	4649      	mov	r1, r9
 800ef82:	4620      	mov	r0, r4
 800ef84:	f7ff ffa8 	bl	800eed8 <L_shift>
 800ef88:	4544      	cmp	r4, r8
 800ef8a:	d950      	bls.n	800f02e <__hexnan+0x10a>
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	f1a4 0904 	sub.w	r9, r4, #4
 800ef92:	f844 3c04 	str.w	r3, [r4, #-4]
 800ef96:	f8cd b008 	str.w	fp, [sp, #8]
 800ef9a:	464c      	mov	r4, r9
 800ef9c:	461d      	mov	r5, r3
 800ef9e:	9a03      	ldr	r2, [sp, #12]
 800efa0:	e7d7      	b.n	800ef52 <__hexnan+0x2e>
 800efa2:	2929      	cmp	r1, #41	; 0x29
 800efa4:	d156      	bne.n	800f054 <__hexnan+0x130>
 800efa6:	3202      	adds	r2, #2
 800efa8:	f8ca 2000 	str.w	r2, [sl]
 800efac:	f1bb 0f00 	cmp.w	fp, #0
 800efb0:	d050      	beq.n	800f054 <__hexnan+0x130>
 800efb2:	454c      	cmp	r4, r9
 800efb4:	d206      	bcs.n	800efc4 <__hexnan+0xa0>
 800efb6:	2d07      	cmp	r5, #7
 800efb8:	dc04      	bgt.n	800efc4 <__hexnan+0xa0>
 800efba:	462a      	mov	r2, r5
 800efbc:	4649      	mov	r1, r9
 800efbe:	4620      	mov	r0, r4
 800efc0:	f7ff ff8a 	bl	800eed8 <L_shift>
 800efc4:	4544      	cmp	r4, r8
 800efc6:	d934      	bls.n	800f032 <__hexnan+0x10e>
 800efc8:	f1a8 0204 	sub.w	r2, r8, #4
 800efcc:	4623      	mov	r3, r4
 800efce:	f853 1b04 	ldr.w	r1, [r3], #4
 800efd2:	f842 1f04 	str.w	r1, [r2, #4]!
 800efd6:	429f      	cmp	r7, r3
 800efd8:	d2f9      	bcs.n	800efce <__hexnan+0xaa>
 800efda:	1b3b      	subs	r3, r7, r4
 800efdc:	f023 0303 	bic.w	r3, r3, #3
 800efe0:	3304      	adds	r3, #4
 800efe2:	3401      	adds	r4, #1
 800efe4:	3e03      	subs	r6, #3
 800efe6:	42b4      	cmp	r4, r6
 800efe8:	bf88      	it	hi
 800efea:	2304      	movhi	r3, #4
 800efec:	4443      	add	r3, r8
 800efee:	2200      	movs	r2, #0
 800eff0:	f843 2b04 	str.w	r2, [r3], #4
 800eff4:	429f      	cmp	r7, r3
 800eff6:	d2fb      	bcs.n	800eff0 <__hexnan+0xcc>
 800eff8:	683b      	ldr	r3, [r7, #0]
 800effa:	b91b      	cbnz	r3, 800f004 <__hexnan+0xe0>
 800effc:	4547      	cmp	r7, r8
 800effe:	d127      	bne.n	800f050 <__hexnan+0x12c>
 800f000:	2301      	movs	r3, #1
 800f002:	603b      	str	r3, [r7, #0]
 800f004:	2005      	movs	r0, #5
 800f006:	e026      	b.n	800f056 <__hexnan+0x132>
 800f008:	3501      	adds	r5, #1
 800f00a:	2d08      	cmp	r5, #8
 800f00c:	f10b 0b01 	add.w	fp, fp, #1
 800f010:	dd06      	ble.n	800f020 <__hexnan+0xfc>
 800f012:	4544      	cmp	r4, r8
 800f014:	d9c3      	bls.n	800ef9e <__hexnan+0x7a>
 800f016:	2300      	movs	r3, #0
 800f018:	f844 3c04 	str.w	r3, [r4, #-4]
 800f01c:	2501      	movs	r5, #1
 800f01e:	3c04      	subs	r4, #4
 800f020:	6822      	ldr	r2, [r4, #0]
 800f022:	f000 000f 	and.w	r0, r0, #15
 800f026:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f02a:	6022      	str	r2, [r4, #0]
 800f02c:	e7b7      	b.n	800ef9e <__hexnan+0x7a>
 800f02e:	2508      	movs	r5, #8
 800f030:	e7b5      	b.n	800ef9e <__hexnan+0x7a>
 800f032:	9b01      	ldr	r3, [sp, #4]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d0df      	beq.n	800eff8 <__hexnan+0xd4>
 800f038:	f04f 32ff 	mov.w	r2, #4294967295
 800f03c:	f1c3 0320 	rsb	r3, r3, #32
 800f040:	fa22 f303 	lsr.w	r3, r2, r3
 800f044:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f048:	401a      	ands	r2, r3
 800f04a:	f846 2c04 	str.w	r2, [r6, #-4]
 800f04e:	e7d3      	b.n	800eff8 <__hexnan+0xd4>
 800f050:	3f04      	subs	r7, #4
 800f052:	e7d1      	b.n	800eff8 <__hexnan+0xd4>
 800f054:	2004      	movs	r0, #4
 800f056:	b007      	add	sp, #28
 800f058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f05c <_localeconv_r>:
 800f05c:	4800      	ldr	r0, [pc, #0]	; (800f060 <_localeconv_r+0x4>)
 800f05e:	4770      	bx	lr
 800f060:	200002d0 	.word	0x200002d0

0800f064 <malloc>:
 800f064:	4b02      	ldr	r3, [pc, #8]	; (800f070 <malloc+0xc>)
 800f066:	4601      	mov	r1, r0
 800f068:	6818      	ldr	r0, [r3, #0]
 800f06a:	f000 bd67 	b.w	800fb3c <_malloc_r>
 800f06e:	bf00      	nop
 800f070:	20000178 	.word	0x20000178

0800f074 <__ascii_mbtowc>:
 800f074:	b082      	sub	sp, #8
 800f076:	b901      	cbnz	r1, 800f07a <__ascii_mbtowc+0x6>
 800f078:	a901      	add	r1, sp, #4
 800f07a:	b142      	cbz	r2, 800f08e <__ascii_mbtowc+0x1a>
 800f07c:	b14b      	cbz	r3, 800f092 <__ascii_mbtowc+0x1e>
 800f07e:	7813      	ldrb	r3, [r2, #0]
 800f080:	600b      	str	r3, [r1, #0]
 800f082:	7812      	ldrb	r2, [r2, #0]
 800f084:	1e10      	subs	r0, r2, #0
 800f086:	bf18      	it	ne
 800f088:	2001      	movne	r0, #1
 800f08a:	b002      	add	sp, #8
 800f08c:	4770      	bx	lr
 800f08e:	4610      	mov	r0, r2
 800f090:	e7fb      	b.n	800f08a <__ascii_mbtowc+0x16>
 800f092:	f06f 0001 	mvn.w	r0, #1
 800f096:	e7f8      	b.n	800f08a <__ascii_mbtowc+0x16>

0800f098 <memcpy>:
 800f098:	440a      	add	r2, r1
 800f09a:	4291      	cmp	r1, r2
 800f09c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f0a0:	d100      	bne.n	800f0a4 <memcpy+0xc>
 800f0a2:	4770      	bx	lr
 800f0a4:	b510      	push	{r4, lr}
 800f0a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f0aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f0ae:	4291      	cmp	r1, r2
 800f0b0:	d1f9      	bne.n	800f0a6 <memcpy+0xe>
 800f0b2:	bd10      	pop	{r4, pc}

0800f0b4 <_Balloc>:
 800f0b4:	b570      	push	{r4, r5, r6, lr}
 800f0b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f0b8:	4604      	mov	r4, r0
 800f0ba:	460d      	mov	r5, r1
 800f0bc:	b976      	cbnz	r6, 800f0dc <_Balloc+0x28>
 800f0be:	2010      	movs	r0, #16
 800f0c0:	f7ff ffd0 	bl	800f064 <malloc>
 800f0c4:	4602      	mov	r2, r0
 800f0c6:	6260      	str	r0, [r4, #36]	; 0x24
 800f0c8:	b920      	cbnz	r0, 800f0d4 <_Balloc+0x20>
 800f0ca:	4b18      	ldr	r3, [pc, #96]	; (800f12c <_Balloc+0x78>)
 800f0cc:	4818      	ldr	r0, [pc, #96]	; (800f130 <_Balloc+0x7c>)
 800f0ce:	2166      	movs	r1, #102	; 0x66
 800f0d0:	f000 ff40 	bl	800ff54 <__assert_func>
 800f0d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f0d8:	6006      	str	r6, [r0, #0]
 800f0da:	60c6      	str	r6, [r0, #12]
 800f0dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f0de:	68f3      	ldr	r3, [r6, #12]
 800f0e0:	b183      	cbz	r3, 800f104 <_Balloc+0x50>
 800f0e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f0e4:	68db      	ldr	r3, [r3, #12]
 800f0e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f0ea:	b9b8      	cbnz	r0, 800f11c <_Balloc+0x68>
 800f0ec:	2101      	movs	r1, #1
 800f0ee:	fa01 f605 	lsl.w	r6, r1, r5
 800f0f2:	1d72      	adds	r2, r6, #5
 800f0f4:	0092      	lsls	r2, r2, #2
 800f0f6:	4620      	mov	r0, r4
 800f0f8:	f000 fc9d 	bl	800fa36 <_calloc_r>
 800f0fc:	b160      	cbz	r0, 800f118 <_Balloc+0x64>
 800f0fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f102:	e00e      	b.n	800f122 <_Balloc+0x6e>
 800f104:	2221      	movs	r2, #33	; 0x21
 800f106:	2104      	movs	r1, #4
 800f108:	4620      	mov	r0, r4
 800f10a:	f000 fc94 	bl	800fa36 <_calloc_r>
 800f10e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f110:	60f0      	str	r0, [r6, #12]
 800f112:	68db      	ldr	r3, [r3, #12]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d1e4      	bne.n	800f0e2 <_Balloc+0x2e>
 800f118:	2000      	movs	r0, #0
 800f11a:	bd70      	pop	{r4, r5, r6, pc}
 800f11c:	6802      	ldr	r2, [r0, #0]
 800f11e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f122:	2300      	movs	r3, #0
 800f124:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f128:	e7f7      	b.n	800f11a <_Balloc+0x66>
 800f12a:	bf00      	nop
 800f12c:	080127fe 	.word	0x080127fe
 800f130:	080128fc 	.word	0x080128fc

0800f134 <_Bfree>:
 800f134:	b570      	push	{r4, r5, r6, lr}
 800f136:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f138:	4605      	mov	r5, r0
 800f13a:	460c      	mov	r4, r1
 800f13c:	b976      	cbnz	r6, 800f15c <_Bfree+0x28>
 800f13e:	2010      	movs	r0, #16
 800f140:	f7ff ff90 	bl	800f064 <malloc>
 800f144:	4602      	mov	r2, r0
 800f146:	6268      	str	r0, [r5, #36]	; 0x24
 800f148:	b920      	cbnz	r0, 800f154 <_Bfree+0x20>
 800f14a:	4b09      	ldr	r3, [pc, #36]	; (800f170 <_Bfree+0x3c>)
 800f14c:	4809      	ldr	r0, [pc, #36]	; (800f174 <_Bfree+0x40>)
 800f14e:	218a      	movs	r1, #138	; 0x8a
 800f150:	f000 ff00 	bl	800ff54 <__assert_func>
 800f154:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f158:	6006      	str	r6, [r0, #0]
 800f15a:	60c6      	str	r6, [r0, #12]
 800f15c:	b13c      	cbz	r4, 800f16e <_Bfree+0x3a>
 800f15e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f160:	6862      	ldr	r2, [r4, #4]
 800f162:	68db      	ldr	r3, [r3, #12]
 800f164:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f168:	6021      	str	r1, [r4, #0]
 800f16a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f16e:	bd70      	pop	{r4, r5, r6, pc}
 800f170:	080127fe 	.word	0x080127fe
 800f174:	080128fc 	.word	0x080128fc

0800f178 <__multadd>:
 800f178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f17c:	690d      	ldr	r5, [r1, #16]
 800f17e:	4607      	mov	r7, r0
 800f180:	460c      	mov	r4, r1
 800f182:	461e      	mov	r6, r3
 800f184:	f101 0c14 	add.w	ip, r1, #20
 800f188:	2000      	movs	r0, #0
 800f18a:	f8dc 3000 	ldr.w	r3, [ip]
 800f18e:	b299      	uxth	r1, r3
 800f190:	fb02 6101 	mla	r1, r2, r1, r6
 800f194:	0c1e      	lsrs	r6, r3, #16
 800f196:	0c0b      	lsrs	r3, r1, #16
 800f198:	fb02 3306 	mla	r3, r2, r6, r3
 800f19c:	b289      	uxth	r1, r1
 800f19e:	3001      	adds	r0, #1
 800f1a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f1a4:	4285      	cmp	r5, r0
 800f1a6:	f84c 1b04 	str.w	r1, [ip], #4
 800f1aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f1ae:	dcec      	bgt.n	800f18a <__multadd+0x12>
 800f1b0:	b30e      	cbz	r6, 800f1f6 <__multadd+0x7e>
 800f1b2:	68a3      	ldr	r3, [r4, #8]
 800f1b4:	42ab      	cmp	r3, r5
 800f1b6:	dc19      	bgt.n	800f1ec <__multadd+0x74>
 800f1b8:	6861      	ldr	r1, [r4, #4]
 800f1ba:	4638      	mov	r0, r7
 800f1bc:	3101      	adds	r1, #1
 800f1be:	f7ff ff79 	bl	800f0b4 <_Balloc>
 800f1c2:	4680      	mov	r8, r0
 800f1c4:	b928      	cbnz	r0, 800f1d2 <__multadd+0x5a>
 800f1c6:	4602      	mov	r2, r0
 800f1c8:	4b0c      	ldr	r3, [pc, #48]	; (800f1fc <__multadd+0x84>)
 800f1ca:	480d      	ldr	r0, [pc, #52]	; (800f200 <__multadd+0x88>)
 800f1cc:	21b5      	movs	r1, #181	; 0xb5
 800f1ce:	f000 fec1 	bl	800ff54 <__assert_func>
 800f1d2:	6922      	ldr	r2, [r4, #16]
 800f1d4:	3202      	adds	r2, #2
 800f1d6:	f104 010c 	add.w	r1, r4, #12
 800f1da:	0092      	lsls	r2, r2, #2
 800f1dc:	300c      	adds	r0, #12
 800f1de:	f7ff ff5b 	bl	800f098 <memcpy>
 800f1e2:	4621      	mov	r1, r4
 800f1e4:	4638      	mov	r0, r7
 800f1e6:	f7ff ffa5 	bl	800f134 <_Bfree>
 800f1ea:	4644      	mov	r4, r8
 800f1ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f1f0:	3501      	adds	r5, #1
 800f1f2:	615e      	str	r6, [r3, #20]
 800f1f4:	6125      	str	r5, [r4, #16]
 800f1f6:	4620      	mov	r0, r4
 800f1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1fc:	08012870 	.word	0x08012870
 800f200:	080128fc 	.word	0x080128fc

0800f204 <__s2b>:
 800f204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f208:	460c      	mov	r4, r1
 800f20a:	4615      	mov	r5, r2
 800f20c:	461f      	mov	r7, r3
 800f20e:	2209      	movs	r2, #9
 800f210:	3308      	adds	r3, #8
 800f212:	4606      	mov	r6, r0
 800f214:	fb93 f3f2 	sdiv	r3, r3, r2
 800f218:	2100      	movs	r1, #0
 800f21a:	2201      	movs	r2, #1
 800f21c:	429a      	cmp	r2, r3
 800f21e:	db09      	blt.n	800f234 <__s2b+0x30>
 800f220:	4630      	mov	r0, r6
 800f222:	f7ff ff47 	bl	800f0b4 <_Balloc>
 800f226:	b940      	cbnz	r0, 800f23a <__s2b+0x36>
 800f228:	4602      	mov	r2, r0
 800f22a:	4b19      	ldr	r3, [pc, #100]	; (800f290 <__s2b+0x8c>)
 800f22c:	4819      	ldr	r0, [pc, #100]	; (800f294 <__s2b+0x90>)
 800f22e:	21ce      	movs	r1, #206	; 0xce
 800f230:	f000 fe90 	bl	800ff54 <__assert_func>
 800f234:	0052      	lsls	r2, r2, #1
 800f236:	3101      	adds	r1, #1
 800f238:	e7f0      	b.n	800f21c <__s2b+0x18>
 800f23a:	9b08      	ldr	r3, [sp, #32]
 800f23c:	6143      	str	r3, [r0, #20]
 800f23e:	2d09      	cmp	r5, #9
 800f240:	f04f 0301 	mov.w	r3, #1
 800f244:	6103      	str	r3, [r0, #16]
 800f246:	dd16      	ble.n	800f276 <__s2b+0x72>
 800f248:	f104 0909 	add.w	r9, r4, #9
 800f24c:	46c8      	mov	r8, r9
 800f24e:	442c      	add	r4, r5
 800f250:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f254:	4601      	mov	r1, r0
 800f256:	3b30      	subs	r3, #48	; 0x30
 800f258:	220a      	movs	r2, #10
 800f25a:	4630      	mov	r0, r6
 800f25c:	f7ff ff8c 	bl	800f178 <__multadd>
 800f260:	45a0      	cmp	r8, r4
 800f262:	d1f5      	bne.n	800f250 <__s2b+0x4c>
 800f264:	f1a5 0408 	sub.w	r4, r5, #8
 800f268:	444c      	add	r4, r9
 800f26a:	1b2d      	subs	r5, r5, r4
 800f26c:	1963      	adds	r3, r4, r5
 800f26e:	42bb      	cmp	r3, r7
 800f270:	db04      	blt.n	800f27c <__s2b+0x78>
 800f272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f276:	340a      	adds	r4, #10
 800f278:	2509      	movs	r5, #9
 800f27a:	e7f6      	b.n	800f26a <__s2b+0x66>
 800f27c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f280:	4601      	mov	r1, r0
 800f282:	3b30      	subs	r3, #48	; 0x30
 800f284:	220a      	movs	r2, #10
 800f286:	4630      	mov	r0, r6
 800f288:	f7ff ff76 	bl	800f178 <__multadd>
 800f28c:	e7ee      	b.n	800f26c <__s2b+0x68>
 800f28e:	bf00      	nop
 800f290:	08012870 	.word	0x08012870
 800f294:	080128fc 	.word	0x080128fc

0800f298 <__hi0bits>:
 800f298:	0c03      	lsrs	r3, r0, #16
 800f29a:	041b      	lsls	r3, r3, #16
 800f29c:	b9d3      	cbnz	r3, 800f2d4 <__hi0bits+0x3c>
 800f29e:	0400      	lsls	r0, r0, #16
 800f2a0:	2310      	movs	r3, #16
 800f2a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f2a6:	bf04      	itt	eq
 800f2a8:	0200      	lsleq	r0, r0, #8
 800f2aa:	3308      	addeq	r3, #8
 800f2ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f2b0:	bf04      	itt	eq
 800f2b2:	0100      	lsleq	r0, r0, #4
 800f2b4:	3304      	addeq	r3, #4
 800f2b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f2ba:	bf04      	itt	eq
 800f2bc:	0080      	lsleq	r0, r0, #2
 800f2be:	3302      	addeq	r3, #2
 800f2c0:	2800      	cmp	r0, #0
 800f2c2:	db05      	blt.n	800f2d0 <__hi0bits+0x38>
 800f2c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f2c8:	f103 0301 	add.w	r3, r3, #1
 800f2cc:	bf08      	it	eq
 800f2ce:	2320      	moveq	r3, #32
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	4770      	bx	lr
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	e7e4      	b.n	800f2a2 <__hi0bits+0xa>

0800f2d8 <__lo0bits>:
 800f2d8:	6803      	ldr	r3, [r0, #0]
 800f2da:	f013 0207 	ands.w	r2, r3, #7
 800f2de:	4601      	mov	r1, r0
 800f2e0:	d00b      	beq.n	800f2fa <__lo0bits+0x22>
 800f2e2:	07da      	lsls	r2, r3, #31
 800f2e4:	d423      	bmi.n	800f32e <__lo0bits+0x56>
 800f2e6:	0798      	lsls	r0, r3, #30
 800f2e8:	bf49      	itett	mi
 800f2ea:	085b      	lsrmi	r3, r3, #1
 800f2ec:	089b      	lsrpl	r3, r3, #2
 800f2ee:	2001      	movmi	r0, #1
 800f2f0:	600b      	strmi	r3, [r1, #0]
 800f2f2:	bf5c      	itt	pl
 800f2f4:	600b      	strpl	r3, [r1, #0]
 800f2f6:	2002      	movpl	r0, #2
 800f2f8:	4770      	bx	lr
 800f2fa:	b298      	uxth	r0, r3
 800f2fc:	b9a8      	cbnz	r0, 800f32a <__lo0bits+0x52>
 800f2fe:	0c1b      	lsrs	r3, r3, #16
 800f300:	2010      	movs	r0, #16
 800f302:	b2da      	uxtb	r2, r3
 800f304:	b90a      	cbnz	r2, 800f30a <__lo0bits+0x32>
 800f306:	3008      	adds	r0, #8
 800f308:	0a1b      	lsrs	r3, r3, #8
 800f30a:	071a      	lsls	r2, r3, #28
 800f30c:	bf04      	itt	eq
 800f30e:	091b      	lsreq	r3, r3, #4
 800f310:	3004      	addeq	r0, #4
 800f312:	079a      	lsls	r2, r3, #30
 800f314:	bf04      	itt	eq
 800f316:	089b      	lsreq	r3, r3, #2
 800f318:	3002      	addeq	r0, #2
 800f31a:	07da      	lsls	r2, r3, #31
 800f31c:	d403      	bmi.n	800f326 <__lo0bits+0x4e>
 800f31e:	085b      	lsrs	r3, r3, #1
 800f320:	f100 0001 	add.w	r0, r0, #1
 800f324:	d005      	beq.n	800f332 <__lo0bits+0x5a>
 800f326:	600b      	str	r3, [r1, #0]
 800f328:	4770      	bx	lr
 800f32a:	4610      	mov	r0, r2
 800f32c:	e7e9      	b.n	800f302 <__lo0bits+0x2a>
 800f32e:	2000      	movs	r0, #0
 800f330:	4770      	bx	lr
 800f332:	2020      	movs	r0, #32
 800f334:	4770      	bx	lr
	...

0800f338 <__i2b>:
 800f338:	b510      	push	{r4, lr}
 800f33a:	460c      	mov	r4, r1
 800f33c:	2101      	movs	r1, #1
 800f33e:	f7ff feb9 	bl	800f0b4 <_Balloc>
 800f342:	4602      	mov	r2, r0
 800f344:	b928      	cbnz	r0, 800f352 <__i2b+0x1a>
 800f346:	4b05      	ldr	r3, [pc, #20]	; (800f35c <__i2b+0x24>)
 800f348:	4805      	ldr	r0, [pc, #20]	; (800f360 <__i2b+0x28>)
 800f34a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f34e:	f000 fe01 	bl	800ff54 <__assert_func>
 800f352:	2301      	movs	r3, #1
 800f354:	6144      	str	r4, [r0, #20]
 800f356:	6103      	str	r3, [r0, #16]
 800f358:	bd10      	pop	{r4, pc}
 800f35a:	bf00      	nop
 800f35c:	08012870 	.word	0x08012870
 800f360:	080128fc 	.word	0x080128fc

0800f364 <__multiply>:
 800f364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f368:	4691      	mov	r9, r2
 800f36a:	690a      	ldr	r2, [r1, #16]
 800f36c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f370:	429a      	cmp	r2, r3
 800f372:	bfb8      	it	lt
 800f374:	460b      	movlt	r3, r1
 800f376:	460c      	mov	r4, r1
 800f378:	bfbc      	itt	lt
 800f37a:	464c      	movlt	r4, r9
 800f37c:	4699      	movlt	r9, r3
 800f37e:	6927      	ldr	r7, [r4, #16]
 800f380:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f384:	68a3      	ldr	r3, [r4, #8]
 800f386:	6861      	ldr	r1, [r4, #4]
 800f388:	eb07 060a 	add.w	r6, r7, sl
 800f38c:	42b3      	cmp	r3, r6
 800f38e:	b085      	sub	sp, #20
 800f390:	bfb8      	it	lt
 800f392:	3101      	addlt	r1, #1
 800f394:	f7ff fe8e 	bl	800f0b4 <_Balloc>
 800f398:	b930      	cbnz	r0, 800f3a8 <__multiply+0x44>
 800f39a:	4602      	mov	r2, r0
 800f39c:	4b44      	ldr	r3, [pc, #272]	; (800f4b0 <__multiply+0x14c>)
 800f39e:	4845      	ldr	r0, [pc, #276]	; (800f4b4 <__multiply+0x150>)
 800f3a0:	f240 115d 	movw	r1, #349	; 0x15d
 800f3a4:	f000 fdd6 	bl	800ff54 <__assert_func>
 800f3a8:	f100 0514 	add.w	r5, r0, #20
 800f3ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f3b0:	462b      	mov	r3, r5
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	4543      	cmp	r3, r8
 800f3b6:	d321      	bcc.n	800f3fc <__multiply+0x98>
 800f3b8:	f104 0314 	add.w	r3, r4, #20
 800f3bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f3c0:	f109 0314 	add.w	r3, r9, #20
 800f3c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f3c8:	9202      	str	r2, [sp, #8]
 800f3ca:	1b3a      	subs	r2, r7, r4
 800f3cc:	3a15      	subs	r2, #21
 800f3ce:	f022 0203 	bic.w	r2, r2, #3
 800f3d2:	3204      	adds	r2, #4
 800f3d4:	f104 0115 	add.w	r1, r4, #21
 800f3d8:	428f      	cmp	r7, r1
 800f3da:	bf38      	it	cc
 800f3dc:	2204      	movcc	r2, #4
 800f3de:	9201      	str	r2, [sp, #4]
 800f3e0:	9a02      	ldr	r2, [sp, #8]
 800f3e2:	9303      	str	r3, [sp, #12]
 800f3e4:	429a      	cmp	r2, r3
 800f3e6:	d80c      	bhi.n	800f402 <__multiply+0x9e>
 800f3e8:	2e00      	cmp	r6, #0
 800f3ea:	dd03      	ble.n	800f3f4 <__multiply+0x90>
 800f3ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d05a      	beq.n	800f4aa <__multiply+0x146>
 800f3f4:	6106      	str	r6, [r0, #16]
 800f3f6:	b005      	add	sp, #20
 800f3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3fc:	f843 2b04 	str.w	r2, [r3], #4
 800f400:	e7d8      	b.n	800f3b4 <__multiply+0x50>
 800f402:	f8b3 a000 	ldrh.w	sl, [r3]
 800f406:	f1ba 0f00 	cmp.w	sl, #0
 800f40a:	d024      	beq.n	800f456 <__multiply+0xf2>
 800f40c:	f104 0e14 	add.w	lr, r4, #20
 800f410:	46a9      	mov	r9, r5
 800f412:	f04f 0c00 	mov.w	ip, #0
 800f416:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f41a:	f8d9 1000 	ldr.w	r1, [r9]
 800f41e:	fa1f fb82 	uxth.w	fp, r2
 800f422:	b289      	uxth	r1, r1
 800f424:	fb0a 110b 	mla	r1, sl, fp, r1
 800f428:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f42c:	f8d9 2000 	ldr.w	r2, [r9]
 800f430:	4461      	add	r1, ip
 800f432:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f436:	fb0a c20b 	mla	r2, sl, fp, ip
 800f43a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f43e:	b289      	uxth	r1, r1
 800f440:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f444:	4577      	cmp	r7, lr
 800f446:	f849 1b04 	str.w	r1, [r9], #4
 800f44a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f44e:	d8e2      	bhi.n	800f416 <__multiply+0xb2>
 800f450:	9a01      	ldr	r2, [sp, #4]
 800f452:	f845 c002 	str.w	ip, [r5, r2]
 800f456:	9a03      	ldr	r2, [sp, #12]
 800f458:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f45c:	3304      	adds	r3, #4
 800f45e:	f1b9 0f00 	cmp.w	r9, #0
 800f462:	d020      	beq.n	800f4a6 <__multiply+0x142>
 800f464:	6829      	ldr	r1, [r5, #0]
 800f466:	f104 0c14 	add.w	ip, r4, #20
 800f46a:	46ae      	mov	lr, r5
 800f46c:	f04f 0a00 	mov.w	sl, #0
 800f470:	f8bc b000 	ldrh.w	fp, [ip]
 800f474:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f478:	fb09 220b 	mla	r2, r9, fp, r2
 800f47c:	4492      	add	sl, r2
 800f47e:	b289      	uxth	r1, r1
 800f480:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f484:	f84e 1b04 	str.w	r1, [lr], #4
 800f488:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f48c:	f8be 1000 	ldrh.w	r1, [lr]
 800f490:	0c12      	lsrs	r2, r2, #16
 800f492:	fb09 1102 	mla	r1, r9, r2, r1
 800f496:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f49a:	4567      	cmp	r7, ip
 800f49c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f4a0:	d8e6      	bhi.n	800f470 <__multiply+0x10c>
 800f4a2:	9a01      	ldr	r2, [sp, #4]
 800f4a4:	50a9      	str	r1, [r5, r2]
 800f4a6:	3504      	adds	r5, #4
 800f4a8:	e79a      	b.n	800f3e0 <__multiply+0x7c>
 800f4aa:	3e01      	subs	r6, #1
 800f4ac:	e79c      	b.n	800f3e8 <__multiply+0x84>
 800f4ae:	bf00      	nop
 800f4b0:	08012870 	.word	0x08012870
 800f4b4:	080128fc 	.word	0x080128fc

0800f4b8 <__pow5mult>:
 800f4b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4bc:	4615      	mov	r5, r2
 800f4be:	f012 0203 	ands.w	r2, r2, #3
 800f4c2:	4606      	mov	r6, r0
 800f4c4:	460f      	mov	r7, r1
 800f4c6:	d007      	beq.n	800f4d8 <__pow5mult+0x20>
 800f4c8:	4c25      	ldr	r4, [pc, #148]	; (800f560 <__pow5mult+0xa8>)
 800f4ca:	3a01      	subs	r2, #1
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f4d2:	f7ff fe51 	bl	800f178 <__multadd>
 800f4d6:	4607      	mov	r7, r0
 800f4d8:	10ad      	asrs	r5, r5, #2
 800f4da:	d03d      	beq.n	800f558 <__pow5mult+0xa0>
 800f4dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f4de:	b97c      	cbnz	r4, 800f500 <__pow5mult+0x48>
 800f4e0:	2010      	movs	r0, #16
 800f4e2:	f7ff fdbf 	bl	800f064 <malloc>
 800f4e6:	4602      	mov	r2, r0
 800f4e8:	6270      	str	r0, [r6, #36]	; 0x24
 800f4ea:	b928      	cbnz	r0, 800f4f8 <__pow5mult+0x40>
 800f4ec:	4b1d      	ldr	r3, [pc, #116]	; (800f564 <__pow5mult+0xac>)
 800f4ee:	481e      	ldr	r0, [pc, #120]	; (800f568 <__pow5mult+0xb0>)
 800f4f0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f4f4:	f000 fd2e 	bl	800ff54 <__assert_func>
 800f4f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f4fc:	6004      	str	r4, [r0, #0]
 800f4fe:	60c4      	str	r4, [r0, #12]
 800f500:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f504:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f508:	b94c      	cbnz	r4, 800f51e <__pow5mult+0x66>
 800f50a:	f240 2171 	movw	r1, #625	; 0x271
 800f50e:	4630      	mov	r0, r6
 800f510:	f7ff ff12 	bl	800f338 <__i2b>
 800f514:	2300      	movs	r3, #0
 800f516:	f8c8 0008 	str.w	r0, [r8, #8]
 800f51a:	4604      	mov	r4, r0
 800f51c:	6003      	str	r3, [r0, #0]
 800f51e:	f04f 0900 	mov.w	r9, #0
 800f522:	07eb      	lsls	r3, r5, #31
 800f524:	d50a      	bpl.n	800f53c <__pow5mult+0x84>
 800f526:	4639      	mov	r1, r7
 800f528:	4622      	mov	r2, r4
 800f52a:	4630      	mov	r0, r6
 800f52c:	f7ff ff1a 	bl	800f364 <__multiply>
 800f530:	4639      	mov	r1, r7
 800f532:	4680      	mov	r8, r0
 800f534:	4630      	mov	r0, r6
 800f536:	f7ff fdfd 	bl	800f134 <_Bfree>
 800f53a:	4647      	mov	r7, r8
 800f53c:	106d      	asrs	r5, r5, #1
 800f53e:	d00b      	beq.n	800f558 <__pow5mult+0xa0>
 800f540:	6820      	ldr	r0, [r4, #0]
 800f542:	b938      	cbnz	r0, 800f554 <__pow5mult+0x9c>
 800f544:	4622      	mov	r2, r4
 800f546:	4621      	mov	r1, r4
 800f548:	4630      	mov	r0, r6
 800f54a:	f7ff ff0b 	bl	800f364 <__multiply>
 800f54e:	6020      	str	r0, [r4, #0]
 800f550:	f8c0 9000 	str.w	r9, [r0]
 800f554:	4604      	mov	r4, r0
 800f556:	e7e4      	b.n	800f522 <__pow5mult+0x6a>
 800f558:	4638      	mov	r0, r7
 800f55a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f55e:	bf00      	nop
 800f560:	08012a48 	.word	0x08012a48
 800f564:	080127fe 	.word	0x080127fe
 800f568:	080128fc 	.word	0x080128fc

0800f56c <__lshift>:
 800f56c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f570:	460c      	mov	r4, r1
 800f572:	6849      	ldr	r1, [r1, #4]
 800f574:	6923      	ldr	r3, [r4, #16]
 800f576:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f57a:	68a3      	ldr	r3, [r4, #8]
 800f57c:	4607      	mov	r7, r0
 800f57e:	4691      	mov	r9, r2
 800f580:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f584:	f108 0601 	add.w	r6, r8, #1
 800f588:	42b3      	cmp	r3, r6
 800f58a:	db0b      	blt.n	800f5a4 <__lshift+0x38>
 800f58c:	4638      	mov	r0, r7
 800f58e:	f7ff fd91 	bl	800f0b4 <_Balloc>
 800f592:	4605      	mov	r5, r0
 800f594:	b948      	cbnz	r0, 800f5aa <__lshift+0x3e>
 800f596:	4602      	mov	r2, r0
 800f598:	4b2a      	ldr	r3, [pc, #168]	; (800f644 <__lshift+0xd8>)
 800f59a:	482b      	ldr	r0, [pc, #172]	; (800f648 <__lshift+0xdc>)
 800f59c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f5a0:	f000 fcd8 	bl	800ff54 <__assert_func>
 800f5a4:	3101      	adds	r1, #1
 800f5a6:	005b      	lsls	r3, r3, #1
 800f5a8:	e7ee      	b.n	800f588 <__lshift+0x1c>
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	f100 0114 	add.w	r1, r0, #20
 800f5b0:	f100 0210 	add.w	r2, r0, #16
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	4553      	cmp	r3, sl
 800f5b8:	db37      	blt.n	800f62a <__lshift+0xbe>
 800f5ba:	6920      	ldr	r0, [r4, #16]
 800f5bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f5c0:	f104 0314 	add.w	r3, r4, #20
 800f5c4:	f019 091f 	ands.w	r9, r9, #31
 800f5c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f5cc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f5d0:	d02f      	beq.n	800f632 <__lshift+0xc6>
 800f5d2:	f1c9 0e20 	rsb	lr, r9, #32
 800f5d6:	468a      	mov	sl, r1
 800f5d8:	f04f 0c00 	mov.w	ip, #0
 800f5dc:	681a      	ldr	r2, [r3, #0]
 800f5de:	fa02 f209 	lsl.w	r2, r2, r9
 800f5e2:	ea42 020c 	orr.w	r2, r2, ip
 800f5e6:	f84a 2b04 	str.w	r2, [sl], #4
 800f5ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5ee:	4298      	cmp	r0, r3
 800f5f0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f5f4:	d8f2      	bhi.n	800f5dc <__lshift+0x70>
 800f5f6:	1b03      	subs	r3, r0, r4
 800f5f8:	3b15      	subs	r3, #21
 800f5fa:	f023 0303 	bic.w	r3, r3, #3
 800f5fe:	3304      	adds	r3, #4
 800f600:	f104 0215 	add.w	r2, r4, #21
 800f604:	4290      	cmp	r0, r2
 800f606:	bf38      	it	cc
 800f608:	2304      	movcc	r3, #4
 800f60a:	f841 c003 	str.w	ip, [r1, r3]
 800f60e:	f1bc 0f00 	cmp.w	ip, #0
 800f612:	d001      	beq.n	800f618 <__lshift+0xac>
 800f614:	f108 0602 	add.w	r6, r8, #2
 800f618:	3e01      	subs	r6, #1
 800f61a:	4638      	mov	r0, r7
 800f61c:	612e      	str	r6, [r5, #16]
 800f61e:	4621      	mov	r1, r4
 800f620:	f7ff fd88 	bl	800f134 <_Bfree>
 800f624:	4628      	mov	r0, r5
 800f626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f62a:	f842 0f04 	str.w	r0, [r2, #4]!
 800f62e:	3301      	adds	r3, #1
 800f630:	e7c1      	b.n	800f5b6 <__lshift+0x4a>
 800f632:	3904      	subs	r1, #4
 800f634:	f853 2b04 	ldr.w	r2, [r3], #4
 800f638:	f841 2f04 	str.w	r2, [r1, #4]!
 800f63c:	4298      	cmp	r0, r3
 800f63e:	d8f9      	bhi.n	800f634 <__lshift+0xc8>
 800f640:	e7ea      	b.n	800f618 <__lshift+0xac>
 800f642:	bf00      	nop
 800f644:	08012870 	.word	0x08012870
 800f648:	080128fc 	.word	0x080128fc

0800f64c <__mcmp>:
 800f64c:	b530      	push	{r4, r5, lr}
 800f64e:	6902      	ldr	r2, [r0, #16]
 800f650:	690c      	ldr	r4, [r1, #16]
 800f652:	1b12      	subs	r2, r2, r4
 800f654:	d10e      	bne.n	800f674 <__mcmp+0x28>
 800f656:	f100 0314 	add.w	r3, r0, #20
 800f65a:	3114      	adds	r1, #20
 800f65c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f660:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f664:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f668:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f66c:	42a5      	cmp	r5, r4
 800f66e:	d003      	beq.n	800f678 <__mcmp+0x2c>
 800f670:	d305      	bcc.n	800f67e <__mcmp+0x32>
 800f672:	2201      	movs	r2, #1
 800f674:	4610      	mov	r0, r2
 800f676:	bd30      	pop	{r4, r5, pc}
 800f678:	4283      	cmp	r3, r0
 800f67a:	d3f3      	bcc.n	800f664 <__mcmp+0x18>
 800f67c:	e7fa      	b.n	800f674 <__mcmp+0x28>
 800f67e:	f04f 32ff 	mov.w	r2, #4294967295
 800f682:	e7f7      	b.n	800f674 <__mcmp+0x28>

0800f684 <__mdiff>:
 800f684:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f688:	460c      	mov	r4, r1
 800f68a:	4606      	mov	r6, r0
 800f68c:	4611      	mov	r1, r2
 800f68e:	4620      	mov	r0, r4
 800f690:	4690      	mov	r8, r2
 800f692:	f7ff ffdb 	bl	800f64c <__mcmp>
 800f696:	1e05      	subs	r5, r0, #0
 800f698:	d110      	bne.n	800f6bc <__mdiff+0x38>
 800f69a:	4629      	mov	r1, r5
 800f69c:	4630      	mov	r0, r6
 800f69e:	f7ff fd09 	bl	800f0b4 <_Balloc>
 800f6a2:	b930      	cbnz	r0, 800f6b2 <__mdiff+0x2e>
 800f6a4:	4b3a      	ldr	r3, [pc, #232]	; (800f790 <__mdiff+0x10c>)
 800f6a6:	4602      	mov	r2, r0
 800f6a8:	f240 2132 	movw	r1, #562	; 0x232
 800f6ac:	4839      	ldr	r0, [pc, #228]	; (800f794 <__mdiff+0x110>)
 800f6ae:	f000 fc51 	bl	800ff54 <__assert_func>
 800f6b2:	2301      	movs	r3, #1
 800f6b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f6b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6bc:	bfa4      	itt	ge
 800f6be:	4643      	movge	r3, r8
 800f6c0:	46a0      	movge	r8, r4
 800f6c2:	4630      	mov	r0, r6
 800f6c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f6c8:	bfa6      	itte	ge
 800f6ca:	461c      	movge	r4, r3
 800f6cc:	2500      	movge	r5, #0
 800f6ce:	2501      	movlt	r5, #1
 800f6d0:	f7ff fcf0 	bl	800f0b4 <_Balloc>
 800f6d4:	b920      	cbnz	r0, 800f6e0 <__mdiff+0x5c>
 800f6d6:	4b2e      	ldr	r3, [pc, #184]	; (800f790 <__mdiff+0x10c>)
 800f6d8:	4602      	mov	r2, r0
 800f6da:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f6de:	e7e5      	b.n	800f6ac <__mdiff+0x28>
 800f6e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f6e4:	6926      	ldr	r6, [r4, #16]
 800f6e6:	60c5      	str	r5, [r0, #12]
 800f6e8:	f104 0914 	add.w	r9, r4, #20
 800f6ec:	f108 0514 	add.w	r5, r8, #20
 800f6f0:	f100 0e14 	add.w	lr, r0, #20
 800f6f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f6f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f6fc:	f108 0210 	add.w	r2, r8, #16
 800f700:	46f2      	mov	sl, lr
 800f702:	2100      	movs	r1, #0
 800f704:	f859 3b04 	ldr.w	r3, [r9], #4
 800f708:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f70c:	fa1f f883 	uxth.w	r8, r3
 800f710:	fa11 f18b 	uxtah	r1, r1, fp
 800f714:	0c1b      	lsrs	r3, r3, #16
 800f716:	eba1 0808 	sub.w	r8, r1, r8
 800f71a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f71e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f722:	fa1f f888 	uxth.w	r8, r8
 800f726:	1419      	asrs	r1, r3, #16
 800f728:	454e      	cmp	r6, r9
 800f72a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f72e:	f84a 3b04 	str.w	r3, [sl], #4
 800f732:	d8e7      	bhi.n	800f704 <__mdiff+0x80>
 800f734:	1b33      	subs	r3, r6, r4
 800f736:	3b15      	subs	r3, #21
 800f738:	f023 0303 	bic.w	r3, r3, #3
 800f73c:	3304      	adds	r3, #4
 800f73e:	3415      	adds	r4, #21
 800f740:	42a6      	cmp	r6, r4
 800f742:	bf38      	it	cc
 800f744:	2304      	movcc	r3, #4
 800f746:	441d      	add	r5, r3
 800f748:	4473      	add	r3, lr
 800f74a:	469e      	mov	lr, r3
 800f74c:	462e      	mov	r6, r5
 800f74e:	4566      	cmp	r6, ip
 800f750:	d30e      	bcc.n	800f770 <__mdiff+0xec>
 800f752:	f10c 0203 	add.w	r2, ip, #3
 800f756:	1b52      	subs	r2, r2, r5
 800f758:	f022 0203 	bic.w	r2, r2, #3
 800f75c:	3d03      	subs	r5, #3
 800f75e:	45ac      	cmp	ip, r5
 800f760:	bf38      	it	cc
 800f762:	2200      	movcc	r2, #0
 800f764:	441a      	add	r2, r3
 800f766:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f76a:	b17b      	cbz	r3, 800f78c <__mdiff+0x108>
 800f76c:	6107      	str	r7, [r0, #16]
 800f76e:	e7a3      	b.n	800f6b8 <__mdiff+0x34>
 800f770:	f856 8b04 	ldr.w	r8, [r6], #4
 800f774:	fa11 f288 	uxtah	r2, r1, r8
 800f778:	1414      	asrs	r4, r2, #16
 800f77a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f77e:	b292      	uxth	r2, r2
 800f780:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f784:	f84e 2b04 	str.w	r2, [lr], #4
 800f788:	1421      	asrs	r1, r4, #16
 800f78a:	e7e0      	b.n	800f74e <__mdiff+0xca>
 800f78c:	3f01      	subs	r7, #1
 800f78e:	e7ea      	b.n	800f766 <__mdiff+0xe2>
 800f790:	08012870 	.word	0x08012870
 800f794:	080128fc 	.word	0x080128fc

0800f798 <__ulp>:
 800f798:	b082      	sub	sp, #8
 800f79a:	ed8d 0b00 	vstr	d0, [sp]
 800f79e:	9b01      	ldr	r3, [sp, #4]
 800f7a0:	4912      	ldr	r1, [pc, #72]	; (800f7ec <__ulp+0x54>)
 800f7a2:	4019      	ands	r1, r3
 800f7a4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f7a8:	2900      	cmp	r1, #0
 800f7aa:	dd05      	ble.n	800f7b8 <__ulp+0x20>
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	460b      	mov	r3, r1
 800f7b0:	ec43 2b10 	vmov	d0, r2, r3
 800f7b4:	b002      	add	sp, #8
 800f7b6:	4770      	bx	lr
 800f7b8:	4249      	negs	r1, r1
 800f7ba:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f7be:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f7c2:	f04f 0200 	mov.w	r2, #0
 800f7c6:	f04f 0300 	mov.w	r3, #0
 800f7ca:	da04      	bge.n	800f7d6 <__ulp+0x3e>
 800f7cc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f7d0:	fa41 f300 	asr.w	r3, r1, r0
 800f7d4:	e7ec      	b.n	800f7b0 <__ulp+0x18>
 800f7d6:	f1a0 0114 	sub.w	r1, r0, #20
 800f7da:	291e      	cmp	r1, #30
 800f7dc:	bfda      	itte	le
 800f7de:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f7e2:	fa20 f101 	lsrle.w	r1, r0, r1
 800f7e6:	2101      	movgt	r1, #1
 800f7e8:	460a      	mov	r2, r1
 800f7ea:	e7e1      	b.n	800f7b0 <__ulp+0x18>
 800f7ec:	7ff00000 	.word	0x7ff00000

0800f7f0 <__b2d>:
 800f7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7f2:	6905      	ldr	r5, [r0, #16]
 800f7f4:	f100 0714 	add.w	r7, r0, #20
 800f7f8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f7fc:	1f2e      	subs	r6, r5, #4
 800f7fe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f802:	4620      	mov	r0, r4
 800f804:	f7ff fd48 	bl	800f298 <__hi0bits>
 800f808:	f1c0 0320 	rsb	r3, r0, #32
 800f80c:	280a      	cmp	r0, #10
 800f80e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f88c <__b2d+0x9c>
 800f812:	600b      	str	r3, [r1, #0]
 800f814:	dc14      	bgt.n	800f840 <__b2d+0x50>
 800f816:	f1c0 0e0b 	rsb	lr, r0, #11
 800f81a:	fa24 f10e 	lsr.w	r1, r4, lr
 800f81e:	42b7      	cmp	r7, r6
 800f820:	ea41 030c 	orr.w	r3, r1, ip
 800f824:	bf34      	ite	cc
 800f826:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f82a:	2100      	movcs	r1, #0
 800f82c:	3015      	adds	r0, #21
 800f82e:	fa04 f000 	lsl.w	r0, r4, r0
 800f832:	fa21 f10e 	lsr.w	r1, r1, lr
 800f836:	ea40 0201 	orr.w	r2, r0, r1
 800f83a:	ec43 2b10 	vmov	d0, r2, r3
 800f83e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f840:	42b7      	cmp	r7, r6
 800f842:	bf3a      	itte	cc
 800f844:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f848:	f1a5 0608 	subcc.w	r6, r5, #8
 800f84c:	2100      	movcs	r1, #0
 800f84e:	380b      	subs	r0, #11
 800f850:	d017      	beq.n	800f882 <__b2d+0x92>
 800f852:	f1c0 0c20 	rsb	ip, r0, #32
 800f856:	fa04 f500 	lsl.w	r5, r4, r0
 800f85a:	42be      	cmp	r6, r7
 800f85c:	fa21 f40c 	lsr.w	r4, r1, ip
 800f860:	ea45 0504 	orr.w	r5, r5, r4
 800f864:	bf8c      	ite	hi
 800f866:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f86a:	2400      	movls	r4, #0
 800f86c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f870:	fa01 f000 	lsl.w	r0, r1, r0
 800f874:	fa24 f40c 	lsr.w	r4, r4, ip
 800f878:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f87c:	ea40 0204 	orr.w	r2, r0, r4
 800f880:	e7db      	b.n	800f83a <__b2d+0x4a>
 800f882:	ea44 030c 	orr.w	r3, r4, ip
 800f886:	460a      	mov	r2, r1
 800f888:	e7d7      	b.n	800f83a <__b2d+0x4a>
 800f88a:	bf00      	nop
 800f88c:	3ff00000 	.word	0x3ff00000

0800f890 <__d2b>:
 800f890:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f894:	4689      	mov	r9, r1
 800f896:	2101      	movs	r1, #1
 800f898:	ec57 6b10 	vmov	r6, r7, d0
 800f89c:	4690      	mov	r8, r2
 800f89e:	f7ff fc09 	bl	800f0b4 <_Balloc>
 800f8a2:	4604      	mov	r4, r0
 800f8a4:	b930      	cbnz	r0, 800f8b4 <__d2b+0x24>
 800f8a6:	4602      	mov	r2, r0
 800f8a8:	4b25      	ldr	r3, [pc, #148]	; (800f940 <__d2b+0xb0>)
 800f8aa:	4826      	ldr	r0, [pc, #152]	; (800f944 <__d2b+0xb4>)
 800f8ac:	f240 310a 	movw	r1, #778	; 0x30a
 800f8b0:	f000 fb50 	bl	800ff54 <__assert_func>
 800f8b4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f8b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f8bc:	bb35      	cbnz	r5, 800f90c <__d2b+0x7c>
 800f8be:	2e00      	cmp	r6, #0
 800f8c0:	9301      	str	r3, [sp, #4]
 800f8c2:	d028      	beq.n	800f916 <__d2b+0x86>
 800f8c4:	4668      	mov	r0, sp
 800f8c6:	9600      	str	r6, [sp, #0]
 800f8c8:	f7ff fd06 	bl	800f2d8 <__lo0bits>
 800f8cc:	9900      	ldr	r1, [sp, #0]
 800f8ce:	b300      	cbz	r0, 800f912 <__d2b+0x82>
 800f8d0:	9a01      	ldr	r2, [sp, #4]
 800f8d2:	f1c0 0320 	rsb	r3, r0, #32
 800f8d6:	fa02 f303 	lsl.w	r3, r2, r3
 800f8da:	430b      	orrs	r3, r1
 800f8dc:	40c2      	lsrs	r2, r0
 800f8de:	6163      	str	r3, [r4, #20]
 800f8e0:	9201      	str	r2, [sp, #4]
 800f8e2:	9b01      	ldr	r3, [sp, #4]
 800f8e4:	61a3      	str	r3, [r4, #24]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	bf14      	ite	ne
 800f8ea:	2202      	movne	r2, #2
 800f8ec:	2201      	moveq	r2, #1
 800f8ee:	6122      	str	r2, [r4, #16]
 800f8f0:	b1d5      	cbz	r5, 800f928 <__d2b+0x98>
 800f8f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f8f6:	4405      	add	r5, r0
 800f8f8:	f8c9 5000 	str.w	r5, [r9]
 800f8fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f900:	f8c8 0000 	str.w	r0, [r8]
 800f904:	4620      	mov	r0, r4
 800f906:	b003      	add	sp, #12
 800f908:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f90c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f910:	e7d5      	b.n	800f8be <__d2b+0x2e>
 800f912:	6161      	str	r1, [r4, #20]
 800f914:	e7e5      	b.n	800f8e2 <__d2b+0x52>
 800f916:	a801      	add	r0, sp, #4
 800f918:	f7ff fcde 	bl	800f2d8 <__lo0bits>
 800f91c:	9b01      	ldr	r3, [sp, #4]
 800f91e:	6163      	str	r3, [r4, #20]
 800f920:	2201      	movs	r2, #1
 800f922:	6122      	str	r2, [r4, #16]
 800f924:	3020      	adds	r0, #32
 800f926:	e7e3      	b.n	800f8f0 <__d2b+0x60>
 800f928:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f92c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f930:	f8c9 0000 	str.w	r0, [r9]
 800f934:	6918      	ldr	r0, [r3, #16]
 800f936:	f7ff fcaf 	bl	800f298 <__hi0bits>
 800f93a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f93e:	e7df      	b.n	800f900 <__d2b+0x70>
 800f940:	08012870 	.word	0x08012870
 800f944:	080128fc 	.word	0x080128fc

0800f948 <__ratio>:
 800f948:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f94c:	4688      	mov	r8, r1
 800f94e:	4669      	mov	r1, sp
 800f950:	4681      	mov	r9, r0
 800f952:	f7ff ff4d 	bl	800f7f0 <__b2d>
 800f956:	a901      	add	r1, sp, #4
 800f958:	4640      	mov	r0, r8
 800f95a:	ec55 4b10 	vmov	r4, r5, d0
 800f95e:	f7ff ff47 	bl	800f7f0 <__b2d>
 800f962:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f966:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f96a:	eba3 0c02 	sub.w	ip, r3, r2
 800f96e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f972:	1a9b      	subs	r3, r3, r2
 800f974:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f978:	ec51 0b10 	vmov	r0, r1, d0
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	bfd6      	itet	le
 800f980:	460a      	movle	r2, r1
 800f982:	462a      	movgt	r2, r5
 800f984:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f988:	468b      	mov	fp, r1
 800f98a:	462f      	mov	r7, r5
 800f98c:	bfd4      	ite	le
 800f98e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f992:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f996:	4620      	mov	r0, r4
 800f998:	ee10 2a10 	vmov	r2, s0
 800f99c:	465b      	mov	r3, fp
 800f99e:	4639      	mov	r1, r7
 800f9a0:	f7f0 ff64 	bl	800086c <__aeabi_ddiv>
 800f9a4:	ec41 0b10 	vmov	d0, r0, r1
 800f9a8:	b003      	add	sp, #12
 800f9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f9ae <__copybits>:
 800f9ae:	3901      	subs	r1, #1
 800f9b0:	b570      	push	{r4, r5, r6, lr}
 800f9b2:	1149      	asrs	r1, r1, #5
 800f9b4:	6914      	ldr	r4, [r2, #16]
 800f9b6:	3101      	adds	r1, #1
 800f9b8:	f102 0314 	add.w	r3, r2, #20
 800f9bc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f9c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f9c4:	1f05      	subs	r5, r0, #4
 800f9c6:	42a3      	cmp	r3, r4
 800f9c8:	d30c      	bcc.n	800f9e4 <__copybits+0x36>
 800f9ca:	1aa3      	subs	r3, r4, r2
 800f9cc:	3b11      	subs	r3, #17
 800f9ce:	f023 0303 	bic.w	r3, r3, #3
 800f9d2:	3211      	adds	r2, #17
 800f9d4:	42a2      	cmp	r2, r4
 800f9d6:	bf88      	it	hi
 800f9d8:	2300      	movhi	r3, #0
 800f9da:	4418      	add	r0, r3
 800f9dc:	2300      	movs	r3, #0
 800f9de:	4288      	cmp	r0, r1
 800f9e0:	d305      	bcc.n	800f9ee <__copybits+0x40>
 800f9e2:	bd70      	pop	{r4, r5, r6, pc}
 800f9e4:	f853 6b04 	ldr.w	r6, [r3], #4
 800f9e8:	f845 6f04 	str.w	r6, [r5, #4]!
 800f9ec:	e7eb      	b.n	800f9c6 <__copybits+0x18>
 800f9ee:	f840 3b04 	str.w	r3, [r0], #4
 800f9f2:	e7f4      	b.n	800f9de <__copybits+0x30>

0800f9f4 <__any_on>:
 800f9f4:	f100 0214 	add.w	r2, r0, #20
 800f9f8:	6900      	ldr	r0, [r0, #16]
 800f9fa:	114b      	asrs	r3, r1, #5
 800f9fc:	4298      	cmp	r0, r3
 800f9fe:	b510      	push	{r4, lr}
 800fa00:	db11      	blt.n	800fa26 <__any_on+0x32>
 800fa02:	dd0a      	ble.n	800fa1a <__any_on+0x26>
 800fa04:	f011 011f 	ands.w	r1, r1, #31
 800fa08:	d007      	beq.n	800fa1a <__any_on+0x26>
 800fa0a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fa0e:	fa24 f001 	lsr.w	r0, r4, r1
 800fa12:	fa00 f101 	lsl.w	r1, r0, r1
 800fa16:	428c      	cmp	r4, r1
 800fa18:	d10b      	bne.n	800fa32 <__any_on+0x3e>
 800fa1a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fa1e:	4293      	cmp	r3, r2
 800fa20:	d803      	bhi.n	800fa2a <__any_on+0x36>
 800fa22:	2000      	movs	r0, #0
 800fa24:	bd10      	pop	{r4, pc}
 800fa26:	4603      	mov	r3, r0
 800fa28:	e7f7      	b.n	800fa1a <__any_on+0x26>
 800fa2a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fa2e:	2900      	cmp	r1, #0
 800fa30:	d0f5      	beq.n	800fa1e <__any_on+0x2a>
 800fa32:	2001      	movs	r0, #1
 800fa34:	e7f6      	b.n	800fa24 <__any_on+0x30>

0800fa36 <_calloc_r>:
 800fa36:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fa38:	fba1 2402 	umull	r2, r4, r1, r2
 800fa3c:	b94c      	cbnz	r4, 800fa52 <_calloc_r+0x1c>
 800fa3e:	4611      	mov	r1, r2
 800fa40:	9201      	str	r2, [sp, #4]
 800fa42:	f000 f87b 	bl	800fb3c <_malloc_r>
 800fa46:	9a01      	ldr	r2, [sp, #4]
 800fa48:	4605      	mov	r5, r0
 800fa4a:	b930      	cbnz	r0, 800fa5a <_calloc_r+0x24>
 800fa4c:	4628      	mov	r0, r5
 800fa4e:	b003      	add	sp, #12
 800fa50:	bd30      	pop	{r4, r5, pc}
 800fa52:	220c      	movs	r2, #12
 800fa54:	6002      	str	r2, [r0, #0]
 800fa56:	2500      	movs	r5, #0
 800fa58:	e7f8      	b.n	800fa4c <_calloc_r+0x16>
 800fa5a:	4621      	mov	r1, r4
 800fa5c:	f7fc fbbe 	bl	800c1dc <memset>
 800fa60:	e7f4      	b.n	800fa4c <_calloc_r+0x16>
	...

0800fa64 <_free_r>:
 800fa64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fa66:	2900      	cmp	r1, #0
 800fa68:	d044      	beq.n	800faf4 <_free_r+0x90>
 800fa6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa6e:	9001      	str	r0, [sp, #4]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	f1a1 0404 	sub.w	r4, r1, #4
 800fa76:	bfb8      	it	lt
 800fa78:	18e4      	addlt	r4, r4, r3
 800fa7a:	f000 fab5 	bl	800ffe8 <__malloc_lock>
 800fa7e:	4a1e      	ldr	r2, [pc, #120]	; (800faf8 <_free_r+0x94>)
 800fa80:	9801      	ldr	r0, [sp, #4]
 800fa82:	6813      	ldr	r3, [r2, #0]
 800fa84:	b933      	cbnz	r3, 800fa94 <_free_r+0x30>
 800fa86:	6063      	str	r3, [r4, #4]
 800fa88:	6014      	str	r4, [r2, #0]
 800fa8a:	b003      	add	sp, #12
 800fa8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fa90:	f000 bab0 	b.w	800fff4 <__malloc_unlock>
 800fa94:	42a3      	cmp	r3, r4
 800fa96:	d908      	bls.n	800faaa <_free_r+0x46>
 800fa98:	6825      	ldr	r5, [r4, #0]
 800fa9a:	1961      	adds	r1, r4, r5
 800fa9c:	428b      	cmp	r3, r1
 800fa9e:	bf01      	itttt	eq
 800faa0:	6819      	ldreq	r1, [r3, #0]
 800faa2:	685b      	ldreq	r3, [r3, #4]
 800faa4:	1949      	addeq	r1, r1, r5
 800faa6:	6021      	streq	r1, [r4, #0]
 800faa8:	e7ed      	b.n	800fa86 <_free_r+0x22>
 800faaa:	461a      	mov	r2, r3
 800faac:	685b      	ldr	r3, [r3, #4]
 800faae:	b10b      	cbz	r3, 800fab4 <_free_r+0x50>
 800fab0:	42a3      	cmp	r3, r4
 800fab2:	d9fa      	bls.n	800faaa <_free_r+0x46>
 800fab4:	6811      	ldr	r1, [r2, #0]
 800fab6:	1855      	adds	r5, r2, r1
 800fab8:	42a5      	cmp	r5, r4
 800faba:	d10b      	bne.n	800fad4 <_free_r+0x70>
 800fabc:	6824      	ldr	r4, [r4, #0]
 800fabe:	4421      	add	r1, r4
 800fac0:	1854      	adds	r4, r2, r1
 800fac2:	42a3      	cmp	r3, r4
 800fac4:	6011      	str	r1, [r2, #0]
 800fac6:	d1e0      	bne.n	800fa8a <_free_r+0x26>
 800fac8:	681c      	ldr	r4, [r3, #0]
 800faca:	685b      	ldr	r3, [r3, #4]
 800facc:	6053      	str	r3, [r2, #4]
 800face:	4421      	add	r1, r4
 800fad0:	6011      	str	r1, [r2, #0]
 800fad2:	e7da      	b.n	800fa8a <_free_r+0x26>
 800fad4:	d902      	bls.n	800fadc <_free_r+0x78>
 800fad6:	230c      	movs	r3, #12
 800fad8:	6003      	str	r3, [r0, #0]
 800fada:	e7d6      	b.n	800fa8a <_free_r+0x26>
 800fadc:	6825      	ldr	r5, [r4, #0]
 800fade:	1961      	adds	r1, r4, r5
 800fae0:	428b      	cmp	r3, r1
 800fae2:	bf04      	itt	eq
 800fae4:	6819      	ldreq	r1, [r3, #0]
 800fae6:	685b      	ldreq	r3, [r3, #4]
 800fae8:	6063      	str	r3, [r4, #4]
 800faea:	bf04      	itt	eq
 800faec:	1949      	addeq	r1, r1, r5
 800faee:	6021      	streq	r1, [r4, #0]
 800faf0:	6054      	str	r4, [r2, #4]
 800faf2:	e7ca      	b.n	800fa8a <_free_r+0x26>
 800faf4:	b003      	add	sp, #12
 800faf6:	bd30      	pop	{r4, r5, pc}
 800faf8:	2000207c 	.word	0x2000207c

0800fafc <sbrk_aligned>:
 800fafc:	b570      	push	{r4, r5, r6, lr}
 800fafe:	4e0e      	ldr	r6, [pc, #56]	; (800fb38 <sbrk_aligned+0x3c>)
 800fb00:	460c      	mov	r4, r1
 800fb02:	6831      	ldr	r1, [r6, #0]
 800fb04:	4605      	mov	r5, r0
 800fb06:	b911      	cbnz	r1, 800fb0e <sbrk_aligned+0x12>
 800fb08:	f000 f9f2 	bl	800fef0 <_sbrk_r>
 800fb0c:	6030      	str	r0, [r6, #0]
 800fb0e:	4621      	mov	r1, r4
 800fb10:	4628      	mov	r0, r5
 800fb12:	f000 f9ed 	bl	800fef0 <_sbrk_r>
 800fb16:	1c43      	adds	r3, r0, #1
 800fb18:	d00a      	beq.n	800fb30 <sbrk_aligned+0x34>
 800fb1a:	1cc4      	adds	r4, r0, #3
 800fb1c:	f024 0403 	bic.w	r4, r4, #3
 800fb20:	42a0      	cmp	r0, r4
 800fb22:	d007      	beq.n	800fb34 <sbrk_aligned+0x38>
 800fb24:	1a21      	subs	r1, r4, r0
 800fb26:	4628      	mov	r0, r5
 800fb28:	f000 f9e2 	bl	800fef0 <_sbrk_r>
 800fb2c:	3001      	adds	r0, #1
 800fb2e:	d101      	bne.n	800fb34 <sbrk_aligned+0x38>
 800fb30:	f04f 34ff 	mov.w	r4, #4294967295
 800fb34:	4620      	mov	r0, r4
 800fb36:	bd70      	pop	{r4, r5, r6, pc}
 800fb38:	20002080 	.word	0x20002080

0800fb3c <_malloc_r>:
 800fb3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb40:	1ccd      	adds	r5, r1, #3
 800fb42:	f025 0503 	bic.w	r5, r5, #3
 800fb46:	3508      	adds	r5, #8
 800fb48:	2d0c      	cmp	r5, #12
 800fb4a:	bf38      	it	cc
 800fb4c:	250c      	movcc	r5, #12
 800fb4e:	2d00      	cmp	r5, #0
 800fb50:	4607      	mov	r7, r0
 800fb52:	db01      	blt.n	800fb58 <_malloc_r+0x1c>
 800fb54:	42a9      	cmp	r1, r5
 800fb56:	d905      	bls.n	800fb64 <_malloc_r+0x28>
 800fb58:	230c      	movs	r3, #12
 800fb5a:	603b      	str	r3, [r7, #0]
 800fb5c:	2600      	movs	r6, #0
 800fb5e:	4630      	mov	r0, r6
 800fb60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb64:	4e2e      	ldr	r6, [pc, #184]	; (800fc20 <_malloc_r+0xe4>)
 800fb66:	f000 fa3f 	bl	800ffe8 <__malloc_lock>
 800fb6a:	6833      	ldr	r3, [r6, #0]
 800fb6c:	461c      	mov	r4, r3
 800fb6e:	bb34      	cbnz	r4, 800fbbe <_malloc_r+0x82>
 800fb70:	4629      	mov	r1, r5
 800fb72:	4638      	mov	r0, r7
 800fb74:	f7ff ffc2 	bl	800fafc <sbrk_aligned>
 800fb78:	1c43      	adds	r3, r0, #1
 800fb7a:	4604      	mov	r4, r0
 800fb7c:	d14d      	bne.n	800fc1a <_malloc_r+0xde>
 800fb7e:	6834      	ldr	r4, [r6, #0]
 800fb80:	4626      	mov	r6, r4
 800fb82:	2e00      	cmp	r6, #0
 800fb84:	d140      	bne.n	800fc08 <_malloc_r+0xcc>
 800fb86:	6823      	ldr	r3, [r4, #0]
 800fb88:	4631      	mov	r1, r6
 800fb8a:	4638      	mov	r0, r7
 800fb8c:	eb04 0803 	add.w	r8, r4, r3
 800fb90:	f000 f9ae 	bl	800fef0 <_sbrk_r>
 800fb94:	4580      	cmp	r8, r0
 800fb96:	d13a      	bne.n	800fc0e <_malloc_r+0xd2>
 800fb98:	6821      	ldr	r1, [r4, #0]
 800fb9a:	3503      	adds	r5, #3
 800fb9c:	1a6d      	subs	r5, r5, r1
 800fb9e:	f025 0503 	bic.w	r5, r5, #3
 800fba2:	3508      	adds	r5, #8
 800fba4:	2d0c      	cmp	r5, #12
 800fba6:	bf38      	it	cc
 800fba8:	250c      	movcc	r5, #12
 800fbaa:	4629      	mov	r1, r5
 800fbac:	4638      	mov	r0, r7
 800fbae:	f7ff ffa5 	bl	800fafc <sbrk_aligned>
 800fbb2:	3001      	adds	r0, #1
 800fbb4:	d02b      	beq.n	800fc0e <_malloc_r+0xd2>
 800fbb6:	6823      	ldr	r3, [r4, #0]
 800fbb8:	442b      	add	r3, r5
 800fbba:	6023      	str	r3, [r4, #0]
 800fbbc:	e00e      	b.n	800fbdc <_malloc_r+0xa0>
 800fbbe:	6822      	ldr	r2, [r4, #0]
 800fbc0:	1b52      	subs	r2, r2, r5
 800fbc2:	d41e      	bmi.n	800fc02 <_malloc_r+0xc6>
 800fbc4:	2a0b      	cmp	r2, #11
 800fbc6:	d916      	bls.n	800fbf6 <_malloc_r+0xba>
 800fbc8:	1961      	adds	r1, r4, r5
 800fbca:	42a3      	cmp	r3, r4
 800fbcc:	6025      	str	r5, [r4, #0]
 800fbce:	bf18      	it	ne
 800fbd0:	6059      	strne	r1, [r3, #4]
 800fbd2:	6863      	ldr	r3, [r4, #4]
 800fbd4:	bf08      	it	eq
 800fbd6:	6031      	streq	r1, [r6, #0]
 800fbd8:	5162      	str	r2, [r4, r5]
 800fbda:	604b      	str	r3, [r1, #4]
 800fbdc:	4638      	mov	r0, r7
 800fbde:	f104 060b 	add.w	r6, r4, #11
 800fbe2:	f000 fa07 	bl	800fff4 <__malloc_unlock>
 800fbe6:	f026 0607 	bic.w	r6, r6, #7
 800fbea:	1d23      	adds	r3, r4, #4
 800fbec:	1af2      	subs	r2, r6, r3
 800fbee:	d0b6      	beq.n	800fb5e <_malloc_r+0x22>
 800fbf0:	1b9b      	subs	r3, r3, r6
 800fbf2:	50a3      	str	r3, [r4, r2]
 800fbf4:	e7b3      	b.n	800fb5e <_malloc_r+0x22>
 800fbf6:	6862      	ldr	r2, [r4, #4]
 800fbf8:	42a3      	cmp	r3, r4
 800fbfa:	bf0c      	ite	eq
 800fbfc:	6032      	streq	r2, [r6, #0]
 800fbfe:	605a      	strne	r2, [r3, #4]
 800fc00:	e7ec      	b.n	800fbdc <_malloc_r+0xa0>
 800fc02:	4623      	mov	r3, r4
 800fc04:	6864      	ldr	r4, [r4, #4]
 800fc06:	e7b2      	b.n	800fb6e <_malloc_r+0x32>
 800fc08:	4634      	mov	r4, r6
 800fc0a:	6876      	ldr	r6, [r6, #4]
 800fc0c:	e7b9      	b.n	800fb82 <_malloc_r+0x46>
 800fc0e:	230c      	movs	r3, #12
 800fc10:	603b      	str	r3, [r7, #0]
 800fc12:	4638      	mov	r0, r7
 800fc14:	f000 f9ee 	bl	800fff4 <__malloc_unlock>
 800fc18:	e7a1      	b.n	800fb5e <_malloc_r+0x22>
 800fc1a:	6025      	str	r5, [r4, #0]
 800fc1c:	e7de      	b.n	800fbdc <_malloc_r+0xa0>
 800fc1e:	bf00      	nop
 800fc20:	2000207c 	.word	0x2000207c

0800fc24 <__ssputs_r>:
 800fc24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc28:	688e      	ldr	r6, [r1, #8]
 800fc2a:	429e      	cmp	r6, r3
 800fc2c:	4682      	mov	sl, r0
 800fc2e:	460c      	mov	r4, r1
 800fc30:	4690      	mov	r8, r2
 800fc32:	461f      	mov	r7, r3
 800fc34:	d838      	bhi.n	800fca8 <__ssputs_r+0x84>
 800fc36:	898a      	ldrh	r2, [r1, #12]
 800fc38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fc3c:	d032      	beq.n	800fca4 <__ssputs_r+0x80>
 800fc3e:	6825      	ldr	r5, [r4, #0]
 800fc40:	6909      	ldr	r1, [r1, #16]
 800fc42:	eba5 0901 	sub.w	r9, r5, r1
 800fc46:	6965      	ldr	r5, [r4, #20]
 800fc48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fc4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fc50:	3301      	adds	r3, #1
 800fc52:	444b      	add	r3, r9
 800fc54:	106d      	asrs	r5, r5, #1
 800fc56:	429d      	cmp	r5, r3
 800fc58:	bf38      	it	cc
 800fc5a:	461d      	movcc	r5, r3
 800fc5c:	0553      	lsls	r3, r2, #21
 800fc5e:	d531      	bpl.n	800fcc4 <__ssputs_r+0xa0>
 800fc60:	4629      	mov	r1, r5
 800fc62:	f7ff ff6b 	bl	800fb3c <_malloc_r>
 800fc66:	4606      	mov	r6, r0
 800fc68:	b950      	cbnz	r0, 800fc80 <__ssputs_r+0x5c>
 800fc6a:	230c      	movs	r3, #12
 800fc6c:	f8ca 3000 	str.w	r3, [sl]
 800fc70:	89a3      	ldrh	r3, [r4, #12]
 800fc72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc76:	81a3      	strh	r3, [r4, #12]
 800fc78:	f04f 30ff 	mov.w	r0, #4294967295
 800fc7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc80:	6921      	ldr	r1, [r4, #16]
 800fc82:	464a      	mov	r2, r9
 800fc84:	f7ff fa08 	bl	800f098 <memcpy>
 800fc88:	89a3      	ldrh	r3, [r4, #12]
 800fc8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fc8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc92:	81a3      	strh	r3, [r4, #12]
 800fc94:	6126      	str	r6, [r4, #16]
 800fc96:	6165      	str	r5, [r4, #20]
 800fc98:	444e      	add	r6, r9
 800fc9a:	eba5 0509 	sub.w	r5, r5, r9
 800fc9e:	6026      	str	r6, [r4, #0]
 800fca0:	60a5      	str	r5, [r4, #8]
 800fca2:	463e      	mov	r6, r7
 800fca4:	42be      	cmp	r6, r7
 800fca6:	d900      	bls.n	800fcaa <__ssputs_r+0x86>
 800fca8:	463e      	mov	r6, r7
 800fcaa:	6820      	ldr	r0, [r4, #0]
 800fcac:	4632      	mov	r2, r6
 800fcae:	4641      	mov	r1, r8
 800fcb0:	f000 f980 	bl	800ffb4 <memmove>
 800fcb4:	68a3      	ldr	r3, [r4, #8]
 800fcb6:	1b9b      	subs	r3, r3, r6
 800fcb8:	60a3      	str	r3, [r4, #8]
 800fcba:	6823      	ldr	r3, [r4, #0]
 800fcbc:	4433      	add	r3, r6
 800fcbe:	6023      	str	r3, [r4, #0]
 800fcc0:	2000      	movs	r0, #0
 800fcc2:	e7db      	b.n	800fc7c <__ssputs_r+0x58>
 800fcc4:	462a      	mov	r2, r5
 800fcc6:	f000 f99b 	bl	8010000 <_realloc_r>
 800fcca:	4606      	mov	r6, r0
 800fccc:	2800      	cmp	r0, #0
 800fcce:	d1e1      	bne.n	800fc94 <__ssputs_r+0x70>
 800fcd0:	6921      	ldr	r1, [r4, #16]
 800fcd2:	4650      	mov	r0, sl
 800fcd4:	f7ff fec6 	bl	800fa64 <_free_r>
 800fcd8:	e7c7      	b.n	800fc6a <__ssputs_r+0x46>
	...

0800fcdc <_svfiprintf_r>:
 800fcdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fce0:	4698      	mov	r8, r3
 800fce2:	898b      	ldrh	r3, [r1, #12]
 800fce4:	061b      	lsls	r3, r3, #24
 800fce6:	b09d      	sub	sp, #116	; 0x74
 800fce8:	4607      	mov	r7, r0
 800fcea:	460d      	mov	r5, r1
 800fcec:	4614      	mov	r4, r2
 800fcee:	d50e      	bpl.n	800fd0e <_svfiprintf_r+0x32>
 800fcf0:	690b      	ldr	r3, [r1, #16]
 800fcf2:	b963      	cbnz	r3, 800fd0e <_svfiprintf_r+0x32>
 800fcf4:	2140      	movs	r1, #64	; 0x40
 800fcf6:	f7ff ff21 	bl	800fb3c <_malloc_r>
 800fcfa:	6028      	str	r0, [r5, #0]
 800fcfc:	6128      	str	r0, [r5, #16]
 800fcfe:	b920      	cbnz	r0, 800fd0a <_svfiprintf_r+0x2e>
 800fd00:	230c      	movs	r3, #12
 800fd02:	603b      	str	r3, [r7, #0]
 800fd04:	f04f 30ff 	mov.w	r0, #4294967295
 800fd08:	e0d1      	b.n	800feae <_svfiprintf_r+0x1d2>
 800fd0a:	2340      	movs	r3, #64	; 0x40
 800fd0c:	616b      	str	r3, [r5, #20]
 800fd0e:	2300      	movs	r3, #0
 800fd10:	9309      	str	r3, [sp, #36]	; 0x24
 800fd12:	2320      	movs	r3, #32
 800fd14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fd18:	f8cd 800c 	str.w	r8, [sp, #12]
 800fd1c:	2330      	movs	r3, #48	; 0x30
 800fd1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fec8 <_svfiprintf_r+0x1ec>
 800fd22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fd26:	f04f 0901 	mov.w	r9, #1
 800fd2a:	4623      	mov	r3, r4
 800fd2c:	469a      	mov	sl, r3
 800fd2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd32:	b10a      	cbz	r2, 800fd38 <_svfiprintf_r+0x5c>
 800fd34:	2a25      	cmp	r2, #37	; 0x25
 800fd36:	d1f9      	bne.n	800fd2c <_svfiprintf_r+0x50>
 800fd38:	ebba 0b04 	subs.w	fp, sl, r4
 800fd3c:	d00b      	beq.n	800fd56 <_svfiprintf_r+0x7a>
 800fd3e:	465b      	mov	r3, fp
 800fd40:	4622      	mov	r2, r4
 800fd42:	4629      	mov	r1, r5
 800fd44:	4638      	mov	r0, r7
 800fd46:	f7ff ff6d 	bl	800fc24 <__ssputs_r>
 800fd4a:	3001      	adds	r0, #1
 800fd4c:	f000 80aa 	beq.w	800fea4 <_svfiprintf_r+0x1c8>
 800fd50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd52:	445a      	add	r2, fp
 800fd54:	9209      	str	r2, [sp, #36]	; 0x24
 800fd56:	f89a 3000 	ldrb.w	r3, [sl]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	f000 80a2 	beq.w	800fea4 <_svfiprintf_r+0x1c8>
 800fd60:	2300      	movs	r3, #0
 800fd62:	f04f 32ff 	mov.w	r2, #4294967295
 800fd66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd6a:	f10a 0a01 	add.w	sl, sl, #1
 800fd6e:	9304      	str	r3, [sp, #16]
 800fd70:	9307      	str	r3, [sp, #28]
 800fd72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fd76:	931a      	str	r3, [sp, #104]	; 0x68
 800fd78:	4654      	mov	r4, sl
 800fd7a:	2205      	movs	r2, #5
 800fd7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd80:	4851      	ldr	r0, [pc, #324]	; (800fec8 <_svfiprintf_r+0x1ec>)
 800fd82:	f7f0 fa3d 	bl	8000200 <memchr>
 800fd86:	9a04      	ldr	r2, [sp, #16]
 800fd88:	b9d8      	cbnz	r0, 800fdc2 <_svfiprintf_r+0xe6>
 800fd8a:	06d0      	lsls	r0, r2, #27
 800fd8c:	bf44      	itt	mi
 800fd8e:	2320      	movmi	r3, #32
 800fd90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd94:	0711      	lsls	r1, r2, #28
 800fd96:	bf44      	itt	mi
 800fd98:	232b      	movmi	r3, #43	; 0x2b
 800fd9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd9e:	f89a 3000 	ldrb.w	r3, [sl]
 800fda2:	2b2a      	cmp	r3, #42	; 0x2a
 800fda4:	d015      	beq.n	800fdd2 <_svfiprintf_r+0xf6>
 800fda6:	9a07      	ldr	r2, [sp, #28]
 800fda8:	4654      	mov	r4, sl
 800fdaa:	2000      	movs	r0, #0
 800fdac:	f04f 0c0a 	mov.w	ip, #10
 800fdb0:	4621      	mov	r1, r4
 800fdb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fdb6:	3b30      	subs	r3, #48	; 0x30
 800fdb8:	2b09      	cmp	r3, #9
 800fdba:	d94e      	bls.n	800fe5a <_svfiprintf_r+0x17e>
 800fdbc:	b1b0      	cbz	r0, 800fdec <_svfiprintf_r+0x110>
 800fdbe:	9207      	str	r2, [sp, #28]
 800fdc0:	e014      	b.n	800fdec <_svfiprintf_r+0x110>
 800fdc2:	eba0 0308 	sub.w	r3, r0, r8
 800fdc6:	fa09 f303 	lsl.w	r3, r9, r3
 800fdca:	4313      	orrs	r3, r2
 800fdcc:	9304      	str	r3, [sp, #16]
 800fdce:	46a2      	mov	sl, r4
 800fdd0:	e7d2      	b.n	800fd78 <_svfiprintf_r+0x9c>
 800fdd2:	9b03      	ldr	r3, [sp, #12]
 800fdd4:	1d19      	adds	r1, r3, #4
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	9103      	str	r1, [sp, #12]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	bfbb      	ittet	lt
 800fdde:	425b      	neglt	r3, r3
 800fde0:	f042 0202 	orrlt.w	r2, r2, #2
 800fde4:	9307      	strge	r3, [sp, #28]
 800fde6:	9307      	strlt	r3, [sp, #28]
 800fde8:	bfb8      	it	lt
 800fdea:	9204      	strlt	r2, [sp, #16]
 800fdec:	7823      	ldrb	r3, [r4, #0]
 800fdee:	2b2e      	cmp	r3, #46	; 0x2e
 800fdf0:	d10c      	bne.n	800fe0c <_svfiprintf_r+0x130>
 800fdf2:	7863      	ldrb	r3, [r4, #1]
 800fdf4:	2b2a      	cmp	r3, #42	; 0x2a
 800fdf6:	d135      	bne.n	800fe64 <_svfiprintf_r+0x188>
 800fdf8:	9b03      	ldr	r3, [sp, #12]
 800fdfa:	1d1a      	adds	r2, r3, #4
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	9203      	str	r2, [sp, #12]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	bfb8      	it	lt
 800fe04:	f04f 33ff 	movlt.w	r3, #4294967295
 800fe08:	3402      	adds	r4, #2
 800fe0a:	9305      	str	r3, [sp, #20]
 800fe0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fed8 <_svfiprintf_r+0x1fc>
 800fe10:	7821      	ldrb	r1, [r4, #0]
 800fe12:	2203      	movs	r2, #3
 800fe14:	4650      	mov	r0, sl
 800fe16:	f7f0 f9f3 	bl	8000200 <memchr>
 800fe1a:	b140      	cbz	r0, 800fe2e <_svfiprintf_r+0x152>
 800fe1c:	2340      	movs	r3, #64	; 0x40
 800fe1e:	eba0 000a 	sub.w	r0, r0, sl
 800fe22:	fa03 f000 	lsl.w	r0, r3, r0
 800fe26:	9b04      	ldr	r3, [sp, #16]
 800fe28:	4303      	orrs	r3, r0
 800fe2a:	3401      	adds	r4, #1
 800fe2c:	9304      	str	r3, [sp, #16]
 800fe2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe32:	4826      	ldr	r0, [pc, #152]	; (800fecc <_svfiprintf_r+0x1f0>)
 800fe34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fe38:	2206      	movs	r2, #6
 800fe3a:	f7f0 f9e1 	bl	8000200 <memchr>
 800fe3e:	2800      	cmp	r0, #0
 800fe40:	d038      	beq.n	800feb4 <_svfiprintf_r+0x1d8>
 800fe42:	4b23      	ldr	r3, [pc, #140]	; (800fed0 <_svfiprintf_r+0x1f4>)
 800fe44:	bb1b      	cbnz	r3, 800fe8e <_svfiprintf_r+0x1b2>
 800fe46:	9b03      	ldr	r3, [sp, #12]
 800fe48:	3307      	adds	r3, #7
 800fe4a:	f023 0307 	bic.w	r3, r3, #7
 800fe4e:	3308      	adds	r3, #8
 800fe50:	9303      	str	r3, [sp, #12]
 800fe52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe54:	4433      	add	r3, r6
 800fe56:	9309      	str	r3, [sp, #36]	; 0x24
 800fe58:	e767      	b.n	800fd2a <_svfiprintf_r+0x4e>
 800fe5a:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe5e:	460c      	mov	r4, r1
 800fe60:	2001      	movs	r0, #1
 800fe62:	e7a5      	b.n	800fdb0 <_svfiprintf_r+0xd4>
 800fe64:	2300      	movs	r3, #0
 800fe66:	3401      	adds	r4, #1
 800fe68:	9305      	str	r3, [sp, #20]
 800fe6a:	4619      	mov	r1, r3
 800fe6c:	f04f 0c0a 	mov.w	ip, #10
 800fe70:	4620      	mov	r0, r4
 800fe72:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe76:	3a30      	subs	r2, #48	; 0x30
 800fe78:	2a09      	cmp	r2, #9
 800fe7a:	d903      	bls.n	800fe84 <_svfiprintf_r+0x1a8>
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d0c5      	beq.n	800fe0c <_svfiprintf_r+0x130>
 800fe80:	9105      	str	r1, [sp, #20]
 800fe82:	e7c3      	b.n	800fe0c <_svfiprintf_r+0x130>
 800fe84:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe88:	4604      	mov	r4, r0
 800fe8a:	2301      	movs	r3, #1
 800fe8c:	e7f0      	b.n	800fe70 <_svfiprintf_r+0x194>
 800fe8e:	ab03      	add	r3, sp, #12
 800fe90:	9300      	str	r3, [sp, #0]
 800fe92:	462a      	mov	r2, r5
 800fe94:	4b0f      	ldr	r3, [pc, #60]	; (800fed4 <_svfiprintf_r+0x1f8>)
 800fe96:	a904      	add	r1, sp, #16
 800fe98:	4638      	mov	r0, r7
 800fe9a:	f7fc fa47 	bl	800c32c <_printf_float>
 800fe9e:	1c42      	adds	r2, r0, #1
 800fea0:	4606      	mov	r6, r0
 800fea2:	d1d6      	bne.n	800fe52 <_svfiprintf_r+0x176>
 800fea4:	89ab      	ldrh	r3, [r5, #12]
 800fea6:	065b      	lsls	r3, r3, #25
 800fea8:	f53f af2c 	bmi.w	800fd04 <_svfiprintf_r+0x28>
 800feac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800feae:	b01d      	add	sp, #116	; 0x74
 800feb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feb4:	ab03      	add	r3, sp, #12
 800feb6:	9300      	str	r3, [sp, #0]
 800feb8:	462a      	mov	r2, r5
 800feba:	4b06      	ldr	r3, [pc, #24]	; (800fed4 <_svfiprintf_r+0x1f8>)
 800febc:	a904      	add	r1, sp, #16
 800febe:	4638      	mov	r0, r7
 800fec0:	f7fc fcd8 	bl	800c874 <_printf_i>
 800fec4:	e7eb      	b.n	800fe9e <_svfiprintf_r+0x1c2>
 800fec6:	bf00      	nop
 800fec8:	08012a54 	.word	0x08012a54
 800fecc:	08012a5e 	.word	0x08012a5e
 800fed0:	0800c32d 	.word	0x0800c32d
 800fed4:	0800fc25 	.word	0x0800fc25
 800fed8:	08012a5a 	.word	0x08012a5a
 800fedc:	00000000 	.word	0x00000000

0800fee0 <nan>:
 800fee0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fee8 <nan+0x8>
 800fee4:	4770      	bx	lr
 800fee6:	bf00      	nop
 800fee8:	00000000 	.word	0x00000000
 800feec:	7ff80000 	.word	0x7ff80000

0800fef0 <_sbrk_r>:
 800fef0:	b538      	push	{r3, r4, r5, lr}
 800fef2:	4d06      	ldr	r5, [pc, #24]	; (800ff0c <_sbrk_r+0x1c>)
 800fef4:	2300      	movs	r3, #0
 800fef6:	4604      	mov	r4, r0
 800fef8:	4608      	mov	r0, r1
 800fefa:	602b      	str	r3, [r5, #0]
 800fefc:	f7f1 fbb6 	bl	800166c <_sbrk>
 800ff00:	1c43      	adds	r3, r0, #1
 800ff02:	d102      	bne.n	800ff0a <_sbrk_r+0x1a>
 800ff04:	682b      	ldr	r3, [r5, #0]
 800ff06:	b103      	cbz	r3, 800ff0a <_sbrk_r+0x1a>
 800ff08:	6023      	str	r3, [r4, #0]
 800ff0a:	bd38      	pop	{r3, r4, r5, pc}
 800ff0c:	20002084 	.word	0x20002084

0800ff10 <strncmp>:
 800ff10:	b510      	push	{r4, lr}
 800ff12:	b17a      	cbz	r2, 800ff34 <strncmp+0x24>
 800ff14:	4603      	mov	r3, r0
 800ff16:	3901      	subs	r1, #1
 800ff18:	1884      	adds	r4, r0, r2
 800ff1a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ff1e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ff22:	4290      	cmp	r0, r2
 800ff24:	d101      	bne.n	800ff2a <strncmp+0x1a>
 800ff26:	42a3      	cmp	r3, r4
 800ff28:	d101      	bne.n	800ff2e <strncmp+0x1e>
 800ff2a:	1a80      	subs	r0, r0, r2
 800ff2c:	bd10      	pop	{r4, pc}
 800ff2e:	2800      	cmp	r0, #0
 800ff30:	d1f3      	bne.n	800ff1a <strncmp+0xa>
 800ff32:	e7fa      	b.n	800ff2a <strncmp+0x1a>
 800ff34:	4610      	mov	r0, r2
 800ff36:	e7f9      	b.n	800ff2c <strncmp+0x1c>

0800ff38 <__ascii_wctomb>:
 800ff38:	b149      	cbz	r1, 800ff4e <__ascii_wctomb+0x16>
 800ff3a:	2aff      	cmp	r2, #255	; 0xff
 800ff3c:	bf85      	ittet	hi
 800ff3e:	238a      	movhi	r3, #138	; 0x8a
 800ff40:	6003      	strhi	r3, [r0, #0]
 800ff42:	700a      	strbls	r2, [r1, #0]
 800ff44:	f04f 30ff 	movhi.w	r0, #4294967295
 800ff48:	bf98      	it	ls
 800ff4a:	2001      	movls	r0, #1
 800ff4c:	4770      	bx	lr
 800ff4e:	4608      	mov	r0, r1
 800ff50:	4770      	bx	lr
	...

0800ff54 <__assert_func>:
 800ff54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ff56:	4614      	mov	r4, r2
 800ff58:	461a      	mov	r2, r3
 800ff5a:	4b09      	ldr	r3, [pc, #36]	; (800ff80 <__assert_func+0x2c>)
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	4605      	mov	r5, r0
 800ff60:	68d8      	ldr	r0, [r3, #12]
 800ff62:	b14c      	cbz	r4, 800ff78 <__assert_func+0x24>
 800ff64:	4b07      	ldr	r3, [pc, #28]	; (800ff84 <__assert_func+0x30>)
 800ff66:	9100      	str	r1, [sp, #0]
 800ff68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ff6c:	4906      	ldr	r1, [pc, #24]	; (800ff88 <__assert_func+0x34>)
 800ff6e:	462b      	mov	r3, r5
 800ff70:	f000 f80e 	bl	800ff90 <fiprintf>
 800ff74:	f000 fa8c 	bl	8010490 <abort>
 800ff78:	4b04      	ldr	r3, [pc, #16]	; (800ff8c <__assert_func+0x38>)
 800ff7a:	461c      	mov	r4, r3
 800ff7c:	e7f3      	b.n	800ff66 <__assert_func+0x12>
 800ff7e:	bf00      	nop
 800ff80:	20000178 	.word	0x20000178
 800ff84:	08012a65 	.word	0x08012a65
 800ff88:	08012a72 	.word	0x08012a72
 800ff8c:	08012aa0 	.word	0x08012aa0

0800ff90 <fiprintf>:
 800ff90:	b40e      	push	{r1, r2, r3}
 800ff92:	b503      	push	{r0, r1, lr}
 800ff94:	4601      	mov	r1, r0
 800ff96:	ab03      	add	r3, sp, #12
 800ff98:	4805      	ldr	r0, [pc, #20]	; (800ffb0 <fiprintf+0x20>)
 800ff9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff9e:	6800      	ldr	r0, [r0, #0]
 800ffa0:	9301      	str	r3, [sp, #4]
 800ffa2:	f000 f885 	bl	80100b0 <_vfiprintf_r>
 800ffa6:	b002      	add	sp, #8
 800ffa8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ffac:	b003      	add	sp, #12
 800ffae:	4770      	bx	lr
 800ffb0:	20000178 	.word	0x20000178

0800ffb4 <memmove>:
 800ffb4:	4288      	cmp	r0, r1
 800ffb6:	b510      	push	{r4, lr}
 800ffb8:	eb01 0402 	add.w	r4, r1, r2
 800ffbc:	d902      	bls.n	800ffc4 <memmove+0x10>
 800ffbe:	4284      	cmp	r4, r0
 800ffc0:	4623      	mov	r3, r4
 800ffc2:	d807      	bhi.n	800ffd4 <memmove+0x20>
 800ffc4:	1e43      	subs	r3, r0, #1
 800ffc6:	42a1      	cmp	r1, r4
 800ffc8:	d008      	beq.n	800ffdc <memmove+0x28>
 800ffca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ffce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ffd2:	e7f8      	b.n	800ffc6 <memmove+0x12>
 800ffd4:	4402      	add	r2, r0
 800ffd6:	4601      	mov	r1, r0
 800ffd8:	428a      	cmp	r2, r1
 800ffda:	d100      	bne.n	800ffde <memmove+0x2a>
 800ffdc:	bd10      	pop	{r4, pc}
 800ffde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ffe2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ffe6:	e7f7      	b.n	800ffd8 <memmove+0x24>

0800ffe8 <__malloc_lock>:
 800ffe8:	4801      	ldr	r0, [pc, #4]	; (800fff0 <__malloc_lock+0x8>)
 800ffea:	f000 bc11 	b.w	8010810 <__retarget_lock_acquire_recursive>
 800ffee:	bf00      	nop
 800fff0:	20002088 	.word	0x20002088

0800fff4 <__malloc_unlock>:
 800fff4:	4801      	ldr	r0, [pc, #4]	; (800fffc <__malloc_unlock+0x8>)
 800fff6:	f000 bc0c 	b.w	8010812 <__retarget_lock_release_recursive>
 800fffa:	bf00      	nop
 800fffc:	20002088 	.word	0x20002088

08010000 <_realloc_r>:
 8010000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010004:	4680      	mov	r8, r0
 8010006:	4614      	mov	r4, r2
 8010008:	460e      	mov	r6, r1
 801000a:	b921      	cbnz	r1, 8010016 <_realloc_r+0x16>
 801000c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010010:	4611      	mov	r1, r2
 8010012:	f7ff bd93 	b.w	800fb3c <_malloc_r>
 8010016:	b92a      	cbnz	r2, 8010024 <_realloc_r+0x24>
 8010018:	f7ff fd24 	bl	800fa64 <_free_r>
 801001c:	4625      	mov	r5, r4
 801001e:	4628      	mov	r0, r5
 8010020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010024:	f000 fc5c 	bl	80108e0 <_malloc_usable_size_r>
 8010028:	4284      	cmp	r4, r0
 801002a:	4607      	mov	r7, r0
 801002c:	d802      	bhi.n	8010034 <_realloc_r+0x34>
 801002e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010032:	d812      	bhi.n	801005a <_realloc_r+0x5a>
 8010034:	4621      	mov	r1, r4
 8010036:	4640      	mov	r0, r8
 8010038:	f7ff fd80 	bl	800fb3c <_malloc_r>
 801003c:	4605      	mov	r5, r0
 801003e:	2800      	cmp	r0, #0
 8010040:	d0ed      	beq.n	801001e <_realloc_r+0x1e>
 8010042:	42bc      	cmp	r4, r7
 8010044:	4622      	mov	r2, r4
 8010046:	4631      	mov	r1, r6
 8010048:	bf28      	it	cs
 801004a:	463a      	movcs	r2, r7
 801004c:	f7ff f824 	bl	800f098 <memcpy>
 8010050:	4631      	mov	r1, r6
 8010052:	4640      	mov	r0, r8
 8010054:	f7ff fd06 	bl	800fa64 <_free_r>
 8010058:	e7e1      	b.n	801001e <_realloc_r+0x1e>
 801005a:	4635      	mov	r5, r6
 801005c:	e7df      	b.n	801001e <_realloc_r+0x1e>

0801005e <__sfputc_r>:
 801005e:	6893      	ldr	r3, [r2, #8]
 8010060:	3b01      	subs	r3, #1
 8010062:	2b00      	cmp	r3, #0
 8010064:	b410      	push	{r4}
 8010066:	6093      	str	r3, [r2, #8]
 8010068:	da08      	bge.n	801007c <__sfputc_r+0x1e>
 801006a:	6994      	ldr	r4, [r2, #24]
 801006c:	42a3      	cmp	r3, r4
 801006e:	db01      	blt.n	8010074 <__sfputc_r+0x16>
 8010070:	290a      	cmp	r1, #10
 8010072:	d103      	bne.n	801007c <__sfputc_r+0x1e>
 8010074:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010078:	f000 b94a 	b.w	8010310 <__swbuf_r>
 801007c:	6813      	ldr	r3, [r2, #0]
 801007e:	1c58      	adds	r0, r3, #1
 8010080:	6010      	str	r0, [r2, #0]
 8010082:	7019      	strb	r1, [r3, #0]
 8010084:	4608      	mov	r0, r1
 8010086:	f85d 4b04 	ldr.w	r4, [sp], #4
 801008a:	4770      	bx	lr

0801008c <__sfputs_r>:
 801008c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801008e:	4606      	mov	r6, r0
 8010090:	460f      	mov	r7, r1
 8010092:	4614      	mov	r4, r2
 8010094:	18d5      	adds	r5, r2, r3
 8010096:	42ac      	cmp	r4, r5
 8010098:	d101      	bne.n	801009e <__sfputs_r+0x12>
 801009a:	2000      	movs	r0, #0
 801009c:	e007      	b.n	80100ae <__sfputs_r+0x22>
 801009e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100a2:	463a      	mov	r2, r7
 80100a4:	4630      	mov	r0, r6
 80100a6:	f7ff ffda 	bl	801005e <__sfputc_r>
 80100aa:	1c43      	adds	r3, r0, #1
 80100ac:	d1f3      	bne.n	8010096 <__sfputs_r+0xa>
 80100ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080100b0 <_vfiprintf_r>:
 80100b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100b4:	460d      	mov	r5, r1
 80100b6:	b09d      	sub	sp, #116	; 0x74
 80100b8:	4614      	mov	r4, r2
 80100ba:	4698      	mov	r8, r3
 80100bc:	4606      	mov	r6, r0
 80100be:	b118      	cbz	r0, 80100c8 <_vfiprintf_r+0x18>
 80100c0:	6983      	ldr	r3, [r0, #24]
 80100c2:	b90b      	cbnz	r3, 80100c8 <_vfiprintf_r+0x18>
 80100c4:	f000 fb06 	bl	80106d4 <__sinit>
 80100c8:	4b89      	ldr	r3, [pc, #548]	; (80102f0 <_vfiprintf_r+0x240>)
 80100ca:	429d      	cmp	r5, r3
 80100cc:	d11b      	bne.n	8010106 <_vfiprintf_r+0x56>
 80100ce:	6875      	ldr	r5, [r6, #4]
 80100d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80100d2:	07d9      	lsls	r1, r3, #31
 80100d4:	d405      	bmi.n	80100e2 <_vfiprintf_r+0x32>
 80100d6:	89ab      	ldrh	r3, [r5, #12]
 80100d8:	059a      	lsls	r2, r3, #22
 80100da:	d402      	bmi.n	80100e2 <_vfiprintf_r+0x32>
 80100dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80100de:	f000 fb97 	bl	8010810 <__retarget_lock_acquire_recursive>
 80100e2:	89ab      	ldrh	r3, [r5, #12]
 80100e4:	071b      	lsls	r3, r3, #28
 80100e6:	d501      	bpl.n	80100ec <_vfiprintf_r+0x3c>
 80100e8:	692b      	ldr	r3, [r5, #16]
 80100ea:	b9eb      	cbnz	r3, 8010128 <_vfiprintf_r+0x78>
 80100ec:	4629      	mov	r1, r5
 80100ee:	4630      	mov	r0, r6
 80100f0:	f000 f960 	bl	80103b4 <__swsetup_r>
 80100f4:	b1c0      	cbz	r0, 8010128 <_vfiprintf_r+0x78>
 80100f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80100f8:	07dc      	lsls	r4, r3, #31
 80100fa:	d50e      	bpl.n	801011a <_vfiprintf_r+0x6a>
 80100fc:	f04f 30ff 	mov.w	r0, #4294967295
 8010100:	b01d      	add	sp, #116	; 0x74
 8010102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010106:	4b7b      	ldr	r3, [pc, #492]	; (80102f4 <_vfiprintf_r+0x244>)
 8010108:	429d      	cmp	r5, r3
 801010a:	d101      	bne.n	8010110 <_vfiprintf_r+0x60>
 801010c:	68b5      	ldr	r5, [r6, #8]
 801010e:	e7df      	b.n	80100d0 <_vfiprintf_r+0x20>
 8010110:	4b79      	ldr	r3, [pc, #484]	; (80102f8 <_vfiprintf_r+0x248>)
 8010112:	429d      	cmp	r5, r3
 8010114:	bf08      	it	eq
 8010116:	68f5      	ldreq	r5, [r6, #12]
 8010118:	e7da      	b.n	80100d0 <_vfiprintf_r+0x20>
 801011a:	89ab      	ldrh	r3, [r5, #12]
 801011c:	0598      	lsls	r0, r3, #22
 801011e:	d4ed      	bmi.n	80100fc <_vfiprintf_r+0x4c>
 8010120:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010122:	f000 fb76 	bl	8010812 <__retarget_lock_release_recursive>
 8010126:	e7e9      	b.n	80100fc <_vfiprintf_r+0x4c>
 8010128:	2300      	movs	r3, #0
 801012a:	9309      	str	r3, [sp, #36]	; 0x24
 801012c:	2320      	movs	r3, #32
 801012e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010132:	f8cd 800c 	str.w	r8, [sp, #12]
 8010136:	2330      	movs	r3, #48	; 0x30
 8010138:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80102fc <_vfiprintf_r+0x24c>
 801013c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010140:	f04f 0901 	mov.w	r9, #1
 8010144:	4623      	mov	r3, r4
 8010146:	469a      	mov	sl, r3
 8010148:	f813 2b01 	ldrb.w	r2, [r3], #1
 801014c:	b10a      	cbz	r2, 8010152 <_vfiprintf_r+0xa2>
 801014e:	2a25      	cmp	r2, #37	; 0x25
 8010150:	d1f9      	bne.n	8010146 <_vfiprintf_r+0x96>
 8010152:	ebba 0b04 	subs.w	fp, sl, r4
 8010156:	d00b      	beq.n	8010170 <_vfiprintf_r+0xc0>
 8010158:	465b      	mov	r3, fp
 801015a:	4622      	mov	r2, r4
 801015c:	4629      	mov	r1, r5
 801015e:	4630      	mov	r0, r6
 8010160:	f7ff ff94 	bl	801008c <__sfputs_r>
 8010164:	3001      	adds	r0, #1
 8010166:	f000 80aa 	beq.w	80102be <_vfiprintf_r+0x20e>
 801016a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801016c:	445a      	add	r2, fp
 801016e:	9209      	str	r2, [sp, #36]	; 0x24
 8010170:	f89a 3000 	ldrb.w	r3, [sl]
 8010174:	2b00      	cmp	r3, #0
 8010176:	f000 80a2 	beq.w	80102be <_vfiprintf_r+0x20e>
 801017a:	2300      	movs	r3, #0
 801017c:	f04f 32ff 	mov.w	r2, #4294967295
 8010180:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010184:	f10a 0a01 	add.w	sl, sl, #1
 8010188:	9304      	str	r3, [sp, #16]
 801018a:	9307      	str	r3, [sp, #28]
 801018c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010190:	931a      	str	r3, [sp, #104]	; 0x68
 8010192:	4654      	mov	r4, sl
 8010194:	2205      	movs	r2, #5
 8010196:	f814 1b01 	ldrb.w	r1, [r4], #1
 801019a:	4858      	ldr	r0, [pc, #352]	; (80102fc <_vfiprintf_r+0x24c>)
 801019c:	f7f0 f830 	bl	8000200 <memchr>
 80101a0:	9a04      	ldr	r2, [sp, #16]
 80101a2:	b9d8      	cbnz	r0, 80101dc <_vfiprintf_r+0x12c>
 80101a4:	06d1      	lsls	r1, r2, #27
 80101a6:	bf44      	itt	mi
 80101a8:	2320      	movmi	r3, #32
 80101aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80101ae:	0713      	lsls	r3, r2, #28
 80101b0:	bf44      	itt	mi
 80101b2:	232b      	movmi	r3, #43	; 0x2b
 80101b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80101b8:	f89a 3000 	ldrb.w	r3, [sl]
 80101bc:	2b2a      	cmp	r3, #42	; 0x2a
 80101be:	d015      	beq.n	80101ec <_vfiprintf_r+0x13c>
 80101c0:	9a07      	ldr	r2, [sp, #28]
 80101c2:	4654      	mov	r4, sl
 80101c4:	2000      	movs	r0, #0
 80101c6:	f04f 0c0a 	mov.w	ip, #10
 80101ca:	4621      	mov	r1, r4
 80101cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101d0:	3b30      	subs	r3, #48	; 0x30
 80101d2:	2b09      	cmp	r3, #9
 80101d4:	d94e      	bls.n	8010274 <_vfiprintf_r+0x1c4>
 80101d6:	b1b0      	cbz	r0, 8010206 <_vfiprintf_r+0x156>
 80101d8:	9207      	str	r2, [sp, #28]
 80101da:	e014      	b.n	8010206 <_vfiprintf_r+0x156>
 80101dc:	eba0 0308 	sub.w	r3, r0, r8
 80101e0:	fa09 f303 	lsl.w	r3, r9, r3
 80101e4:	4313      	orrs	r3, r2
 80101e6:	9304      	str	r3, [sp, #16]
 80101e8:	46a2      	mov	sl, r4
 80101ea:	e7d2      	b.n	8010192 <_vfiprintf_r+0xe2>
 80101ec:	9b03      	ldr	r3, [sp, #12]
 80101ee:	1d19      	adds	r1, r3, #4
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	9103      	str	r1, [sp, #12]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	bfbb      	ittet	lt
 80101f8:	425b      	neglt	r3, r3
 80101fa:	f042 0202 	orrlt.w	r2, r2, #2
 80101fe:	9307      	strge	r3, [sp, #28]
 8010200:	9307      	strlt	r3, [sp, #28]
 8010202:	bfb8      	it	lt
 8010204:	9204      	strlt	r2, [sp, #16]
 8010206:	7823      	ldrb	r3, [r4, #0]
 8010208:	2b2e      	cmp	r3, #46	; 0x2e
 801020a:	d10c      	bne.n	8010226 <_vfiprintf_r+0x176>
 801020c:	7863      	ldrb	r3, [r4, #1]
 801020e:	2b2a      	cmp	r3, #42	; 0x2a
 8010210:	d135      	bne.n	801027e <_vfiprintf_r+0x1ce>
 8010212:	9b03      	ldr	r3, [sp, #12]
 8010214:	1d1a      	adds	r2, r3, #4
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	9203      	str	r2, [sp, #12]
 801021a:	2b00      	cmp	r3, #0
 801021c:	bfb8      	it	lt
 801021e:	f04f 33ff 	movlt.w	r3, #4294967295
 8010222:	3402      	adds	r4, #2
 8010224:	9305      	str	r3, [sp, #20]
 8010226:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801030c <_vfiprintf_r+0x25c>
 801022a:	7821      	ldrb	r1, [r4, #0]
 801022c:	2203      	movs	r2, #3
 801022e:	4650      	mov	r0, sl
 8010230:	f7ef ffe6 	bl	8000200 <memchr>
 8010234:	b140      	cbz	r0, 8010248 <_vfiprintf_r+0x198>
 8010236:	2340      	movs	r3, #64	; 0x40
 8010238:	eba0 000a 	sub.w	r0, r0, sl
 801023c:	fa03 f000 	lsl.w	r0, r3, r0
 8010240:	9b04      	ldr	r3, [sp, #16]
 8010242:	4303      	orrs	r3, r0
 8010244:	3401      	adds	r4, #1
 8010246:	9304      	str	r3, [sp, #16]
 8010248:	f814 1b01 	ldrb.w	r1, [r4], #1
 801024c:	482c      	ldr	r0, [pc, #176]	; (8010300 <_vfiprintf_r+0x250>)
 801024e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010252:	2206      	movs	r2, #6
 8010254:	f7ef ffd4 	bl	8000200 <memchr>
 8010258:	2800      	cmp	r0, #0
 801025a:	d03f      	beq.n	80102dc <_vfiprintf_r+0x22c>
 801025c:	4b29      	ldr	r3, [pc, #164]	; (8010304 <_vfiprintf_r+0x254>)
 801025e:	bb1b      	cbnz	r3, 80102a8 <_vfiprintf_r+0x1f8>
 8010260:	9b03      	ldr	r3, [sp, #12]
 8010262:	3307      	adds	r3, #7
 8010264:	f023 0307 	bic.w	r3, r3, #7
 8010268:	3308      	adds	r3, #8
 801026a:	9303      	str	r3, [sp, #12]
 801026c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801026e:	443b      	add	r3, r7
 8010270:	9309      	str	r3, [sp, #36]	; 0x24
 8010272:	e767      	b.n	8010144 <_vfiprintf_r+0x94>
 8010274:	fb0c 3202 	mla	r2, ip, r2, r3
 8010278:	460c      	mov	r4, r1
 801027a:	2001      	movs	r0, #1
 801027c:	e7a5      	b.n	80101ca <_vfiprintf_r+0x11a>
 801027e:	2300      	movs	r3, #0
 8010280:	3401      	adds	r4, #1
 8010282:	9305      	str	r3, [sp, #20]
 8010284:	4619      	mov	r1, r3
 8010286:	f04f 0c0a 	mov.w	ip, #10
 801028a:	4620      	mov	r0, r4
 801028c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010290:	3a30      	subs	r2, #48	; 0x30
 8010292:	2a09      	cmp	r2, #9
 8010294:	d903      	bls.n	801029e <_vfiprintf_r+0x1ee>
 8010296:	2b00      	cmp	r3, #0
 8010298:	d0c5      	beq.n	8010226 <_vfiprintf_r+0x176>
 801029a:	9105      	str	r1, [sp, #20]
 801029c:	e7c3      	b.n	8010226 <_vfiprintf_r+0x176>
 801029e:	fb0c 2101 	mla	r1, ip, r1, r2
 80102a2:	4604      	mov	r4, r0
 80102a4:	2301      	movs	r3, #1
 80102a6:	e7f0      	b.n	801028a <_vfiprintf_r+0x1da>
 80102a8:	ab03      	add	r3, sp, #12
 80102aa:	9300      	str	r3, [sp, #0]
 80102ac:	462a      	mov	r2, r5
 80102ae:	4b16      	ldr	r3, [pc, #88]	; (8010308 <_vfiprintf_r+0x258>)
 80102b0:	a904      	add	r1, sp, #16
 80102b2:	4630      	mov	r0, r6
 80102b4:	f7fc f83a 	bl	800c32c <_printf_float>
 80102b8:	4607      	mov	r7, r0
 80102ba:	1c78      	adds	r0, r7, #1
 80102bc:	d1d6      	bne.n	801026c <_vfiprintf_r+0x1bc>
 80102be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80102c0:	07d9      	lsls	r1, r3, #31
 80102c2:	d405      	bmi.n	80102d0 <_vfiprintf_r+0x220>
 80102c4:	89ab      	ldrh	r3, [r5, #12]
 80102c6:	059a      	lsls	r2, r3, #22
 80102c8:	d402      	bmi.n	80102d0 <_vfiprintf_r+0x220>
 80102ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80102cc:	f000 faa1 	bl	8010812 <__retarget_lock_release_recursive>
 80102d0:	89ab      	ldrh	r3, [r5, #12]
 80102d2:	065b      	lsls	r3, r3, #25
 80102d4:	f53f af12 	bmi.w	80100fc <_vfiprintf_r+0x4c>
 80102d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80102da:	e711      	b.n	8010100 <_vfiprintf_r+0x50>
 80102dc:	ab03      	add	r3, sp, #12
 80102de:	9300      	str	r3, [sp, #0]
 80102e0:	462a      	mov	r2, r5
 80102e2:	4b09      	ldr	r3, [pc, #36]	; (8010308 <_vfiprintf_r+0x258>)
 80102e4:	a904      	add	r1, sp, #16
 80102e6:	4630      	mov	r0, r6
 80102e8:	f7fc fac4 	bl	800c874 <_printf_i>
 80102ec:	e7e4      	b.n	80102b8 <_vfiprintf_r+0x208>
 80102ee:	bf00      	nop
 80102f0:	08012ac4 	.word	0x08012ac4
 80102f4:	08012ae4 	.word	0x08012ae4
 80102f8:	08012aa4 	.word	0x08012aa4
 80102fc:	08012a54 	.word	0x08012a54
 8010300:	08012a5e 	.word	0x08012a5e
 8010304:	0800c32d 	.word	0x0800c32d
 8010308:	0801008d 	.word	0x0801008d
 801030c:	08012a5a 	.word	0x08012a5a

08010310 <__swbuf_r>:
 8010310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010312:	460e      	mov	r6, r1
 8010314:	4614      	mov	r4, r2
 8010316:	4605      	mov	r5, r0
 8010318:	b118      	cbz	r0, 8010322 <__swbuf_r+0x12>
 801031a:	6983      	ldr	r3, [r0, #24]
 801031c:	b90b      	cbnz	r3, 8010322 <__swbuf_r+0x12>
 801031e:	f000 f9d9 	bl	80106d4 <__sinit>
 8010322:	4b21      	ldr	r3, [pc, #132]	; (80103a8 <__swbuf_r+0x98>)
 8010324:	429c      	cmp	r4, r3
 8010326:	d12b      	bne.n	8010380 <__swbuf_r+0x70>
 8010328:	686c      	ldr	r4, [r5, #4]
 801032a:	69a3      	ldr	r3, [r4, #24]
 801032c:	60a3      	str	r3, [r4, #8]
 801032e:	89a3      	ldrh	r3, [r4, #12]
 8010330:	071a      	lsls	r2, r3, #28
 8010332:	d52f      	bpl.n	8010394 <__swbuf_r+0x84>
 8010334:	6923      	ldr	r3, [r4, #16]
 8010336:	b36b      	cbz	r3, 8010394 <__swbuf_r+0x84>
 8010338:	6923      	ldr	r3, [r4, #16]
 801033a:	6820      	ldr	r0, [r4, #0]
 801033c:	1ac0      	subs	r0, r0, r3
 801033e:	6963      	ldr	r3, [r4, #20]
 8010340:	b2f6      	uxtb	r6, r6
 8010342:	4283      	cmp	r3, r0
 8010344:	4637      	mov	r7, r6
 8010346:	dc04      	bgt.n	8010352 <__swbuf_r+0x42>
 8010348:	4621      	mov	r1, r4
 801034a:	4628      	mov	r0, r5
 801034c:	f000 f92e 	bl	80105ac <_fflush_r>
 8010350:	bb30      	cbnz	r0, 80103a0 <__swbuf_r+0x90>
 8010352:	68a3      	ldr	r3, [r4, #8]
 8010354:	3b01      	subs	r3, #1
 8010356:	60a3      	str	r3, [r4, #8]
 8010358:	6823      	ldr	r3, [r4, #0]
 801035a:	1c5a      	adds	r2, r3, #1
 801035c:	6022      	str	r2, [r4, #0]
 801035e:	701e      	strb	r6, [r3, #0]
 8010360:	6963      	ldr	r3, [r4, #20]
 8010362:	3001      	adds	r0, #1
 8010364:	4283      	cmp	r3, r0
 8010366:	d004      	beq.n	8010372 <__swbuf_r+0x62>
 8010368:	89a3      	ldrh	r3, [r4, #12]
 801036a:	07db      	lsls	r3, r3, #31
 801036c:	d506      	bpl.n	801037c <__swbuf_r+0x6c>
 801036e:	2e0a      	cmp	r6, #10
 8010370:	d104      	bne.n	801037c <__swbuf_r+0x6c>
 8010372:	4621      	mov	r1, r4
 8010374:	4628      	mov	r0, r5
 8010376:	f000 f919 	bl	80105ac <_fflush_r>
 801037a:	b988      	cbnz	r0, 80103a0 <__swbuf_r+0x90>
 801037c:	4638      	mov	r0, r7
 801037e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010380:	4b0a      	ldr	r3, [pc, #40]	; (80103ac <__swbuf_r+0x9c>)
 8010382:	429c      	cmp	r4, r3
 8010384:	d101      	bne.n	801038a <__swbuf_r+0x7a>
 8010386:	68ac      	ldr	r4, [r5, #8]
 8010388:	e7cf      	b.n	801032a <__swbuf_r+0x1a>
 801038a:	4b09      	ldr	r3, [pc, #36]	; (80103b0 <__swbuf_r+0xa0>)
 801038c:	429c      	cmp	r4, r3
 801038e:	bf08      	it	eq
 8010390:	68ec      	ldreq	r4, [r5, #12]
 8010392:	e7ca      	b.n	801032a <__swbuf_r+0x1a>
 8010394:	4621      	mov	r1, r4
 8010396:	4628      	mov	r0, r5
 8010398:	f000 f80c 	bl	80103b4 <__swsetup_r>
 801039c:	2800      	cmp	r0, #0
 801039e:	d0cb      	beq.n	8010338 <__swbuf_r+0x28>
 80103a0:	f04f 37ff 	mov.w	r7, #4294967295
 80103a4:	e7ea      	b.n	801037c <__swbuf_r+0x6c>
 80103a6:	bf00      	nop
 80103a8:	08012ac4 	.word	0x08012ac4
 80103ac:	08012ae4 	.word	0x08012ae4
 80103b0:	08012aa4 	.word	0x08012aa4

080103b4 <__swsetup_r>:
 80103b4:	4b32      	ldr	r3, [pc, #200]	; (8010480 <__swsetup_r+0xcc>)
 80103b6:	b570      	push	{r4, r5, r6, lr}
 80103b8:	681d      	ldr	r5, [r3, #0]
 80103ba:	4606      	mov	r6, r0
 80103bc:	460c      	mov	r4, r1
 80103be:	b125      	cbz	r5, 80103ca <__swsetup_r+0x16>
 80103c0:	69ab      	ldr	r3, [r5, #24]
 80103c2:	b913      	cbnz	r3, 80103ca <__swsetup_r+0x16>
 80103c4:	4628      	mov	r0, r5
 80103c6:	f000 f985 	bl	80106d4 <__sinit>
 80103ca:	4b2e      	ldr	r3, [pc, #184]	; (8010484 <__swsetup_r+0xd0>)
 80103cc:	429c      	cmp	r4, r3
 80103ce:	d10f      	bne.n	80103f0 <__swsetup_r+0x3c>
 80103d0:	686c      	ldr	r4, [r5, #4]
 80103d2:	89a3      	ldrh	r3, [r4, #12]
 80103d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80103d8:	0719      	lsls	r1, r3, #28
 80103da:	d42c      	bmi.n	8010436 <__swsetup_r+0x82>
 80103dc:	06dd      	lsls	r5, r3, #27
 80103de:	d411      	bmi.n	8010404 <__swsetup_r+0x50>
 80103e0:	2309      	movs	r3, #9
 80103e2:	6033      	str	r3, [r6, #0]
 80103e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80103e8:	81a3      	strh	r3, [r4, #12]
 80103ea:	f04f 30ff 	mov.w	r0, #4294967295
 80103ee:	e03e      	b.n	801046e <__swsetup_r+0xba>
 80103f0:	4b25      	ldr	r3, [pc, #148]	; (8010488 <__swsetup_r+0xd4>)
 80103f2:	429c      	cmp	r4, r3
 80103f4:	d101      	bne.n	80103fa <__swsetup_r+0x46>
 80103f6:	68ac      	ldr	r4, [r5, #8]
 80103f8:	e7eb      	b.n	80103d2 <__swsetup_r+0x1e>
 80103fa:	4b24      	ldr	r3, [pc, #144]	; (801048c <__swsetup_r+0xd8>)
 80103fc:	429c      	cmp	r4, r3
 80103fe:	bf08      	it	eq
 8010400:	68ec      	ldreq	r4, [r5, #12]
 8010402:	e7e6      	b.n	80103d2 <__swsetup_r+0x1e>
 8010404:	0758      	lsls	r0, r3, #29
 8010406:	d512      	bpl.n	801042e <__swsetup_r+0x7a>
 8010408:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801040a:	b141      	cbz	r1, 801041e <__swsetup_r+0x6a>
 801040c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010410:	4299      	cmp	r1, r3
 8010412:	d002      	beq.n	801041a <__swsetup_r+0x66>
 8010414:	4630      	mov	r0, r6
 8010416:	f7ff fb25 	bl	800fa64 <_free_r>
 801041a:	2300      	movs	r3, #0
 801041c:	6363      	str	r3, [r4, #52]	; 0x34
 801041e:	89a3      	ldrh	r3, [r4, #12]
 8010420:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010424:	81a3      	strh	r3, [r4, #12]
 8010426:	2300      	movs	r3, #0
 8010428:	6063      	str	r3, [r4, #4]
 801042a:	6923      	ldr	r3, [r4, #16]
 801042c:	6023      	str	r3, [r4, #0]
 801042e:	89a3      	ldrh	r3, [r4, #12]
 8010430:	f043 0308 	orr.w	r3, r3, #8
 8010434:	81a3      	strh	r3, [r4, #12]
 8010436:	6923      	ldr	r3, [r4, #16]
 8010438:	b94b      	cbnz	r3, 801044e <__swsetup_r+0x9a>
 801043a:	89a3      	ldrh	r3, [r4, #12]
 801043c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010444:	d003      	beq.n	801044e <__swsetup_r+0x9a>
 8010446:	4621      	mov	r1, r4
 8010448:	4630      	mov	r0, r6
 801044a:	f000 fa09 	bl	8010860 <__smakebuf_r>
 801044e:	89a0      	ldrh	r0, [r4, #12]
 8010450:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010454:	f010 0301 	ands.w	r3, r0, #1
 8010458:	d00a      	beq.n	8010470 <__swsetup_r+0xbc>
 801045a:	2300      	movs	r3, #0
 801045c:	60a3      	str	r3, [r4, #8]
 801045e:	6963      	ldr	r3, [r4, #20]
 8010460:	425b      	negs	r3, r3
 8010462:	61a3      	str	r3, [r4, #24]
 8010464:	6923      	ldr	r3, [r4, #16]
 8010466:	b943      	cbnz	r3, 801047a <__swsetup_r+0xc6>
 8010468:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801046c:	d1ba      	bne.n	80103e4 <__swsetup_r+0x30>
 801046e:	bd70      	pop	{r4, r5, r6, pc}
 8010470:	0781      	lsls	r1, r0, #30
 8010472:	bf58      	it	pl
 8010474:	6963      	ldrpl	r3, [r4, #20]
 8010476:	60a3      	str	r3, [r4, #8]
 8010478:	e7f4      	b.n	8010464 <__swsetup_r+0xb0>
 801047a:	2000      	movs	r0, #0
 801047c:	e7f7      	b.n	801046e <__swsetup_r+0xba>
 801047e:	bf00      	nop
 8010480:	20000178 	.word	0x20000178
 8010484:	08012ac4 	.word	0x08012ac4
 8010488:	08012ae4 	.word	0x08012ae4
 801048c:	08012aa4 	.word	0x08012aa4

08010490 <abort>:
 8010490:	b508      	push	{r3, lr}
 8010492:	2006      	movs	r0, #6
 8010494:	f000 fa54 	bl	8010940 <raise>
 8010498:	2001      	movs	r0, #1
 801049a:	f7f1 f86f 	bl	800157c <_exit>
	...

080104a0 <__sflush_r>:
 80104a0:	898a      	ldrh	r2, [r1, #12]
 80104a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104a6:	4605      	mov	r5, r0
 80104a8:	0710      	lsls	r0, r2, #28
 80104aa:	460c      	mov	r4, r1
 80104ac:	d458      	bmi.n	8010560 <__sflush_r+0xc0>
 80104ae:	684b      	ldr	r3, [r1, #4]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	dc05      	bgt.n	80104c0 <__sflush_r+0x20>
 80104b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	dc02      	bgt.n	80104c0 <__sflush_r+0x20>
 80104ba:	2000      	movs	r0, #0
 80104bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80104c2:	2e00      	cmp	r6, #0
 80104c4:	d0f9      	beq.n	80104ba <__sflush_r+0x1a>
 80104c6:	2300      	movs	r3, #0
 80104c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80104cc:	682f      	ldr	r7, [r5, #0]
 80104ce:	602b      	str	r3, [r5, #0]
 80104d0:	d032      	beq.n	8010538 <__sflush_r+0x98>
 80104d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80104d4:	89a3      	ldrh	r3, [r4, #12]
 80104d6:	075a      	lsls	r2, r3, #29
 80104d8:	d505      	bpl.n	80104e6 <__sflush_r+0x46>
 80104da:	6863      	ldr	r3, [r4, #4]
 80104dc:	1ac0      	subs	r0, r0, r3
 80104de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80104e0:	b10b      	cbz	r3, 80104e6 <__sflush_r+0x46>
 80104e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80104e4:	1ac0      	subs	r0, r0, r3
 80104e6:	2300      	movs	r3, #0
 80104e8:	4602      	mov	r2, r0
 80104ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80104ec:	6a21      	ldr	r1, [r4, #32]
 80104ee:	4628      	mov	r0, r5
 80104f0:	47b0      	blx	r6
 80104f2:	1c43      	adds	r3, r0, #1
 80104f4:	89a3      	ldrh	r3, [r4, #12]
 80104f6:	d106      	bne.n	8010506 <__sflush_r+0x66>
 80104f8:	6829      	ldr	r1, [r5, #0]
 80104fa:	291d      	cmp	r1, #29
 80104fc:	d82c      	bhi.n	8010558 <__sflush_r+0xb8>
 80104fe:	4a2a      	ldr	r2, [pc, #168]	; (80105a8 <__sflush_r+0x108>)
 8010500:	40ca      	lsrs	r2, r1
 8010502:	07d6      	lsls	r6, r2, #31
 8010504:	d528      	bpl.n	8010558 <__sflush_r+0xb8>
 8010506:	2200      	movs	r2, #0
 8010508:	6062      	str	r2, [r4, #4]
 801050a:	04d9      	lsls	r1, r3, #19
 801050c:	6922      	ldr	r2, [r4, #16]
 801050e:	6022      	str	r2, [r4, #0]
 8010510:	d504      	bpl.n	801051c <__sflush_r+0x7c>
 8010512:	1c42      	adds	r2, r0, #1
 8010514:	d101      	bne.n	801051a <__sflush_r+0x7a>
 8010516:	682b      	ldr	r3, [r5, #0]
 8010518:	b903      	cbnz	r3, 801051c <__sflush_r+0x7c>
 801051a:	6560      	str	r0, [r4, #84]	; 0x54
 801051c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801051e:	602f      	str	r7, [r5, #0]
 8010520:	2900      	cmp	r1, #0
 8010522:	d0ca      	beq.n	80104ba <__sflush_r+0x1a>
 8010524:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010528:	4299      	cmp	r1, r3
 801052a:	d002      	beq.n	8010532 <__sflush_r+0x92>
 801052c:	4628      	mov	r0, r5
 801052e:	f7ff fa99 	bl	800fa64 <_free_r>
 8010532:	2000      	movs	r0, #0
 8010534:	6360      	str	r0, [r4, #52]	; 0x34
 8010536:	e7c1      	b.n	80104bc <__sflush_r+0x1c>
 8010538:	6a21      	ldr	r1, [r4, #32]
 801053a:	2301      	movs	r3, #1
 801053c:	4628      	mov	r0, r5
 801053e:	47b0      	blx	r6
 8010540:	1c41      	adds	r1, r0, #1
 8010542:	d1c7      	bne.n	80104d4 <__sflush_r+0x34>
 8010544:	682b      	ldr	r3, [r5, #0]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d0c4      	beq.n	80104d4 <__sflush_r+0x34>
 801054a:	2b1d      	cmp	r3, #29
 801054c:	d001      	beq.n	8010552 <__sflush_r+0xb2>
 801054e:	2b16      	cmp	r3, #22
 8010550:	d101      	bne.n	8010556 <__sflush_r+0xb6>
 8010552:	602f      	str	r7, [r5, #0]
 8010554:	e7b1      	b.n	80104ba <__sflush_r+0x1a>
 8010556:	89a3      	ldrh	r3, [r4, #12]
 8010558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801055c:	81a3      	strh	r3, [r4, #12]
 801055e:	e7ad      	b.n	80104bc <__sflush_r+0x1c>
 8010560:	690f      	ldr	r7, [r1, #16]
 8010562:	2f00      	cmp	r7, #0
 8010564:	d0a9      	beq.n	80104ba <__sflush_r+0x1a>
 8010566:	0793      	lsls	r3, r2, #30
 8010568:	680e      	ldr	r6, [r1, #0]
 801056a:	bf08      	it	eq
 801056c:	694b      	ldreq	r3, [r1, #20]
 801056e:	600f      	str	r7, [r1, #0]
 8010570:	bf18      	it	ne
 8010572:	2300      	movne	r3, #0
 8010574:	eba6 0807 	sub.w	r8, r6, r7
 8010578:	608b      	str	r3, [r1, #8]
 801057a:	f1b8 0f00 	cmp.w	r8, #0
 801057e:	dd9c      	ble.n	80104ba <__sflush_r+0x1a>
 8010580:	6a21      	ldr	r1, [r4, #32]
 8010582:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010584:	4643      	mov	r3, r8
 8010586:	463a      	mov	r2, r7
 8010588:	4628      	mov	r0, r5
 801058a:	47b0      	blx	r6
 801058c:	2800      	cmp	r0, #0
 801058e:	dc06      	bgt.n	801059e <__sflush_r+0xfe>
 8010590:	89a3      	ldrh	r3, [r4, #12]
 8010592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010596:	81a3      	strh	r3, [r4, #12]
 8010598:	f04f 30ff 	mov.w	r0, #4294967295
 801059c:	e78e      	b.n	80104bc <__sflush_r+0x1c>
 801059e:	4407      	add	r7, r0
 80105a0:	eba8 0800 	sub.w	r8, r8, r0
 80105a4:	e7e9      	b.n	801057a <__sflush_r+0xda>
 80105a6:	bf00      	nop
 80105a8:	20400001 	.word	0x20400001

080105ac <_fflush_r>:
 80105ac:	b538      	push	{r3, r4, r5, lr}
 80105ae:	690b      	ldr	r3, [r1, #16]
 80105b0:	4605      	mov	r5, r0
 80105b2:	460c      	mov	r4, r1
 80105b4:	b913      	cbnz	r3, 80105bc <_fflush_r+0x10>
 80105b6:	2500      	movs	r5, #0
 80105b8:	4628      	mov	r0, r5
 80105ba:	bd38      	pop	{r3, r4, r5, pc}
 80105bc:	b118      	cbz	r0, 80105c6 <_fflush_r+0x1a>
 80105be:	6983      	ldr	r3, [r0, #24]
 80105c0:	b90b      	cbnz	r3, 80105c6 <_fflush_r+0x1a>
 80105c2:	f000 f887 	bl	80106d4 <__sinit>
 80105c6:	4b14      	ldr	r3, [pc, #80]	; (8010618 <_fflush_r+0x6c>)
 80105c8:	429c      	cmp	r4, r3
 80105ca:	d11b      	bne.n	8010604 <_fflush_r+0x58>
 80105cc:	686c      	ldr	r4, [r5, #4]
 80105ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d0ef      	beq.n	80105b6 <_fflush_r+0xa>
 80105d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80105d8:	07d0      	lsls	r0, r2, #31
 80105da:	d404      	bmi.n	80105e6 <_fflush_r+0x3a>
 80105dc:	0599      	lsls	r1, r3, #22
 80105de:	d402      	bmi.n	80105e6 <_fflush_r+0x3a>
 80105e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80105e2:	f000 f915 	bl	8010810 <__retarget_lock_acquire_recursive>
 80105e6:	4628      	mov	r0, r5
 80105e8:	4621      	mov	r1, r4
 80105ea:	f7ff ff59 	bl	80104a0 <__sflush_r>
 80105ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80105f0:	07da      	lsls	r2, r3, #31
 80105f2:	4605      	mov	r5, r0
 80105f4:	d4e0      	bmi.n	80105b8 <_fflush_r+0xc>
 80105f6:	89a3      	ldrh	r3, [r4, #12]
 80105f8:	059b      	lsls	r3, r3, #22
 80105fa:	d4dd      	bmi.n	80105b8 <_fflush_r+0xc>
 80105fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80105fe:	f000 f908 	bl	8010812 <__retarget_lock_release_recursive>
 8010602:	e7d9      	b.n	80105b8 <_fflush_r+0xc>
 8010604:	4b05      	ldr	r3, [pc, #20]	; (801061c <_fflush_r+0x70>)
 8010606:	429c      	cmp	r4, r3
 8010608:	d101      	bne.n	801060e <_fflush_r+0x62>
 801060a:	68ac      	ldr	r4, [r5, #8]
 801060c:	e7df      	b.n	80105ce <_fflush_r+0x22>
 801060e:	4b04      	ldr	r3, [pc, #16]	; (8010620 <_fflush_r+0x74>)
 8010610:	429c      	cmp	r4, r3
 8010612:	bf08      	it	eq
 8010614:	68ec      	ldreq	r4, [r5, #12]
 8010616:	e7da      	b.n	80105ce <_fflush_r+0x22>
 8010618:	08012ac4 	.word	0x08012ac4
 801061c:	08012ae4 	.word	0x08012ae4
 8010620:	08012aa4 	.word	0x08012aa4

08010624 <std>:
 8010624:	2300      	movs	r3, #0
 8010626:	b510      	push	{r4, lr}
 8010628:	4604      	mov	r4, r0
 801062a:	e9c0 3300 	strd	r3, r3, [r0]
 801062e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010632:	6083      	str	r3, [r0, #8]
 8010634:	8181      	strh	r1, [r0, #12]
 8010636:	6643      	str	r3, [r0, #100]	; 0x64
 8010638:	81c2      	strh	r2, [r0, #14]
 801063a:	6183      	str	r3, [r0, #24]
 801063c:	4619      	mov	r1, r3
 801063e:	2208      	movs	r2, #8
 8010640:	305c      	adds	r0, #92	; 0x5c
 8010642:	f7fb fdcb 	bl	800c1dc <memset>
 8010646:	4b05      	ldr	r3, [pc, #20]	; (801065c <std+0x38>)
 8010648:	6263      	str	r3, [r4, #36]	; 0x24
 801064a:	4b05      	ldr	r3, [pc, #20]	; (8010660 <std+0x3c>)
 801064c:	62a3      	str	r3, [r4, #40]	; 0x28
 801064e:	4b05      	ldr	r3, [pc, #20]	; (8010664 <std+0x40>)
 8010650:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010652:	4b05      	ldr	r3, [pc, #20]	; (8010668 <std+0x44>)
 8010654:	6224      	str	r4, [r4, #32]
 8010656:	6323      	str	r3, [r4, #48]	; 0x30
 8010658:	bd10      	pop	{r4, pc}
 801065a:	bf00      	nop
 801065c:	08010979 	.word	0x08010979
 8010660:	0801099b 	.word	0x0801099b
 8010664:	080109d3 	.word	0x080109d3
 8010668:	080109f7 	.word	0x080109f7

0801066c <_cleanup_r>:
 801066c:	4901      	ldr	r1, [pc, #4]	; (8010674 <_cleanup_r+0x8>)
 801066e:	f000 b8af 	b.w	80107d0 <_fwalk_reent>
 8010672:	bf00      	nop
 8010674:	080105ad 	.word	0x080105ad

08010678 <__sfmoreglue>:
 8010678:	b570      	push	{r4, r5, r6, lr}
 801067a:	2268      	movs	r2, #104	; 0x68
 801067c:	1e4d      	subs	r5, r1, #1
 801067e:	4355      	muls	r5, r2
 8010680:	460e      	mov	r6, r1
 8010682:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010686:	f7ff fa59 	bl	800fb3c <_malloc_r>
 801068a:	4604      	mov	r4, r0
 801068c:	b140      	cbz	r0, 80106a0 <__sfmoreglue+0x28>
 801068e:	2100      	movs	r1, #0
 8010690:	e9c0 1600 	strd	r1, r6, [r0]
 8010694:	300c      	adds	r0, #12
 8010696:	60a0      	str	r0, [r4, #8]
 8010698:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801069c:	f7fb fd9e 	bl	800c1dc <memset>
 80106a0:	4620      	mov	r0, r4
 80106a2:	bd70      	pop	{r4, r5, r6, pc}

080106a4 <__sfp_lock_acquire>:
 80106a4:	4801      	ldr	r0, [pc, #4]	; (80106ac <__sfp_lock_acquire+0x8>)
 80106a6:	f000 b8b3 	b.w	8010810 <__retarget_lock_acquire_recursive>
 80106aa:	bf00      	nop
 80106ac:	20002089 	.word	0x20002089

080106b0 <__sfp_lock_release>:
 80106b0:	4801      	ldr	r0, [pc, #4]	; (80106b8 <__sfp_lock_release+0x8>)
 80106b2:	f000 b8ae 	b.w	8010812 <__retarget_lock_release_recursive>
 80106b6:	bf00      	nop
 80106b8:	20002089 	.word	0x20002089

080106bc <__sinit_lock_acquire>:
 80106bc:	4801      	ldr	r0, [pc, #4]	; (80106c4 <__sinit_lock_acquire+0x8>)
 80106be:	f000 b8a7 	b.w	8010810 <__retarget_lock_acquire_recursive>
 80106c2:	bf00      	nop
 80106c4:	2000208a 	.word	0x2000208a

080106c8 <__sinit_lock_release>:
 80106c8:	4801      	ldr	r0, [pc, #4]	; (80106d0 <__sinit_lock_release+0x8>)
 80106ca:	f000 b8a2 	b.w	8010812 <__retarget_lock_release_recursive>
 80106ce:	bf00      	nop
 80106d0:	2000208a 	.word	0x2000208a

080106d4 <__sinit>:
 80106d4:	b510      	push	{r4, lr}
 80106d6:	4604      	mov	r4, r0
 80106d8:	f7ff fff0 	bl	80106bc <__sinit_lock_acquire>
 80106dc:	69a3      	ldr	r3, [r4, #24]
 80106de:	b11b      	cbz	r3, 80106e8 <__sinit+0x14>
 80106e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106e4:	f7ff bff0 	b.w	80106c8 <__sinit_lock_release>
 80106e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80106ec:	6523      	str	r3, [r4, #80]	; 0x50
 80106ee:	4b13      	ldr	r3, [pc, #76]	; (801073c <__sinit+0x68>)
 80106f0:	4a13      	ldr	r2, [pc, #76]	; (8010740 <__sinit+0x6c>)
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80106f6:	42a3      	cmp	r3, r4
 80106f8:	bf04      	itt	eq
 80106fa:	2301      	moveq	r3, #1
 80106fc:	61a3      	streq	r3, [r4, #24]
 80106fe:	4620      	mov	r0, r4
 8010700:	f000 f820 	bl	8010744 <__sfp>
 8010704:	6060      	str	r0, [r4, #4]
 8010706:	4620      	mov	r0, r4
 8010708:	f000 f81c 	bl	8010744 <__sfp>
 801070c:	60a0      	str	r0, [r4, #8]
 801070e:	4620      	mov	r0, r4
 8010710:	f000 f818 	bl	8010744 <__sfp>
 8010714:	2200      	movs	r2, #0
 8010716:	60e0      	str	r0, [r4, #12]
 8010718:	2104      	movs	r1, #4
 801071a:	6860      	ldr	r0, [r4, #4]
 801071c:	f7ff ff82 	bl	8010624 <std>
 8010720:	68a0      	ldr	r0, [r4, #8]
 8010722:	2201      	movs	r2, #1
 8010724:	2109      	movs	r1, #9
 8010726:	f7ff ff7d 	bl	8010624 <std>
 801072a:	68e0      	ldr	r0, [r4, #12]
 801072c:	2202      	movs	r2, #2
 801072e:	2112      	movs	r1, #18
 8010730:	f7ff ff78 	bl	8010624 <std>
 8010734:	2301      	movs	r3, #1
 8010736:	61a3      	str	r3, [r4, #24]
 8010738:	e7d2      	b.n	80106e0 <__sinit+0xc>
 801073a:	bf00      	nop
 801073c:	08012660 	.word	0x08012660
 8010740:	0801066d 	.word	0x0801066d

08010744 <__sfp>:
 8010744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010746:	4607      	mov	r7, r0
 8010748:	f7ff ffac 	bl	80106a4 <__sfp_lock_acquire>
 801074c:	4b1e      	ldr	r3, [pc, #120]	; (80107c8 <__sfp+0x84>)
 801074e:	681e      	ldr	r6, [r3, #0]
 8010750:	69b3      	ldr	r3, [r6, #24]
 8010752:	b913      	cbnz	r3, 801075a <__sfp+0x16>
 8010754:	4630      	mov	r0, r6
 8010756:	f7ff ffbd 	bl	80106d4 <__sinit>
 801075a:	3648      	adds	r6, #72	; 0x48
 801075c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010760:	3b01      	subs	r3, #1
 8010762:	d503      	bpl.n	801076c <__sfp+0x28>
 8010764:	6833      	ldr	r3, [r6, #0]
 8010766:	b30b      	cbz	r3, 80107ac <__sfp+0x68>
 8010768:	6836      	ldr	r6, [r6, #0]
 801076a:	e7f7      	b.n	801075c <__sfp+0x18>
 801076c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010770:	b9d5      	cbnz	r5, 80107a8 <__sfp+0x64>
 8010772:	4b16      	ldr	r3, [pc, #88]	; (80107cc <__sfp+0x88>)
 8010774:	60e3      	str	r3, [r4, #12]
 8010776:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801077a:	6665      	str	r5, [r4, #100]	; 0x64
 801077c:	f000 f847 	bl	801080e <__retarget_lock_init_recursive>
 8010780:	f7ff ff96 	bl	80106b0 <__sfp_lock_release>
 8010784:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010788:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801078c:	6025      	str	r5, [r4, #0]
 801078e:	61a5      	str	r5, [r4, #24]
 8010790:	2208      	movs	r2, #8
 8010792:	4629      	mov	r1, r5
 8010794:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010798:	f7fb fd20 	bl	800c1dc <memset>
 801079c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80107a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80107a4:	4620      	mov	r0, r4
 80107a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107a8:	3468      	adds	r4, #104	; 0x68
 80107aa:	e7d9      	b.n	8010760 <__sfp+0x1c>
 80107ac:	2104      	movs	r1, #4
 80107ae:	4638      	mov	r0, r7
 80107b0:	f7ff ff62 	bl	8010678 <__sfmoreglue>
 80107b4:	4604      	mov	r4, r0
 80107b6:	6030      	str	r0, [r6, #0]
 80107b8:	2800      	cmp	r0, #0
 80107ba:	d1d5      	bne.n	8010768 <__sfp+0x24>
 80107bc:	f7ff ff78 	bl	80106b0 <__sfp_lock_release>
 80107c0:	230c      	movs	r3, #12
 80107c2:	603b      	str	r3, [r7, #0]
 80107c4:	e7ee      	b.n	80107a4 <__sfp+0x60>
 80107c6:	bf00      	nop
 80107c8:	08012660 	.word	0x08012660
 80107cc:	ffff0001 	.word	0xffff0001

080107d0 <_fwalk_reent>:
 80107d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80107d4:	4606      	mov	r6, r0
 80107d6:	4688      	mov	r8, r1
 80107d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80107dc:	2700      	movs	r7, #0
 80107de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80107e2:	f1b9 0901 	subs.w	r9, r9, #1
 80107e6:	d505      	bpl.n	80107f4 <_fwalk_reent+0x24>
 80107e8:	6824      	ldr	r4, [r4, #0]
 80107ea:	2c00      	cmp	r4, #0
 80107ec:	d1f7      	bne.n	80107de <_fwalk_reent+0xe>
 80107ee:	4638      	mov	r0, r7
 80107f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80107f4:	89ab      	ldrh	r3, [r5, #12]
 80107f6:	2b01      	cmp	r3, #1
 80107f8:	d907      	bls.n	801080a <_fwalk_reent+0x3a>
 80107fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80107fe:	3301      	adds	r3, #1
 8010800:	d003      	beq.n	801080a <_fwalk_reent+0x3a>
 8010802:	4629      	mov	r1, r5
 8010804:	4630      	mov	r0, r6
 8010806:	47c0      	blx	r8
 8010808:	4307      	orrs	r7, r0
 801080a:	3568      	adds	r5, #104	; 0x68
 801080c:	e7e9      	b.n	80107e2 <_fwalk_reent+0x12>

0801080e <__retarget_lock_init_recursive>:
 801080e:	4770      	bx	lr

08010810 <__retarget_lock_acquire_recursive>:
 8010810:	4770      	bx	lr

08010812 <__retarget_lock_release_recursive>:
 8010812:	4770      	bx	lr

08010814 <__swhatbuf_r>:
 8010814:	b570      	push	{r4, r5, r6, lr}
 8010816:	460e      	mov	r6, r1
 8010818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801081c:	2900      	cmp	r1, #0
 801081e:	b096      	sub	sp, #88	; 0x58
 8010820:	4614      	mov	r4, r2
 8010822:	461d      	mov	r5, r3
 8010824:	da08      	bge.n	8010838 <__swhatbuf_r+0x24>
 8010826:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801082a:	2200      	movs	r2, #0
 801082c:	602a      	str	r2, [r5, #0]
 801082e:	061a      	lsls	r2, r3, #24
 8010830:	d410      	bmi.n	8010854 <__swhatbuf_r+0x40>
 8010832:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010836:	e00e      	b.n	8010856 <__swhatbuf_r+0x42>
 8010838:	466a      	mov	r2, sp
 801083a:	f000 f903 	bl	8010a44 <_fstat_r>
 801083e:	2800      	cmp	r0, #0
 8010840:	dbf1      	blt.n	8010826 <__swhatbuf_r+0x12>
 8010842:	9a01      	ldr	r2, [sp, #4]
 8010844:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010848:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801084c:	425a      	negs	r2, r3
 801084e:	415a      	adcs	r2, r3
 8010850:	602a      	str	r2, [r5, #0]
 8010852:	e7ee      	b.n	8010832 <__swhatbuf_r+0x1e>
 8010854:	2340      	movs	r3, #64	; 0x40
 8010856:	2000      	movs	r0, #0
 8010858:	6023      	str	r3, [r4, #0]
 801085a:	b016      	add	sp, #88	; 0x58
 801085c:	bd70      	pop	{r4, r5, r6, pc}
	...

08010860 <__smakebuf_r>:
 8010860:	898b      	ldrh	r3, [r1, #12]
 8010862:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010864:	079d      	lsls	r5, r3, #30
 8010866:	4606      	mov	r6, r0
 8010868:	460c      	mov	r4, r1
 801086a:	d507      	bpl.n	801087c <__smakebuf_r+0x1c>
 801086c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010870:	6023      	str	r3, [r4, #0]
 8010872:	6123      	str	r3, [r4, #16]
 8010874:	2301      	movs	r3, #1
 8010876:	6163      	str	r3, [r4, #20]
 8010878:	b002      	add	sp, #8
 801087a:	bd70      	pop	{r4, r5, r6, pc}
 801087c:	ab01      	add	r3, sp, #4
 801087e:	466a      	mov	r2, sp
 8010880:	f7ff ffc8 	bl	8010814 <__swhatbuf_r>
 8010884:	9900      	ldr	r1, [sp, #0]
 8010886:	4605      	mov	r5, r0
 8010888:	4630      	mov	r0, r6
 801088a:	f7ff f957 	bl	800fb3c <_malloc_r>
 801088e:	b948      	cbnz	r0, 80108a4 <__smakebuf_r+0x44>
 8010890:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010894:	059a      	lsls	r2, r3, #22
 8010896:	d4ef      	bmi.n	8010878 <__smakebuf_r+0x18>
 8010898:	f023 0303 	bic.w	r3, r3, #3
 801089c:	f043 0302 	orr.w	r3, r3, #2
 80108a0:	81a3      	strh	r3, [r4, #12]
 80108a2:	e7e3      	b.n	801086c <__smakebuf_r+0xc>
 80108a4:	4b0d      	ldr	r3, [pc, #52]	; (80108dc <__smakebuf_r+0x7c>)
 80108a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80108a8:	89a3      	ldrh	r3, [r4, #12]
 80108aa:	6020      	str	r0, [r4, #0]
 80108ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80108b0:	81a3      	strh	r3, [r4, #12]
 80108b2:	9b00      	ldr	r3, [sp, #0]
 80108b4:	6163      	str	r3, [r4, #20]
 80108b6:	9b01      	ldr	r3, [sp, #4]
 80108b8:	6120      	str	r0, [r4, #16]
 80108ba:	b15b      	cbz	r3, 80108d4 <__smakebuf_r+0x74>
 80108bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80108c0:	4630      	mov	r0, r6
 80108c2:	f000 f8d1 	bl	8010a68 <_isatty_r>
 80108c6:	b128      	cbz	r0, 80108d4 <__smakebuf_r+0x74>
 80108c8:	89a3      	ldrh	r3, [r4, #12]
 80108ca:	f023 0303 	bic.w	r3, r3, #3
 80108ce:	f043 0301 	orr.w	r3, r3, #1
 80108d2:	81a3      	strh	r3, [r4, #12]
 80108d4:	89a0      	ldrh	r0, [r4, #12]
 80108d6:	4305      	orrs	r5, r0
 80108d8:	81a5      	strh	r5, [r4, #12]
 80108da:	e7cd      	b.n	8010878 <__smakebuf_r+0x18>
 80108dc:	0801066d 	.word	0x0801066d

080108e0 <_malloc_usable_size_r>:
 80108e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80108e4:	1f18      	subs	r0, r3, #4
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	bfbc      	itt	lt
 80108ea:	580b      	ldrlt	r3, [r1, r0]
 80108ec:	18c0      	addlt	r0, r0, r3
 80108ee:	4770      	bx	lr

080108f0 <_raise_r>:
 80108f0:	291f      	cmp	r1, #31
 80108f2:	b538      	push	{r3, r4, r5, lr}
 80108f4:	4604      	mov	r4, r0
 80108f6:	460d      	mov	r5, r1
 80108f8:	d904      	bls.n	8010904 <_raise_r+0x14>
 80108fa:	2316      	movs	r3, #22
 80108fc:	6003      	str	r3, [r0, #0]
 80108fe:	f04f 30ff 	mov.w	r0, #4294967295
 8010902:	bd38      	pop	{r3, r4, r5, pc}
 8010904:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010906:	b112      	cbz	r2, 801090e <_raise_r+0x1e>
 8010908:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801090c:	b94b      	cbnz	r3, 8010922 <_raise_r+0x32>
 801090e:	4620      	mov	r0, r4
 8010910:	f000 f830 	bl	8010974 <_getpid_r>
 8010914:	462a      	mov	r2, r5
 8010916:	4601      	mov	r1, r0
 8010918:	4620      	mov	r0, r4
 801091a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801091e:	f000 b817 	b.w	8010950 <_kill_r>
 8010922:	2b01      	cmp	r3, #1
 8010924:	d00a      	beq.n	801093c <_raise_r+0x4c>
 8010926:	1c59      	adds	r1, r3, #1
 8010928:	d103      	bne.n	8010932 <_raise_r+0x42>
 801092a:	2316      	movs	r3, #22
 801092c:	6003      	str	r3, [r0, #0]
 801092e:	2001      	movs	r0, #1
 8010930:	e7e7      	b.n	8010902 <_raise_r+0x12>
 8010932:	2400      	movs	r4, #0
 8010934:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010938:	4628      	mov	r0, r5
 801093a:	4798      	blx	r3
 801093c:	2000      	movs	r0, #0
 801093e:	e7e0      	b.n	8010902 <_raise_r+0x12>

08010940 <raise>:
 8010940:	4b02      	ldr	r3, [pc, #8]	; (801094c <raise+0xc>)
 8010942:	4601      	mov	r1, r0
 8010944:	6818      	ldr	r0, [r3, #0]
 8010946:	f7ff bfd3 	b.w	80108f0 <_raise_r>
 801094a:	bf00      	nop
 801094c:	20000178 	.word	0x20000178

08010950 <_kill_r>:
 8010950:	b538      	push	{r3, r4, r5, lr}
 8010952:	4d07      	ldr	r5, [pc, #28]	; (8010970 <_kill_r+0x20>)
 8010954:	2300      	movs	r3, #0
 8010956:	4604      	mov	r4, r0
 8010958:	4608      	mov	r0, r1
 801095a:	4611      	mov	r1, r2
 801095c:	602b      	str	r3, [r5, #0]
 801095e:	f7f0 fdfd 	bl	800155c <_kill>
 8010962:	1c43      	adds	r3, r0, #1
 8010964:	d102      	bne.n	801096c <_kill_r+0x1c>
 8010966:	682b      	ldr	r3, [r5, #0]
 8010968:	b103      	cbz	r3, 801096c <_kill_r+0x1c>
 801096a:	6023      	str	r3, [r4, #0]
 801096c:	bd38      	pop	{r3, r4, r5, pc}
 801096e:	bf00      	nop
 8010970:	20002084 	.word	0x20002084

08010974 <_getpid_r>:
 8010974:	f7f0 bdea 	b.w	800154c <_getpid>

08010978 <__sread>:
 8010978:	b510      	push	{r4, lr}
 801097a:	460c      	mov	r4, r1
 801097c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010980:	f000 f894 	bl	8010aac <_read_r>
 8010984:	2800      	cmp	r0, #0
 8010986:	bfab      	itete	ge
 8010988:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801098a:	89a3      	ldrhlt	r3, [r4, #12]
 801098c:	181b      	addge	r3, r3, r0
 801098e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010992:	bfac      	ite	ge
 8010994:	6563      	strge	r3, [r4, #84]	; 0x54
 8010996:	81a3      	strhlt	r3, [r4, #12]
 8010998:	bd10      	pop	{r4, pc}

0801099a <__swrite>:
 801099a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801099e:	461f      	mov	r7, r3
 80109a0:	898b      	ldrh	r3, [r1, #12]
 80109a2:	05db      	lsls	r3, r3, #23
 80109a4:	4605      	mov	r5, r0
 80109a6:	460c      	mov	r4, r1
 80109a8:	4616      	mov	r6, r2
 80109aa:	d505      	bpl.n	80109b8 <__swrite+0x1e>
 80109ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109b0:	2302      	movs	r3, #2
 80109b2:	2200      	movs	r2, #0
 80109b4:	f000 f868 	bl	8010a88 <_lseek_r>
 80109b8:	89a3      	ldrh	r3, [r4, #12]
 80109ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80109be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80109c2:	81a3      	strh	r3, [r4, #12]
 80109c4:	4632      	mov	r2, r6
 80109c6:	463b      	mov	r3, r7
 80109c8:	4628      	mov	r0, r5
 80109ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80109ce:	f000 b817 	b.w	8010a00 <_write_r>

080109d2 <__sseek>:
 80109d2:	b510      	push	{r4, lr}
 80109d4:	460c      	mov	r4, r1
 80109d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109da:	f000 f855 	bl	8010a88 <_lseek_r>
 80109de:	1c43      	adds	r3, r0, #1
 80109e0:	89a3      	ldrh	r3, [r4, #12]
 80109e2:	bf15      	itete	ne
 80109e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80109e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80109ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80109ee:	81a3      	strheq	r3, [r4, #12]
 80109f0:	bf18      	it	ne
 80109f2:	81a3      	strhne	r3, [r4, #12]
 80109f4:	bd10      	pop	{r4, pc}

080109f6 <__sclose>:
 80109f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109fa:	f000 b813 	b.w	8010a24 <_close_r>
	...

08010a00 <_write_r>:
 8010a00:	b538      	push	{r3, r4, r5, lr}
 8010a02:	4d07      	ldr	r5, [pc, #28]	; (8010a20 <_write_r+0x20>)
 8010a04:	4604      	mov	r4, r0
 8010a06:	4608      	mov	r0, r1
 8010a08:	4611      	mov	r1, r2
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	602a      	str	r2, [r5, #0]
 8010a0e:	461a      	mov	r2, r3
 8010a10:	f7f0 fddb 	bl	80015ca <_write>
 8010a14:	1c43      	adds	r3, r0, #1
 8010a16:	d102      	bne.n	8010a1e <_write_r+0x1e>
 8010a18:	682b      	ldr	r3, [r5, #0]
 8010a1a:	b103      	cbz	r3, 8010a1e <_write_r+0x1e>
 8010a1c:	6023      	str	r3, [r4, #0]
 8010a1e:	bd38      	pop	{r3, r4, r5, pc}
 8010a20:	20002084 	.word	0x20002084

08010a24 <_close_r>:
 8010a24:	b538      	push	{r3, r4, r5, lr}
 8010a26:	4d06      	ldr	r5, [pc, #24]	; (8010a40 <_close_r+0x1c>)
 8010a28:	2300      	movs	r3, #0
 8010a2a:	4604      	mov	r4, r0
 8010a2c:	4608      	mov	r0, r1
 8010a2e:	602b      	str	r3, [r5, #0]
 8010a30:	f7f0 fde7 	bl	8001602 <_close>
 8010a34:	1c43      	adds	r3, r0, #1
 8010a36:	d102      	bne.n	8010a3e <_close_r+0x1a>
 8010a38:	682b      	ldr	r3, [r5, #0]
 8010a3a:	b103      	cbz	r3, 8010a3e <_close_r+0x1a>
 8010a3c:	6023      	str	r3, [r4, #0]
 8010a3e:	bd38      	pop	{r3, r4, r5, pc}
 8010a40:	20002084 	.word	0x20002084

08010a44 <_fstat_r>:
 8010a44:	b538      	push	{r3, r4, r5, lr}
 8010a46:	4d07      	ldr	r5, [pc, #28]	; (8010a64 <_fstat_r+0x20>)
 8010a48:	2300      	movs	r3, #0
 8010a4a:	4604      	mov	r4, r0
 8010a4c:	4608      	mov	r0, r1
 8010a4e:	4611      	mov	r1, r2
 8010a50:	602b      	str	r3, [r5, #0]
 8010a52:	f7f0 fde2 	bl	800161a <_fstat>
 8010a56:	1c43      	adds	r3, r0, #1
 8010a58:	d102      	bne.n	8010a60 <_fstat_r+0x1c>
 8010a5a:	682b      	ldr	r3, [r5, #0]
 8010a5c:	b103      	cbz	r3, 8010a60 <_fstat_r+0x1c>
 8010a5e:	6023      	str	r3, [r4, #0]
 8010a60:	bd38      	pop	{r3, r4, r5, pc}
 8010a62:	bf00      	nop
 8010a64:	20002084 	.word	0x20002084

08010a68 <_isatty_r>:
 8010a68:	b538      	push	{r3, r4, r5, lr}
 8010a6a:	4d06      	ldr	r5, [pc, #24]	; (8010a84 <_isatty_r+0x1c>)
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	4604      	mov	r4, r0
 8010a70:	4608      	mov	r0, r1
 8010a72:	602b      	str	r3, [r5, #0]
 8010a74:	f7f0 fde1 	bl	800163a <_isatty>
 8010a78:	1c43      	adds	r3, r0, #1
 8010a7a:	d102      	bne.n	8010a82 <_isatty_r+0x1a>
 8010a7c:	682b      	ldr	r3, [r5, #0]
 8010a7e:	b103      	cbz	r3, 8010a82 <_isatty_r+0x1a>
 8010a80:	6023      	str	r3, [r4, #0]
 8010a82:	bd38      	pop	{r3, r4, r5, pc}
 8010a84:	20002084 	.word	0x20002084

08010a88 <_lseek_r>:
 8010a88:	b538      	push	{r3, r4, r5, lr}
 8010a8a:	4d07      	ldr	r5, [pc, #28]	; (8010aa8 <_lseek_r+0x20>)
 8010a8c:	4604      	mov	r4, r0
 8010a8e:	4608      	mov	r0, r1
 8010a90:	4611      	mov	r1, r2
 8010a92:	2200      	movs	r2, #0
 8010a94:	602a      	str	r2, [r5, #0]
 8010a96:	461a      	mov	r2, r3
 8010a98:	f7f0 fdda 	bl	8001650 <_lseek>
 8010a9c:	1c43      	adds	r3, r0, #1
 8010a9e:	d102      	bne.n	8010aa6 <_lseek_r+0x1e>
 8010aa0:	682b      	ldr	r3, [r5, #0]
 8010aa2:	b103      	cbz	r3, 8010aa6 <_lseek_r+0x1e>
 8010aa4:	6023      	str	r3, [r4, #0]
 8010aa6:	bd38      	pop	{r3, r4, r5, pc}
 8010aa8:	20002084 	.word	0x20002084

08010aac <_read_r>:
 8010aac:	b538      	push	{r3, r4, r5, lr}
 8010aae:	4d07      	ldr	r5, [pc, #28]	; (8010acc <_read_r+0x20>)
 8010ab0:	4604      	mov	r4, r0
 8010ab2:	4608      	mov	r0, r1
 8010ab4:	4611      	mov	r1, r2
 8010ab6:	2200      	movs	r2, #0
 8010ab8:	602a      	str	r2, [r5, #0]
 8010aba:	461a      	mov	r2, r3
 8010abc:	f7f0 fd68 	bl	8001590 <_read>
 8010ac0:	1c43      	adds	r3, r0, #1
 8010ac2:	d102      	bne.n	8010aca <_read_r+0x1e>
 8010ac4:	682b      	ldr	r3, [r5, #0]
 8010ac6:	b103      	cbz	r3, 8010aca <_read_r+0x1e>
 8010ac8:	6023      	str	r3, [r4, #0]
 8010aca:	bd38      	pop	{r3, r4, r5, pc}
 8010acc:	20002084 	.word	0x20002084

08010ad0 <_init>:
 8010ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ad2:	bf00      	nop
 8010ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ad6:	bc08      	pop	{r3}
 8010ad8:	469e      	mov	lr, r3
 8010ada:	4770      	bx	lr

08010adc <_fini>:
 8010adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ade:	bf00      	nop
 8010ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ae2:	bc08      	pop	{r3}
 8010ae4:	469e      	mov	lr, r3
 8010ae6:	4770      	bx	lr
